
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010554  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032d0  08010738  08010738  00020738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a08  08013a08  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013a08  08013a08  00023a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a10  08013a10  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a10  08013a10  00023a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a14  08013a14  00023a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08013a18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  200001e4  08013bfc  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  08013bfc  000308a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b874  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003745  00000000  00000000  0004ba88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0004f1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000501c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207fa  00000000  00000000  00051060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ddc  00000000  00000000  0007185a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd812  00000000  00000000  00087636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e40  00000000  00000000  00144e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801071c 	.word	0x0801071c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0801071c 	.word	0x0801071c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_ldivmod>:
 8000cf8:	b97b      	cbnz	r3, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfa:	b972      	cbnz	r2, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bfbe      	ittt	lt
 8000d00:	2000      	movlt	r0, #0
 8000d02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d06:	e006      	blt.n	8000d16 <__aeabi_ldivmod+0x1e>
 8000d08:	bf08      	it	eq
 8000d0a:	2800      	cmpeq	r0, #0
 8000d0c:	bf1c      	itt	ne
 8000d0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d12:	f04f 30ff 	movne.w	r0, #4294967295
 8000d16:	f000 b9ef 	b.w	80010f8 <__aeabi_idiv0>
 8000d1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d22:	2900      	cmp	r1, #0
 8000d24:	db09      	blt.n	8000d3a <__aeabi_ldivmod+0x42>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db1a      	blt.n	8000d60 <__aeabi_ldivmod+0x68>
 8000d2a:	f000 f883 	bl	8000e34 <__udivmoddi4>
 8000d2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d36:	b004      	add	sp, #16
 8000d38:	4770      	bx	lr
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db1b      	blt.n	8000d7c <__aeabi_ldivmod+0x84>
 8000d44:	f000 f876 	bl	8000e34 <__udivmoddi4>
 8000d48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d50:	b004      	add	sp, #16
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	4252      	negs	r2, r2
 8000d5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d5e:	4770      	bx	lr
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	f000 f865 	bl	8000e34 <__udivmoddi4>
 8000d6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d72:	b004      	add	sp, #16
 8000d74:	4240      	negs	r0, r0
 8000d76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7a:	4770      	bx	lr
 8000d7c:	4252      	negs	r2, r2
 8000d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d82:	f000 f857 	bl	8000e34 <__udivmoddi4>
 8000d86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d8e:	b004      	add	sp, #16
 8000d90:	4252      	negs	r2, r2
 8000d92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_uldivmod>:
 8000d98:	b953      	cbnz	r3, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9a:	b94a      	cbnz	r2, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	bf08      	it	eq
 8000da0:	2800      	cmpeq	r0, #0
 8000da2:	bf1c      	itt	ne
 8000da4:	f04f 31ff 	movne.w	r1, #4294967295
 8000da8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dac:	f000 b9a4 	b.w	80010f8 <__aeabi_idiv0>
 8000db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db8:	f000 f83c 	bl	8000e34 <__udivmoddi4>
 8000dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dc4:	b004      	add	sp, #16
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_d2lz>:
 8000dc8:	b538      	push	{r3, r4, r5, lr}
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2300      	movs	r3, #0
 8000dce:	4604      	mov	r4, r0
 8000dd0:	460d      	mov	r5, r1
 8000dd2:	f7ff febb 	bl	8000b4c <__aeabi_dcmplt>
 8000dd6:	b928      	cbnz	r0, 8000de4 <__aeabi_d2lz+0x1c>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	4629      	mov	r1, r5
 8000ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000de0:	f000 b80a 	b.w	8000df8 <__aeabi_d2ulz>
 8000de4:	4620      	mov	r0, r4
 8000de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dea:	f000 f805 	bl	8000df8 <__aeabi_d2ulz>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	bd38      	pop	{r3, r4, r5, pc}
 8000df6:	bf00      	nop

08000df8 <__aeabi_d2ulz>:
 8000df8:	b5d0      	push	{r4, r6, r7, lr}
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <__aeabi_d2ulz+0x34>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4606      	mov	r6, r0
 8000e00:	460f      	mov	r7, r1
 8000e02:	f7ff fc31 	bl	8000668 <__aeabi_dmul>
 8000e06:	f7ff ff07 	bl	8000c18 <__aeabi_d2uiz>
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	f7ff fbb2 	bl	8000574 <__aeabi_ui2d>
 8000e10:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <__aeabi_d2ulz+0x38>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	f7ff fc28 	bl	8000668 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	4639      	mov	r1, r7
 8000e20:	f7ff fa6a 	bl	80002f8 <__aeabi_dsub>
 8000e24:	f7ff fef8 	bl	8000c18 <__aeabi_d2uiz>
 8000e28:	4621      	mov	r1, r4
 8000e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e2c:	3df00000 	.word	0x3df00000
 8000e30:	41f00000 	.word	0x41f00000

08000e34 <__udivmoddi4>:
 8000e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	9d08      	ldr	r5, [sp, #32]
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	468c      	mov	ip, r1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8083 	bne.w	8000f4a <__udivmoddi4+0x116>
 8000e44:	428a      	cmp	r2, r1
 8000e46:	4617      	mov	r7, r2
 8000e48:	d947      	bls.n	8000eda <__udivmoddi4+0xa6>
 8000e4a:	fab2 f282 	clz	r2, r2
 8000e4e:	b142      	cbz	r2, 8000e62 <__udivmoddi4+0x2e>
 8000e50:	f1c2 0020 	rsb	r0, r2, #32
 8000e54:	fa24 f000 	lsr.w	r0, r4, r0
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	4097      	lsls	r7, r2
 8000e5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e60:	4094      	lsls	r4, r2
 8000e62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e66:	0c23      	lsrs	r3, r4, #16
 8000e68:	fbbc f6f8 	udiv	r6, ip, r8
 8000e6c:	fa1f fe87 	uxth.w	lr, r7
 8000e70:	fb08 c116 	mls	r1, r8, r6, ip
 8000e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e78:	fb06 f10e 	mul.w	r1, r6, lr
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d909      	bls.n	8000e94 <__udivmoddi4+0x60>
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e86:	f080 8119 	bcs.w	80010bc <__udivmoddi4+0x288>
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	f240 8116 	bls.w	80010bc <__udivmoddi4+0x288>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	443b      	add	r3, r7
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x8c>
 8000eac:	193c      	adds	r4, r7, r4
 8000eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb2:	f080 8105 	bcs.w	80010c0 <__udivmoddi4+0x28c>
 8000eb6:	45a6      	cmp	lr, r4
 8000eb8:	f240 8102 	bls.w	80010c0 <__udivmoddi4+0x28c>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	443c      	add	r4, r7
 8000ec0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	2600      	movs	r6, #0
 8000eca:	b11d      	cbz	r5, 8000ed4 <__udivmoddi4+0xa0>
 8000ecc:	40d4      	lsrs	r4, r2
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	b902      	cbnz	r2, 8000ede <__udivmoddi4+0xaa>
 8000edc:	deff      	udf	#255	; 0xff
 8000ede:	fab2 f282 	clz	r2, r2
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d150      	bne.n	8000f88 <__udivmoddi4+0x154>
 8000ee6:	1bcb      	subs	r3, r1, r7
 8000ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eec:	fa1f f887 	uxth.w	r8, r7
 8000ef0:	2601      	movs	r6, #1
 8000ef2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ef6:	0c21      	lsrs	r1, r4, #16
 8000ef8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb08 f30c 	mul.w	r3, r8, ip
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0xe4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0xe2>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	f200 80e9 	bhi.w	80010e8 <__udivmoddi4+0x2b4>
 8000f16:	4684      	mov	ip, r0
 8000f18:	1ac9      	subs	r1, r1, r3
 8000f1a:	b2a3      	uxth	r3, r4
 8000f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f28:	fb08 f800 	mul.w	r8, r8, r0
 8000f2c:	45a0      	cmp	r8, r4
 8000f2e:	d907      	bls.n	8000f40 <__udivmoddi4+0x10c>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f36:	d202      	bcs.n	8000f3e <__udivmoddi4+0x10a>
 8000f38:	45a0      	cmp	r8, r4
 8000f3a:	f200 80d9 	bhi.w	80010f0 <__udivmoddi4+0x2bc>
 8000f3e:	4618      	mov	r0, r3
 8000f40:	eba4 0408 	sub.w	r4, r4, r8
 8000f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f48:	e7bf      	b.n	8000eca <__udivmoddi4+0x96>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d909      	bls.n	8000f62 <__udivmoddi4+0x12e>
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	f000 80b1 	beq.w	80010b6 <__udivmoddi4+0x282>
 8000f54:	2600      	movs	r6, #0
 8000f56:	e9c5 0100 	strd	r0, r1, [r5]
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	4631      	mov	r1, r6
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	fab3 f683 	clz	r6, r3
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d14a      	bne.n	8001000 <__udivmoddi4+0x1cc>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d302      	bcc.n	8000f74 <__udivmoddi4+0x140>
 8000f6e:	4282      	cmp	r2, r0
 8000f70:	f200 80b8 	bhi.w	80010e4 <__udivmoddi4+0x2b0>
 8000f74:	1a84      	subs	r4, r0, r2
 8000f76:	eb61 0103 	sbc.w	r1, r1, r3
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	468c      	mov	ip, r1
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d0a8      	beq.n	8000ed4 <__udivmoddi4+0xa0>
 8000f82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f86:	e7a5      	b.n	8000ed4 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f90:	4097      	lsls	r7, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9a:	40d9      	lsrs	r1, r3
 8000f9c:	4330      	orrs	r0, r6
 8000f9e:	0c03      	lsrs	r3, r0, #16
 8000fa0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000fa4:	fa1f f887 	uxth.w	r8, r7
 8000fa8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb0:	fb06 f108 	mul.w	r1, r6, r8
 8000fb4:	4299      	cmp	r1, r3
 8000fb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000fba:	d909      	bls.n	8000fd0 <__udivmoddi4+0x19c>
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000fc2:	f080 808d 	bcs.w	80010e0 <__udivmoddi4+0x2ac>
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	f240 808a 	bls.w	80010e0 <__udivmoddi4+0x2ac>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	443b      	add	r3, r7
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	b281      	uxth	r1, r0
 8000fd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe0:	fb00 f308 	mul.w	r3, r0, r8
 8000fe4:	428b      	cmp	r3, r1
 8000fe6:	d907      	bls.n	8000ff8 <__udivmoddi4+0x1c4>
 8000fe8:	1879      	adds	r1, r7, r1
 8000fea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fee:	d273      	bcs.n	80010d8 <__udivmoddi4+0x2a4>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d971      	bls.n	80010d8 <__udivmoddi4+0x2a4>
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	4439      	add	r1, r7
 8000ff8:	1acb      	subs	r3, r1, r3
 8000ffa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ffe:	e778      	b.n	8000ef2 <__udivmoddi4+0xbe>
 8001000:	f1c6 0c20 	rsb	ip, r6, #32
 8001004:	fa03 f406 	lsl.w	r4, r3, r6
 8001008:	fa22 f30c 	lsr.w	r3, r2, ip
 800100c:	431c      	orrs	r4, r3
 800100e:	fa20 f70c 	lsr.w	r7, r0, ip
 8001012:	fa01 f306 	lsl.w	r3, r1, r6
 8001016:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800101a:	fa21 f10c 	lsr.w	r1, r1, ip
 800101e:	431f      	orrs	r7, r3
 8001020:	0c3b      	lsrs	r3, r7, #16
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fa1f f884 	uxth.w	r8, r4
 800102a:	fb0e 1119 	mls	r1, lr, r9, r1
 800102e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001032:	fb09 fa08 	mul.w	sl, r9, r8
 8001036:	458a      	cmp	sl, r1
 8001038:	fa02 f206 	lsl.w	r2, r2, r6
 800103c:	fa00 f306 	lsl.w	r3, r0, r6
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x220>
 8001042:	1861      	adds	r1, r4, r1
 8001044:	f109 30ff 	add.w	r0, r9, #4294967295
 8001048:	d248      	bcs.n	80010dc <__udivmoddi4+0x2a8>
 800104a:	458a      	cmp	sl, r1
 800104c:	d946      	bls.n	80010dc <__udivmoddi4+0x2a8>
 800104e:	f1a9 0902 	sub.w	r9, r9, #2
 8001052:	4421      	add	r1, r4
 8001054:	eba1 010a 	sub.w	r1, r1, sl
 8001058:	b2bf      	uxth	r7, r7
 800105a:	fbb1 f0fe 	udiv	r0, r1, lr
 800105e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001062:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001066:	fb00 f808 	mul.w	r8, r0, r8
 800106a:	45b8      	cmp	r8, r7
 800106c:	d907      	bls.n	800107e <__udivmoddi4+0x24a>
 800106e:	19e7      	adds	r7, r4, r7
 8001070:	f100 31ff 	add.w	r1, r0, #4294967295
 8001074:	d22e      	bcs.n	80010d4 <__udivmoddi4+0x2a0>
 8001076:	45b8      	cmp	r8, r7
 8001078:	d92c      	bls.n	80010d4 <__udivmoddi4+0x2a0>
 800107a:	3802      	subs	r0, #2
 800107c:	4427      	add	r7, r4
 800107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001082:	eba7 0708 	sub.w	r7, r7, r8
 8001086:	fba0 8902 	umull	r8, r9, r0, r2
 800108a:	454f      	cmp	r7, r9
 800108c:	46c6      	mov	lr, r8
 800108e:	4649      	mov	r1, r9
 8001090:	d31a      	bcc.n	80010c8 <__udivmoddi4+0x294>
 8001092:	d017      	beq.n	80010c4 <__udivmoddi4+0x290>
 8001094:	b15d      	cbz	r5, 80010ae <__udivmoddi4+0x27a>
 8001096:	ebb3 020e 	subs.w	r2, r3, lr
 800109a:	eb67 0701 	sbc.w	r7, r7, r1
 800109e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80010a2:	40f2      	lsrs	r2, r6
 80010a4:	ea4c 0202 	orr.w	r2, ip, r2
 80010a8:	40f7      	lsrs	r7, r6
 80010aa:	e9c5 2700 	strd	r2, r7, [r5]
 80010ae:	2600      	movs	r6, #0
 80010b0:	4631      	mov	r1, r6
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	462e      	mov	r6, r5
 80010b8:	4628      	mov	r0, r5
 80010ba:	e70b      	b.n	8000ed4 <__udivmoddi4+0xa0>
 80010bc:	4606      	mov	r6, r0
 80010be:	e6e9      	b.n	8000e94 <__udivmoddi4+0x60>
 80010c0:	4618      	mov	r0, r3
 80010c2:	e6fd      	b.n	8000ec0 <__udivmoddi4+0x8c>
 80010c4:	4543      	cmp	r3, r8
 80010c6:	d2e5      	bcs.n	8001094 <__udivmoddi4+0x260>
 80010c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80010cc:	eb69 0104 	sbc.w	r1, r9, r4
 80010d0:	3801      	subs	r0, #1
 80010d2:	e7df      	b.n	8001094 <__udivmoddi4+0x260>
 80010d4:	4608      	mov	r0, r1
 80010d6:	e7d2      	b.n	800107e <__udivmoddi4+0x24a>
 80010d8:	4660      	mov	r0, ip
 80010da:	e78d      	b.n	8000ff8 <__udivmoddi4+0x1c4>
 80010dc:	4681      	mov	r9, r0
 80010de:	e7b9      	b.n	8001054 <__udivmoddi4+0x220>
 80010e0:	4666      	mov	r6, ip
 80010e2:	e775      	b.n	8000fd0 <__udivmoddi4+0x19c>
 80010e4:	4630      	mov	r0, r6
 80010e6:	e74a      	b.n	8000f7e <__udivmoddi4+0x14a>
 80010e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010ec:	4439      	add	r1, r7
 80010ee:	e713      	b.n	8000f18 <__udivmoddi4+0xe4>
 80010f0:	3802      	subs	r0, #2
 80010f2:	443c      	add	r4, r7
 80010f4:	e724      	b.n	8000f40 <__udivmoddi4+0x10c>
 80010f6:	bf00      	nop

080010f8 <__aeabi_idiv0>:
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f844 	bl	8001194 <convert>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001114:	1415      	asrs	r5, r2, #16
 8001116:	0414      	lsls	r4, r2, #16
 8001118:	6838      	ldr	r0, [r7, #0]
 800111a:	f000 f83b 	bl	8001194 <convert>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001126:	4620      	mov	r0, r4
 8001128:	4629      	mov	r1, r5
 800112a:	f7ff fde5 	bl	8000cf8 <__aeabi_ldivmod>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4613      	mov	r3, r2
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}

0800113c <printFix>:

void printFix(int32_t i) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da05      	bge.n	8001156 <printFix+0x1a>
            printf("-");
 800114a:	202d      	movs	r0, #45	; 0x2d
 800114c:	f008 fcf8 	bl	8009b40 <putchar>
            i = ~i + 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	425b      	negs	r3, r3
 8001154:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1419      	asrs	r1, r3, #16
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b29b      	uxth	r3, r3
 800115e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	461a      	mov	r2, r3
 800116a:	4803      	ldr	r0, [pc, #12]	; (8001178 <printFix+0x3c>)
 800116c:	f008 fcd0 	bl	8009b10 <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08010738 	.word	0x08010738

0800117c <expand>:

int32_t expand(int32_t i) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bit-shifted by <<2, e.g. 18.14.
	 * Output: Number bitshifted two to the left, e.g. 16.16.
	 */

       return i << 2;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	009b      	lsls	r3, r3, #2
   }
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <convert>:

int32_t convert(int32_t i) {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	041b      	lsls	r3, r3, #16
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <inconvert>:

int32_t inconvert(int32_t i) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80011ba:	141b      	asrs	r3, r3, #16
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <RingBuffer_Write>:
#include <string.h>
#include <fixp.h>
#define DELIM ","
#define ASCII0 48

void RingBuffer_Write(RingBuffer *rb, uint8_t byte) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (rb->head + 1) % RING_BUF_SIZE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3301      	adds	r3, #1
 80011de:	425a      	negs	r2, r3
 80011e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011e4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80011e8:	bf58      	it	pl
 80011ea:	4253      	negpl	r3, r2
 80011ec:	81fb      	strh	r3, [r7, #14]
    if (next != rb->tail) {  // Avoid overwriting unread data
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	89fa      	ldrh	r2, [r7, #14]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d00c      	beq.n	8001216 <RingBuffer_Write+0x4e>
        rb->buffer[rb->head] = byte;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001202:	b29b      	uxth	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	78fa      	ldrb	r2, [r7, #3]
 800120a:	545a      	strb	r2, [r3, r1]
        rb->head = next;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	89fa      	ldrh	r2, [r7, #14]
 8001210:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
    } else {
    	printf("Error! Overwriting ringbuffer.");
    }
}
 8001214:	e002      	b.n	800121c <RingBuffer_Write+0x54>
    	printf("Error! Overwriting ringbuffer.");
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <RingBuffer_Write+0x5c>)
 8001218:	f008 fc7a 	bl	8009b10 <iprintf>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08010748 	.word	0x08010748

08001228 <string_to_int>:
    int32_t fixed_degrees = degrees << 16;

    return fixed_degrees + scaled_fraction;
}

int string_to_int(const char *str) {
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    int result = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001234:	e015      	b.n	8001262 <string_to_int+0x3a>
        if (*str >= '0' && *str <= '9') {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b2f      	cmp	r3, #47	; 0x2f
 800123c:	d90e      	bls.n	800125c <string_to_int+0x34>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b39      	cmp	r3, #57	; 0x39
 8001244:	d80a      	bhi.n	800125c <string_to_int+0x34>
            result = result * 10 + (*str - '0');
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	461a      	mov	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3b30      	subs	r3, #48	; 0x30
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
        }
        str++;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
    while (*str) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1e5      	bne.n	8001236 <string_to_int+0xe>
    }
    return result;
 800126a:	68fb      	ldr	r3, [r7, #12]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <powten>:

int powten(int x) {
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	int i = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
	if (x > 0) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	dd0f      	ble.n	80012aa <powten+0x32>
		for (int j = 0; j < x; j++) {
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	e008      	b.n	80012a2 <powten+0x2a>
			i *= 10;
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < x; j++) {
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3301      	adds	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbf2      	blt.n	8001290 <powten+0x18>
		}
	}
	return i;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <Altxx>:

int32_t Altxx(char *data) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	// format: x<integer>x.x<integer>x, where there can be any amount of integers and decimals (meters)
	char* tokptr = strtok(data, ".");
 80012c0:	4921      	ldr	r1, [pc, #132]	; (8001348 <Altxx+0x90>)
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f009 fb4c 	bl	800a960 <strtok>
 80012c8:	61f8      	str	r0, [r7, #28]
	int ints[2] = {0,0};
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
	int len2 = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
	int j = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
	while (tokptr != NULL) {
 80012da:	e01a      	b.n	8001312 <Altxx+0x5a>
        ints[j] = string_to_int(tokptr);
 80012dc:	69f8      	ldr	r0, [r7, #28]
 80012de:	f7ff ffa3 	bl	8001228 <string_to_int>
 80012e2:	4602      	mov	r2, r0
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	f107 0120 	add.w	r1, r7, #32
 80012ec:	440b      	add	r3, r1
 80012ee:	f843 2c18 	str.w	r2, [r3, #-24]
        if (j == 1) {len2 = strlen(tokptr);}
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d104      	bne.n	8001302 <Altxx+0x4a>
 80012f8:	69f8      	ldr	r0, [r7, #28]
 80012fa:	f7fe ff9b 	bl	8000234 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	61bb      	str	r3, [r7, #24]
        // next iteration
        j++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
        tokptr = strtok(NULL, ".");
 8001308:	490f      	ldr	r1, [pc, #60]	; (8001348 <Altxx+0x90>)
 800130a:	2000      	movs	r0, #0
 800130c:	f009 fb28 	bl	800a960 <strtok>
 8001310:	61f8      	str	r0, [r7, #28]
	while (tokptr != NULL) {
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e1      	bne.n	80012dc <Altxx+0x24>
	}
    // Convert to fixed-point representation
    //printf("%i", ints[1]);
	int32_t result = convert(ints[0]);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff3a 	bl	8001194 <convert>
 8001320:	6138      	str	r0, [r7, #16]
	result += Rational(ints[1], powten(len2));
 8001322:	68fc      	ldr	r4, [r7, #12]
 8001324:	69b8      	ldr	r0, [r7, #24]
 8001326:	f7ff ffa7 	bl	8001278 <powten>
 800132a:	4603      	mov	r3, r0
 800132c:	4619      	mov	r1, r3
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff fee4 	bl	80010fc <Rational>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4413      	add	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
    //printFix(result);
    return result;
 800133c:	693b      	ldr	r3, [r7, #16]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	080107e0 	.word	0x080107e0

0800134c <DDmmmmmm>:

int32_t DDmmmmmm(char *data) {
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    // Split
    char DD_str[3] = {0};
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <DDmmmmmm+0x90>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	82bb      	strh	r3, [r7, #20]
 800135a:	2300      	movs	r3, #0
 800135c:	75bb      	strb	r3, [r7, #22]
    char mm_str[8] = {0};
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]

    strncpy(DD_str, data, 2);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	2202      	movs	r2, #2
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f008 fca0 	bl	8009cb4 <strncpy>
    strcpy(mm_str, data + 2);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1c9a      	adds	r2, r3, #2
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f008 fc90 	bl	8009ca4 <strcpy>

    // Convert
    int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff4d 	bl	8001228 <string_to_int>
 800138e:	4603      	mov	r3, r0
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    int64_t mm_int = string_to_int(mm_str);            //64 cuz no worki with 32
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff45 	bl	8001228 <string_to_int>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	141d      	asrs	r5, r3, #16
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	041c      	lsls	r4, r3, #16
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <DDmmmmmm+0x94>)
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff fc9c 	bl	8000cf8 <__aeabi_ldivmod>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4613      	mov	r3, r2
 80013c6:	61fb      	str	r3, [r7, #28]
    int32_t cords = mm + DD;
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	4413      	add	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]

    return cords;
 80013d0:	69bb      	ldr	r3, [r7, #24]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3730      	adds	r7, #48	; 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}
 80013da:	bf00      	nop
 80013dc:	080107e4 	.word	0x080107e4
 80013e0:	000927c0 	.word	0x000927c0

080013e4 <DDDmmmmmm>:

int32_t DDDmmmmmm(char *data) {
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	char DD_str[4] = {0};
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
	char mm_str[10] = {0};
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	809a      	strh	r2, [r3, #4]

	strncpy(DD_str, data, 3);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2203      	movs	r2, #3
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	f008 fc54 	bl	8009cb4 <strncpy>
	strcpy(mm_str, data + 3);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	1cda      	adds	r2, r3, #3
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f008 fc44 	bl	8009ca4 <strcpy>

	// Convert
	int32_t DD = string_to_int(DD_str) << FIX16_SHIFT;
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff01 	bl	8001228 <string_to_int>
 8001426:	4603      	mov	r3, r0
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int64_t mm_int = string_to_int(mm_str);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fef9 	bl	8001228 <string_to_int>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800143e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int32_t mm = ((mm_int << FIX16_SHIFT) / 600000);
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	141d      	asrs	r5, r3, #16
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	041c      	lsls	r4, r3, #16
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <DDDmmmmmm+0x90>)
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	4620      	mov	r0, r4
 8001452:	4629      	mov	r1, r5
 8001454:	f7ff fc50 	bl	8000cf8 <__aeabi_ldivmod>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4613      	mov	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]

	int32_t cords = mm + DD;
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001464:	4413      	add	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
	return cords;
 8001468:	69bb      	ldr	r3, [r7, #24]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3730      	adds	r7, #48	; 0x30
 800146e:	46bd      	mov	sp, r7
 8001470:	bdb0      	pop	{r4, r5, r7, pc}
 8001472:	bf00      	nop
 8001474:	000927c0 	.word	0x000927c0

08001478 <RingBuffer_Read>:

int RingBuffer_Read(RingBuffer *rb, uint8_t *byte) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    if (rb->head == rb->tail) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8001488:	b29a      	uxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001490:	b29b      	uxth	r3, r3
 8001492:	429a      	cmp	r2, r3
 8001494:	d101      	bne.n	800149a <RingBuffer_Read+0x22>
        return 0;  // No data
 8001496:	2300      	movs	r3, #0
 8001498:	e019      	b.n	80014ce <RingBuffer_Read+0x56>
    }
    *byte = rb->buffer[rb->tail];
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	5c9a      	ldrb	r2, [r3, r2]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	701a      	strb	r2, [r3, #0]
    rb->tail = (rb->tail + 1) % RING_BUF_SIZE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	425a      	negs	r2, r3
 80014b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80014c0:	bf58      	it	pl
 80014c2:	4253      	negpl	r3, r2
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
    return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <getGPGGA>:

void getGPGGA(char sentence[LINEBUFFERSIZE], GPSRead_t *gps) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	if (gps->active) {
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	7b1b      	ldrb	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 8097 	beq.w	800161e <getGPGGA+0x142>
		char filter[] = "$GPGGA";
 80014f0:	4a6c      	ldr	r2, [pc, #432]	; (80016a4 <getGPGGA+0x1c8>)
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014fa:	6018      	str	r0, [r3, #0]
 80014fc:	3304      	adds	r3, #4
 80014fe:	8019      	strh	r1, [r3, #0]
 8001500:	3302      	adds	r3, #2
 8001502:	0c0a      	lsrs	r2, r1, #16
 8001504:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f008 fbe4 	bl	8009cda <strstr>
 8001512:	61b8      	str	r0, [r7, #24]
		if (senPtr != NULL) {
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80bf 	beq.w	800169a <getGPGGA+0x1be>
			if (strlen(senPtr) > 40) { // if no target lock, GPGGA is only 30 long
 800151c:	69b8      	ldr	r0, [r7, #24]
 800151e:	f7fe fe89 	bl	8000234 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	2b28      	cmp	r3, #40	; 0x28
 8001526:	d973      	bls.n	8001610 <getGPGGA+0x134>
				char *tokPtr = strtok(senPtr, DELIM);
 8001528:	495f      	ldr	r1, [pc, #380]	; (80016a8 <getGPGGA+0x1cc>)
 800152a:	69b8      	ldr	r0, [r7, #24]
 800152c:	f009 fa18 	bl	800a960 <strtok>
 8001530:	62f8      	str	r0, [r7, #44]	; 0x2c
				int i = 1; // index for going through GPGGA values
 8001532:	2301      	movs	r3, #1
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
				while (tokPtr != NULL) {
 8001536:	e067      	b.n	8001608 <getGPGGA+0x12c>
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	3b03      	subs	r3, #3
 800153c:	2b07      	cmp	r3, #7
 800153e:	d85a      	bhi.n	80015f6 <getGPGGA+0x11a>
 8001540:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <getGPGGA+0x6c>)
 8001542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001546:	bf00      	nop
 8001548:	08001569 	.word	0x08001569
 800154c:	08001577 	.word	0x08001577
 8001550:	080015a9 	.word	0x080015a9
 8001554:	080015b7 	.word	0x080015b7
 8001558:	080015f7 	.word	0x080015f7
 800155c:	080015f7 	.word	0x080015f7
 8001560:	080015f7 	.word	0x080015f7
 8001564:	080015e9 	.word	0x080015e9
					//printf("%i %s \r\n", i, tokPtr);
					switch (i) { // https://docs.novatel.com/OEM7/Content/Logs/GPGGA.htm
						case 3: {  // latitude / breddegrad [DDmm.mmmm]
							gps->latitude = DDmmmmmm(tokPtr);
 8001568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800156a:	f7ff feef 	bl	800134c <DDmmmmmm>
 800156e:	4602      	mov	r2, r0
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	601a      	str	r2, [r3, #0]
							break;
 8001574:	e040      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 4: {
							if (!strcmp(tokPtr, "N")) {
 8001576:	494d      	ldr	r1, [pc, #308]	; (80016ac <getGPGGA+0x1d0>)
 8001578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800157a:	f7fe fe51 	bl	8000220 <strcmp>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d108      	bne.n	8001596 <getGPGGA+0xba>
								// north direction
								gps->latitude = abs(gps->latitude);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800158c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	601a      	str	r2, [r3, #0]
							}
							else {
								// south direction
								gps->latitude = -1 * abs(gps->latitude);
							}
							break;
 8001594:	e030      	b.n	80015f8 <getGPGGA+0x11c>
								gps->latitude = -1 * abs(gps->latitude);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	bfb8      	it	lt
 800159e:	425b      	neglt	r3, r3
 80015a0:	425a      	negs	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	601a      	str	r2, [r3, #0]
							break;
 80015a6:	e027      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 5: {
							gps->longitude = DDDmmmmmm(tokPtr);
 80015a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015aa:	f7ff ff1b 	bl	80013e4 <DDDmmmmmm>
 80015ae:	4602      	mov	r2, r0
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	605a      	str	r2, [r3, #4]
							break;
 80015b4:	e020      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 6: {
							if (!strcmp(tokPtr, "E")) {
 80015b6:	493e      	ldr	r1, [pc, #248]	; (80016b0 <getGPGGA+0x1d4>)
 80015b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ba:	f7fe fe31 	bl	8000220 <strcmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d108      	bne.n	80015d6 <getGPGGA+0xfa>
								// east direction
								gps->longitude = abs(gps->longitude);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	605a      	str	r2, [r3, #4]
							}
							else {
								// west direction
								gps->longitude = -1 * abs(gps->longitude);
							}
							break;
 80015d4:	e010      	b.n	80015f8 <getGPGGA+0x11c>
								gps->longitude = -1 * abs(gps->longitude);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bfb8      	it	lt
 80015de:	425b      	neglt	r3, r3
 80015e0:	425a      	negs	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	605a      	str	r2, [r3, #4]
							break;
 80015e6:	e007      	b.n	80015f8 <getGPGGA+0x11c>
						}
						case 10: { // altitude
							gps->altitude = Altxx(tokPtr);
 80015e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015ea:	f7ff fe65 	bl	80012b8 <Altxx>
 80015ee:	4602      	mov	r2, r0
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	609a      	str	r2, [r3, #8]
							break;
 80015f4:	e000      	b.n	80015f8 <getGPGGA+0x11c>
						}
						default: {
							break;
 80015f6:	bf00      	nop
						}
					}
					i++;
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	3301      	adds	r3, #1
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
					tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 80015fe:	492a      	ldr	r1, [pc, #168]	; (80016a8 <getGPGGA+0x1cc>)
 8001600:	2000      	movs	r0, #0
 8001602:	f009 f9ad 	bl	800a960 <strtok>
 8001606:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (tokPtr != NULL) {
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d194      	bne.n	8001538 <getGPGGA+0x5c>
		}
		else {
			//printf("Line skip, no %s \r\n", filter);
		}
	}
}
 800160e:	e044      	b.n	800169a <getGPGGA+0x1be>
				printf("Error: GPGGA too short \r\n");
 8001610:	4828      	ldr	r0, [pc, #160]	; (80016b4 <getGPGGA+0x1d8>)
 8001612:	f008 fb19 	bl	8009c48 <puts>
				gps->active = 0;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	731a      	strb	r2, [r3, #12]
}
 800161c:	e03d      	b.n	800169a <getGPGGA+0x1be>
		char filter[] = "$GPRMC";
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <getGPGGA+0x1dc>)
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001628:	6018      	str	r0, [r3, #0]
 800162a:	3304      	adds	r3, #4
 800162c:	8019      	strh	r1, [r3, #0]
 800162e:	3302      	adds	r3, #2
 8001630:	0c0a      	lsrs	r2, r1, #16
 8001632:	701a      	strb	r2, [r3, #0]
		char *senPtr = strstr(sentence, filter); // filters the string to contain filter
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f008 fb4d 	bl	8009cda <strstr>
 8001640:	61f8      	str	r0, [r7, #28]
		if (senPtr != NULL) {
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d028      	beq.n	800169a <getGPGGA+0x1be>
			char *tokPtr = strtok(senPtr, DELIM);
 8001648:	4917      	ldr	r1, [pc, #92]	; (80016a8 <getGPGGA+0x1cc>)
 800164a:	69f8      	ldr	r0, [r7, #28]
 800164c:	f009 f988 	bl	800a960 <strtok>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24
			int i = 1; // index for going through GPGGA values
 8001652:	2301      	movs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
			while (tokPtr != NULL) {
 8001656:	e01d      	b.n	8001694 <getGPGGA+0x1b8>
				i++;
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	3301      	adds	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
				tokPtr = strtok(NULL, DELIM); // required to progress strtok tokens
 800165e:	4912      	ldr	r1, [pc, #72]	; (80016a8 <getGPGGA+0x1cc>)
 8001660:	2000      	movs	r0, #0
 8001662:	f009 f97d 	bl	800a960 <strtok>
 8001666:	6278      	str	r0, [r7, #36]	; 0x24
				switch (i) {
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d112      	bne.n	8001694 <getGPGGA+0x1b8>
						if (!strcmp(tokPtr, "A")) {
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <getGPGGA+0x1e0>)
 8001670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001672:	f7fe fdd5 	bl	8000220 <strcmp>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <getGPGGA+0x1ae>
							gps->active = 1;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	731a      	strb	r2, [r3, #12]
							printf("Set GPS active \r\n");
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <getGPGGA+0x1e4>)
 8001684:	f008 fae0 	bl	8009c48 <puts>
 8001688:	e003      	b.n	8001692 <getGPGGA+0x1b6>
								printf("Error: No GPS lock %s \r\n", sentence);
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <getGPGGA+0x1e8>)
 800168e:	f008 fa3f 	bl	8009b10 <iprintf>
						break;
 8001692:	bf00      	nop
			while (tokPtr != NULL) {
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1de      	bne.n	8001658 <getGPGGA+0x17c>
}
 800169a:	bf00      	nop
 800169c:	3730      	adds	r7, #48	; 0x30
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	08010844 	.word	0x08010844
 80016a8:	080107e8 	.word	0x080107e8
 80016ac:	080107ec 	.word	0x080107ec
 80016b0:	080107f0 	.word	0x080107f0
 80016b4:	080107f4 	.word	0x080107f4
 80016b8:	0801084c 	.word	0x0801084c
 80016bc:	08010810 	.word	0x08010810
 80016c0:	08010814 	.word	0x08010814
 80016c4:	08010828 	.word	0x08010828

080016c8 <process_uart_data>:

char sentence[LINEBUFFERSIZE];  // Temporary line buffer
int indx = 0;

void process_uart_data(RingBuffer *rb, GPSRead_t *gps) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    uint8_t c;

    while (RingBuffer_Read(rb, &c)) {
 80016d2:	e01d      	b.n	8001710 <process_uart_data+0x48>
        if (indx < sizeof(sentence) - 1) {
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <process_uart_data+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2bf8      	cmp	r3, #248	; 0xf8
 80016da:	d807      	bhi.n	80016ec <process_uart_data+0x24>
            sentence[indx++] = c;
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <process_uart_data+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	4912      	ldr	r1, [pc, #72]	; (800172c <process_uart_data+0x64>)
 80016e4:	600a      	str	r2, [r1, #0]
 80016e6:	7bf9      	ldrb	r1, [r7, #15]
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <process_uart_data+0x68>)
 80016ea:	54d1      	strb	r1, [r2, r3]
        }

        if (c == '\n') {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d10e      	bne.n	8001710 <process_uart_data+0x48>
            sentence[indx] = '\0';  // Null-terminate the string
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <process_uart_data+0x64>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <process_uart_data+0x68>)
 80016f8:	2100      	movs	r1, #0
 80016fa:	54d1      	strb	r1, [r2, r3]
            printf("Log:   UART Sentence received \r\n");
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <process_uart_data+0x6c>)
 80016fe:	f008 faa3 	bl	8009c48 <puts>
            getGPGGA(sentence, gps); // den her linje er lidt cray-cray @rasmus ladegaard
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <process_uart_data+0x68>)
 8001706:	f7ff fee9 	bl	80014dc <getGPGGA>
            indx = 0;  // Reset for next line
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <process_uart_data+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
    while (RingBuffer_Read(rb, &c)) {
 8001710:	f107 030f 	add.w	r3, r7, #15
 8001714:	4619      	mov	r1, r3
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff feae 	bl	8001478 <RingBuffer_Read>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1d8      	bne.n	80016d4 <process_uart_data+0xc>
        }
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000200 	.word	0x20000200
 8001730:	20000614 	.word	0x20000614
 8001734:	08010854 	.word	0x08010854

08001738 <printGPS>:

void printGPS(GPSRead_t GPS) {
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	463c      	mov	r4, r7
 8001740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (GPS.active) {
 8001744:	7b3b      	ldrb	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d01a      	beq.n	8001780 <printGPS+0x48>
		printf("Active: %i ~ Latitude: ", GPS.active);
 800174a:	7b3b      	ldrb	r3, [r7, #12]
 800174c:	4619      	mov	r1, r3
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <printGPS+0x58>)
 8001750:	f008 f9de 	bl	8009b10 <iprintf>
		printFix(GPS.latitude);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fcf0 	bl	800113c <printFix>
		printf("deg ~ Longitude: ");
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <printGPS+0x5c>)
 800175e:	f008 f9d7 	bl	8009b10 <iprintf>
		printFix(GPS.longitude);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fce9 	bl	800113c <printFix>
		printf("deg ~ Altitude: ");
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <printGPS+0x60>)
 800176c:	f008 f9d0 	bl	8009b10 <iprintf>
		printFix(GPS.altitude);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fce2 	bl	800113c <printFix>
		printf("m. \r\n");
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <printGPS+0x64>)
 800177a:	f008 fa65 	bl	8009c48 <puts>
	} else {
		printf("Error: GPS inactive \r\n");
	}
}
 800177e:	e002      	b.n	8001786 <printGPS+0x4e>
		printf("Error: GPS inactive \r\n");
 8001780:	4807      	ldr	r0, [pc, #28]	; (80017a0 <printGPS+0x68>)
 8001782:	f008 fa61 	bl	8009c48 <puts>
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	08010874 	.word	0x08010874
 8001794:	0801088c 	.word	0x0801088c
 8001798:	080108a0 	.word	0x080108a0
 800179c:	080108b4 	.word	0x080108b4
 80017a0:	080108bc 	.word	0x080108bc

080017a4 <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <I2C_Scan+0x58>)
 80017ae:	f008 fa4b 	bl	8009c48 <puts>

    for (i = 1; i < 128; i++) {
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e015      	b.n	80017e4 <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	b299      	uxth	r1, r3
 80017c0:	230a      	movs	r3, #10
 80017c2:	2201      	movs	r2, #1
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f003 feb9 	bl	800553c <HAL_I2C_IsDeviceReady>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	; (8001800 <I2C_Scan+0x5c>)
 80017da:	f008 f999 	bl	8009b10 <iprintf>
    for (i = 1; i < 128; i++) {
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	3301      	adds	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dae5      	bge.n	80017b8 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <I2C_Scan+0x60>)
 80017ee:	f008 fa2b 	bl	8009c48 <puts>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	080108d4 	.word	0x080108d4
 8001800:	080108ec 	.word	0x080108ec
 8001804:	08010914 	.word	0x08010914

08001808 <get_years>:
static const double wgs84_a = 6378.137;
static const double wgs84_b = wgs84_a * (1 - wgs84_f);

// Decimal years since January 1, IGRF_START_YEAR
double get_years(const igrf_time_t dt)
{
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b0a2      	sub	sp, #136	; 0x88
 800180c:	af00      	add	r7, sp, #0
 800180e:	463b      	mov	r3, r7
 8001810:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 8001814:	883b      	ldrh	r3, [r7, #0]
 8001816:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 800181a:	d916      	bls.n	800184a <get_years+0x42>
 800181c:	883b      	ldrh	r3, [r7, #0]
 800181e:	f240 72ed 	movw	r2, #2029	; 0x7ed
 8001822:	4293      	cmp	r3, r2
 8001824:	d811      	bhi.n	800184a <get_years+0x42>
      (dt.month < 1) || (dt.month > 12) ||
 8001826:	78bb      	ldrb	r3, [r7, #2]
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00e      	beq.n	800184a <get_years+0x42>
      (dt.month < 1) || (dt.month > 12) ||
 800182c:	78bb      	ldrb	r3, [r7, #2]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d80b      	bhi.n	800184a <get_years+0x42>
      (dt.day < 1) || (dt.hour > 23) ||
 8001832:	78fb      	ldrb	r3, [r7, #3]
      (dt.month < 1) || (dt.month > 12) ||
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <get_years+0x42>
      (dt.day < 1) || (dt.hour > 23) ||
 8001838:	793b      	ldrb	r3, [r7, #4]
 800183a:	2b17      	cmp	r3, #23
 800183c:	d805      	bhi.n	800184a <get_years+0x42>
      (dt.minute > 59) || (dt.second > 59))
 800183e:	797b      	ldrb	r3, [r7, #5]
      (dt.day < 1) || (dt.hour > 23) ||
 8001840:	2b3b      	cmp	r3, #59	; 0x3b
 8001842:	d802      	bhi.n	800184a <get_years+0x42>
      (dt.minute > 59) || (dt.second > 59))
 8001844:	79bb      	ldrb	r3, [r7, #6]
 8001846:	2b3b      	cmp	r3, #59	; 0x3b
 8001848:	d903      	bls.n	8001852 <get_years+0x4a>
  {
    return -1;
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <get_years+0x200>)
 8001850:	e0cd      	b.n	80019ee <get_years+0x1e6>
  }

  int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001852:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <get_years+0x204>)
 8001854:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001858:	461d      	mov	r5, r3
 800185a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001862:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001866:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int is_leap = (((dt.year % 4) == 0) && (((dt.year % 100) != 0) || ((dt.year % 400) == 0)));
 800186a:	883b      	ldrh	r3, [r7, #0]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	b29b      	uxth	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d11a      	bne.n	80018ac <get_years+0xa4>
 8001876:	883b      	ldrh	r3, [r7, #0]
 8001878:	4a65      	ldr	r2, [pc, #404]	; (8001a10 <get_years+0x208>)
 800187a:	fba2 1203 	umull	r1, r2, r2, r3
 800187e:	0952      	lsrs	r2, r2, #5
 8001880:	2164      	movs	r1, #100	; 0x64
 8001882:	fb01 f202 	mul.w	r2, r1, r2
 8001886:	1a9b      	subs	r3, r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <get_years+0xa0>
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	4a5f      	ldr	r2, [pc, #380]	; (8001a10 <get_years+0x208>)
 8001892:	fba2 1203 	umull	r1, r2, r2, r3
 8001896:	09d2      	lsrs	r2, r2, #7
 8001898:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800189c:	fb01 f202 	mul.w	r2, r1, r2
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <get_years+0xa4>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <get_years+0xa6>
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  // Adjust for leap year
  if (is_leap)
 80018b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <get_years+0xb6>
  {
    days_in_month[1] = 29;
 80018ba:	231d      	movs	r3, #29
 80018bc:	643b      	str	r3, [r7, #64]	; 0x40
  }

  // Check valid day in the month
  if (dt.day > days_in_month[dt.month - 1])
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	461a      	mov	r2, r3
 80018c2:	78bb      	ldrb	r3, [r7, #2]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80018cc:	440b      	add	r3, r1
 80018ce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dd03      	ble.n	80018de <get_years+0xd6>
  {
    return -1;
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <get_years+0x200>)
 80018dc:	e087      	b.n	80019ee <get_years+0x1e6>
  }

  // Days since IGRF_START_YEAR
  int years = dt.year - IGRF_START_YEAR;
 80018de:	883b      	ldrh	r3, [r7, #0]
 80018e0:	f2a3 73e9 	subw	r3, r3, #2025	; 0x7e9
 80018e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int days_arr[] = {0, 31, 59, 90, 120, 151, 182, 212, 243, 273, 304, 334};
 80018e8:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <get_years+0x20c>)
 80018ea:	f107 040c 	add.w	r4, r7, #12
 80018ee:	461d      	mov	r5, r3
 80018f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  double days = days_arr[dt.month - 1] + dt.day + (dt.month > 2 ? is_leap : 0);
 8001900:	78bb      	ldrb	r3, [r7, #2]
 8001902:	3b01      	subs	r3, #1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800190a:	4413      	add	r3, r2
 800190c:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	441a      	add	r2, r3
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d902      	bls.n	8001920 <get_years+0x118>
 800191a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800191e:	e000      	b.n	8001922 <get_years+0x11a>
 8001920:	2300      	movs	r3, #0
 8001922:	4413      	add	r3, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe35 	bl	8000594 <__aeabi_i2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  double hours = dt.hour + (dt.minute / 60.0) + (dt.second / 3600.0);
 8001932:	793b      	ldrb	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe2d 	bl	8000594 <__aeabi_i2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	797b      	ldrb	r3, [r7, #5]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe27 	bl	8000594 <__aeabi_i2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b33      	ldr	r3, [pc, #204]	; (8001a18 <get_years+0x210>)
 800194c:	f7fe ffb6 	bl	80008bc <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fcd0 	bl	80002fc <__adddf3>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fe14 	bl	8000594 <__aeabi_i2d>
 800196c:	a324      	add	r3, pc, #144	; (adr r3, 8001a00 <get_years+0x1f8>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7fe ffa3 	bl	80008bc <__aeabi_ddiv>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4620      	mov	r0, r4
 800197c:	4629      	mov	r1, r5
 800197e:	f7fe fcbd 	bl	80002fc <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  int total_days = is_leap ? 366 : 365;
 800198a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <get_years+0x190>
 8001992:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8001996:	e001      	b.n	800199c <get_years+0x194>
 8001998:	f240 136d 	movw	r3, #365	; 0x16d
 800199c:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Decimal years
  return years + days / total_days + hours / 24.0;
 800199e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80019a2:	f7fe fdf7 	bl	8000594 <__aeabi_i2d>
 80019a6:	4604      	mov	r4, r0
 80019a8:	460d      	mov	r5, r1
 80019aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80019ac:	f7fe fdf2 	bl	8000594 <__aeabi_i2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019b8:	f7fe ff80 	bl	80008bc <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc9a 	bl	80002fc <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <get_years+0x214>)
 80019d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019da:	f7fe ff6f 	bl	80008bc <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	f7fe fc89 	bl	80002fc <__adddf3>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80019f2:	eeb0 0a47 	vmov.f32	s0, s14
 80019f6:	eef0 0a67 	vmov.f32	s1, s15
 80019fa:	3788      	adds	r7, #136	; 0x88
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40ac2000 	.word	0x40ac2000
 8001a08:	bff00000 	.word	0xbff00000
 8001a0c:	08010924 	.word	0x08010924
 8001a10:	51eb851f 	.word	0x51eb851f
 8001a14:	08010954 	.word	0x08010954
 8001a18:	404e0000 	.word	0x404e0000
 8001a1c:	40380000 	.word	0x40380000

08001a20 <igrf>:
 * @param f The frame of reference for the input coordinates and the output field values.
 *
 * @return false if the time is out of range; true otherwise.
 */
bool igrf(const igrf_time_t t, const double x[3], const igrf_frame_t f, double b[3])
{
 8001a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a24:	ed2d 8b02 	vpush	{d8}
 8001a28:	f5ad 7d39 	sub.w	sp, sp, #740	; 0x2e4
 8001a2c:	af0e      	add	r7, sp, #56	; 0x38
 8001a2e:	f107 0420 	add.w	r4, r7, #32
 8001a32:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a36:	f107 011c 	add.w	r1, r7, #28
 8001a3a:	600a      	str	r2, [r1, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f107 031b 	add.w	r3, r7, #27
 8001a42:	701a      	strb	r2, [r3, #0]
  const double a = 6371.2;                  // Radius of Earth [km]
 8001a44:	a3ee      	add	r3, pc, #952	; (adr r3, 8001e00 <igrf+0x3e0>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	e9c7 2382 	strd	r2, r3, [r7, #520]	; 0x208
  const double theta = M_PI_2 - x[0] * D2R; // Colattitude [rad]
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a58:	a3eb      	add	r3, pc, #940	; (adr r3, 8001e08 <igrf+0x3e8>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fe03 	bl	8000668 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	a1ea      	add	r1, pc, #936	; (adr r1, 8001e10 <igrf+0x3f0>)
 8001a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a6c:	f7fe fc44 	bl	80002f8 <__aeabi_dsub>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
  const double phi = x[1] * D2R;            // Longitude [rad]
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a84:	a3e0      	add	r3, pc, #896	; (adr r3, 8001e08 <igrf+0x3e8>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fded 	bl	8000668 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	e9c7 237e 	strd	r2, r3, [r7, #504]	; 0x1f8

  double cd, sd, r;
  double ct = cos(theta);
 8001a96:	ed97 0b80 	vldr	d0, [r7, #512]	; 0x200
 8001a9a:	f00b ff5d 	bl	800d958 <cos>
 8001a9e:	ed87 0ba2 	vstr	d0, [r7, #648]	; 0x288
  double st = sin(theta);
 8001aa2:	ed97 0b80 	vldr	d0, [r7, #512]	; 0x200
 8001aa6:	f00b ffa7 	bl	800d9f8 <sin>
 8001aaa:	ed87 0ba0 	vstr	d0, [r7, #640]	; 0x280

  // Geodetic to geocentric conversion
  // https://github.com/wb-bgs/m_IGRF
  if (f == IGRF_GEODETIC)
 8001aae:	f107 031b 	add.w	r3, r7, #27
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 8130 	bne.w	8001d1a <igrf+0x2fa>
  {
    // Radius
    const double h = x[2];
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ac4:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
    const double rho = hypot(wgs84_a * st, wgs84_b * ct);
 8001ac8:	a1c7      	add	r1, pc, #796	; (adr r1, 8001de8 <igrf+0x3c8>)
 8001aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ace:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8001ad2:	f7fe fdc9 	bl	8000668 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	ec43 2b18 	vmov	d8, r2, r3
 8001ade:	a1c6      	add	r1, pc, #792	; (adr r1, 8001df8 <igrf+0x3d8>)
 8001ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae4:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001ae8:	f7fe fdbe 	bl	8000668 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	ec43 2b17 	vmov	d7, r2, r3
 8001af4:	eeb0 1a47 	vmov.f32	s2, s14
 8001af8:	eef0 1a67 	vmov.f32	s3, s15
 8001afc:	eeb0 0a48 	vmov.f32	s0, s16
 8001b00:	eef0 0a68 	vmov.f32	s1, s17
 8001b04:	f00c f850 	bl	800dba8 <hypot>
 8001b08:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
    r = sqrt(h * h + 2 * h * rho + (pow(wgs84_a, 4) * st * st + pow(wgs84_b, 4) * ct * ct) / (rho * rho));
 8001b0c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8001b10:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001b14:	f7fe fda8 	bl	8000668 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	461d      	mov	r5, r3
 8001b20:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	f7fe fbe8 	bl	80002fc <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8001b38:	f7fe fd96 	bl	8000668 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fbda 	bl	80002fc <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4690      	mov	r8, r2
 8001b4e:	4699      	mov	r9, r3
 8001b50:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 8001de8 <igrf+0x3c8>
 8001b54:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8001df0 <igrf+0x3d0>
 8001b58:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5c:	eef0 0a67 	vmov.f32	s1, s15
 8001b60:	f00c f85c 	bl	800dc1c <pow>
 8001b64:	ec51 0b10 	vmov	r0, r1, d0
 8001b68:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8001b6c:	f7fe fd7c 	bl	8000668 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8001b7c:	f7fe fd74 	bl	8000668 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	ed9f 7b9b 	vldr	d7, [pc, #620]	; 8001df8 <igrf+0x3d8>
 8001b8c:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8001df0 <igrf+0x3d0>
 8001b90:	eeb0 0a47 	vmov.f32	s0, s14
 8001b94:	eef0 0a67 	vmov.f32	s1, s15
 8001b98:	f00c f840 	bl	800dc1c <pow>
 8001b9c:	ec51 0b10 	vmov	r0, r1, d0
 8001ba0:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001ba4:	f7fe fd60 	bl	8000668 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001bb4:	f7fe fd58 	bl	8000668 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fb9c 	bl	80002fc <__adddf3>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4614      	mov	r4, r2
 8001bca:	461d      	mov	r5, r3
 8001bcc:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8001bd0:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8001bd4:	f7fe fd48 	bl	8000668 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4620      	mov	r0, r4
 8001bde:	4629      	mov	r1, r5
 8001be0:	f7fe fe6c 	bl	80008bc <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4640      	mov	r0, r8
 8001bea:	4649      	mov	r1, r9
 8001bec:	f7fe fb86 	bl	80002fc <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	ec43 2b17 	vmov	d7, r2, r3
 8001bf8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfc:	eef0 0a67 	vmov.f32	s1, s15
 8001c00:	f00c f8ba 	bl	800dd78 <sqrt>
 8001c04:	ed87 0ba4 	vstr	d0, [r7, #656]	; 0x290

    // Latitude
    cd = (h + rho) / r;
 8001c08:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8001c0c:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8001c10:	f7fe fb74 	bl	80002fc <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8001c20:	f7fe fe4c 	bl	80008bc <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    sd = (wgs84_a * wgs84_a - wgs84_b * wgs84_b) / rho * ct * st / r;
 8001c2c:	a16e      	add	r1, pc, #440	; (adr r1, 8001de8 <igrf+0x3c8>)
 8001c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c32:	a36d      	add	r3, pc, #436	; (adr r3, 8001de8 <igrf+0x3c8>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe fd16 	bl	8000668 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	a16c      	add	r1, pc, #432	; (adr r1, 8001df8 <igrf+0x3d8>)
 8001c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c4a:	a36b      	add	r3, pc, #428	; (adr r3, 8001df8 <igrf+0x3d8>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fd0a 	bl	8000668 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	f7fe fb4c 	bl	80002f8 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8001c6c:	f7fe fe26 	bl	80008bc <__aeabi_ddiv>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001c7c:	f7fe fcf4 	bl	8000668 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8001c8c:	f7fe fcec 	bl	8000668 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8001c9c:	f7fe fe0e 	bl	80008bc <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
    const double temp = ct;
 8001ca8:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001cac:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
    ct = cd * ct - sd * st;
 8001cb0:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001cb4:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8001cb8:	f7fe fcd6 	bl	8000668 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8001cc8:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 8001ccc:	f7fe fccc 	bl	8000668 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fb0e 	bl	80002f8 <__aeabi_dsub>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	e9c7 23a2 	strd	r2, r3, [r7, #648]	; 0x288
    st = cd * st + sd * temp;
 8001ce4:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8001ce8:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8001cec:	f7fe fcbc 	bl	8000668 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8001cfc:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 8001d00:	f7fe fcb2 	bl	8000668 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4620      	mov	r0, r4
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	f7fe faf6 	bl	80002fc <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
 8001d18:	e00b      	b.n	8001d32 <igrf+0x312>
  }
  else if (f == IGRF_GEOCENTRIC)
 8001d1a:	f107 031b 	add.w	r3, r7, #27
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <igrf+0x312>
  {
    r = x[2]; // Radius
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d2e:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
  }

  // Avoid singularity on pole
  const double epsilon = 1e-8;
 8001d32:	a339      	add	r3, pc, #228	; (adr r3, 8001e18 <igrf+0x3f8>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8

  if (st < epsilon && st > -epsilon)
 8001d3c:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8001d40:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8001d44:	f7fe ff02 	bl	8000b4c <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d014      	beq.n	8001d78 <igrf+0x358>
 8001d4e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8001d58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d62:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8001d66:	f7fe ff0f 	bl	8000b88 <__aeabi_dcmpgt>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <igrf+0x358>
  {
    st = epsilon;
 8001d70:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8001d74:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
  }

  double years = get_years(t);
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001d80:	f7ff fd42 	bl	8001808 <get_years>
 8001d84:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0

  if (years < 0)
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8001d94:	f7fe feda 	bl	8000b4c <__aeabi_dcmplt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <igrf+0x384>
  {
    return false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f000 bd04 	b.w	80027ac <igrf+0xd8c>
  }

  // [a] Re-occurring power factors
  // Optimizations [a] and [b] by Alar Leibak.
  double ar_pow[IGRF_DEGREE + 1];
  const double ar = a / r;
 8001da4:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8001da8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8001dac:	f7fe fd86 	bl	80008bc <__aeabi_ddiv>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	e9c7 2372 	strd	r2, r3, [r7, #456]	; 0x1c8
  ar_pow[0] = ar * ar * ar;
 8001db8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8001dbc:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8001dc0:	f7fe fc52 	bl	8000668 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8001dd0:	f7fe fc4a 	bl	8000668 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001ddc:	e9c1 2300 	strd	r2, r3, [r1]

  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8001de6:	e037      	b.n	8001e58 <igrf+0x438>
 8001de8:	126e978d 	.word	0x126e978d
 8001dec:	40b8ea23 	.word	0x40b8ea23
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40100000 	.word	0x40100000
 8001df8:	97aa975c 	.word	0x97aa975c
 8001dfc:	40b8d4c0 	.word	0x40b8d4c0
 8001e00:	33333333 	.word	0x33333333
 8001e04:	40b8e333 	.word	0x40b8e333
 8001e08:	a226e211 	.word	0xa226e211
 8001e0c:	3f91df46 	.word	0x3f91df46
 8001e10:	54442d18 	.word	0x54442d18
 8001e14:	3ff921fb 	.word	0x3ff921fb
 8001e18:	e2308c3a 	.word	0xe2308c3a
 8001e1c:	3e45798e 	.word	0x3e45798e
  {
    ar_pow[i] = ar_pow[i - 1] * ar;
 8001e20:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8001e24:	3b01      	subs	r3, #1
 8001e26:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e32:	f897 427f 	ldrb.w	r4, [r7, #639]	; 0x27f
 8001e36:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8001e3a:	f7fe fc15 	bl	8000668 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8001e46:	00e1      	lsls	r1, r4, #3
 8001e48:	4401      	add	r1, r0
 8001e4a:	e9c1 2300 	strd	r2, r3, [r1]
  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8001e4e:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8001e52:	3301      	adds	r3, #1
 8001e54:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8001e58:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8001e5c:	2b0d      	cmp	r3, #13
 8001e5e:	d9df      	bls.n	8001e20 <igrf+0x400>
  }

  // [b] Re-occurring sines and cosines
  double sines[IGRF_DEGREE + 1], cosines[IGRF_DEGREE + 1];
  sines[0] = 0;
 8001e60:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	e9c1 2300 	strd	r2, r3, [r1]
  cosines[0] = 1;
 8001e70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	4bbd      	ldr	r3, [pc, #756]	; (8002170 <igrf+0x750>)
 8001e7a:	e9c1 2300 	strd	r2, r3, [r1]
  sines[1] = sin(phi);
 8001e7e:	ed97 0b7e 	vldr	d0, [r7, #504]	; 0x1f8
 8001e82:	f00b fdb9 	bl	800d9f8 <sin>
 8001e86:	eeb0 7a40 	vmov.f32	s14, s0
 8001e8a:	eef0 7a60 	vmov.f32	s15, s1
 8001e8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e92:	ed83 7b02 	vstr	d7, [r3, #8]
  cosines[1] = cos(phi);
 8001e96:	ed97 0b7e 	vldr	d0, [r7, #504]	; 0x1f8
 8001e9a:	f00b fd5d 	bl	800d958 <cos>
 8001e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea2:	eef0 7a60 	vmov.f32	s15, s1
 8001ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eaa:	ed83 7b02 	vstr	d7, [r3, #8]

  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 8001eae:	2302      	movs	r3, #2
 8001eb0:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8001eb4:	e0c8      	b.n	8002048 <igrf+0x628>
  {
    if (i & 1)
 8001eb6:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d064      	beq.n	8001f8c <igrf+0x56c>
    {
      sines[i] = sines[i - 1] * cosines[1] + cosines[i - 1] * sines[1];
 8001ec2:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001edc:	f7fe fbc4 	bl	8000668 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4690      	mov	r8, r2
 8001ee6:	4699      	mov	r9, r3
 8001ee8:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001eec:	3b01      	subs	r3, #1
 8001eee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001efe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f02:	f7fe fbb1 	bl	8000668 <__aeabi_dmul>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	f897 427e 	ldrb.w	r4, [r7, #638]	; 0x27e
 8001f0e:	4640      	mov	r0, r8
 8001f10:	4649      	mov	r1, r9
 8001f12:	f7fe f9f3 	bl	80002fc <__adddf3>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001f1e:	00e1      	lsls	r1, r4, #3
 8001f20:	4401      	add	r1, r0
 8001f22:	e9c1 2300 	strd	r2, r3, [r1]
      cosines[i] = cosines[i - 1] * cosines[1] - sines[i - 1] * sines[1];
 8001f26:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f40:	f7fe fb92 	bl	8000668 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4690      	mov	r8, r2
 8001f4a:	4699      	mov	r9, r3
 8001f4c:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001f50:	3b01      	subs	r3, #1
 8001f52:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f66:	f7fe fb7f 	bl	8000668 <__aeabi_dmul>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	f897 427e 	ldrb.w	r4, [r7, #638]	; 0x27e
 8001f72:	4640      	mov	r0, r8
 8001f74:	4649      	mov	r1, r9
 8001f76:	f7fe f9bf 	bl	80002f8 <__aeabi_dsub>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001f82:	00e1      	lsls	r1, r4, #3
 8001f84:	4401      	add	r1, r0
 8001f86:	e9c1 2300 	strd	r2, r3, [r1]
 8001f8a:	e058      	b.n	800203e <igrf+0x61e>
    }
    else // even
    {
      sines[i] = 2 * sines[i >> 1] * cosines[i >> 1];
 8001f8c:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	f7fe f9aa 	bl	80002fc <__adddf3>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f897 427e 	ldrb.w	r4, [r7, #638]	; 0x27e
 8001fc8:	f7fe fb4e 	bl	8000668 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001fd4:	00e1      	lsls	r1, r4, #3
 8001fd6:	4401      	add	r1, r0
 8001fd8:	e9c1 2300 	strd	r2, r3, [r1]
      cosines[i] = 2 * cosines[i >> 1] * cosines[i >> 1] - 1;
 8001fdc:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8001fe0:	085b      	lsrs	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f7fe f982 	bl	80002fc <__adddf3>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8002004:	085b      	lsrs	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fb28 	bl	8000668 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f897 427e 	ldrb.w	r4, [r7, #638]	; 0x27e
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b51      	ldr	r3, [pc, #324]	; (8002170 <igrf+0x750>)
 800202a:	f7fe f965 	bl	80002f8 <__aeabi_dsub>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002036:	00e1      	lsls	r1, r4, #3
 8002038:	4401      	add	r1, r0
 800203a:	e9c1 2300 	strd	r2, r3, [r1]
  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 800203e:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 8002042:	3301      	adds	r3, #1
 8002044:	f887 327e 	strb.w	r3, [r7, #638]	; 0x27e
 8002048:	f897 327e 	ldrb.w	r3, [r7, #638]	; 0x27e
 800204c:	2b0d      	cmp	r3, #13
 800204e:	f67f af32 	bls.w	8001eb6 <igrf+0x496>
    }
  }

  // Associated Legendre polynomials and its derivative
  double pnm = 0.0f, dpnm = 0.0f; // (n, m)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  double p11 = 1.0f, dp11 = 0.0f; // (n, n)
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b40      	ldr	r3, [pc, #256]	; (8002170 <igrf+0x750>)
 8002070:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
  double p10 = 1.0f, dp10 = 0.0f; // (n-1, m)
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <igrf+0x750>)
 8002086:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
  double p20 = 0.0f, dp20 = 0.0f; // (n-2, m)
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c7 2390 	strd	r2, r3, [r7, #576]	; 0x240
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238

  // Field components: radial, theta, and phi
  double br = 0.0f, bt = 0.0f, bp = 0.0f;
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220

  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 80020d8:	e2e2      	b.n	80026a0 <igrf+0xc80>
  {
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 80020da:	2301      	movs	r3, #1
 80020dc:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
 80020e0:	e2d4      	b.n	800268c <igrf+0xc6c>
    {
      if (m <= n)
 80020e2:	f897 221f 	ldrb.w	r2, [r7, #543]	; 0x21f
 80020e6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80020ea:	429a      	cmp	r2, r3
 80020ec:	f200 82c9 	bhi.w	8002682 <igrf+0xc62>
      {
        if (n == m)
 80020f0:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 80020f4:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d13b      	bne.n	8002174 <igrf+0x754>
        {
          pnm = st * p11;
 80020fc:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8002100:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8002104:	f7fe fab0 	bl	8000668 <__aeabi_dmul>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
          dpnm = st * dp11 + ct * p11;
 8002110:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8002114:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8002118:	f7fe faa6 	bl	8000668 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8002128:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 800212c:	f7fe fa9c 	bl	8000668 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4620      	mov	r0, r4
 8002136:	4629      	mov	r1, r5
 8002138:	f7fe f8e0 	bl	80002fc <__adddf3>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268

          p11 = pnm; dp11 = dpnm;
 8002144:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8002148:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
 800214c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8002150:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
          p20 = 0.0; dp20 = 0.0;
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9c7 2390 	strd	r2, r3, [r7, #576]	; 0x240
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
 800216c:	e09f      	b.n	80022ae <igrf+0x88e>
 800216e:	bf00      	nop
 8002170:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          double Knm = 0.0;
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210

          if (n > 1)
 8002180:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002184:	2b01      	cmp	r3, #1
 8002186:	d94e      	bls.n	8002226 <igrf+0x806>
          {
            Knm = (pow(n - 1, 2) - pow(m, 2)) / ((2.0f * n - 1) * (2.0f * n - 3));
 8002188:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800218c:	3b01      	subs	r3, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fa00 	bl	8000594 <__aeabi_i2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	ed9f 1baf 	vldr	d1, [pc, #700]	; 8002458 <igrf+0xa38>
 800219c:	ec43 2b10 	vmov	d0, r2, r3
 80021a0:	f00b fd3c 	bl	800dc1c <pow>
 80021a4:	ec55 4b10 	vmov	r4, r5, d0
 80021a8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f9e1 	bl	8000574 <__aeabi_ui2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ed9f 1ba8 	vldr	d1, [pc, #672]	; 8002458 <igrf+0xa38>
 80021ba:	ec43 2b10 	vmov	d0, r2, r3
 80021be:	f00b fd2d 	bl	800dc1c <pow>
 80021c2:	ec53 2b10 	vmov	r2, r3, d0
 80021c6:	4620      	mov	r0, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	f7fe f895 	bl	80002f8 <__aeabi_dsub>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4614      	mov	r4, r2
 80021d4:	461d      	mov	r5, r3
 80021d6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80021ee:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021fe:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002202:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	ee17 0a90 	vmov	r0, s15
 800220e:	f7fe f9d3 	bl	80005b8 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe fb4f 	bl	80008bc <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
          }

          pnm = ct * p10 - Knm * p20;
 8002226:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 800222a:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 800222e:	f7fe fa1b 	bl	8000668 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4614      	mov	r4, r2
 8002238:	461d      	mov	r5, r3
 800223a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800223e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8002242:	f7fe fa11 	bl	8000668 <__aeabi_dmul>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4620      	mov	r0, r4
 800224c:	4629      	mov	r1, r5
 800224e:	f7fe f853 	bl	80002f8 <__aeabi_dsub>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
          dpnm = ct * dp10 - st * p10 - Knm * dp20;
 800225a:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800225e:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 8002262:	f7fe fa01 	bl	8000668 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4614      	mov	r4, r2
 800226c:	461d      	mov	r5, r3
 800226e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8002272:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8002276:	f7fe f9f7 	bl	8000668 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4620      	mov	r0, r4
 8002280:	4629      	mov	r1, r5
 8002282:	f7fe f839 	bl	80002f8 <__aeabi_dsub>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4614      	mov	r4, r2
 800228c:	461d      	mov	r5, r3
 800228e:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8002292:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8002296:	f7fe f9e7 	bl	8000668 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fe f829 	bl	80002f8 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
        }

        p20 = p10; dp20 = dp10;
 80022ae:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80022b2:	e9c7 2390 	strd	r2, r3, [r7, #576]	; 0x240
 80022b6:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80022ba:	e9c7 238e 	strd	r2, r3, [r7, #568]	; 0x238
        p10 = pnm; dp10 = dpnm;
 80022be:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80022c2:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
 80022c6:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80022ca:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248

        // Linear interpolation of g and h
        const int k = (0.5 * n * (n + 1) + m) - 1;
 80022ce:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f95e 	bl	8000594 <__aeabi_i2d>
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	4b60      	ldr	r3, [pc, #384]	; (8002460 <igrf+0xa40>)
 80022de:	f7fe f9c3 	bl	8000668 <__aeabi_dmul>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4614      	mov	r4, r2
 80022e8:	461d      	mov	r5, r3
 80022ea:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80022ee:	3301      	adds	r3, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f94f 	bl	8000594 <__aeabi_i2d>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fe f9b3 	bl	8000668 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	461d      	mov	r5, r3
 800230a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f940 	bl	8000594 <__aeabi_i2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	f7fd ffee 	bl	80002fc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <igrf+0xa44>)
 800232e:	f7fd ffe3 	bl	80002f8 <__aeabi_dsub>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f7fe fc45 	bl	8000bc8 <__aeabi_d2iz>
 800233e:	4603      	mov	r3, r0
 8002340:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        const double g = g_val[k]  + g_sv[k] * years;
 8002344:	4a48      	ldr	r2, [pc, #288]	; (8002468 <igrf+0xa48>)
 8002346:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002352:	4a46      	ldr	r2, [pc, #280]	; (800246c <igrf+0xa4c>)
 8002354:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002360:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002364:	f7fe f980 	bl	8000668 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fd ffc4 	bl	80002fc <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	e9c7 236c 	strd	r2, r3, [r7, #432]	; 0x1b0
        const double h = h_val[k]  + h_sv[k] * years;
 800237c:	4a3c      	ldr	r2, [pc, #240]	; (8002470 <igrf+0xa50>)
 800237e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	e9d3 4500 	ldrd	r4, r5, [r3]
 800238a:	4a3a      	ldr	r2, [pc, #232]	; (8002474 <igrf+0xa54>)
 800238c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002398:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800239c:	f7fe f964 	bl	8000668 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	f507 76d4 	add.w	r6, r7, #424	; 0x1a8
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7fd ffa6 	bl	80002fc <__adddf3>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	e9c6 2300 	strd	r2, r3, [r6]

        if (m == 0)
 80023b8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d15b      	bne.n	8002478 <igrf+0xa58>
        {
          const double temp = ar_pow[n - 1] * g;
 80023c0:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80023c4:	3b01      	subs	r3, #1
 80023c6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4413      	add	r3, r2
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f507 74bc 	add.w	r4, r7, #376	; 0x178
 80023d6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 80023da:	f7fe f945 	bl	8000668 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	e9c4 2300 	strd	r2, r3, [r4]
          br += temp * (n + 1.0) * pnm;
 80023e6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe f8d2 	bl	8000594 <__aeabi_i2d>
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <igrf+0xa44>)
 80023f6:	f7fd ff81 	bl	80002fc <__adddf3>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fe f92d 	bl	8000668 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800241a:	f7fe f925 	bl	8000668 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8002426:	f7fd ff69 	bl	80002fc <__adddf3>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
          bt -= temp * dpnm;
 8002432:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8002436:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800243a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800243e:	f7fe f913 	bl	8000668 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800244a:	f7fd ff55 	bl	80002f8 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
 8002456:	e0ec      	b.n	8002632 <igrf+0xc12>
 8002458:	00000000 	.word	0x00000000
 800245c:	40000000 	.word	0x40000000
 8002460:	3fe00000 	.word	0x3fe00000
 8002464:	3ff00000 	.word	0x3ff00000
 8002468:	08010b40 	.word	0x08010b40
 800246c:	080111c0 	.word	0x080111c0
 8002470:	08010e80 	.word	0x08010e80
 8002474:	08011500 	.word	0x08011500
        }
        else
        {
          const double hsin = h * sines[m];
 8002478:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800247c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f507 74d0 	add.w	r4, r7, #416	; 0x1a0
 800248c:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 8002490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002494:	f7fe f8e8 	bl	8000668 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c4 2300 	strd	r2, r3, [r4]
          const double hcos = h * cosines[m];
 80024a0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80024a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 80024b4:	f507 71d4 	add.w	r1, r7, #424	; 0x1a8
 80024b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024bc:	f7fe f8d4 	bl	8000668 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c4 2300 	strd	r2, r3, [r4]
          const double gsin = g * sines[m];
 80024c8:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80024cc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 80024dc:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 80024e0:	f7fe f8c2 	bl	8000668 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	e9c4 2300 	strd	r2, r3, [r4]
          const double gcos = g * cosines[m];
 80024ec:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80024f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	f507 74c4 	add.w	r4, r7, #392	; 0x188
 8002500:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	; 0x1b0
 8002504:	f7fe f8b0 	bl	8000668 <__aeabi_dmul>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	e9c4 2300 	strd	r2, r3, [r4]
          const double temp = ar_pow[n - 1] * (gcos + hsin);
 8002510:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002514:	3b01      	subs	r3, #1
 8002516:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002522:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8002526:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002532:	f7fd fee3 	bl	80002fc <__adddf3>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	f507 76c0 	add.w	r6, r7, #384	; 0x180
 800253e:	4620      	mov	r0, r4
 8002540:	4629      	mov	r1, r5
 8002542:	f7fe f891 	bl	8000668 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	e9c6 2300 	strd	r2, r3, [r6]

          br += temp * (n + 1.0) * pnm;
 800254e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f81e 	bl	8000594 <__aeabi_i2d>
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	4b97      	ldr	r3, [pc, #604]	; (80027bc <igrf+0xd9c>)
 800255e:	f7fd fecd 	bl	80002fc <__adddf3>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f7fe f879 	bl	8000668 <__aeabi_dmul>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8002582:	f7fe f871 	bl	8000668 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 800258e:	f7fd feb5 	bl	80002fc <__adddf3>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	e9c7 238c 	strd	r2, r3, [r7, #560]	; 0x230
          bt -= temp * dpnm;
 800259a:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 800259e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80025a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025a6:	f7fe f85f 	bl	8000668 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80025b2:	f7fd fea1 	bl	80002f8 <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
          bp -= ar_pow[n - 1] * m * (-gsin + hcos) * pnm;
 80025be:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80025c2:	3b01      	subs	r3, #1
 80025c4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4413      	add	r3, r2
 80025cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80025d0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ffdd 	bl	8000594 <__aeabi_i2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fe f841 	bl	8000668 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4614      	mov	r4, r2
 80025ec:	461d      	mov	r5, r3
 80025ee:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80025f2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025fe:	f7fd fe7b 	bl	80002f8 <__aeabi_dsub>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4620      	mov	r0, r4
 8002608:	4629      	mov	r1, r5
 800260a:	f7fe f82d 	bl	8000668 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800261a:	f7fe f825 	bl	8000668 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8002626:	f7fd fe67 	bl	80002f8 <__aeabi_dsub>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
        }
        printf("%i,%i,%i,%f,%f,%f,%f,%f,%f,%f\r\n", n, m, k, g, h, pnm, dpnm, br, bt, bp);
 8002632:	f897 121e 	ldrb.w	r1, [r7, #542]	; 0x21e
 8002636:	f897 021f 	ldrb.w	r0, [r7, #543]	; 0x21f
 800263a:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 800263e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002642:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8002646:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800264a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800264e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002652:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8002656:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800265a:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800265e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002662:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800266e:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002672:	e9cd 2300 	strd	r2, r3, [sp]
 8002676:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800267a:	4602      	mov	r2, r0
 800267c:	4850      	ldr	r0, [pc, #320]	; (80027c0 <igrf+0xda0>)
 800267e:	f007 fa47 	bl	8009b10 <iprintf>
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 8002682:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002686:	3301      	adds	r3, #1
 8002688:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
 800268c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8002690:	2b0d      	cmp	r3, #13
 8002692:	f67f ad26 	bls.w	80020e2 <igrf+0x6c2>
  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 8002696:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800269a:	3301      	adds	r3, #1
 800269c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 80026a0:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80026a4:	2b0d      	cmp	r3, #13
 80026a6:	f67f ad18 	bls.w	80020da <igrf+0x6ba>
      }
    }
  }

  bp = bp / st;
 80026aa:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80026ae:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80026b2:	f7fe f903 	bl	80008bc <__aeabi_ddiv>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220

  // Geocentric NED
  b[0] = -bt;
 80026be:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80026c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80026d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80026d6:	ed83 7b00 	vstr	d7, [r3]
  b[1] = bp;
 80026da:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80026de:	f103 0108 	add.w	r1, r3, #8
 80026e2:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 80026e6:	e9c1 2300 	strd	r2, r3, [r1]
  b[2] = -br;
 80026ea:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80026ee:	3310      	adds	r3, #16
 80026f0:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80026f4:	603a      	str	r2, [r7, #0]
 80026f6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80026fa:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	ed97 7b00 	vldr	d7, [r7]
 8002704:	ed83 7b00 	vstr	d7, [r3]

  // Geocentric to geodetic NED
  if (f == IGRF_GEODETIC)
 8002708:	f107 031b 	add.w	r3, r7, #27
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d14b      	bne.n	80027aa <igrf+0xd8a>
  {
    double temp = b[0];
 8002712:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271a:	e9c7 2370 	strd	r2, r3, [r7, #448]	; 0x1c0
    b[0] = cd * b[0] + sd * b[2];
 800271e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002726:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800272a:	f7fd ff9d 	bl	8000668 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4614      	mov	r4, r2
 8002734:	461d      	mov	r5, r3
 8002736:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 800273a:	3310      	adds	r3, #16
 800273c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002740:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8002744:	f7fd ff90 	bl	8000668 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4620      	mov	r0, r4
 800274e:	4629      	mov	r1, r5
 8002750:	f7fd fdd4 	bl	80002fc <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800275c:	e9c1 2300 	strd	r2, r3, [r1]
    b[2] = cd * b[2] - sd * temp;
 8002760:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002764:	3310      	adds	r3, #16
 8002766:	e9d3 0100 	ldrd	r0, r1, [r3]
 800276a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800276e:	f7fd ff7b 	bl	8000668 <__aeabi_dmul>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4690      	mov	r8, r2
 8002778:	4699      	mov	r9, r3
 800277a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 800277e:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 8002782:	f7fd ff71 	bl	8000668 <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8002792:	f103 0410 	add.w	r4, r3, #16
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4640      	mov	r0, r8
 800279c:	4649      	mov	r1, r9
 800279e:	f7fd fdab 	bl	80002f8 <__aeabi_dsub>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	e9c4 2300 	strd	r2, r3, [r4]
  }

  return true;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	f507 772b 	add.w	r7, r7, #684	; 0x2ac
 80027b2:	46bd      	mov	sp, r7
 80027b4:	ecbd 8b02 	vpop	{d8}
 80027b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027bc:	3ff00000 	.word	0x3ff00000
 80027c0:	08010984 	.word	0x08010984

080027c4 <fixed_to_float>:
#include <stdio.h>
#define FIXED_POINT_SCALE (1 << 16)


// Convert 16.16 fixed-point to float
static inline float fixed_to_float(int32_t x) {
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
    return (float)x / FIXED_POINT_SCALE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027f0 <fixed_to_float+0x2c>
 80027da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027de:	eef0 7a66 	vmov.f32	s15, s13
}
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	47800000 	.word	0x47800000

080027f4 <float_to_fixed>:

// Convert float to 16.16 fixed-point
static inline int32_t float_to_fixed(float x) {
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int32_t)(x * FIXED_POINT_SCALE);
 80027fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002802:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002820 <float_to_fixed+0x2c>
 8002806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280e:	ee17 3a90 	vmov	r3, s15
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	47800000 	.word	0x47800000

08002824 <fixed_sin>:

// Function to calculate sine using math.h for a fixed-point input
int32_t fixed_sin(int32_t fixed_angle) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    float angle_float = fixed_to_float(fixed_angle); // Convert to float
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ffc9 	bl	80027c4 <fixed_to_float>
 8002832:	ed87 0a03 	vstr	s0, [r7, #12]
    float sin_result = sinf(angle_float);            // Use math.h's sine
 8002836:	ed97 0a03 	vldr	s0, [r7, #12]
 800283a:	f00b f971 	bl	800db20 <sinf>
 800283e:	ed87 0a02 	vstr	s0, [r7, #8]
    return float_to_fixed(sin_result);               // Convert back to fixed-point
 8002842:	ed97 0a02 	vldr	s0, [r7, #8]
 8002846:	f7ff ffd5 	bl	80027f4 <float_to_fixed>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <fixed_cos>:

// Function to calculate sine using math.h for a fixed-point input
int32_t fixed_cos(int32_t fixed_angle) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    float angle_float = fixed_to_float(fixed_angle); // Convert to float
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ffb1 	bl	80027c4 <fixed_to_float>
 8002862:	ed87 0a03 	vstr	s0, [r7, #12]
    float sin_result = cosf(angle_float);            // Use math.h's sine
 8002866:	ed97 0a03 	vldr	s0, [r7, #12]
 800286a:	f00b f919 	bl	800daa0 <cosf>
 800286e:	ed87 0a02 	vstr	s0, [r7, #8]
    return float_to_fixed(sin_result);               // Convert back to fixed-point
 8002872:	ed97 0a02 	vldr	s0, [r7, #8]
 8002876:	f7ff ffbd 	bl	80027f4 <float_to_fixed>
 800287a:	4603      	mov	r3, r0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <get_years16>:
//static const int32_t wgs84_a = 417997586; // 6378.137
//static const int32_t wgs84_b = 416596119; //wgs84_a * (1 - wgs84_f);

// Decimal years since January 1, IGRF_START_YEAR
int32_t get_years16(const igrf_time_t dt)
{
 8002884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002888:	b0a0      	sub	sp, #128	; 0x80
 800288a:	af00      	add	r7, sp, #0
 800288c:	463b      	mov	r3, r7
 800288e:	e883 0003 	stmia.w	r3, {r0, r1}
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 8002892:	883b      	ldrh	r3, [r7, #0]
 8002894:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8002898:	d916      	bls.n	80028c8 <get_years16+0x44>
 800289a:	883b      	ldrh	r3, [r7, #0]
 800289c:	f240 72ed 	movw	r2, #2029	; 0x7ed
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d811      	bhi.n	80028c8 <get_years16+0x44>
      (dt.month < 1) || (dt.month > 12) ||
 80028a4:	78bb      	ldrb	r3, [r7, #2]
  if ((dt.year < IGRF_START_YEAR) || (dt.year >= IGRF_END_YEAR) ||
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00e      	beq.n	80028c8 <get_years16+0x44>
      (dt.month < 1) || (dt.month > 12) ||
 80028aa:	78bb      	ldrb	r3, [r7, #2]
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d80b      	bhi.n	80028c8 <get_years16+0x44>
      (dt.day < 1) || (dt.hour > 23) ||
 80028b0:	78fb      	ldrb	r3, [r7, #3]
      (dt.month < 1) || (dt.month > 12) ||
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <get_years16+0x44>
      (dt.day < 1) || (dt.hour > 23) ||
 80028b6:	793b      	ldrb	r3, [r7, #4]
 80028b8:	2b17      	cmp	r3, #23
 80028ba:	d805      	bhi.n	80028c8 <get_years16+0x44>
      (dt.minute > 59) || (dt.second > 59))
 80028bc:	797b      	ldrb	r3, [r7, #5]
      (dt.day < 1) || (dt.hour > 23) ||
 80028be:	2b3b      	cmp	r3, #59	; 0x3b
 80028c0:	d802      	bhi.n	80028c8 <get_years16+0x44>
      (dt.minute > 59) || (dt.second > 59))
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	2b3b      	cmp	r3, #59	; 0x3b
 80028c6:	d902      	bls.n	80028ce <get_years16+0x4a>
  {
    return -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	e0c8      	b.n	8002a60 <get_years16+0x1dc>
  }

  int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <get_years16+0x1e8>)
 80028d0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80028d4:	461d      	mov	r5, r3
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int is_leap = (((dt.year % 4) == 0) && (((dt.year % 100) != 0) || ((dt.year % 400) == 0)));
 80028e6:	883b      	ldrh	r3, [r7, #0]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11a      	bne.n	8002928 <get_years16+0xa4>
 80028f2:	883b      	ldrh	r3, [r7, #0]
 80028f4:	4a5e      	ldr	r2, [pc, #376]	; (8002a70 <get_years16+0x1ec>)
 80028f6:	fba2 1203 	umull	r1, r2, r2, r3
 80028fa:	0952      	lsrs	r2, r2, #5
 80028fc:	2164      	movs	r1, #100	; 0x64
 80028fe:	fb01 f202 	mul.w	r2, r1, r2
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10c      	bne.n	8002924 <get_years16+0xa0>
 800290a:	883b      	ldrh	r3, [r7, #0]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <get_years16+0x1ec>)
 800290e:	fba2 1203 	umull	r1, r2, r2, r3
 8002912:	09d2      	lsrs	r2, r2, #7
 8002914:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002918:	fb01 f202 	mul.w	r2, r1, r2
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <get_years16+0xa4>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <get_years16+0xa6>
 8002928:	2300      	movs	r3, #0
 800292a:	67fb      	str	r3, [r7, #124]	; 0x7c

  // Adjust for leap year
  if (is_leap)
 800292c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <get_years16+0xb2>
  {
    days_in_month[1] = 29;
 8002932:	231d      	movs	r3, #29
 8002934:	643b      	str	r3, [r7, #64]	; 0x40
  }

  // Check valid day in the month
  if (dt.day > days_in_month[dt.month - 1])
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	461a      	mov	r2, r3
 800293a:	78bb      	ldrb	r3, [r7, #2]
 800293c:	3b01      	subs	r3, #1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002944:	440b      	add	r3, r1
 8002946:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800294a:	429a      	cmp	r2, r3
 800294c:	dd02      	ble.n	8002954 <get_years16+0xd0>
  {
    return -1;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e085      	b.n	8002a60 <get_years16+0x1dc>
  }

  // Days since IGRF_START_YEAR
  int years = dt.year - IGRF_START_YEAR;
 8002954:	883b      	ldrh	r3, [r7, #0]
 8002956:	f2a3 73e9 	subw	r3, r3, #2025	; 0x7e9
 800295a:	67bb      	str	r3, [r7, #120]	; 0x78
  int32_t days_arr[] = {0, 31, 59, 90, 120, 151, 182, 212, 243, 273, 304, 334};
 800295c:	4b45      	ldr	r3, [pc, #276]	; (8002a74 <get_years16+0x1f0>)
 800295e:	f107 040c 	add.w	r4, r7, #12
 8002962:	461d      	mov	r5, r3
 8002964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800296a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800296c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int32_t days = days_arr[dt.month - 1] + dt.day + (dt.month > 2 ? is_leap : 0);
 8002974:	78bb      	ldrb	r3, [r7, #2]
 8002976:	3b01      	subs	r3, #1
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800297e:	4413      	add	r3, r2
 8002980:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	441a      	add	r2, r3
 8002988:	78bb      	ldrb	r3, [r7, #2]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <get_years16+0x10e>
 800298e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002990:	e000      	b.n	8002994 <get_years16+0x110>
 8002992:	2300      	movs	r3, #0
 8002994:	4413      	add	r3, r2
 8002996:	677b      	str	r3, [r7, #116]	; 0x74
  int32_t hours = (dt.hour << 16) + DIV(dt.minute, 60 << 16) + DIV(dt.second, 3600 << 16);
 8002998:	793b      	ldrb	r3, [r7, #4]
 800299a:	041c      	lsls	r4, r3, #16
 800299c:	797b      	ldrb	r3, [r7, #5]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	0419      	lsls	r1, r3, #16
 80029ae:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80029b2:	0410      	lsls	r0, r2, #16
 80029b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	f7fe f99c 	bl	8000cf8 <__aeabi_ldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	441c      	add	r4, r3
 80029c8:	79bb      	ldrb	r3, [r7, #6]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	f04f 0000 	mov.w	r0, #0
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	0419      	lsls	r1, r3, #16
 80029da:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80029de:	0410      	lsls	r0, r2, #16
 80029e0:	f04f 6261 	mov.w	r2, #235929600	; 0xe100000
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f7fe f986 	bl	8000cf8 <__aeabi_ldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	4423      	add	r3, r4
 80029f4:	673b      	str	r3, [r7, #112]	; 0x70
  int32_t total_days = is_leap ? 366 : 365;
 80029f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <get_years16+0x17e>
 80029fc:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8002a00:	e001      	b.n	8002a06 <get_years16+0x182>
 8002a02:	f240 136d 	movw	r3, #365	; 0x16d
 8002a06:	66fb      	str	r3, [r7, #108]	; 0x6c

  // Decimal years
  return (years << 16) + DIV(days << 16,total_days << 16) + DIV(hours,24 << 16);
 8002a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a0a:	041c      	lsls	r4, r3, #16
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	461a      	mov	r2, r3
 8002a12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a16:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002a1a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8002a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	461a      	mov	r2, r3
 8002a24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a28:	4650      	mov	r0, sl
 8002a2a:	4659      	mov	r1, fp
 8002a2c:	f7fe f964 	bl	8000cf8 <__aeabi_ldivmod>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4613      	mov	r3, r2
 8002a36:	441c      	add	r4, r3
 8002a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a40:	ea4f 4922 	mov.w	r9, r2, asr #16
 8002a44:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8002a48:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	4640      	mov	r0, r8
 8002a52:	4649      	mov	r1, r9
 8002a54:	f7fe f950 	bl	8000cf8 <__aeabi_ldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	4423      	add	r3, r4
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3780      	adds	r7, #128	; 0x80
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	080109a4 	.word	0x080109a4
 8002a70:	51eb851f 	.word	0x51eb851f
 8002a74:	080109d4 	.word	0x080109d4

08002a78 <igrf16>:
 * @param f The frame of reference for the input coordinates and the output field values.
 *
 * @return false if the time is out of range; true otherwise.
 */
int igrf16(const igrf_time_t t, const int32_t latitude, const int32_t longitude, const int32_t altitude, igrf_frame_t f, int32_t b[3])
{
 8002a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a7c:	b0ef      	sub	sp, #444	; 0x1bc
 8002a7e:	af0e      	add	r7, sp, #56	; 0x38
 8002a80:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8002a84:	e884 0003 	stmia.w	r4, {r0, r1}
 8002a88:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002a8c:	600a      	str	r2, [r1, #0]
 8002a8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a92:	6013      	str	r3, [r2, #0]
  const int32_t a = 417542963; // 6371.2;                  // Radius of Earth [km]
 8002a94:	4bee      	ldr	r3, [pc, #952]	; (8002e50 <igrf16+0x3d8>)
 8002a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  const int32_t theta = M16_PI_2 - MULT(latitude, D162R); // Colattitude [rad]
 8002a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461c      	mov	r4, r3
 8002aa2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	f04f 0000 	mov.w	r0, #0
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	00d9      	lsls	r1, r3, #3
 8002ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab8:	00d0      	lsls	r0, r2, #3
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	1912      	adds	r2, r2, r4
 8002ac0:	eb45 0303 	adc.w	r3, r5, r3
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	01d9      	lsls	r1, r3, #7
 8002ace:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8002ad2:	01d0      	lsls	r0, r2, #7
 8002ad4:	1a80      	subs	r0, r0, r2
 8002ad6:	eb61 0103 	sbc.w	r1, r1, r3
 8002ada:	eb10 0804 	adds.w	r8, r0, r4
 8002ade:	eb41 0905 	adc.w	r9, r1, r5
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8002aee:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8002af2:	ea4f 4329 	mov.w	r3, r9, asr #16
 8002af6:	4613      	mov	r3, r2
 8002af8:	f5c3 33c9 	rsb	r3, r3, #102912	; 0x19200
 8002afc:	3320      	adds	r3, #32
 8002afe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  const int32_t phi = MULT(longitude, D162R);            // Longitude [rad]
 8002b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	461c      	mov	r4, r3
 8002b0a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002b0e:	4620      	mov	r0, r4
 8002b10:	4629      	mov	r1, r5
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	00cb      	lsls	r3, r1, #3
 8002b1c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b20:	00c2      	lsls	r2, r0, #3
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	1900      	adds	r0, r0, r4
 8002b28:	eb45 0101 	adc.w	r1, r5, r1
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	01cb      	lsls	r3, r1, #7
 8002b36:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 8002b3a:	01c2      	lsls	r2, r0, #7
 8002b3c:	1a12      	subs	r2, r2, r0
 8002b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b42:	eb12 0a04 	adds.w	sl, r2, r4
 8002b46:	eb43 0b05 	adc.w	fp, r3, r5
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	ea4f 421a 	mov.w	r2, sl, lsr #16
 8002b56:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8002b5a:	ea4f 432b 	mov.w	r3, fp, asr #16
 8002b5e:	4613      	mov	r3, r2
 8002b60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

  int32_t ct = fixed_cos(theta);
 8002b64:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8002b68:	f7ff fe74 	bl	8002854 <fixed_cos>
 8002b6c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  int32_t st = fixed_sin(theta);
 8002b70:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8002b74:	f7ff fe56 	bl	8002824 <fixed_sin>
 8002b78:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
  int32_t r = altitude; // Radius
 8002b7c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b80:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    ct = cd * ct - sd * st;
    st = cd * st + sd * temp;
  }*/

  // Avoid singularity on pole
  const int32_t epsilon = 1;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  if (st < epsilon && st > -epsilon)
 8002b8a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b92:	429a      	cmp	r2, r3
 8002b94:	da0a      	bge.n	8002bac <igrf16+0x134>
 8002b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b9a:	425b      	negs	r3, r3
 8002b9c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dd03      	ble.n	8002bac <igrf16+0x134>
  {
    st = epsilon;
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  }

  int32_t years = get_years16(t);
 8002bac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002bb4:	f7ff fe66 	bl	8002884 <get_years16>
 8002bb8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  if (years < 0)
 8002bbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da02      	bge.n	8002bca <igrf16+0x152>
  {
    return 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f000 bf85 	b.w	8003ad4 <igrf16+0x105c>
  }

  // [a] Re-occurring power factors
  // Optimizations [a] and [b] by Alar Leibak.
  int32_t ar_pow[IGRF_DEGREE + 1];
  const int32_t ar = DIV(a, r);
 8002bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002bce:	461a      	mov	r2, r3
 8002bd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002bd4:	1411      	asrs	r1, r2, #16
 8002bd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002bd8:	0413      	lsls	r3, r2, #16
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bdc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002be0:	461a      	mov	r2, r3
 8002be2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002be6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bea:	f7fe f885 	bl	8000cf8 <__aeabi_ldivmod>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  ar_pow[0] = MULT(MULT(ar, ar), ar);
 8002bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c06:	461a      	mov	r2, r3
 8002c08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c0c:	fb02 f501 	mul.w	r5, r2, r1
 8002c10:	fb00 f403 	mul.w	r4, r0, r3
 8002c14:	442c      	add	r4, r5
 8002c16:	fba0 2302 	umull	r2, r3, r0, r2
 8002c1a:	18e1      	adds	r1, r4, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0c10      	lsrs	r0, r2, #16
 8002c28:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002c2c:	1419      	asrs	r1, r3, #16
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4618      	mov	r0, r3
 8002c32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c40:	fb02 f501 	mul.w	r5, r2, r1
 8002c44:	fb00 f403 	mul.w	r4, r0, r3
 8002c48:	442c      	add	r4, r5
 8002c4a:	fba0 2302 	umull	r2, r3, r0, r2
 8002c4e:	18e1      	adds	r1, r4, r3
 8002c50:	460b      	mov	r3, r1
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0c10      	lsrs	r0, r2, #16
 8002c5c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002c60:	1419      	asrs	r1, r3, #16
 8002c62:	4603      	mov	r3, r0
 8002c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8002c6e:	e02f      	b.n	8002cd0 <igrf16+0x258>
  {
    ar_pow[i] = MULT(ar_pow[i - 1], ar);
 8002c70:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8002c74:	3b01      	subs	r3, #1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8002c82:	4618      	mov	r0, r3
 8002c84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c92:	fb02 f501 	mul.w	r5, r2, r1
 8002c96:	fb00 f403 	mul.w	r4, r0, r3
 8002c9a:	442c      	add	r4, r5
 8002c9c:	fba0 2302 	umull	r2, r3, r0, r2
 8002ca0:	18e1      	adds	r1, r4, r3
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	f04f 0000 	mov.w	r0, #0
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	0c10      	lsrs	r0, r2, #16
 8002cae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002cb2:	1419      	asrs	r1, r3, #16
 8002cb4:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8002cb8:	4602      	mov	r2, r0
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f843 2cd0 	str.w	r2, [r3, #-208]
  for (uint8_t i = 1; i <= IGRF_DEGREE; i++)
 8002cc6:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 8002cd0:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8002cd4:	2b0d      	cmp	r3, #13
 8002cd6:	d9cb      	bls.n	8002c70 <igrf16+0x1f8>
  }

  // [b] Re-occurring sines and cosines
  int32_t sines[IGRF_DEGREE + 1], cosines[IGRF_DEGREE + 1];
  sines[0] = 0;
 8002cd8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
  cosines[0] = 1 << 16;
 8002ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ce4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ce8:	601a      	str	r2, [r3, #0]
  sines[1] = sinrad(phi);
 8002cea:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002cee:	f001 f825 	bl	8003d3c <sinrad>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cf8:	605a      	str	r2, [r3, #4]
  cosines[1] = cosrad(phi);
 8002cfa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002cfe:	f001 f8a1 	bl	8003e44 <cosrad>
 8002d02:	4602      	mov	r2, r0
 8002d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d08:	605a      	str	r2, [r3, #4]

  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8002d10:	e10c      	b.n	8002f2c <igrf16+0x4b4>
  {
    if (i & 1)
 8002d12:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 809a 	beq.w	8002e54 <igrf16+0x3dc>
    {
      sines[i] = MULT(sines[i - 1], cosines[1]) + MULT(cosines[i - 1], sines[1]);
 8002d20:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002d24:	1e5a      	subs	r2, r3, #1
 8002d26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d40:	fb02 f501 	mul.w	r5, r2, r1
 8002d44:	fb00 f403 	mul.w	r4, r0, r3
 8002d48:	442c      	add	r4, r5
 8002d4a:	fba0 2302 	umull	r2, r3, r0, r2
 8002d4e:	18e1      	adds	r1, r4, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0c10      	lsrs	r0, r2, #16
 8002d5c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002d60:	1419      	asrs	r1, r3, #16
 8002d62:	4606      	mov	r6, r0
 8002d64:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002d68:	1e5a      	subs	r2, r3, #1
 8002d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d72:	4618      	mov	r0, r3
 8002d74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002d78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d84:	fb02 f501 	mul.w	r5, r2, r1
 8002d88:	fb00 f403 	mul.w	r4, r0, r3
 8002d8c:	442c      	add	r4, r5
 8002d8e:	fba0 2302 	umull	r2, r3, r0, r2
 8002d92:	18e1      	adds	r1, r4, r3
 8002d94:	460b      	mov	r3, r1
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0c10      	lsrs	r0, r2, #16
 8002da0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002da4:	1419      	asrs	r1, r3, #16
 8002da6:	4603      	mov	r3, r0
 8002da8:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8002dac:	18f1      	adds	r1, r6, r3
 8002dae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      cosines[i] = MULT(cosines[i - 1], cosines[1]) - MULT(sines[i - 1], sines[1]);
 8002db6:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002dba:	1e5a      	subs	r2, r3, #1
 8002dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002dca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dd6:	fb02 f501 	mul.w	r5, r2, r1
 8002dda:	fb00 f403 	mul.w	r4, r0, r3
 8002dde:	442c      	add	r4, r5
 8002de0:	fba0 2302 	umull	r2, r3, r0, r2
 8002de4:	18e1      	adds	r1, r4, r3
 8002de6:	460b      	mov	r3, r1
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	0c10      	lsrs	r0, r2, #16
 8002df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002df6:	1419      	asrs	r1, r3, #16
 8002df8:	4606      	mov	r6, r0
 8002dfa:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002dfe:	1e5a      	subs	r2, r3, #1
 8002e00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	461a      	mov	r2, r3
 8002e16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e1a:	fb02 f501 	mul.w	r5, r2, r1
 8002e1e:	fb00 f403 	mul.w	r4, r0, r3
 8002e22:	442c      	add	r4, r5
 8002e24:	fba0 2302 	umull	r2, r3, r0, r2
 8002e28:	18e1      	adds	r1, r4, r3
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	f04f 0000 	mov.w	r0, #0
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	0c10      	lsrs	r0, r2, #16
 8002e36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002e3a:	1419      	asrs	r1, r3, #16
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8002e42:	1af1      	subs	r1, r6, r3
 8002e44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e4c:	e069      	b.n	8002f22 <igrf16+0x4aa>
 8002e4e:	bf00      	nop
 8002e50:	18e33333 	.word	0x18e33333
    }
    else // even
    {
      sines[i] = MULT(sines[i >> 1] << 1, cosines[i >> 1]);
 8002e54:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002e6e:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e80:	461a      	mov	r2, r3
 8002e82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002e86:	fb02 f501 	mul.w	r5, r2, r1
 8002e8a:	fb00 f403 	mul.w	r4, r0, r3
 8002e8e:	442c      	add	r4, r5
 8002e90:	fba0 2302 	umull	r2, r3, r0, r2
 8002e94:	18e1      	adds	r1, r4, r3
 8002e96:	460b      	mov	r3, r1
 8002e98:	f04f 0000 	mov.w	r0, #0
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	0c10      	lsrs	r0, r2, #16
 8002ea2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002ea6:	1419      	asrs	r1, r3, #16
 8002ea8:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8002eac:	4601      	mov	r1, r0
 8002eae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      cosines[i] = MULT(cosines[i >> 1] << 1, cosines[i >> 1]) - convert(1);
 8002eb6:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002eba:	085b      	lsrs	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ed0:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ee8:	fb02 f501 	mul.w	r5, r2, r1
 8002eec:	fb00 f403 	mul.w	r4, r0, r3
 8002ef0:	442c      	add	r4, r5
 8002ef2:	fba0 2302 	umull	r2, r3, r0, r2
 8002ef6:	18e1      	adds	r1, r4, r3
 8002ef8:	460b      	mov	r3, r1
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	0c10      	lsrs	r0, r2, #16
 8002f04:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002f08:	1419      	asrs	r1, r3, #16
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f7fe f941 	bl	8001194 <convert>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f897 217a 	ldrb.w	r2, [r7, #378]	; 0x17a
 8002f18:	1ae1      	subs	r1, r4, r3
 8002f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 2; i <= IGRF_DEGREE; i++)
 8002f22:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002f26:	3301      	adds	r3, #1
 8002f28:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8002f2c:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8002f30:	2b0d      	cmp	r3, #13
 8002f32:	f67f aeee 	bls.w	8002d12 <igrf16+0x29a>
    }
  }

  // Associated Legendre polynomials and its derivative
  int32_t pnm = 0, dpnm = 0; // (n, m)
 8002f36:	2300      	movs	r3, #0
 8002f38:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  int32_t p11 = convert(1), dp11 = 0; // (n, n)
 8002f42:	2001      	movs	r0, #1
 8002f44:	f7fe f926 	bl	8001194 <convert>
 8002f48:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  int32_t p10 = convert(1), dp10 = 0; // (n-1, m)
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fe f91e 	bl	8001194 <convert>
 8002f58:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  int32_t p20 = 0, dp20 = 0; // (n-2, m)
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

  // Field components: radial, theta, and phi
  int32_t br = 0, bt = 0, bp = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8002f86:	f000 bd75 	b.w	8003a74 <igrf16+0xffc>
  {
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 8002f90:	f000 bd66 	b.w	8003a60 <igrf16+0xfe8>
    {
      if (m <= n)
 8002f94:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002f98:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f200 855a 	bhi.w	8003a56 <igrf16+0xfde>
      {
        if (n == m)
 8002fa2:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8002fa6:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d167      	bne.n	800307e <igrf16+0x606>
        {
          pnm = MULT(st, p11);
 8002fae:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fc2:	fb02 f501 	mul.w	r5, r2, r1
 8002fc6:	fb00 f403 	mul.w	r4, r0, r3
 8002fca:	442c      	add	r4, r5
 8002fcc:	fba0 2302 	umull	r2, r3, r0, r2
 8002fd0:	18e1      	adds	r1, r4, r3
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	f04f 0000 	mov.w	r0, #0
 8002fd8:	f04f 0100 	mov.w	r1, #0
 8002fdc:	0c10      	lsrs	r0, r2, #16
 8002fde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002fe2:	1419      	asrs	r1, r3, #16
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
          dpnm = MULT(st, dp11) + MULT(ct, p11);
 8002fea:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002ff4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ffe:	fb02 f501 	mul.w	r5, r2, r1
 8003002:	fb00 f403 	mul.w	r4, r0, r3
 8003006:	442c      	add	r4, r5
 8003008:	fba0 2302 	umull	r2, r3, r0, r2
 800300c:	18e1      	adds	r1, r4, r3
 800300e:	460b      	mov	r3, r1
 8003010:	f04f 0000 	mov.w	r0, #0
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	0c10      	lsrs	r0, r2, #16
 800301a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800301e:	1419      	asrs	r1, r3, #16
 8003020:	4606      	mov	r6, r0
 8003022:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003026:	4618      	mov	r0, r3
 8003028:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800302c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003030:	461a      	mov	r2, r3
 8003032:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003036:	fb02 f501 	mul.w	r5, r2, r1
 800303a:	fb00 f403 	mul.w	r4, r0, r3
 800303e:	442c      	add	r4, r5
 8003040:	fba0 2302 	umull	r2, r3, r0, r2
 8003044:	18e1      	adds	r1, r4, r3
 8003046:	460b      	mov	r3, r1
 8003048:	f04f 0000 	mov.w	r0, #0
 800304c:	f04f 0100 	mov.w	r1, #0
 8003050:	0c10      	lsrs	r0, r2, #16
 8003052:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003056:	1419      	asrs	r1, r3, #16
 8003058:	4603      	mov	r3, r0
 800305a:	4433      	add	r3, r6
 800305c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

          p11 = pnm; dp11 = dpnm;
 8003060:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003064:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003068:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800306c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
          p20 = 0; dp20 = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800307c:	e207      	b.n	800348e <igrf16+0xa16>
        }
        else
        {
          int32_t Knm = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

          if (n > 1)
 8003084:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8003088:	2b01      	cmp	r3, #1
 800308a:	f240 816d 	bls.w	8003368 <igrf16+0x8f0>
          {
            Knm = DIV(
 800308e:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8003092:	3b01      	subs	r3, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe f87d 	bl	8001194 <convert>
 800309a:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
 800309e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80030a6:	2002      	movs	r0, #2
 80030a8:	f7fe f874 	bl	8001194 <convert>
 80030ac:	4603      	mov	r3, r0
 80030ae:	141b      	asrs	r3, r3, #16
 80030b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80030b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da5c      	bge.n	8003176 <igrf16+0x6fe>
 80030bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030c0:	425b      	negs	r3, r3
 80030c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80030c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80030ca:	461a      	mov	r2, r3
 80030cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0101 	mov.w	r1, #1
 80030d8:	f7fd fe0e 	bl	8000cf8 <__aeabi_ldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4613      	mov	r3, r2
 80030e2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80030e6:	e046      	b.n	8003176 <igrf16+0x6fe>
 80030e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01d      	beq.n	8003130 <igrf16+0x6b8>
 80030f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80030f8:	4618      	mov	r0, r3
 80030fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80030fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003102:	461a      	mov	r2, r3
 8003104:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003108:	fb02 f501 	mul.w	r5, r2, r1
 800310c:	fb00 f403 	mul.w	r4, r0, r3
 8003110:	442c      	add	r4, r5
 8003112:	fba0 2302 	umull	r2, r3, r0, r2
 8003116:	18e1      	adds	r1, r4, r3
 8003118:	460b      	mov	r3, r1
 800311a:	f04f 0000 	mov.w	r0, #0
 800311e:	f04f 0100 	mov.w	r1, #0
 8003122:	0c10      	lsrs	r0, r2, #16
 8003124:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003128:	1419      	asrs	r1, r3, #16
 800312a:	4603      	mov	r3, r0
 800312c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003130:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003134:	4618      	mov	r0, r3
 8003136:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800313a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800313e:	461a      	mov	r2, r3
 8003140:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003144:	fb02 f501 	mul.w	r5, r2, r1
 8003148:	fb00 f403 	mul.w	r4, r0, r3
 800314c:	442c      	add	r4, r5
 800314e:	fba0 2302 	umull	r2, r3, r0, r2
 8003152:	18e1      	adds	r1, r4, r3
 8003154:	460b      	mov	r3, r1
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	0c10      	lsrs	r0, r2, #16
 8003160:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003164:	1419      	asrs	r1, r3, #16
 8003166:	4603      	mov	r3, r0
 8003168:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800316c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003170:	105b      	asrs	r3, r3, #1
 8003172:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003176:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1b4      	bne.n	80030e8 <igrf16+0x670>
 800317e:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 8003182:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f804 	bl	8001194 <convert>
 800318c:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
 8003190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003194:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003198:	2002      	movs	r0, #2
 800319a:	f7fd fffb 	bl	8001194 <convert>
 800319e:	4603      	mov	r3, r0
 80031a0:	141b      	asrs	r3, r3, #16
 80031a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80031a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	da5c      	bge.n	8003268 <igrf16+0x7f0>
 80031ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031b2:	425b      	negs	r3, r3
 80031b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80031b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80031bc:	461a      	mov	r2, r3
 80031be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031c2:	f04f 0000 	mov.w	r0, #0
 80031c6:	f04f 0101 	mov.w	r1, #1
 80031ca:	f7fd fd95 	bl	8000cf8 <__aeabi_ldivmod>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4613      	mov	r3, r2
 80031d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80031d8:	e046      	b.n	8003268 <igrf16+0x7f0>
 80031da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01d      	beq.n	8003222 <igrf16+0x7aa>
 80031e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031ea:	4618      	mov	r0, r3
 80031ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80031f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80031f4:	461a      	mov	r2, r3
 80031f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031fa:	fb02 f601 	mul.w	r6, r2, r1
 80031fe:	fb00 f503 	mul.w	r5, r0, r3
 8003202:	4435      	add	r5, r6
 8003204:	fba0 2302 	umull	r2, r3, r0, r2
 8003208:	18e9      	adds	r1, r5, r3
 800320a:	460b      	mov	r3, r1
 800320c:	f04f 0000 	mov.w	r0, #0
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	0c10      	lsrs	r0, r2, #16
 8003216:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800321a:	1419      	asrs	r1, r3, #16
 800321c:	4603      	mov	r3, r0
 800321e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003226:	4618      	mov	r0, r3
 8003228:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800322c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003230:	461a      	mov	r2, r3
 8003232:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003236:	fb02 f601 	mul.w	r6, r2, r1
 800323a:	fb00 f503 	mul.w	r5, r0, r3
 800323e:	4435      	add	r5, r6
 8003240:	fba0 2302 	umull	r2, r3, r0, r2
 8003244:	18e9      	adds	r1, r5, r3
 8003246:	460b      	mov	r3, r1
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0c10      	lsrs	r0, r2, #16
 8003252:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003256:	1419      	asrs	r1, r3, #16
 8003258:	4603      	mov	r3, r0
 800325a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800325e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003262:	105b      	asrs	r3, r3, #1
 8003264:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1b4      	bne.n	80031da <igrf16+0x762>
 8003270:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003274:	1ae3      	subs	r3, r4, r3
 8003276:	461a      	mov	r2, r3
 8003278:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800327c:	1411      	asrs	r1, r2, #16
 800327e:	6279      	str	r1, [r7, #36]	; 0x24
 8003280:	0413      	lsls	r3, r2, #16
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd ff83 	bl	8001194 <convert>
 800328e:	4603      	mov	r3, r0
 8003290:	461c      	mov	r4, r3
 8003292:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8003296:	2002      	movs	r0, #2
 8003298:	f7fd ff7c 	bl	8001194 <convert>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032a4:	fb02 f005 	mul.w	r0, r2, r5
 80032a8:	fb04 f103 	mul.w	r1, r4, r3
 80032ac:	4401      	add	r1, r0
 80032ae:	fba4 2302 	umull	r2, r3, r4, r2
 80032b2:	4419      	add	r1, r3
 80032b4:	460b      	mov	r3, r1
 80032b6:	f04f 0000 	mov.w	r0, #0
 80032ba:	f04f 0100 	mov.w	r1, #0
 80032be:	0c10      	lsrs	r0, r2, #16
 80032c0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80032c4:	1419      	asrs	r1, r3, #16
 80032c6:	4604      	mov	r4, r0
 80032c8:	2001      	movs	r0, #1
 80032ca:	f7fd ff63 	bl	8001194 <convert>
 80032ce:	4603      	mov	r3, r0
 80032d0:	1ae3      	subs	r3, r4, r3
 80032d2:	461c      	mov	r4, r3
 80032d4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80032d8:	2002      	movs	r0, #2
 80032da:	f7fd ff5b 	bl	8001194 <convert>
 80032de:	4603      	mov	r3, r0
 80032e0:	4698      	mov	r8, r3
 80032e2:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80032e6:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd ff52 	bl	8001194 <convert>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032f8:	fb02 f009 	mul.w	r0, r2, r9
 80032fc:	fb08 f103 	mul.w	r1, r8, r3
 8003300:	4401      	add	r1, r0
 8003302:	fba8 2302 	umull	r2, r3, r8, r2
 8003306:	4419      	add	r1, r3
 8003308:	460b      	mov	r3, r1
 800330a:	f04f 0000 	mov.w	r0, #0
 800330e:	f04f 0100 	mov.w	r1, #0
 8003312:	0c10      	lsrs	r0, r2, #16
 8003314:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003318:	1419      	asrs	r1, r3, #16
 800331a:	4606      	mov	r6, r0
 800331c:	2003      	movs	r0, #3
 800331e:	f7fd ff39 	bl	8001194 <convert>
 8003322:	4603      	mov	r3, r0
 8003324:	1af3      	subs	r3, r6, r3
 8003326:	461a      	mov	r2, r3
 8003328:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800332c:	fb02 f005 	mul.w	r0, r2, r5
 8003330:	fb04 f103 	mul.w	r1, r4, r3
 8003334:	4401      	add	r1, r0
 8003336:	fba4 2302 	umull	r2, r3, r4, r2
 800333a:	4419      	add	r1, r3
 800333c:	460b      	mov	r3, r1
 800333e:	f04f 0000 	mov.w	r0, #0
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	0c10      	lsrs	r0, r2, #16
 8003348:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800334c:	1419      	asrs	r1, r3, #16
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003356:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800335a:	f7fd fccd 	bl	8000cf8 <__aeabi_ldivmod>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4613      	mov	r3, r2
 8003364:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
            		POW(convert(n - 1), convert(2)) - POW(convert(m), convert(2)),
					MULT((MULT(convert(n), convert(2)) - convert(1)), MULT(convert(2), convert(n)) - convert(3))
					);
          }

          pnm = MULT(ct, p10) - MULT(Knm,p20);
 8003368:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800336c:	4618      	mov	r0, r3
 800336e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003372:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003376:	461a      	mov	r2, r3
 8003378:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800337c:	fb02 f501 	mul.w	r5, r2, r1
 8003380:	fb00 f403 	mul.w	r4, r0, r3
 8003384:	442c      	add	r4, r5
 8003386:	fba0 2302 	umull	r2, r3, r0, r2
 800338a:	18e1      	adds	r1, r4, r3
 800338c:	460b      	mov	r3, r1
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0c10      	lsrs	r0, r2, #16
 8003398:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800339c:	1419      	asrs	r1, r3, #16
 800339e:	4606      	mov	r6, r0
 80033a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80033a4:	4618      	mov	r0, r3
 80033a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80033aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80033ae:	461a      	mov	r2, r3
 80033b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033b4:	fb02 f501 	mul.w	r5, r2, r1
 80033b8:	fb00 f403 	mul.w	r4, r0, r3
 80033bc:	442c      	add	r4, r5
 80033be:	fba0 2302 	umull	r2, r3, r0, r2
 80033c2:	18e1      	adds	r1, r4, r3
 80033c4:	460b      	mov	r3, r1
 80033c6:	f04f 0000 	mov.w	r0, #0
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	0c10      	lsrs	r0, r2, #16
 80033d0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80033d4:	1419      	asrs	r1, r3, #16
 80033d6:	4603      	mov	r3, r0
 80033d8:	1af3      	subs	r3, r6, r3
 80033da:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
          dpnm = MULT(ct, dp10) - MULT(st, p10) - MULT(Knm, dp20);
 80033de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e2:	4618      	mov	r0, r3
 80033e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80033e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033ec:	461a      	mov	r2, r3
 80033ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80033f2:	fb02 f501 	mul.w	r5, r2, r1
 80033f6:	fb00 f403 	mul.w	r4, r0, r3
 80033fa:	442c      	add	r4, r5
 80033fc:	fba0 2302 	umull	r2, r3, r0, r2
 8003400:	18e1      	adds	r1, r4, r3
 8003402:	460b      	mov	r3, r1
 8003404:	f04f 0000 	mov.w	r0, #0
 8003408:	f04f 0100 	mov.w	r1, #0
 800340c:	0c10      	lsrs	r0, r2, #16
 800340e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003412:	1419      	asrs	r1, r3, #16
 8003414:	4606      	mov	r6, r0
 8003416:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800341a:	4618      	mov	r0, r3
 800341c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003420:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003424:	461a      	mov	r2, r3
 8003426:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800342a:	fb02 f501 	mul.w	r5, r2, r1
 800342e:	fb00 f403 	mul.w	r4, r0, r3
 8003432:	442c      	add	r4, r5
 8003434:	fba0 2302 	umull	r2, r3, r0, r2
 8003438:	18e1      	adds	r1, r4, r3
 800343a:	460b      	mov	r3, r1
 800343c:	f04f 0000 	mov.w	r0, #0
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	0c10      	lsrs	r0, r2, #16
 8003446:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800344a:	1419      	asrs	r1, r3, #16
 800344c:	4603      	mov	r3, r0
 800344e:	1af4      	subs	r4, r6, r3
 8003450:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003454:	4618      	mov	r0, r3
 8003456:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800345a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800345e:	461a      	mov	r2, r3
 8003460:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003464:	fb02 f601 	mul.w	r6, r2, r1
 8003468:	fb00 f503 	mul.w	r5, r0, r3
 800346c:	4435      	add	r5, r6
 800346e:	fba0 2302 	umull	r2, r3, r0, r2
 8003472:	18e9      	adds	r1, r5, r3
 8003474:	460b      	mov	r3, r1
 8003476:	f04f 0000 	mov.w	r0, #0
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	0c10      	lsrs	r0, r2, #16
 8003480:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003484:	1419      	asrs	r1, r3, #16
 8003486:	4603      	mov	r3, r0
 8003488:	1ae3      	subs	r3, r4, r3
 800348a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        }

        p20 = p10; dp20 = dp10;
 800348e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003492:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003496:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800349a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        p10 = pnm; dp10 = dpnm;
 800349e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80034a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80034a6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80034aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

        // Linear interpolation of g and h
        const int k = ((n * (n + 1)) >> 1) + m - 1;
 80034ae:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80034b2:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 80034b6:	3201      	adds	r2, #1
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	105a      	asrs	r2, r3, #1
 80034be:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80034c2:	4413      	add	r3, r2
 80034c4:	3b01      	subs	r3, #1
 80034c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        const int32_t g = (g_val16[k] + MULT(g_sv16[k],years)) >> 2;
 80034ca:	4a6e      	ldr	r2, [pc, #440]	; (8003684 <igrf16+0xc0c>)
 80034cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80034d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80034d4:	4a6c      	ldr	r2, [pc, #432]	; (8003688 <igrf16+0xc10>)
 80034d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	4618      	mov	r0, r3
 80034e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80034e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80034e8:	461a      	mov	r2, r3
 80034ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034ee:	fb02 f601 	mul.w	r6, r2, r1
 80034f2:	fb00 f503 	mul.w	r5, r0, r3
 80034f6:	4435      	add	r5, r6
 80034f8:	fba0 2302 	umull	r2, r3, r0, r2
 80034fc:	18e9      	adds	r1, r5, r3
 80034fe:	460b      	mov	r3, r1
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0c10      	lsrs	r0, r2, #16
 800350a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800350e:	1419      	asrs	r1, r3, #16
 8003510:	4603      	mov	r3, r0
 8003512:	4423      	add	r3, r4
 8003514:	109b      	asrs	r3, r3, #2
 8003516:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        const int32_t h = (h_val16[k] + MULT(h_sv16[k],years)) >> 2;
 800351a:	4a5c      	ldr	r2, [pc, #368]	; (800368c <igrf16+0xc14>)
 800351c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003520:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003524:	4a5a      	ldr	r2, [pc, #360]	; (8003690 <igrf16+0xc18>)
 8003526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	4618      	mov	r0, r3
 8003530:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003534:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003538:	461a      	mov	r2, r3
 800353a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800353e:	fb02 f601 	mul.w	r6, r2, r1
 8003542:	fb00 f503 	mul.w	r5, r0, r3
 8003546:	4435      	add	r5, r6
 8003548:	fba0 2302 	umull	r2, r3, r0, r2
 800354c:	18e9      	adds	r1, r5, r3
 800354e:	460b      	mov	r3, r1
 8003550:	f04f 0000 	mov.w	r0, #0
 8003554:	f04f 0100 	mov.w	r1, #0
 8003558:	0c10      	lsrs	r0, r2, #16
 800355a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800355e:	1419      	asrs	r1, r3, #16
 8003560:	4603      	mov	r3, r0
 8003562:	4423      	add	r3, r4
 8003564:	109b      	asrs	r3, r3, #2
 8003566:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

        if (m == 0)
 800356a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 8090 	bne.w	8003694 <igrf16+0xc1c>
        {
          const int32_t temp = MULT(ar_pow[n - 1], g);
 8003574:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8003578:	3b01      	subs	r3, #1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8003580:	4413      	add	r3, r2
 8003582:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8003586:	4618      	mov	r0, r3
 8003588:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800358c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003590:	461a      	mov	r2, r3
 8003592:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003596:	fb02 f501 	mul.w	r5, r2, r1
 800359a:	fb00 f403 	mul.w	r4, r0, r3
 800359e:	442c      	add	r4, r5
 80035a0:	fba0 2302 	umull	r2, r3, r0, r2
 80035a4:	18e1      	adds	r1, r4, r3
 80035a6:	460b      	mov	r3, r1
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	0c10      	lsrs	r0, r2, #16
 80035b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035b6:	1419      	asrs	r1, r3, #16
 80035b8:	4603      	mov	r3, r0
 80035ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
          br += MULT(MULT(temp, convert(n + 1)), pnm);
 80035be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035c2:	461c      	mov	r4, r3
 80035c4:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80035c8:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80035cc:	3301      	adds	r3, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fd fde0 	bl	8001194 <convert>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035dc:	fb02 f005 	mul.w	r0, r2, r5
 80035e0:	fb04 f103 	mul.w	r1, r4, r3
 80035e4:	4401      	add	r1, r0
 80035e6:	fba4 2302 	umull	r2, r3, r4, r2
 80035ea:	4419      	add	r1, r3
 80035ec:	460b      	mov	r3, r1
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	0c10      	lsrs	r0, r2, #16
 80035f8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035fc:	1419      	asrs	r1, r3, #16
 80035fe:	4603      	mov	r3, r0
 8003600:	4618      	mov	r0, r3
 8003602:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003606:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800360a:	461a      	mov	r2, r3
 800360c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003610:	fb02 f501 	mul.w	r5, r2, r1
 8003614:	fb00 f403 	mul.w	r4, r0, r3
 8003618:	442c      	add	r4, r5
 800361a:	fba0 2302 	umull	r2, r3, r0, r2
 800361e:	18e1      	adds	r1, r4, r3
 8003620:	460b      	mov	r3, r1
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	0c10      	lsrs	r0, r2, #16
 800362c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003630:	1419      	asrs	r1, r3, #16
 8003632:	4602      	mov	r2, r0
 8003634:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003638:	4413      	add	r3, r2
 800363a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
          bt -= MULT(temp,dpnm);
 800363e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003642:	4618      	mov	r0, r3
 8003644:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003648:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800364c:	461a      	mov	r2, r3
 800364e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003652:	fb02 f501 	mul.w	r5, r2, r1
 8003656:	fb00 f403 	mul.w	r4, r0, r3
 800365a:	442c      	add	r4, r5
 800365c:	fba0 2302 	umull	r2, r3, r0, r2
 8003660:	18e1      	adds	r1, r4, r3
 8003662:	460b      	mov	r3, r1
 8003664:	f04f 0000 	mov.w	r0, #0
 8003668:	f04f 0100 	mov.w	r1, #0
 800366c:	0c10      	lsrs	r0, r2, #16
 800366e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003672:	1419      	asrs	r1, r3, #16
 8003674:	4602      	mov	r2, r0
 8003676:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003680:	e17c      	b.n	800397c <igrf16+0xf04>
 8003682:	bf00      	nop
 8003684:	08011840 	.word	0x08011840
 8003688:	08011b80 	.word	0x08011b80
 800368c:	080119e0 	.word	0x080119e0
 8003690:	08011d20 	.word	0x08011d20
        }
        else
        {
          const int32_t hsin = MULT(h, sines[m]);
 8003694:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003698:	4618      	mov	r0, r3
 800369a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800369e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80036a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80036a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036aa:	461a      	mov	r2, r3
 80036ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036b0:	fb02 f501 	mul.w	r5, r2, r1
 80036b4:	fb00 f403 	mul.w	r4, r0, r3
 80036b8:	442c      	add	r4, r5
 80036ba:	fba0 2302 	umull	r2, r3, r0, r2
 80036be:	18e1      	adds	r1, r4, r3
 80036c0:	460b      	mov	r3, r1
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	0c10      	lsrs	r0, r2, #16
 80036cc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80036d0:	1419      	asrs	r1, r3, #16
 80036d2:	4603      	mov	r3, r0
 80036d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
          const int32_t hcos = MULT(h, cosines[m]);
 80036d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036dc:	4618      	mov	r0, r3
 80036de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036e2:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80036e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ee:	461a      	mov	r2, r3
 80036f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036f4:	fb02 f501 	mul.w	r5, r2, r1
 80036f8:	fb00 f403 	mul.w	r4, r0, r3
 80036fc:	442c      	add	r4, r5
 80036fe:	fba0 2302 	umull	r2, r3, r0, r2
 8003702:	18e1      	adds	r1, r4, r3
 8003704:	460b      	mov	r3, r1
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	0c10      	lsrs	r0, r2, #16
 8003710:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003714:	1419      	asrs	r1, r3, #16
 8003716:	4603      	mov	r3, r0
 8003718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
          const int32_t gsin = MULT(g, sines[m]);
 800371c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003720:	4618      	mov	r0, r3
 8003722:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003726:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800372a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800372e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003732:	461a      	mov	r2, r3
 8003734:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003738:	fb02 f501 	mul.w	r5, r2, r1
 800373c:	fb00 f403 	mul.w	r4, r0, r3
 8003740:	442c      	add	r4, r5
 8003742:	fba0 2302 	umull	r2, r3, r0, r2
 8003746:	18e1      	adds	r1, r4, r3
 8003748:	460b      	mov	r3, r1
 800374a:	f04f 0000 	mov.w	r0, #0
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	0c10      	lsrs	r0, r2, #16
 8003754:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003758:	1419      	asrs	r1, r3, #16
 800375a:	4603      	mov	r3, r0
 800375c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
          const int32_t gcos = MULT(g, cosines[m]);
 8003760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003764:	4618      	mov	r0, r3
 8003766:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800376a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800376e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003776:	461a      	mov	r2, r3
 8003778:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800377c:	fb02 f501 	mul.w	r5, r2, r1
 8003780:	fb00 f403 	mul.w	r4, r0, r3
 8003784:	442c      	add	r4, r5
 8003786:	fba0 2302 	umull	r2, r3, r0, r2
 800378a:	18e1      	adds	r1, r4, r3
 800378c:	460b      	mov	r3, r1
 800378e:	f04f 0000 	mov.w	r0, #0
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	0c10      	lsrs	r0, r2, #16
 8003798:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800379c:	1419      	asrs	r1, r3, #16
 800379e:	4603      	mov	r3, r0
 80037a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
          const int32_t temp = MULT(ar_pow[n - 1], gcos + hsin);
 80037a4:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80037a8:	3b01      	subs	r3, #1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80037b0:	4413      	add	r3, r2
 80037b2:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80037b6:	4618      	mov	r0, r3
 80037b8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037bc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80037c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c4:	4413      	add	r3, r2
 80037c6:	461a      	mov	r2, r3
 80037c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037cc:	fb02 f501 	mul.w	r5, r2, r1
 80037d0:	fb00 f403 	mul.w	r4, r0, r3
 80037d4:	442c      	add	r4, r5
 80037d6:	fba0 2302 	umull	r2, r3, r0, r2
 80037da:	18e1      	adds	r1, r4, r3
 80037dc:	460b      	mov	r3, r1
 80037de:	f04f 0000 	mov.w	r0, #0
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	0c10      	lsrs	r0, r2, #16
 80037e8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80037ec:	1419      	asrs	r1, r3, #16
 80037ee:	4603      	mov	r3, r0
 80037f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

          br += MULT(temp, MULT(convert(n + 1), pnm));
 80037f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80037f8:	461c      	mov	r4, r3
 80037fa:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80037fe:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8003802:	3301      	adds	r3, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd fcc5 	bl	8001194 <convert>
 800380a:	4603      	mov	r3, r0
 800380c:	4618      	mov	r0, r3
 800380e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003812:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003816:	461a      	mov	r2, r3
 8003818:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800381c:	fb02 fc01 	mul.w	ip, r2, r1
 8003820:	fb00 f603 	mul.w	r6, r0, r3
 8003824:	4466      	add	r6, ip
 8003826:	fba0 2302 	umull	r2, r3, r0, r2
 800382a:	18f1      	adds	r1, r6, r3
 800382c:	460b      	mov	r3, r1
 800382e:	f04f 0000 	mov.w	r0, #0
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	0c10      	lsrs	r0, r2, #16
 8003838:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800383c:	1419      	asrs	r1, r3, #16
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003846:	fb02 f005 	mul.w	r0, r2, r5
 800384a:	fb04 f103 	mul.w	r1, r4, r3
 800384e:	4401      	add	r1, r0
 8003850:	fba4 2302 	umull	r2, r3, r4, r2
 8003854:	4419      	add	r1, r3
 8003856:	460b      	mov	r3, r1
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0c10      	lsrs	r0, r2, #16
 8003862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003866:	1419      	asrs	r1, r3, #16
 8003868:	4602      	mov	r2, r0
 800386a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800386e:	4413      	add	r3, r2
 8003870:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
          bt -= MULT(temp, dpnm);
 8003874:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003878:	4618      	mov	r0, r3
 800387a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800387e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003882:	461a      	mov	r2, r3
 8003884:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003888:	fb02 f501 	mul.w	r5, r2, r1
 800388c:	fb00 f403 	mul.w	r4, r0, r3
 8003890:	442c      	add	r4, r5
 8003892:	fba0 2302 	umull	r2, r3, r0, r2
 8003896:	18e1      	adds	r1, r4, r3
 8003898:	460b      	mov	r3, r1
 800389a:	f04f 0000 	mov.w	r0, #0
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	0c10      	lsrs	r0, r2, #16
 80038a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80038a8:	1419      	asrs	r1, r3, #16
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
          bp -= MULT(ar_pow[n - 1], MULT(convert(m), MULT((-gsin + hcos), pnm)));
 80038b6:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80038ba:	3b01      	subs	r3, #1
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80038c2:	4413      	add	r3, r2
 80038c4:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 80038c8:	461c      	mov	r4, r3
 80038ca:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80038ce:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fc5e 	bl	8001194 <convert>
 80038d8:	4603      	mov	r3, r0
 80038da:	4698      	mov	r8, r3
 80038dc:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80038e0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80038f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80038f4:	461a      	mov	r2, r3
 80038f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038fa:	fb02 fc01 	mul.w	ip, r2, r1
 80038fe:	fb00 f603 	mul.w	r6, r0, r3
 8003902:	4466      	add	r6, ip
 8003904:	fba0 2302 	umull	r2, r3, r0, r2
 8003908:	18f1      	adds	r1, r6, r3
 800390a:	460b      	mov	r3, r1
 800390c:	f04f 0000 	mov.w	r0, #0
 8003910:	f04f 0100 	mov.w	r1, #0
 8003914:	0c10      	lsrs	r0, r2, #16
 8003916:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800391a:	1419      	asrs	r1, r3, #16
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003924:	fb02 f009 	mul.w	r0, r2, r9
 8003928:	fb08 f103 	mul.w	r1, r8, r3
 800392c:	4401      	add	r1, r0
 800392e:	fba8 2302 	umull	r2, r3, r8, r2
 8003932:	4419      	add	r1, r3
 8003934:	460b      	mov	r3, r1
 8003936:	f04f 0000 	mov.w	r0, #0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	0c10      	lsrs	r0, r2, #16
 8003940:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003944:	1419      	asrs	r1, r3, #16
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800394e:	fb02 f005 	mul.w	r0, r2, r5
 8003952:	fb04 f103 	mul.w	r1, r4, r3
 8003956:	4401      	add	r1, r0
 8003958:	fba4 2302 	umull	r2, r3, r4, r2
 800395c:	4419      	add	r1, r3
 800395e:	460b      	mov	r3, r1
 8003960:	f04f 0000 	mov.w	r0, #0
 8003964:	f04f 0100 	mov.w	r1, #0
 8003968:	0c10      	lsrs	r0, r2, #16
 800396a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800396e:	1419      	asrs	r1, r3, #16
 8003970:	4602      	mov	r2, r0
 8003972:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        }
        printf("%i,%i,%i,%f,%f,%f,%f,%f,%f,%f\r\n", n, m, k, fixed_to_float(g), fixed_to_float(h), fixed_to_float(pnm),fixed_to_float(dpnm), fixed_to_float(br), fixed_to_float(bt), fixed_to_float(bp));
 800397c:	f897 614a 	ldrb.w	r6, [r7, #330]	; 0x14a
 8003980:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
 8003986:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800398a:	f7fe ff1b 	bl	80027c4 <fixed_to_float>
 800398e:	ee10 3a10 	vmov	r3, s0
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fe10 	bl	80005b8 <__aeabi_f2d>
 8003998:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800399c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80039a0:	f7fe ff10 	bl	80027c4 <fixed_to_float>
 80039a4:	ee10 3a10 	vmov	r3, s0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fe05 	bl	80005b8 <__aeabi_f2d>
 80039ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80039b2:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 80039b6:	f7fe ff05 	bl	80027c4 <fixed_to_float>
 80039ba:	ee10 3a10 	vmov	r3, s0
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fdfa 	bl	80005b8 <__aeabi_f2d>
 80039c4:	e9c7 0100 	strd	r0, r1, [r7]
 80039c8:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 80039cc:	f7fe fefa 	bl	80027c4 <fixed_to_float>
 80039d0:	ee10 3a10 	vmov	r3, s0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc fdef 	bl	80005b8 <__aeabi_f2d>
 80039da:	4682      	mov	sl, r0
 80039dc:	468b      	mov	fp, r1
 80039de:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80039e2:	f7fe feef 	bl	80027c4 <fixed_to_float>
 80039e6:	ee10 3a10 	vmov	r3, s0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fc fde4 	bl	80005b8 <__aeabi_f2d>
 80039f0:	4680      	mov	r8, r0
 80039f2:	4689      	mov	r9, r1
 80039f4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80039f8:	f7fe fee4 	bl	80027c4 <fixed_to_float>
 80039fc:	ee10 3a10 	vmov	r3, s0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fc fdd9 	bl	80005b8 <__aeabi_f2d>
 8003a06:	4604      	mov	r4, r0
 8003a08:	460d      	mov	r5, r1
 8003a0a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8003a0e:	f7fe fed9 	bl	80027c4 <fixed_to_float>
 8003a12:	ee10 3a10 	vmov	r3, s0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fdce 	bl	80005b8 <__aeabi_f2d>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003a24:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8003a28:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003a2c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8003a30:	ed97 7b00 	vldr	d7, [r7]
 8003a34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003a38:	ed97 7b02 	vldr	d7, [r7, #8]
 8003a3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a40:	ed97 7b04 	vldr	d7, [r7, #16]
 8003a44:	ed8d 7b00 	vstr	d7, [sp]
 8003a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4e:	4631      	mov	r1, r6
 8003a50:	4823      	ldr	r0, [pc, #140]	; (8003ae0 <igrf16+0x1068>)
 8003a52:	f006 f85d 	bl	8009b10 <iprintf>
    for (uint8_t n = 1; n <= IGRF_DEGREE; n++)
 8003a56:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 8003a60:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8003a64:	2b0d      	cmp	r3, #13
 8003a66:	f67f aa95 	bls.w	8002f94 <igrf16+0x51c>
  for (uint8_t m = 0; m <= IGRF_DEGREE; m++)
 8003a6a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8003a74:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8003a78:	2b0d      	cmp	r3, #13
 8003a7a:	f67f aa86 	bls.w	8002f8a <igrf16+0x512>
      }
    }
  }

  bp = DIV(bp, st);
 8003a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a82:	461a      	mov	r2, r3
 8003a84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a88:	1411      	asrs	r1, r2, #16
 8003a8a:	61f9      	str	r1, [r7, #28]
 8003a8c:	0413      	lsls	r3, r2, #16
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003a94:	461a      	mov	r2, r3
 8003a96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003a9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a9e:	f7fd f92b 	bl	8000cf8 <__aeabi_ldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  // Geocentric NED
  b[0] = -bt;
 8003aac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ab0:	425a      	negs	r2, r3
 8003ab2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ab6:	601a      	str	r2, [r3, #0]
  b[1] = bp;
 8003ab8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003abc:	3304      	adds	r3, #4
 8003abe:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003ac2:	601a      	str	r2, [r3, #0]
  b[2] = -br;
 8003ac4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ac8:	3308      	adds	r3, #8
 8003aca:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8003ace:	4252      	negs	r2, r2
 8003ad0:	601a      	str	r2, [r3, #0]

  return 1;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f507 77c2 	add.w	r7, r7, #388	; 0x184
 8003ada:	46bd      	mov	sp, r7
 8003adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae0:	08010a04 	.word	0x08010a04

08003ae4 <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 8003ae8:	2201      	movs	r2, #1
 8003aea:	2102      	movs	r1, #2
 8003aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af0:	f001 fb58 	bl	80051a4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003af4:	2001      	movs	r0, #1
 8003af6:	f000 ffe1 	bl	8004abc <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2102      	movs	r1, #2
 8003afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b02:	f001 fb4f 	bl	80051a4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003b06:	2001      	movs	r0, #1
 8003b08:	f000 ffd8 	bl	8004abc <HAL_Delay>
}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	2110      	movs	r1, #16
 8003b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b2a:	f001 fb3b 	bl	80051a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2120      	movs	r1, #32
 8003b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b42:	f001 fb2f 	bl	80051a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	2140      	movs	r1, #64	; 0x40
 8003b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5a:	f001 fb23 	bl	80051a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2108      	movs	r1, #8
 8003b6e:	4804      	ldr	r0, [pc, #16]	; (8003b80 <LCD_Send4Bits+0x70>)
 8003b70:	f001 fb18 	bl	80051a4 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8003b74:	f7ff ffb6 	bl	8003ae4 <LCD_EnablePulse>
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	48000400 	.word	0x48000400

08003b84 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2101      	movs	r1, #1
 8003b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b96:	f001 fb05 	bl	80051a4 <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ffb5 	bl	8003b10 <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ffae 	bl	8003b10 <LCD_Send4Bits>
    HAL_Delay(2);
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	f000 ff81 	bl	8004abc <HAL_Delay>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <LCD_Init>:
void LCD_SetCursor(uint8_t row, uint8_t col) {
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
    LCD_SendCommand(0x80 | addr);
}

void LCD_Init(void) {
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 8003bc6:	2028      	movs	r0, #40	; 0x28
 8003bc8:	f000 ff78 	bl	8004abc <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f7ff ff9f 	bl	8003b10 <LCD_Send4Bits>
 8003bd2:	2005      	movs	r0, #5
 8003bd4:	f000 ff72 	bl	8004abc <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8003bd8:	2003      	movs	r0, #3
 8003bda:	f7ff ff99 	bl	8003b10 <LCD_Send4Bits>
 8003bde:	2001      	movs	r0, #1
 8003be0:	f000 ff6c 	bl	8004abc <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8003be4:	2003      	movs	r0, #3
 8003be6:	f7ff ff93 	bl	8003b10 <LCD_Send4Bits>
 8003bea:	2001      	movs	r0, #1
 8003bec:	f000 ff66 	bl	8004abc <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f7ff ff8d 	bl	8003b10 <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 8003bf6:	2028      	movs	r0, #40	; 0x28
 8003bf8:	f7ff ffc4 	bl	8003b84 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8003bfc:	200c      	movs	r0, #12
 8003bfe:	f7ff ffc1 	bl	8003b84 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 8003c02:	2006      	movs	r0, #6
 8003c04:	f7ff ffbe 	bl	8003b84 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7ff ffbb 	bl	8003b84 <LCD_SendCommand>
    HAL_Delay(2);
 8003c0e:	2002      	movs	r0, #2
 8003c10:	f000 ff54 	bl	8004abc <HAL_Delay>
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <lsmCtrlReg>:
 */

#include "lsm9ds1.h"
#include "fixp.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 8003c20:	f240 5322 	movw	r3, #1314	; 0x522
 8003c24:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 8003c26:	f107 021c 	add.w	r2, r7, #28
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2302      	movs	r3, #2
 8003c32:	21d6      	movs	r1, #214	; 0xd6
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f001 fb69 	bl	800530c <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 8003c3a:	2064      	movs	r0, #100	; 0x64
 8003c3c:	f000 ff3e 	bl	8004abc <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 8003c40:	f246 0320 	movw	r3, #24608	; 0x6020
 8003c44:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 8003c46:	f107 0218 	add.w	r2, r7, #24
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2302      	movs	r3, #2
 8003c52:	21d6      	movs	r1, #214	; 0xd6
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f001 fb59 	bl	800530c <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003c5a:	200a      	movs	r0, #10
 8003c5c:	f000 ff2e 	bl	8004abc <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 8003c60:	f247 0320 	movw	r3, #28704	; 0x7020
 8003c64:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 8003c66:	f107 0214 	add.w	r2, r7, #20
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2302      	movs	r3, #2
 8003c72:	213c      	movs	r1, #60	; 0x3c
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f001 fb49 	bl	800530c <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003c7a:	200a      	movs	r0, #10
 8003c7c:	f000 ff1e 	bl	8004abc <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8003c80:	2322      	movs	r3, #34	; 0x22
 8003c82:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8003c84:	f107 0210 	add.w	r2, r7, #16
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	2302      	movs	r3, #2
 8003c90:	213c      	movs	r1, #60	; 0x3c
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f001 fb3a 	bl	800530c <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003c98:	200a      	movs	r0, #10
 8003c9a:	f000 ff0f 	bl	8004abc <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8003c9e:	f640 4323 	movw	r3, #3107	; 0xc23
 8003ca2:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8003ca4:	f107 020c 	add.w	r2, r7, #12
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2302      	movs	r3, #2
 8003cb0:	213c      	movs	r1, #60	; 0x3c
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f001 fb2a 	bl	800530c <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8003cb8:	200a      	movs	r0, #10
 8003cba:	f000 feff 	bl	8004abc <HAL_Delay>
}
 8003cbe:	bf00      	nop
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <sinus>:
      -402,   -352,   -302,   -251,   -201,   -151,   -101,    -50,
};

// functions

int32_t sinus(int t) { // takes 32.0 integer representing a 512th degree
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	// printf("%i\n", t);
	while (t < 0) {t += LUTCOUNT;} // before indexing the lut, we put negative numbers "back in" the positive side of the circle
 8003cd0:	e003      	b.n	8003cda <sinus+0x12>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	dbf8      	blt.n	8003cd2 <sinus+0xa>
	t %= LUTCOUNT; // cyclic nature of sinus (equation 6, basically)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	425a      	negs	r2, r3
 8003ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ce8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003cec:	bf58      	it	pl
 8003cee:	4253      	negpl	r3, r2
 8003cf0:	607b      	str	r3, [r7, #4]
	// printf("%i\n", t);
	int32_t	returnval = (int32_t)(sinlut[t]); // sinlut contains int16_t, 2.14, so promote to 18.14 by going to int32_t
 8003cf2:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <sinus+0x44>)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003cfa:	60fb      	str	r3, [r7, #12]
	return(expand(returnval)); // returns 16.16 decimal
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7fd fa3d 	bl	800117c <expand>
 8003d02:	4603      	mov	r3, r0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08011ec0 	.word	0x08011ec0

08003d10 <cosinus>:

int32_t cosinus(int t) {          // correct quarter–cycle phase-shift
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT/4) % LUTCOUNT);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d1e:	425a      	negs	r2, r3
 8003d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d24:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003d28:	bf58      	it	pl
 8003d2a:	4253      	negpl	r3, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ffcb 	bl	8003cc8 <sinus>
 8003d32:	4603      	mov	r3, r0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8003d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8003d46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003d4a:	f7fd fa23 	bl	8001194 <convert>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003d56:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003d5a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f7fd fa18 	bl	8001194 <convert>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461c      	mov	r4, r3
 8003d68:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	462b      	mov	r3, r5
 8003d70:	1891      	adds	r1, r2, r2
 8003d72:	6039      	str	r1, [r7, #0]
 8003d74:	415b      	adcs	r3, r3
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d7c:	1912      	adds	r2, r2, r4
 8003d7e:	eb45 0303 	adc.w	r3, r5, r3
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f04f 0100 	mov.w	r1, #0
 8003d8a:	0199      	lsls	r1, r3, #6
 8003d8c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8003d90:	0190      	lsls	r0, r2, #6
 8003d92:	1812      	adds	r2, r2, r0
 8003d94:	eb41 0303 	adc.w	r3, r1, r3
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	0159      	lsls	r1, r3, #5
 8003da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da6:	0150      	lsls	r0, r2, #5
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	1b12      	subs	r2, r2, r4
 8003dae:	eb63 0305 	sbc.w	r3, r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc0:	0150      	lsls	r0, r2, #5
 8003dc2:	eb12 0800 	adds.w	r8, r2, r0
 8003dc6:	eb43 0901 	adc.w	r9, r3, r1
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8003dd6:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8003dda:	ea4f 4329 	mov.w	r3, r9, asr #16
 8003dde:	4613      	mov	r3, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003de6:	4650      	mov	r0, sl
 8003de8:	4659      	mov	r1, fp
 8003dea:	f7fc ff85 	bl	8000cf8 <__aeabi_ldivmod>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4613      	mov	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	461a      	mov	r2, r3
 8003e02:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003e06:	fb02 f501 	mul.w	r5, r2, r1
 8003e0a:	fb00 f403 	mul.w	r4, r0, r3
 8003e0e:	442c      	add	r4, r5
 8003e10:	fba0 2302 	umull	r2, r3, r0, r2
 8003e14:	18e1      	adds	r1, r4, r3
 8003e16:	460b      	mov	r3, r1
 8003e18:	f04f 0000 	mov.w	r0, #0
 8003e1c:	f04f 0100 	mov.w	r1, #0
 8003e20:	0c10      	lsrs	r0, r2, #16
 8003e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003e26:	1419      	asrs	r1, r3, #16
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd f9be 	bl	80011ac <inconvert>
 8003e30:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return sinus(integer); // returns 16.16 decimal
 8003e32:	6938      	ldr	r0, [r7, #16]
 8003e34:	f7ff ff48 	bl	8003cc8 <sinus>
 8003e38:	4603      	mov	r3, r0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e44 <cosrad>:

int32_t cosrad(int32_t t) { // takes int32 16.16 corresponding to radians
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
	int32_t factor = FIX16_DIV(convert(LUTCOUNT),FIX16_MULT(convert(2),PI16)); // N/2pi
 8003e4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e52:	f7fd f99f 	bl	8001194 <convert>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003e5e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003e62:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8003e66:	2002      	movs	r0, #2
 8003e68:	f7fd f994 	bl	8001194 <convert>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461c      	mov	r4, r3
 8003e70:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8003e74:	4622      	mov	r2, r4
 8003e76:	462b      	mov	r3, r5
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	6039      	str	r1, [r7, #0]
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e84:	1912      	adds	r2, r2, r4
 8003e86:	eb45 0303 	adc.w	r3, r5, r3
 8003e8a:	f04f 0000 	mov.w	r0, #0
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	0199      	lsls	r1, r3, #6
 8003e94:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8003e98:	0190      	lsls	r0, r2, #6
 8003e9a:	1812      	adds	r2, r2, r0
 8003e9c:	eb41 0303 	adc.w	r3, r1, r3
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	0159      	lsls	r1, r3, #5
 8003eaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eae:	0150      	lsls	r0, r2, #5
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	1b12      	subs	r2, r2, r4
 8003eb6:	eb63 0305 	sbc.w	r3, r3, r5
 8003eba:	f04f 0000 	mov.w	r0, #0
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	0159      	lsls	r1, r3, #5
 8003ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec8:	0150      	lsls	r0, r2, #5
 8003eca:	eb12 0800 	adds.w	r8, r2, r0
 8003ece:	eb43 0901 	adc.w	r9, r3, r1
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8003ede:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8003ee2:	ea4f 4329 	mov.w	r3, r9, asr #16
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003eee:	4650      	mov	r0, sl
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	f7fc ff01 	bl	8000cf8 <__aeabi_ldivmod>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4613      	mov	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
	int integer = (int)(inconvert((FIX16_MULT(t, factor)))); // 32.0 degree
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4618      	mov	r0, r3
 8003f02:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003f0e:	fb02 f501 	mul.w	r5, r2, r1
 8003f12:	fb00 f403 	mul.w	r4, r0, r3
 8003f16:	442c      	add	r4, r5
 8003f18:	fba0 2302 	umull	r2, r3, r0, r2
 8003f1c:	18e1      	adds	r1, r4, r3
 8003f1e:	460b      	mov	r3, r1
 8003f20:	f04f 0000 	mov.w	r0, #0
 8003f24:	f04f 0100 	mov.w	r1, #0
 8003f28:	0c10      	lsrs	r0, r2, #16
 8003f2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003f2e:	1419      	asrs	r1, r3, #16
 8003f30:	4603      	mov	r3, r0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fd f93a 	bl	80011ac <inconvert>
 8003f38:	6138      	str	r0, [r7, #16]
	//printf("%i,", integer);
	return cosinus(integer); // returns 16.16 decimal
 8003f3a:	6938      	ldr	r0, [r7, #16]
 8003f3c:	f7ff fee8 	bl	8003d10 <cosinus>
 8003f40:	4603      	mov	r3, r0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f4c:	0000      	movs	r0, r0
	...

08003f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f50:	b5b0      	push	{r4, r5, r7, lr}
 8003f52:	b0a6      	sub	sp, #152	; 0x98
 8003f54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f56:	f000 fd40 	bl	80049da <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f5a:	f000 f943 	bl	80041e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f5e:	f000 fa59 	bl	8004414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003f62:	f000 fa0b 	bl	800437c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8003f66:	f000 f9bd 	bl	80042e4 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8003f6a:	f000 f97b 	bl	8004264 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 8003f6e:	4886      	ldr	r0, [pc, #536]	; (8004188 <main+0x238>)
 8003f70:	f7ff fe52 	bl	8003c18 <lsmCtrlReg>
  GPSRead_t GPS = {0,0,0,0};
 8003f74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
  HAL_Delay(10);
 8003f82:	200a      	movs	r0, #10
 8003f84:	f000 fd9a 	bl	8004abc <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4980      	ldr	r1, [pc, #512]	; (800418c <main+0x23c>)
 8003f8c:	4880      	ldr	r0, [pc, #512]	; (8004190 <main+0x240>)
 8003f8e:	f002 ff25 	bl	8006ddc <HAL_UART_Receive_IT>
  LCD_Init();
 8003f92:	f7ff fe16 	bl	8003bc2 <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 8003f96:	487c      	ldr	r0, [pc, #496]	; (8004188 <main+0x238>)
 8003f98:	f7fd fc04 	bl	80017a4 <I2C_Scan>


printf("Running 1616 \r\n");
 8003f9c:	487d      	ldr	r0, [pc, #500]	; (8004194 <main+0x244>)
 8003f9e:	f005 fe53 	bl	8009c48 <puts>
int32_t r = convert(6200); // Earth's radius in fixed point 16.16 format
 8003fa2:	f641 0038 	movw	r0, #6200	; 0x1838
 8003fa6:	f7fd f8f5 	bl	8001194 <convert>
 8003faa:	67f8      	str	r0, [r7, #124]	; 0x7c
printf("r : ");
 8003fac:	487a      	ldr	r0, [pc, #488]	; (8004198 <main+0x248>)
 8003fae:	f005 fdaf 	bl	8009b10 <iprintf>
printFix(r);
 8003fb2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003fb4:	f7fd f8c2 	bl	800113c <printFix>
printf("\r\n");
 8003fb8:	4878      	ldr	r0, [pc, #480]	; (800419c <main+0x24c>)
 8003fba:	f005 fe45 	bl	8009c48 <puts>
int32_t phi16 = convert(45);
 8003fbe:	202d      	movs	r0, #45	; 0x2d
 8003fc0:	f7fd f8e8 	bl	8001194 <convert>
 8003fc4:	67b8      	str	r0, [r7, #120]	; 0x78
int32_t theta16 = convert(45);
 8003fc6:	202d      	movs	r0, #45	; 0x2d
 8003fc8:	f7fd f8e4 	bl	8001194 <convert>
 8003fcc:	6778      	str	r0, [r7, #116]	; 0x74
igrf_time_t time = {.year = 2025, .month = 4, .day = 23, .hour = 0, .minute = 0, .second = 0};
 8003fce:	4a74      	ldr	r2, [pc, #464]	; (80041a0 <main+0x250>)
 8003fd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fd8:	e883 0003 	stmia.w	r3, {r0, r1}
int32_t vector[3];
int status = igrf16(time, theta16, phi16, r, IGRF_GEOCENTRIC, vector);
 8003fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fe0:	9302      	str	r3, [sp, #8]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003fee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003ff2:	c903      	ldmia	r1, {r0, r1}
 8003ff4:	f7fe fd40 	bl	8002a78 <igrf16>
 8003ff8:	6738      	str	r0, [r7, #112]	; 0x70

printf("%i", status);
 8003ffa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003ffc:	4869      	ldr	r0, [pc, #420]	; (80041a4 <main+0x254>)
 8003ffe:	f005 fd87 	bl	8009b10 <iprintf>
for (int i=0; i<3; i++) {
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004008:	e017      	b.n	800403a <main+0xea>
	printf("Res %i: ", i);
 800400a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800400e:	4866      	ldr	r0, [pc, #408]	; (80041a8 <main+0x258>)
 8004010:	f005 fd7e 	bl	8009b10 <iprintf>
	printFix(vector[i]);
 8004014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800401e:	4413      	add	r3, r2
 8004020:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8004024:	4618      	mov	r0, r3
 8004026:	f7fd f889 	bl	800113c <printFix>
	printf("\r\n");
 800402a:	485c      	ldr	r0, [pc, #368]	; (800419c <main+0x24c>)
 800402c:	f005 fe0c 	bl	8009c48 <puts>
for (int i=0; i<3; i++) {
 8004030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004034:	3301      	adds	r3, #1
 8004036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800403a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800403e:	2b02      	cmp	r3, #2
 8004040:	dde3      	ble.n	800400a <main+0xba>
}


printf("Running float\r\n");
 8004042:	485a      	ldr	r0, [pc, #360]	; (80041ac <main+0x25c>)
 8004044:	f005 fe00 	bl	8009c48 <puts>
const igrf_time_t dt = {.year = 2025, .month = 04, .day = 23, 0, 0, 0};
const double latitude = 45; // deg
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	4b58      	ldr	r3, [pc, #352]	; (80041b0 <main+0x260>)
 800404e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
const double longitude = 45; // deg
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	4b56      	ldr	r3, [pc, #344]	; (80041b0 <main+0x260>)
 8004058:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
const double altitude = 6200.0; // km
 800405c:	a348      	add	r3, pc, #288	; (adr r3, 8004180 <main+0x230>)
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
const double x[3] = {latitude, longitude, altitude};
 8004066:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800406a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800406e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004072:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8004076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800407a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
double b[3] = {0.0};
 800407e:	463b      	mov	r3, r7
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	611a      	str	r2, [r3, #16]
 800408c:	615a      	str	r2, [r3, #20]
  bool status1 = igrf(dt, x, IGRF_GEOCENTRIC, b);
 800408e:	f107 0218 	add.w	r2, r7, #24
 8004092:	4948      	ldr	r1, [pc, #288]	; (80041b4 <main+0x264>)
 8004094:	463b      	mov	r3, r7
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2301      	movs	r3, #1
 800409a:	c903      	ldmia	r1, {r0, r1}
 800409c:	f7fd fcc0 	bl	8001a20 <igrf>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (status1)
 80040a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03d      	beq.n	800412a <main+0x1da>
  {
    printf("Inputs: \r\n");
 80040ae:	4842      	ldr	r0, [pc, #264]	; (80041b8 <main+0x268>)
 80040b0:	f005 fdca 	bl	8009c48 <puts>
    printf("  Time      : %d-%d-%d, %d:%d:%d \r\n", dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second);
 80040b4:	4b3f      	ldr	r3, [pc, #252]	; (80041b4 <main+0x264>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	4b3e      	ldr	r3, [pc, #248]	; (80041b4 <main+0x264>)
 80040bc:	789b      	ldrb	r3, [r3, #2]
 80040be:	461c      	mov	r4, r3
 80040c0:	4b3c      	ldr	r3, [pc, #240]	; (80041b4 <main+0x264>)
 80040c2:	78db      	ldrb	r3, [r3, #3]
 80040c4:	461d      	mov	r5, r3
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <main+0x264>)
 80040c8:	791b      	ldrb	r3, [r3, #4]
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <main+0x264>)
 80040ce:	795b      	ldrb	r3, [r3, #5]
 80040d0:	4619      	mov	r1, r3
 80040d2:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <main+0x264>)
 80040d4:	799b      	ldrb	r3, [r3, #6]
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	9101      	str	r1, [sp, #4]
 80040da:	9200      	str	r2, [sp, #0]
 80040dc:	462b      	mov	r3, r5
 80040de:	4622      	mov	r2, r4
 80040e0:	4601      	mov	r1, r0
 80040e2:	4836      	ldr	r0, [pc, #216]	; (80041bc <main+0x26c>)
 80040e4:	f005 fd14 	bl	8009b10 <iprintf>
    printf("  Latitude  : %f deg \r\n", latitude);
 80040e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80040ec:	4834      	ldr	r0, [pc, #208]	; (80041c0 <main+0x270>)
 80040ee:	f005 fd0f 	bl	8009b10 <iprintf>
    printf("  Longitude : %f deg \r\n", longitude);
 80040f2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80040f6:	4833      	ldr	r0, [pc, #204]	; (80041c4 <main+0x274>)
 80040f8:	f005 fd0a 	bl	8009b10 <iprintf>
    printf("  Altitude  : %f km \r\n", altitude);
 80040fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004100:	4831      	ldr	r0, [pc, #196]	; (80041c8 <main+0x278>)
 8004102:	f005 fd05 	bl	8009b10 <iprintf>
    printf("\nOutputs: \r\n");
 8004106:	4831      	ldr	r0, [pc, #196]	; (80041cc <main+0x27c>)
 8004108:	f005 fd9e 	bl	8009c48 <puts>
    printf("  Bn          : %f nT \r\n", b[0]);
 800410c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004110:	482f      	ldr	r0, [pc, #188]	; (80041d0 <main+0x280>)
 8004112:	f005 fcfd 	bl	8009b10 <iprintf>
    printf("  Be          : %f nT \r\n", b[1]);
 8004116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800411a:	482e      	ldr	r0, [pc, #184]	; (80041d4 <main+0x284>)
 800411c:	f005 fcf8 	bl	8009b10 <iprintf>
    printf("  Bd          : %f nT \r\n", b[2]);
 8004120:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004124:	482c      	ldr	r0, [pc, #176]	; (80041d8 <main+0x288>)
 8004126:	f005 fcf3 	bl	8009b10 <iprintf>
    LCD_SendString("Hello STM32!");

    LCD_SetCursor(1, 0);
    LCD_SendString("LCD is working :)");
*/
int i = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  while (1)
  {
	  process_uart_data(&uart_rx_buf, &GPS);
 8004130:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004134:	4619      	mov	r1, r3
 8004136:	4829      	ldr	r0, [pc, #164]	; (80041dc <main+0x28c>)
 8004138:	f7fd fac6 	bl	80016c8 <process_uart_data>
	  HAL_Delay(10);
 800413c:	200a      	movs	r0, #10
 800413e:	f000 fcbd 	bl	8004abc <HAL_Delay>
	  i++;
 8004142:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004146:	3301      	adds	r3, #1
 8004148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  	  if (!(i % 1000)) {
 800414c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004150:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <main+0x290>)
 8004152:	fb83 1302 	smull	r1, r3, r3, r2
 8004156:	1199      	asrs	r1, r3, #6
 8004158:	17d3      	asrs	r3, r2, #31
 800415a:	1acb      	subs	r3, r1, r3
 800415c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e2      	bne.n	8004130 <main+0x1e0>
	  		  i = 0;
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  		  printGPS(GPS);
 8004170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004176:	f7fd fadf 	bl	8001738 <printGPS>
	  process_uart_data(&uart_rx_buf, &GPS);
 800417a:	e7d9      	b.n	8004130 <main+0x1e0>
 800417c:	f3af 8000 	nop.w
 8004180:	00000000 	.word	0x00000000
 8004184:	40b83800 	.word	0x40b83800
 8004188:	20000710 	.word	0x20000710
 800418c:	20000764 	.word	0x20000764
 8004190:	20000768 	.word	0x20000768
 8004194:	08010a24 	.word	0x08010a24
 8004198:	08010a34 	.word	0x08010a34
 800419c:	08010a3c 	.word	0x08010a3c
 80041a0:	08010b38 	.word	0x08010b38
 80041a4:	08010a40 	.word	0x08010a40
 80041a8:	08010a44 	.word	0x08010a44
 80041ac:	08010a50 	.word	0x08010a50
 80041b0:	40468000 	.word	0x40468000
 80041b4:	08012ec0 	.word	0x08012ec0
 80041b8:	08010a60 	.word	0x08010a60
 80041bc:	08010a6c 	.word	0x08010a6c
 80041c0:	08010a90 	.word	0x08010a90
 80041c4:	08010aa8 	.word	0x08010aa8
 80041c8:	08010ac0 	.word	0x08010ac0
 80041cc:	08010ad8 	.word	0x08010ad8
 80041d0:	08010ae4 	.word	0x08010ae4
 80041d4:	08010b00 	.word	0x08010b00
 80041d8:	08010b1c 	.word	0x08010b1c
 80041dc:	20000204 	.word	0x20000204
 80041e0:	10624dd3 	.word	0x10624dd3

080041e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b094      	sub	sp, #80	; 0x50
 80041e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ea:	f107 0318 	add.w	r3, r7, #24
 80041ee:	2238      	movs	r2, #56	; 0x38
 80041f0:	2100      	movs	r1, #0
 80041f2:	4618      	mov	r0, r3
 80041f4:	f004 fe0a 	bl	8008e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004206:	f44f 7000 	mov.w	r0, #512	; 0x200
 800420a:	f001 fd35 	bl	8005c78 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800420e:	2302      	movs	r3, #2
 8004210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004218:	2340      	movs	r3, #64	; 0x40
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800421c:	2300      	movs	r3, #0
 800421e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004220:	f107 0318 	add.w	r3, r7, #24
 8004224:	4618      	mov	r0, r3
 8004226:	f001 fddb 	bl	8005de0 <HAL_RCC_OscConfig>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004230:	f000 f978 	bl	8004524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004234:	230f      	movs	r3, #15
 8004236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004238:	2301      	movs	r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004248:	1d3b      	adds	r3, r7, #4
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f002 f8db 	bl	8006408 <HAL_RCC_ClockConfig>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004258:	f000 f964 	bl	8004524 <Error_Handler>
  }
}
 800425c:	bf00      	nop
 800425e:	3750      	adds	r7, #80	; 0x50
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <MX_I2C3_Init+0x74>)
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <MX_I2C3_Init+0x78>)
 800426c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 800426e:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <MX_I2C3_Init+0x74>)
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <MX_I2C3_Init+0x7c>)
 8004272:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8004274:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <MX_I2C3_Init+0x74>)
 8004276:	2200      	movs	r2, #0
 8004278:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <MX_I2C3_Init+0x74>)
 800427c:	2201      	movs	r2, #1
 800427e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <MX_I2C3_Init+0x74>)
 8004282:	2200      	movs	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <MX_I2C3_Init+0x74>)
 8004288:	2200      	movs	r2, #0
 800428a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <MX_I2C3_Init+0x74>)
 800428e:	2200      	movs	r2, #0
 8004290:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <MX_I2C3_Init+0x74>)
 8004294:	2200      	movs	r2, #0
 8004296:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <MX_I2C3_Init+0x74>)
 800429a:	2200      	movs	r2, #0
 800429c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800429e:	480e      	ldr	r0, [pc, #56]	; (80042d8 <MX_I2C3_Init+0x74>)
 80042a0:	f000 ff98 	bl	80051d4 <HAL_I2C_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80042aa:	f000 f93b 	bl	8004524 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042ae:	2100      	movs	r1, #0
 80042b0:	4809      	ldr	r0, [pc, #36]	; (80042d8 <MX_I2C3_Init+0x74>)
 80042b2:	f001 fc49 	bl	8005b48 <HAL_I2CEx_ConfigAnalogFilter>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80042bc:	f000 f932 	bl	8004524 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80042c0:	2100      	movs	r1, #0
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <MX_I2C3_Init+0x74>)
 80042c4:	f001 fc8b 	bl	8005bde <HAL_I2CEx_ConfigDigitalFilter>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80042ce:	f000 f929 	bl	8004524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000710 	.word	0x20000710
 80042dc:	40007800 	.word	0x40007800
 80042e0:	0010061a 	.word	0x0010061a

080042e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042e8:	4b22      	ldr	r3, [pc, #136]	; (8004374 <MX_USART1_UART_Init+0x90>)
 80042ea:	4a23      	ldr	r2, [pc, #140]	; (8004378 <MX_USART1_UART_Init+0x94>)
 80042ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80042ee:	4b21      	ldr	r3, [pc, #132]	; (8004374 <MX_USART1_UART_Init+0x90>)
 80042f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <MX_USART1_UART_Init+0x90>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <MX_USART1_UART_Init+0x90>)
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004308:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <MX_USART1_UART_Init+0x90>)
 800430a:	220c      	movs	r2, #12
 800430c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430e:	4b19      	ldr	r3, [pc, #100]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <MX_USART1_UART_Init+0x90>)
 800431c:	2200      	movs	r2, #0
 800431e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004320:	4b14      	ldr	r3, [pc, #80]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004322:	2200      	movs	r2, #0
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004326:	4b13      	ldr	r3, [pc, #76]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004328:	2200      	movs	r2, #0
 800432a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800432c:	4811      	ldr	r0, [pc, #68]	; (8004374 <MX_USART1_UART_Init+0x90>)
 800432e:	f002 fc77 	bl	8006c20 <HAL_UART_Init>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004338:	f000 f8f4 	bl	8004524 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800433c:	2100      	movs	r1, #0
 800433e:	480d      	ldr	r0, [pc, #52]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004340:	f004 fc6f 	bl	8008c22 <HAL_UARTEx_SetTxFifoThreshold>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800434a:	f000 f8eb 	bl	8004524 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800434e:	2100      	movs	r1, #0
 8004350:	4808      	ldr	r0, [pc, #32]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004352:	f004 fca4 	bl	8008c9e <HAL_UARTEx_SetRxFifoThreshold>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800435c:	f000 f8e2 	bl	8004524 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004360:	4804      	ldr	r0, [pc, #16]	; (8004374 <MX_USART1_UART_Init+0x90>)
 8004362:	f004 fc25 	bl	8008bb0 <HAL_UARTEx_DisableFifoMode>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800436c:	f000 f8da 	bl	8004524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000768 	.word	0x20000768
 8004378:	40013800 	.word	0x40013800

0800437c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004380:	4b22      	ldr	r3, [pc, #136]	; (800440c <MX_USART2_UART_Init+0x90>)
 8004382:	4a23      	ldr	r2, [pc, #140]	; (8004410 <MX_USART2_UART_Init+0x94>)
 8004384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004386:	4b21      	ldr	r3, [pc, #132]	; (800440c <MX_USART2_UART_Init+0x90>)
 8004388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800438c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <MX_USART2_UART_Init+0x90>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004394:	4b1d      	ldr	r3, [pc, #116]	; (800440c <MX_USART2_UART_Init+0x90>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <MX_USART2_UART_Init+0x90>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043a0:	4b1a      	ldr	r3, [pc, #104]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043a2:	220c      	movs	r2, #12
 80043a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043ac:	4b17      	ldr	r3, [pc, #92]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043b2:	4b16      	ldr	r3, [pc, #88]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043b8:	4b14      	ldr	r3, [pc, #80]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043c4:	4811      	ldr	r0, [pc, #68]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043c6:	f002 fc2b 	bl	8006c20 <HAL_UART_Init>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80043d0:	f000 f8a8 	bl	8004524 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043d4:	2100      	movs	r1, #0
 80043d6:	480d      	ldr	r0, [pc, #52]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043d8:	f004 fc23 	bl	8008c22 <HAL_UARTEx_SetTxFifoThreshold>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80043e2:	f000 f89f 	bl	8004524 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043e6:	2100      	movs	r1, #0
 80043e8:	4808      	ldr	r0, [pc, #32]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043ea:	f004 fc58 	bl	8008c9e <HAL_UARTEx_SetRxFifoThreshold>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80043f4:	f000 f896 	bl	8004524 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80043f8:	4804      	ldr	r0, [pc, #16]	; (800440c <MX_USART2_UART_Init+0x90>)
 80043fa:	f004 fbd9 	bl	8008bb0 <HAL_UARTEx_DisableFifoMode>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004404:	f000 f88e 	bl	8004524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	200007fc 	.word	0x200007fc
 8004410:	40004400 	.word	0x40004400

08004414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441a:	f107 030c 	add.w	r3, r7, #12
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	609a      	str	r2, [r3, #8]
 8004426:	60da      	str	r2, [r3, #12]
 8004428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <MX_GPIO_Init+0xa0>)
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	4a21      	ldr	r2, [pc, #132]	; (80044b4 <MX_GPIO_Init+0xa0>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004436:	4b1f      	ldr	r3, [pc, #124]	; (80044b4 <MX_GPIO_Init+0xa0>)
 8004438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <MX_GPIO_Init+0xa0>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <MX_GPIO_Init+0xa0>)
 8004448:	f043 0302 	orr.w	r3, r3, #2
 800444c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <MX_GPIO_Init+0xa0>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	607b      	str	r3, [r7, #4]
 8004458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800445a:	2200      	movs	r2, #0
 800445c:	2173      	movs	r1, #115	; 0x73
 800445e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004462:	f000 fe9f 	bl	80051a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8004466:	2200      	movs	r2, #0
 8004468:	2108      	movs	r1, #8
 800446a:	4813      	ldr	r0, [pc, #76]	; (80044b8 <MX_GPIO_Init+0xa4>)
 800446c:	f000 fe9a 	bl	80051a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8004470:	2373      	movs	r3, #115	; 0x73
 8004472:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004474:	2301      	movs	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800447c:	2300      	movs	r3, #0
 800447e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	4619      	mov	r1, r3
 8004486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800448a:	f000 fd09 	bl	8004ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800448e:	2308      	movs	r3, #8
 8004490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004492:	2301      	movs	r3, #1
 8004494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449e:	f107 030c 	add.w	r3, r7, #12
 80044a2:	4619      	mov	r1, r3
 80044a4:	4804      	ldr	r0, [pc, #16]	; (80044b8 <MX_GPIO_Init+0xa4>)
 80044a6:	f000 fcfb 	bl	8004ea0 <HAL_GPIO_Init>

}
 80044aa:	bf00      	nop
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	48000400 	.word	0x48000400

080044bc <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4804      	ldr	r0, [pc, #16]	; (80044e4 <_write+0x28>)
 80044d4:	f002 fbf4 	bl	8006cc0 <HAL_UART_Transmit>
    return len;
 80044d8:	687b      	ldr	r3, [r7, #4]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200007fc 	.word	0x200007fc

080044e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <HAL_UART_RxCpltCallback+0x30>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d10a      	bne.n	800450e <HAL_UART_RxCpltCallback+0x26>
		//printf("UART Error: ISR=0x%08lX, SR=0x%08lX\r\n", huart->Instance->ISR, huart->Instance->RQR);
		 RingBuffer_Write(&uart_rx_buf, rx_buffer[0]);
 80044f8:	4b08      	ldr	r3, [pc, #32]	; (800451c <HAL_UART_RxCpltCallback+0x34>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	4619      	mov	r1, r3
 80044fe:	4808      	ldr	r0, [pc, #32]	; (8004520 <HAL_UART_RxCpltCallback+0x38>)
 8004500:	f7fc fe62 	bl	80011c8 <RingBuffer_Write>
		 HAL_UART_Receive_IT(&huart1, rx_buffer, 1);  // Re-arm
 8004504:	2201      	movs	r2, #1
 8004506:	4905      	ldr	r1, [pc, #20]	; (800451c <HAL_UART_RxCpltCallback+0x34>)
 8004508:	4803      	ldr	r0, [pc, #12]	; (8004518 <HAL_UART_RxCpltCallback+0x30>)
 800450a:	f002 fc67 	bl	8006ddc <HAL_UART_Receive_IT>
		 //printf("RX: %c (0x%02X)\r\n", rx_buffer[0], rx_buffer[0]);
	}
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000768 	.word	0x20000768
 800451c:	20000764 	.word	0x20000764
 8004520:	20000204 	.word	0x20000204

08004524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004528:	b672      	cpsid	i
}
 800452a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800452c:	e7fe      	b.n	800452c <Error_Handler+0x8>
	...

08004530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <HAL_MspInit+0x44>)
 8004538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_MspInit+0x44>)
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6613      	str	r3, [r2, #96]	; 0x60
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <HAL_MspInit+0x44>)
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_MspInit+0x44>)
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <HAL_MspInit+0x44>)
 8004554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_MspInit+0x44>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004566:	f001 fc2b 	bl	8005dc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000

08004578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b09c      	sub	sp, #112	; 0x70
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004590:	f107 0318 	add.w	r3, r7, #24
 8004594:	2244      	movs	r2, #68	; 0x44
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f004 fc37 	bl	8008e0c <memset>
  if(hi2c->Instance==I2C3)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2e      	ldr	r2, [pc, #184]	; (800465c <HAL_I2C_MspInit+0xe4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d154      	bne.n	8004652 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80045a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80045ae:	2300      	movs	r3, #0
 80045b0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045b2:	f107 0318 	add.w	r3, r7, #24
 80045b6:	4618      	mov	r0, r3
 80045b8:	f002 f942 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80045c2:	f7ff ffaf 	bl	8004524 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	4a25      	ldr	r2, [pc, #148]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 80045e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e2:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ea:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80045f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045fc:	2312      	movs	r3, #18
 80045fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004604:	2300      	movs	r3, #0
 8004606:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8004608:	2302      	movs	r3, #2
 800460a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004610:	4619      	mov	r1, r3
 8004612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004616:	f000 fc43 	bl	8004ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800461a:	2320      	movs	r3, #32
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800461e:	2312      	movs	r3, #18
 8004620:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	2300      	movs	r3, #0
 8004624:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004626:	2300      	movs	r3, #0
 8004628:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 800462a:	2308      	movs	r3, #8
 800462c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004632:	4619      	mov	r1, r3
 8004634:	480b      	ldr	r0, [pc, #44]	; (8004664 <HAL_I2C_MspInit+0xec>)
 8004636:	f000 fc33 	bl	8004ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	4a08      	ldr	r2, [pc, #32]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 8004640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004644:	6593      	str	r3, [r2, #88]	; 0x58
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_I2C_MspInit+0xe8>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004652:	bf00      	nop
 8004654:	3770      	adds	r7, #112	; 0x70
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40007800 	.word	0x40007800
 8004660:	40021000 	.word	0x40021000
 8004664:	48000400 	.word	0x48000400

08004668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b09c      	sub	sp, #112	; 0x70
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004680:	f107 0318 	add.w	r3, r7, #24
 8004684:	2244      	movs	r2, #68	; 0x44
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fbbf 	bl	8008e0c <memset>
  if(huart->Instance==USART1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_UART_MspInit+0x134>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d140      	bne.n	800471a <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004698:	2301      	movs	r3, #1
 800469a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046a0:	f107 0318 	add.w	r3, r7, #24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 f8cb 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80046b0:	f7ff ff38 	bl	8004524 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046b4:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <HAL_UART_MspInit+0x138>)
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	4a39      	ldr	r2, [pc, #228]	; (80047a0 <HAL_UART_MspInit+0x138>)
 80046ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046be:	6613      	str	r3, [r2, #96]	; 0x60
 80046c0:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_UART_MspInit+0x138>)
 80046c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046cc:	4b34      	ldr	r3, [pc, #208]	; (80047a0 <HAL_UART_MspInit+0x138>)
 80046ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d0:	4a33      	ldr	r2, [pc, #204]	; (80047a0 <HAL_UART_MspInit+0x138>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <HAL_UART_MspInit+0x138>)
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ea:	2302      	movs	r3, #2
 80046ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f2:	2300      	movs	r3, #0
 80046f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046f6:	2307      	movs	r3, #7
 80046f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046fe:	4619      	mov	r1, r3
 8004700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004704:	f000 fbcc 	bl	8004ea0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004708:	2200      	movs	r2, #0
 800470a:	2100      	movs	r1, #0
 800470c:	2025      	movs	r0, #37	; 0x25
 800470e:	f000 fad2 	bl	8004cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004712:	2025      	movs	r0, #37	; 0x25
 8004714:	f000 fae9 	bl	8004cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004718:	e03b      	b.n	8004792 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_UART_MspInit+0x13c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d136      	bne.n	8004792 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004724:	2302      	movs	r3, #2
 8004726:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004728:	2300      	movs	r3, #0
 800472a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800472c:	f107 0318 	add.w	r3, r7, #24
 8004730:	4618      	mov	r0, r3
 8004732:	f002 f885 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800473c:	f7ff fef2 	bl	8004524 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004740:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_UART_MspInit+0x138>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <HAL_UART_MspInit+0x138>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474a:	6593      	str	r3, [r2, #88]	; 0x58
 800474c:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_UART_MspInit+0x138>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <HAL_UART_MspInit+0x138>)
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	4a10      	ldr	r2, [pc, #64]	; (80047a0 <HAL_UART_MspInit+0x138>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004764:	4b0e      	ldr	r3, [pc, #56]	; (80047a0 <HAL_UART_MspInit+0x138>)
 8004766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004770:	230c      	movs	r3, #12
 8004772:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477c:	2300      	movs	r3, #0
 800477e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004780:	2307      	movs	r3, #7
 8004782:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004784:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004788:	4619      	mov	r1, r3
 800478a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800478e:	f000 fb87 	bl	8004ea0 <HAL_GPIO_Init>
}
 8004792:	bf00      	nop
 8004794:	3770      	adds	r7, #112	; 0x70
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40013800 	.word	0x40013800
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40004400 	.word	0x40004400

080047a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047ac:	e7fe      	b.n	80047ac <NMI_Handler+0x4>

080047ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047b2:	e7fe      	b.n	80047b2 <HardFault_Handler+0x4>

080047b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047b8:	e7fe      	b.n	80047b8 <MemManage_Handler+0x4>

080047ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047ba:	b480      	push	{r7}
 80047bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047be:	e7fe      	b.n	80047be <BusFault_Handler+0x4>

080047c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047c4:	e7fe      	b.n	80047c4 <UsageFault_Handler+0x4>

080047c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047f4:	f000 f944 	bl	8004a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}

080047fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004800:	4802      	ldr	r0, [pc, #8]	; (800480c <USART1_IRQHandler+0x10>)
 8004802:	f002 fb37 	bl	8006e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000768 	.word	0x20000768

08004810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
	return 1;
 8004814:	2301      	movs	r3, #1
}
 8004816:	4618      	mov	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_kill>:

int _kill(int pid, int sig)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800482a:	f004 fac5 	bl	8008db8 <__errno>
 800482e:	4603      	mov	r3, r0
 8004830:	2216      	movs	r2, #22
 8004832:	601a      	str	r2, [r3, #0]
	return -1;
 8004834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <_exit>:

void _exit (int status)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004848:	f04f 31ff 	mov.w	r1, #4294967295
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ffe7 	bl	8004820 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004852:	e7fe      	b.n	8004852 <_exit+0x12>

08004854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e00a      	b.n	800487c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004866:	f3af 8000 	nop.w
 800486a:	4601      	mov	r1, r0
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	60ba      	str	r2, [r7, #8]
 8004872:	b2ca      	uxtb	r2, r1
 8004874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3301      	adds	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	dbf0      	blt.n	8004866 <_read+0x12>
	}

return len;
 8004884:	687b      	ldr	r3, [r7, #4]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <_close>:
	}
	return len;
}

int _close(int file)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
	return -1;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048b6:	605a      	str	r2, [r3, #4]
	return 0;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <_isatty>:

int _isatty(int file)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
	return 1;
 80048ce:	2301      	movs	r3, #1
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
	return 0;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <_sbrk+0x5c>)
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <_sbrk+0x60>)
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800490c:	4b13      	ldr	r3, [pc, #76]	; (800495c <_sbrk+0x64>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004914:	4b11      	ldr	r3, [pc, #68]	; (800495c <_sbrk+0x64>)
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <_sbrk+0x68>)
 8004918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <_sbrk+0x64>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	429a      	cmp	r2, r3
 8004926:	d207      	bcs.n	8004938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004928:	f004 fa46 	bl	8008db8 <__errno>
 800492c:	4603      	mov	r3, r0
 800492e:	220c      	movs	r2, #12
 8004930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e009      	b.n	800494c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004938:	4b08      	ldr	r3, [pc, #32]	; (800495c <_sbrk+0x64>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <_sbrk+0x64>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	4a05      	ldr	r2, [pc, #20]	; (800495c <_sbrk+0x64>)
 8004948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800494a:	68fb      	ldr	r3, [r7, #12]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20008000 	.word	0x20008000
 8004958:	00000400 	.word	0x00000400
 800495c:	20000608 	.word	0x20000608
 8004960:	200008a8 	.word	0x200008a8

08004964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <SystemInit+0x20>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	4a05      	ldr	r2, [pc, #20]	; (8004984 <SystemInit+0x20>)
 8004970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004988:	480d      	ldr	r0, [pc, #52]	; (80049c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800498a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800498c:	f7ff ffea 	bl	8004964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004990:	480c      	ldr	r0, [pc, #48]	; (80049c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004992:	490d      	ldr	r1, [pc, #52]	; (80049c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004994:	4a0d      	ldr	r2, [pc, #52]	; (80049cc <LoopForever+0xe>)
  movs r3, #0
 8004996:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004998:	e002      	b.n	80049a0 <LoopCopyDataInit>

0800499a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800499a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800499c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800499e:	3304      	adds	r3, #4

080049a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049a4:	d3f9      	bcc.n	800499a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049a6:	4a0a      	ldr	r2, [pc, #40]	; (80049d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049a8:	4c0a      	ldr	r4, [pc, #40]	; (80049d4 <LoopForever+0x16>)
  movs r3, #0
 80049aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049ac:	e001      	b.n	80049b2 <LoopFillZerobss>

080049ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049b0:	3204      	adds	r2, #4

080049b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049b4:	d3fb      	bcc.n	80049ae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80049b6:	f004 fa05 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049ba:	f7ff fac9 	bl	8003f50 <main>

080049be <LoopForever>:

LoopForever:
    b LoopForever
 80049be:	e7fe      	b.n	80049be <LoopForever>
  ldr   r0, =_estack
 80049c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80049c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049c8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80049cc:	08013a18 	.word	0x08013a18
  ldr r2, =_sbss
 80049d0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80049d4:	200008a4 	.word	0x200008a4

080049d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049d8:	e7fe      	b.n	80049d8 <ADC1_2_IRQHandler>

080049da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049e4:	2003      	movs	r0, #3
 80049e6:	f000 f95b 	bl	8004ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049ea:	200f      	movs	r0, #15
 80049ec:	f000 f80e 	bl	8004a0c <HAL_InitTick>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	71fb      	strb	r3, [r7, #7]
 80049fa:	e001      	b.n	8004a00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049fc:	f7ff fd98 	bl	8004530 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a00:	79fb      	ldrb	r3, [r7, #7]

}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a18:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_InitTick+0x68>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d022      	beq.n	8004a66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <HAL_InitTick+0x6c>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <HAL_InitTick+0x68>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f966 	bl	8004d06 <HAL_SYSTICK_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10f      	bne.n	8004a60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d809      	bhi.n	8004a5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a46:	2200      	movs	r2, #0
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4e:	f000 f932 	bl	8004cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <HAL_InitTick+0x70>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e007      	b.n	8004a6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e004      	b.n	8004a6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
 8004a64:	e001      	b.n	8004a6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000008 	.word	0x20000008
 8004a78:	20000000 	.word	0x20000000
 8004a7c:	20000004 	.word	0x20000004

08004a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_IncTick+0x1c>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_IncTick+0x20>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <HAL_IncTick+0x1c>)
 8004a90:	6013      	str	r3, [r2, #0]
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	20000890 	.word	0x20000890
 8004aa0:	20000008 	.word	0x20000008

08004aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_GetTick+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000890 	.word	0x20000890

08004abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ac4:	f7ff ffee 	bl	8004aa4 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d004      	beq.n	8004ae0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_Delay+0x40>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ae0:	bf00      	nop
 8004ae2:	f7ff ffdf 	bl	8004aa4 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d8f7      	bhi.n	8004ae2 <HAL_Delay+0x26>
  {
  }
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000008 	.word	0x20000008

08004b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <__NVIC_SetPriorityGrouping+0x44>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b32:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <__NVIC_SetPriorityGrouping+0x44>)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	60d3      	str	r3, [r2, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <__NVIC_GetPriorityGrouping+0x18>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 0307 	and.w	r3, r3, #7
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000ed00 	.word	0xe000ed00

08004b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	db0b      	blt.n	8004b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	f003 021f 	and.w	r2, r3, #31
 8004b7c:	4907      	ldr	r1, [pc, #28]	; (8004b9c <__NVIC_EnableIRQ+0x38>)
 8004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2001      	movs	r0, #1
 8004b86:	fa00 f202 	lsl.w	r2, r0, r2
 8004b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000e100 	.word	0xe000e100

08004ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	6039      	str	r1, [r7, #0]
 8004baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	db0a      	blt.n	8004bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	490c      	ldr	r1, [pc, #48]	; (8004bec <__NVIC_SetPriority+0x4c>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	0112      	lsls	r2, r2, #4
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bc8:	e00a      	b.n	8004be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4908      	ldr	r1, [pc, #32]	; (8004bf0 <__NVIC_SetPriority+0x50>)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	3b04      	subs	r3, #4
 8004bd8:	0112      	lsls	r2, r2, #4
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	440b      	add	r3, r1
 8004bde:	761a      	strb	r2, [r3, #24]
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	e000e100 	.word	0xe000e100
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f1c3 0307 	rsb	r3, r3, #7
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	bf28      	it	cs
 8004c12:	2304      	movcs	r3, #4
 8004c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	2b06      	cmp	r3, #6
 8004c1c:	d902      	bls.n	8004c24 <NVIC_EncodePriority+0x30>
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3b03      	subs	r3, #3
 8004c22:	e000      	b.n	8004c26 <NVIC_EncodePriority+0x32>
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c28:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43da      	mvns	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	401a      	ands	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	fa01 f303 	lsl.w	r3, r1, r3
 8004c46:	43d9      	mvns	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c4c:	4313      	orrs	r3, r2
         );
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3724      	adds	r7, #36	; 0x24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c6c:	d301      	bcc.n	8004c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e00f      	b.n	8004c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <SysTick_Config+0x40>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7a:	210f      	movs	r1, #15
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c80:	f7ff ff8e 	bl	8004ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <SysTick_Config+0x40>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <SysTick_Config+0x40>)
 8004c8c:	2207      	movs	r2, #7
 8004c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	e000e010 	.word	0xe000e010

08004ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ff29 	bl	8004b00 <__NVIC_SetPriorityGrouping>
}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cc4:	f7ff ff40 	bl	8004b48 <__NVIC_GetPriorityGrouping>
 8004cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	6978      	ldr	r0, [r7, #20]
 8004cd0:	f7ff ff90 	bl	8004bf4 <NVIC_EncodePriority>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff5f 	bl	8004ba0 <__NVIC_SetPriority>
}
 8004ce2:	bf00      	nop
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ff33 	bl	8004b64 <__NVIC_EnableIRQ>
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff ffa4 	bl	8004c5c <SysTick_Config>
 8004d14:	4603      	mov	r3, r0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d005      	beq.n	8004d42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2204      	movs	r2, #4
 8004d3a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e037      	b.n	8004db2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 020e 	bic.w	r2, r2, #14
 8004d50:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d60:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f003 021f 	and.w	r2, r3, #31
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2101      	movs	r1, #1
 8004d80:	fa01 f202 	lsl.w	r2, r1, r2
 8004d84:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d8e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00c      	beq.n	8004db2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004db0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d00d      	beq.n	8004e04 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2204      	movs	r2, #4
 8004dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	e047      	b.n	8004e94 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 020e 	bic.w	r2, r2, #14
 8004e12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	f003 021f 	and.w	r2, r3, #31
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2101      	movs	r1, #1
 8004e42:	fa01 f202 	lsl.w	r2, r1, r2
 8004e46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
    }
  }
  return status;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eae:	e15a      	b.n	8005166 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 814c 	beq.w	8005160 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d005      	beq.n	8004ee0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d130      	bne.n	8004f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	2203      	movs	r2, #3
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f16:	2201      	movs	r2, #1
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4013      	ands	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f003 0201 	and.w	r2, r3, #1
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d017      	beq.n	8004f7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	2203      	movs	r2, #3
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d123      	bne.n	8004fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	08da      	lsrs	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3208      	adds	r2, #8
 8004f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	220f      	movs	r2, #15
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	08da      	lsrs	r2, r3, #3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3208      	adds	r2, #8
 8004fcc:	6939      	ldr	r1, [r7, #16]
 8004fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	2203      	movs	r2, #3
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 0203 	and.w	r2, r3, #3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80a6 	beq.w	8005160 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005014:	4b5b      	ldr	r3, [pc, #364]	; (8005184 <HAL_GPIO_Init+0x2e4>)
 8005016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005018:	4a5a      	ldr	r2, [pc, #360]	; (8005184 <HAL_GPIO_Init+0x2e4>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6613      	str	r3, [r2, #96]	; 0x60
 8005020:	4b58      	ldr	r3, [pc, #352]	; (8005184 <HAL_GPIO_Init+0x2e4>)
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800502c:	4a56      	ldr	r2, [pc, #344]	; (8005188 <HAL_GPIO_Init+0x2e8>)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	3302      	adds	r3, #2
 8005034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	220f      	movs	r2, #15
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4013      	ands	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005056:	d01f      	beq.n	8005098 <HAL_GPIO_Init+0x1f8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a4c      	ldr	r2, [pc, #304]	; (800518c <HAL_GPIO_Init+0x2ec>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d019      	beq.n	8005094 <HAL_GPIO_Init+0x1f4>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a4b      	ldr	r2, [pc, #300]	; (8005190 <HAL_GPIO_Init+0x2f0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d013      	beq.n	8005090 <HAL_GPIO_Init+0x1f0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a4a      	ldr	r2, [pc, #296]	; (8005194 <HAL_GPIO_Init+0x2f4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00d      	beq.n	800508c <HAL_GPIO_Init+0x1ec>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a49      	ldr	r2, [pc, #292]	; (8005198 <HAL_GPIO_Init+0x2f8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <HAL_GPIO_Init+0x1e8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a48      	ldr	r2, [pc, #288]	; (800519c <HAL_GPIO_Init+0x2fc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <HAL_GPIO_Init+0x1e4>
 8005080:	2305      	movs	r3, #5
 8005082:	e00a      	b.n	800509a <HAL_GPIO_Init+0x1fa>
 8005084:	2306      	movs	r3, #6
 8005086:	e008      	b.n	800509a <HAL_GPIO_Init+0x1fa>
 8005088:	2304      	movs	r3, #4
 800508a:	e006      	b.n	800509a <HAL_GPIO_Init+0x1fa>
 800508c:	2303      	movs	r3, #3
 800508e:	e004      	b.n	800509a <HAL_GPIO_Init+0x1fa>
 8005090:	2302      	movs	r3, #2
 8005092:	e002      	b.n	800509a <HAL_GPIO_Init+0x1fa>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <HAL_GPIO_Init+0x1fa>
 8005098:	2300      	movs	r3, #0
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	f002 0203 	and.w	r2, r2, #3
 80050a0:	0092      	lsls	r2, r2, #2
 80050a2:	4093      	lsls	r3, r2
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050aa:	4937      	ldr	r1, [pc, #220]	; (8005188 <HAL_GPIO_Init+0x2e8>)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	089b      	lsrs	r3, r3, #2
 80050b0:	3302      	adds	r3, #2
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050b8:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <HAL_GPIO_Init+0x300>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050dc:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <HAL_GPIO_Init+0x300>)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_GPIO_Init+0x300>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4013      	ands	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005106:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <HAL_GPIO_Init+0x300>)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800510c:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <HAL_GPIO_Init+0x300>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	43db      	mvns	r3, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005130:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <HAL_GPIO_Init+0x300>)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005136:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_GPIO_Init+0x300>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	43db      	mvns	r3, r3
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800515a:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_GPIO_Init+0x300>)
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	3301      	adds	r3, #1
 8005164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f ae9d 	bne.w	8004eb0 <HAL_GPIO_Init+0x10>
  }
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40021000 	.word	0x40021000
 8005188:	40010000 	.word	0x40010000
 800518c:	48000400 	.word	0x48000400
 8005190:	48000800 	.word	0x48000800
 8005194:	48000c00 	.word	0x48000c00
 8005198:	48001000 	.word	0x48001000
 800519c:	48001400 	.word	0x48001400
 80051a0:	40010400 	.word	0x40010400

080051a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	807b      	strh	r3, [r7, #2]
 80051b0:	4613      	mov	r3, r2
 80051b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051b4:	787b      	ldrb	r3, [r7, #1]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051c0:	e002      	b.n	80051c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e08d      	b.n	8005302 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff f9bc 	bl	8004578 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2224      	movs	r2, #36	; 0x24
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005224:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005234:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d107      	bne.n	800524e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800524a:	609a      	str	r2, [r3, #8]
 800524c:	e006      	b.n	800525c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800525a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d108      	bne.n	8005276 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	e007      	b.n	8005286 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69d9      	ldr	r1, [r3, #28]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	461a      	mov	r2, r3
 8005318:	460b      	mov	r3, r1
 800531a:	817b      	strh	r3, [r7, #10]
 800531c:	4613      	mov	r3, r2
 800531e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b20      	cmp	r3, #32
 800532a:	f040 80fd 	bne.w	8005528 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_I2C_Master_Transmit+0x30>
 8005338:	2302      	movs	r3, #2
 800533a:	e0f6      	b.n	800552a <HAL_I2C_Master_Transmit+0x21e>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005344:	f7ff fbae 	bl	8004aa4 <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	2319      	movs	r3, #25
 8005350:	2201      	movs	r2, #1
 8005352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fa00 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e0e1      	b.n	800552a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2221      	movs	r2, #33	; 0x21
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2210      	movs	r2, #16
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	893a      	ldrh	r2, [r7, #8]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	2bff      	cmp	r3, #255	; 0xff
 8005396:	d906      	bls.n	80053a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800539e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	e007      	b.n	80053b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80053b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d024      	beq.n	8005408 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	781a      	ldrb	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	3301      	adds	r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	8979      	ldrh	r1, [r7, #10]
 80053fa:	4b4e      	ldr	r3, [pc, #312]	; (8005534 <HAL_I2C_Master_Transmit+0x228>)
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fb6f 	bl	8005ae4 <I2C_TransferConfig>
 8005406:	e066      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540c:	b2da      	uxtb	r2, r3
 800540e:	8979      	ldrh	r1, [r7, #10]
 8005410:	4b48      	ldr	r3, [pc, #288]	; (8005534 <HAL_I2C_Master_Transmit+0x228>)
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fb64 	bl	8005ae4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800541c:	e05b      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 f9f3 	bl	800580e <I2C_WaitOnTXISFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e07b      	b.n	800552a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	781a      	ldrb	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d034      	beq.n	80054d6 <HAL_I2C_Master_Transmit+0x1ca>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d130      	bne.n	80054d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2200      	movs	r2, #0
 800547c:	2180      	movs	r1, #128	; 0x80
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f96c 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e04d      	b.n	800552a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	2bff      	cmp	r3, #255	; 0xff
 8005496:	d90e      	bls.n	80054b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	22ff      	movs	r2, #255	; 0xff
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	8979      	ldrh	r1, [r7, #10]
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fb18 	bl	8005ae4 <I2C_TransferConfig>
 80054b4:	e00f      	b.n	80054d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	8979      	ldrh	r1, [r7, #10]
 80054c8:	2300      	movs	r3, #0
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fb07 	bl	8005ae4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d19e      	bne.n	800541e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	6a39      	ldr	r1, [r7, #32]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f9d9 	bl	800589c <I2C_WaitOnSTOPFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e01a      	b.n	800552a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2220      	movs	r2, #32
 80054fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <HAL_I2C_Master_Transmit+0x22c>)
 8005508:	400b      	ands	r3, r1
 800550a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
  }
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	80002000 	.word	0x80002000
 8005538:	fe00e800 	.word	0xfe00e800

0800553c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	; 0x28
 8005540:	af02      	add	r7, sp, #8
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	460b      	mov	r3, r1
 800554a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b20      	cmp	r3, #32
 800555a:	f040 80d6 	bne.w	800570a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556c:	d101      	bne.n	8005572 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
 8005570:	e0cc      	b.n	800570c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_I2C_IsDeviceReady+0x44>
 800557c:	2302      	movs	r3, #2
 800557e:	e0c5      	b.n	800570c <HAL_I2C_IsDeviceReady+0x1d0>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d107      	bne.n	80055ae <HAL_I2C_IsDeviceReady+0x72>
 800559e:	897b      	ldrh	r3, [r7, #10]
 80055a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ac:	e006      	b.n	80055bc <HAL_I2C_IsDeviceReady+0x80>
 80055ae:	897b      	ldrh	r3, [r7, #10]
 80055b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055b8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80055c2:	f7ff fa6f 	bl	8004aa4 <HAL_GetTick>
 80055c6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	bf0c      	ite	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	2300      	movne	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80055f4:	e034      	b.n	8005660 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d01a      	beq.n	8005634 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7ff fa51 	bl	8004aa4 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <HAL_I2C_IsDeviceReady+0xd8>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10f      	bne.n	8005634 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005620:	f043 0220 	orr.w	r2, r3, #32
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e06b      	b.n	800570c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b20      	cmp	r3, #32
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b10      	cmp	r3, #16
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005660:	7ffb      	ldrb	r3, [r7, #31]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <HAL_I2C_IsDeviceReady+0x130>
 8005666:	7fbb      	ldrb	r3, [r7, #30]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0c4      	beq.n	80055f6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b10      	cmp	r3, #16
 8005678:	d01a      	beq.n	80056b0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2200      	movs	r2, #0
 8005682:	2120      	movs	r1, #32
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f869 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e03b      	b.n	800570c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2220      	movs	r2, #32
 800569a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e02d      	b.n	800570c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2200      	movs	r2, #0
 80056b8:	2120      	movs	r1, #32
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f84e 	bl	800575c <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e020      	b.n	800570c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2210      	movs	r2, #16
 80056d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2220      	movs	r2, #32
 80056d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	3301      	adds	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	f63f af56 	bhi.w	8005596 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f6:	f043 0220 	orr.w	r2, r3, #32
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d103      	bne.n	8005732 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d007      	beq.n	8005750 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	619a      	str	r2, [r3, #24]
  }
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576c:	e03b      	b.n	80057e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	6839      	ldr	r1, [r7, #0]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f8d6 	bl	8005924 <I2C_IsErrorOccurred>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e041      	b.n	8005806 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d02d      	beq.n	80057e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578a:	f7ff f98b 	bl	8004aa4 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d122      	bne.n	80057e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d113      	bne.n	80057e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	f043 0220 	orr.w	r2, r3, #32
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e00f      	b.n	8005806 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4013      	ands	r3, r2
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	429a      	cmp	r2, r3
 8005802:	d0b4      	beq.n	800576e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	60f8      	str	r0, [r7, #12]
 8005816:	60b9      	str	r1, [r7, #8]
 8005818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800581a:	e033      	b.n	8005884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f87f 	bl	8005924 <I2C_IsErrorOccurred>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e031      	b.n	8005894 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d025      	beq.n	8005884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005838:	f7ff f934 	bl	8004aa4 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	d302      	bcc.n	800584e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11a      	bne.n	8005884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d013      	beq.n	8005884 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	f043 0220 	orr.w	r2, r3, #32
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e007      	b.n	8005894 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d1c4      	bne.n	800581c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058a8:	e02f      	b.n	800590a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f838 	bl	8005924 <I2C_IsErrorOccurred>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e02d      	b.n	800591a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058be:	f7ff f8f1 	bl	8004aa4 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11a      	bne.n	800590a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d013      	beq.n	800590a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e007      	b.n	800591a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b20      	cmp	r3, #32
 8005916:	d1c8      	bne.n	80058aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b00      	cmp	r3, #0
 800594e:	d068      	beq.n	8005a22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2210      	movs	r2, #16
 8005956:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005958:	e049      	b.n	80059ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d045      	beq.n	80059ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7ff f89f 	bl	8004aa4 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <I2C_IsErrorOccurred+0x54>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d13a      	bne.n	80059ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005982:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800598a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599a:	d121      	bne.n	80059e0 <I2C_IsErrorOccurred+0xbc>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a2:	d01d      	beq.n	80059e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80059a4:	7cfb      	ldrb	r3, [r7, #19]
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d01a      	beq.n	80059e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80059ba:	f7ff f873 	bl	8004aa4 <HAL_GetTick>
 80059be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059c0:	e00e      	b.n	80059e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059c2:	f7ff f86f 	bl	8004aa4 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b19      	cmp	r3, #25
 80059ce:	d907      	bls.n	80059e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	f043 0320 	orr.w	r3, r3, #32
 80059d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80059de:	e006      	b.n	80059ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d1e9      	bne.n	80059c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d003      	beq.n	8005a04 <I2C_IsErrorOccurred+0xe0>
 80059fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0aa      	beq.n	800595a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d103      	bne.n	8005a14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2220      	movs	r2, #32
 8005a12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	f043 0304 	orr.w	r3, r3, #4
 8005a1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00b      	beq.n	8005a6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f043 0308 	orr.w	r3, r3, #8
 8005a5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f043 0302 	orr.w	r3, r3, #2
 8005a7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01c      	beq.n	8005ad2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f7ff fe3b 	bl	8005714 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <I2C_IsErrorOccurred+0x1bc>)
 8005aaa:	400b      	ands	r3, r1
 8005aac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3728      	adds	r7, #40	; 0x28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	fe00e800 	.word	0xfe00e800

08005ae4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	817b      	strh	r3, [r7, #10]
 8005af2:	4613      	mov	r3, r2
 8005af4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005afc:	7a7b      	ldrb	r3, [r7, #9]
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	0d5b      	lsrs	r3, r3, #21
 8005b1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <I2C_TransferConfig+0x60>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	43db      	mvns	r3, r3
 8005b28:	ea02 0103 	and.w	r1, r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	03ff63ff 	.word	0x03ff63ff

08005b48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d138      	bne.n	8005bd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e032      	b.n	8005bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2224      	movs	r2, #36	; 0x24
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f042 0201 	orr.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b085      	sub	sp, #20
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b20      	cmp	r3, #32
 8005bf2:	d139      	bne.n	8005c68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e033      	b.n	8005c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	; 0x24
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d141      	bne.n	8005d0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c86:	4b4b      	ldr	r3, [pc, #300]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c92:	d131      	bne.n	8005cf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c94:	4b47      	ldr	r3, [pc, #284]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9a:	4a46      	ldr	r2, [pc, #280]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ca4:	4b43      	ldr	r3, [pc, #268]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cac:	4a41      	ldr	r2, [pc, #260]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cb4:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2232      	movs	r2, #50	; 0x32
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	4a3f      	ldr	r2, [pc, #252]	; (8005dbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	0c9b      	lsrs	r3, r3, #18
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cca:	e002      	b.n	8005cd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cd2:	4b38      	ldr	r3, [pc, #224]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cde:	d102      	bne.n	8005ce6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f2      	bne.n	8005ccc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ce6:	4b33      	ldr	r3, [pc, #204]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf2:	d158      	bne.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e057      	b.n	8005da8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cf8:	4b2e      	ldr	r3, [pc, #184]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfe:	4a2d      	ldr	r2, [pc, #180]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d08:	e04d      	b.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d10:	d141      	bne.n	8005d96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d12:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1e:	d131      	bne.n	8005d84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d20:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d26:	4a23      	ldr	r2, [pc, #140]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d30:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d38:	4a1e      	ldr	r2, [pc, #120]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d40:	4b1d      	ldr	r3, [pc, #116]	; (8005db8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2232      	movs	r2, #50	; 0x32
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d50:	0c9b      	lsrs	r3, r3, #18
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d56:	e002      	b.n	8005d5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	d102      	bne.n	8005d72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f2      	bne.n	8005d58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d72:	4b10      	ldr	r3, [pc, #64]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7e:	d112      	bne.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e011      	b.n	8005da8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d94:	e007      	b.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d96:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d9e:	4a05      	ldr	r2, [pc, #20]	; (8005db4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005da4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40007000 	.word	0x40007000
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	431bde83 	.word	0x431bde83

08005dc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	4a04      	ldr	r2, [pc, #16]	; (8005ddc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dce:	6093      	str	r3, [r2, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40007000 	.word	0x40007000

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e301      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d075      	beq.n	8005eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dfe:	4ba3      	ldr	r3, [pc, #652]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e08:	4ba0      	ldr	r3, [pc, #640]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0303 	and.w	r3, r3, #3
 8005e10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d102      	bne.n	8005e1e <HAL_RCC_OscConfig+0x3e>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	d002      	beq.n	8005e24 <HAL_RCC_OscConfig+0x44>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d10b      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	4b99      	ldr	r3, [pc, #612]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d05b      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x108>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d157      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e2dc      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e44:	d106      	bne.n	8005e54 <HAL_RCC_OscConfig+0x74>
 8005e46:	4b91      	ldr	r3, [pc, #580]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a90      	ldr	r2, [pc, #576]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e01d      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b8b      	ldr	r3, [pc, #556]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a8a      	ldr	r2, [pc, #552]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b88      	ldr	r3, [pc, #544]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a87      	ldr	r2, [pc, #540]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e78:	4b84      	ldr	r3, [pc, #528]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a83      	ldr	r2, [pc, #524]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b81      	ldr	r3, [pc, #516]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a80      	ldr	r2, [pc, #512]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d013      	beq.n	8005ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fe fe04 	bl	8004aa4 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fe fe00 	bl	8004aa4 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e2a1      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eb2:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0xc0>
 8005ebe:	e014      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fe fdf0 	bl	8004aa4 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec8:	f7fe fdec 	bl	8004aa4 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b64      	cmp	r3, #100	; 0x64
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e28d      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eda:	4b6c      	ldr	r3, [pc, #432]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xe8>
 8005ee6:	e000      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d075      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ef6:	4b65      	ldr	r3, [pc, #404]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f00:	4b62      	ldr	r3, [pc, #392]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	d102      	bne.n	8005f16 <HAL_RCC_OscConfig+0x136>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d002      	beq.n	8005f1c <HAL_RCC_OscConfig+0x13c>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d11f      	bne.n	8005f5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f1c:	4b5b      	ldr	r3, [pc, #364]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_OscConfig+0x154>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e260      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f34:	4b55      	ldr	r3, [pc, #340]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	4952      	ldr	r1, [pc, #328]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f48:	4b51      	ldr	r3, [pc, #324]	; (8006090 <HAL_RCC_OscConfig+0x2b0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fe fd5d 	bl	8004a0c <HAL_InitTick>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d043      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e24c      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d023      	beq.n	8005fac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f64:	4b49      	ldr	r3, [pc, #292]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a48      	ldr	r2, [pc, #288]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fe fd98 	bl	8004aa4 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f78:	f7fe fd94 	bl	8004aa4 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e235      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f8a:	4b40      	ldr	r3, [pc, #256]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f96:	4b3d      	ldr	r3, [pc, #244]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	061b      	lsls	r3, r3, #24
 8005fa4:	4939      	ldr	r1, [pc, #228]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	604b      	str	r3, [r1, #4]
 8005faa:	e01a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fac:	4b37      	ldr	r3, [pc, #220]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a36      	ldr	r2, [pc, #216]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fe fd74 	bl	8004aa4 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc0:	f7fe fd70 	bl	8004aa4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e211      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fd2:	4b2e      	ldr	r3, [pc, #184]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x1e0>
 8005fde:	e000      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fe0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d03c      	beq.n	8006068 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01c      	beq.n	8006030 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff6:	4b25      	ldr	r3, [pc, #148]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ffc:	4a23      	ldr	r2, [pc, #140]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006006:	f7fe fd4d 	bl	8004aa4 <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600e:	f7fe fd49 	bl	8004aa4 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e1ea      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0ef      	beq.n	800600e <HAL_RCC_OscConfig+0x22e>
 800602e:	e01b      	b.n	8006068 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006030:	4b16      	ldr	r3, [pc, #88]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006040:	f7fe fd30 	bl	8004aa4 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006048:	f7fe fd2c 	bl	8004aa4 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e1cd      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 800605c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1ef      	bne.n	8006048 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 80ab 	beq.w	80061cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006076:	2300      	movs	r3, #0
 8006078:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800607a:	4b04      	ldr	r3, [pc, #16]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 800607c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <HAL_RCC_OscConfig+0x2b4>
 8006086:	2301      	movs	r3, #1
 8006088:	e005      	b.n	8006096 <HAL_RCC_OscConfig+0x2b6>
 800608a:	bf00      	nop
 800608c:	40021000 	.word	0x40021000
 8006090:	20000004 	.word	0x20000004
 8006094:	2300      	movs	r3, #0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00d      	beq.n	80060b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	4bad      	ldr	r3, [pc, #692]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609e:	4aac      	ldr	r2, [pc, #688]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80060a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a4:	6593      	str	r3, [r2, #88]	; 0x58
 80060a6:	4baa      	ldr	r3, [pc, #680]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060b2:	2301      	movs	r3, #1
 80060b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060b6:	4ba7      	ldr	r3, [pc, #668]	; (8006354 <HAL_RCC_OscConfig+0x574>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d118      	bne.n	80060f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060c2:	4ba4      	ldr	r3, [pc, #656]	; (8006354 <HAL_RCC_OscConfig+0x574>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4aa3      	ldr	r2, [pc, #652]	; (8006354 <HAL_RCC_OscConfig+0x574>)
 80060c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ce:	f7fe fce9 	bl	8004aa4 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d6:	f7fe fce5 	bl	8004aa4 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e186      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060e8:	4b9a      	ldr	r3, [pc, #616]	; (8006354 <HAL_RCC_OscConfig+0x574>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d108      	bne.n	800610e <HAL_RCC_OscConfig+0x32e>
 80060fc:	4b94      	ldr	r3, [pc, #592]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	4a93      	ldr	r2, [pc, #588]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800610c:	e024      	b.n	8006158 <HAL_RCC_OscConfig+0x378>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d110      	bne.n	8006138 <HAL_RCC_OscConfig+0x358>
 8006116:	4b8e      	ldr	r3, [pc, #568]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	4a8c      	ldr	r2, [pc, #560]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800611e:	f043 0304 	orr.w	r3, r3, #4
 8006122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006126:	4b8a      	ldr	r3, [pc, #552]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	4a88      	ldr	r2, [pc, #544]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006136:	e00f      	b.n	8006158 <HAL_RCC_OscConfig+0x378>
 8006138:	4b85      	ldr	r3, [pc, #532]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	4a84      	ldr	r2, [pc, #528]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006148:	4b81      	ldr	r3, [pc, #516]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	4a80      	ldr	r2, [pc, #512]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006150:	f023 0304 	bic.w	r3, r3, #4
 8006154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d016      	beq.n	800618e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006160:	f7fe fca0 	bl	8004aa4 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006166:	e00a      	b.n	800617e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006168:	f7fe fc9c 	bl	8004aa4 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	f241 3288 	movw	r2, #5000	; 0x1388
 8006176:	4293      	cmp	r3, r2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e13b      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800617e:	4b74      	ldr	r3, [pc, #464]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0ed      	beq.n	8006168 <HAL_RCC_OscConfig+0x388>
 800618c:	e015      	b.n	80061ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618e:	f7fe fc89 	bl	8004aa4 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006194:	e00a      	b.n	80061ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006196:	f7fe fc85 	bl	8004aa4 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e124      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061ac:	4b68      	ldr	r3, [pc, #416]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80061ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1ed      	bne.n	8006196 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061ba:	7ffb      	ldrb	r3, [r7, #31]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d105      	bne.n	80061cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061c0:	4b63      	ldr	r3, [pc, #396]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80061c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c4:	4a62      	ldr	r2, [pc, #392]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80061c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0320 	and.w	r3, r3, #32
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d03c      	beq.n	8006252 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01c      	beq.n	800621a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061e0:	4b5b      	ldr	r3, [pc, #364]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80061e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061e6:	4a5a      	ldr	r2, [pc, #360]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fe fc58 	bl	8004aa4 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061f6:	e008      	b.n	800620a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f8:	f7fe fc54 	bl	8004aa4 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b02      	cmp	r3, #2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e0f5      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800620a:	4b51      	ldr	r3, [pc, #324]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800620c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ef      	beq.n	80061f8 <HAL_RCC_OscConfig+0x418>
 8006218:	e01b      	b.n	8006252 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800621a:	4b4d      	ldr	r3, [pc, #308]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800621c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006220:	4a4b      	ldr	r2, [pc, #300]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006222:	f023 0301 	bic.w	r3, r3, #1
 8006226:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622a:	f7fe fc3b 	bl	8004aa4 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006232:	f7fe fc37 	bl	8004aa4 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e0d8      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006244:	4b42      	ldr	r3, [pc, #264]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1ef      	bne.n	8006232 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80cc 	beq.w	80063f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800625c:	4b3c      	ldr	r3, [pc, #240]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	2b0c      	cmp	r3, #12
 8006266:	f000 8086 	beq.w	8006376 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d15a      	bne.n	8006328 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006272:	4b37      	ldr	r3, [pc, #220]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a36      	ldr	r2, [pc, #216]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 8006278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800627c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fe fc11 	bl	8004aa4 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006286:	f7fe fc0d 	bl	8004aa4 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b02      	cmp	r3, #2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e0ae      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006298:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f0      	bne.n	8006286 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062a4:	4b2a      	ldr	r3, [pc, #168]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <HAL_RCC_OscConfig+0x578>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6a11      	ldr	r1, [r2, #32]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062b4:	3a01      	subs	r2, #1
 80062b6:	0112      	lsls	r2, r2, #4
 80062b8:	4311      	orrs	r1, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80062be:	0212      	lsls	r2, r2, #8
 80062c0:	4311      	orrs	r1, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062c6:	0852      	lsrs	r2, r2, #1
 80062c8:	3a01      	subs	r2, #1
 80062ca:	0552      	lsls	r2, r2, #21
 80062cc:	4311      	orrs	r1, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062d2:	0852      	lsrs	r2, r2, #1
 80062d4:	3a01      	subs	r2, #1
 80062d6:	0652      	lsls	r2, r2, #25
 80062d8:	4311      	orrs	r1, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062de:	06d2      	lsls	r2, r2, #27
 80062e0:	430a      	orrs	r2, r1
 80062e2:	491b      	ldr	r1, [pc, #108]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062e8:	4b19      	ldr	r3, [pc, #100]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a18      	ldr	r2, [pc, #96]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80062ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062f4:	4b16      	ldr	r3, [pc, #88]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	4a15      	ldr	r2, [pc, #84]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 80062fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fe fbd0 	bl	8004aa4 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006308:	f7fe fbcc 	bl	8004aa4 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e06d      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0f0      	beq.n	8006308 <HAL_RCC_OscConfig+0x528>
 8006326:	e065      	b.n	80063f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a08      	ldr	r2, [pc, #32]	; (8006350 <HAL_RCC_OscConfig+0x570>)
 800632e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006334:	f7fe fbb6 	bl	8004aa4 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800633a:	e00f      	b.n	800635c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800633c:	f7fe fbb2 	bl	8004aa4 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d908      	bls.n	800635c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e053      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000
 8006354:	40007000 	.word	0x40007000
 8006358:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800635c:	4b28      	ldr	r3, [pc, #160]	; (8006400 <HAL_RCC_OscConfig+0x620>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e9      	bne.n	800633c <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006368:	4b25      	ldr	r3, [pc, #148]	; (8006400 <HAL_RCC_OscConfig+0x620>)
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	4924      	ldr	r1, [pc, #144]	; (8006400 <HAL_RCC_OscConfig+0x620>)
 800636e:	4b25      	ldr	r3, [pc, #148]	; (8006404 <HAL_RCC_OscConfig+0x624>)
 8006370:	4013      	ands	r3, r2
 8006372:	60cb      	str	r3, [r1, #12]
 8006374:	e03e      	b.n	80063f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e039      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006382:	4b1f      	ldr	r3, [pc, #124]	; (8006400 <HAL_RCC_OscConfig+0x620>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f003 0203 	and.w	r2, r3, #3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	429a      	cmp	r2, r3
 8006394:	d12c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	3b01      	subs	r3, #1
 80063a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d123      	bne.n	80063f0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d11b      	bne.n	80063f0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d113      	bne.n	80063f0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	3b01      	subs	r3, #1
 80063d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d109      	bne.n	80063f0 <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e6:	085b      	lsrs	r3, r3, #1
 80063e8:	3b01      	subs	r3, #1
 80063ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d001      	beq.n	80063f4 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	40021000 	.word	0x40021000
 8006404:	feeefffc 	.word	0xfeeefffc

08006408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e11e      	b.n	800665e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006420:	4b91      	ldr	r3, [pc, #580]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d910      	bls.n	8006450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800642e:	4b8e      	ldr	r3, [pc, #568]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 020f 	bic.w	r2, r3, #15
 8006436:	498c      	ldr	r1, [pc, #560]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	4313      	orrs	r3, r2
 800643c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800643e:	4b8a      	ldr	r3, [pc, #552]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e106      	b.n	800665e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d073      	beq.n	8006544 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b03      	cmp	r3, #3
 8006462:	d129      	bne.n	80064b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006464:	4b81      	ldr	r3, [pc, #516]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0f4      	b.n	800665e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006474:	f000 f99e 	bl	80067b4 <RCC_GetSysClockFreqFromPLLSource>
 8006478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	4a7c      	ldr	r2, [pc, #496]	; (8006670 <HAL_RCC_ClockConfig+0x268>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d93f      	bls.n	8006502 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006482:	4b7a      	ldr	r3, [pc, #488]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006496:	2b00      	cmp	r3, #0
 8006498:	d033      	beq.n	8006502 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d12f      	bne.n	8006502 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064a2:	4b72      	ldr	r3, [pc, #456]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064aa:	4a70      	ldr	r2, [pc, #448]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064b2:	2380      	movs	r3, #128	; 0x80
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e024      	b.n	8006502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d107      	bne.n	80064d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064c0:	4b6a      	ldr	r3, [pc, #424]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e0c6      	b.n	800665e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064d0:	4b66      	ldr	r3, [pc, #408]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e0be      	b.n	800665e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80064e0:	f000 f8ce 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 80064e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4a61      	ldr	r2, [pc, #388]	; (8006670 <HAL_RCC_ClockConfig+0x268>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d909      	bls.n	8006502 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ee:	4b5f      	ldr	r3, [pc, #380]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064f6:	4a5d      	ldr	r2, [pc, #372]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006502:	4b5a      	ldr	r3, [pc, #360]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f023 0203 	bic.w	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4957      	ldr	r1, [pc, #348]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006510:	4313      	orrs	r3, r2
 8006512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006514:	f7fe fac6 	bl	8004aa4 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800651a:	e00a      	b.n	8006532 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800651c:	f7fe fac2 	bl	8004aa4 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f241 3288 	movw	r2, #5000	; 0x1388
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e095      	b.n	800665e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006532:	4b4e      	ldr	r3, [pc, #312]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 020c 	and.w	r2, r3, #12
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	429a      	cmp	r2, r3
 8006542:	d1eb      	bne.n	800651c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d023      	beq.n	8006598 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800655c:	4b43      	ldr	r3, [pc, #268]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	4a42      	ldr	r2, [pc, #264]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006566:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006574:	4b3d      	ldr	r3, [pc, #244]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800657c:	4a3b      	ldr	r2, [pc, #236]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 800657e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006582:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006584:	4b39      	ldr	r3, [pc, #228]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4936      	ldr	r1, [pc, #216]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
 8006596:	e008      	b.n	80065aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b80      	cmp	r3, #128	; 0x80
 800659c:	d105      	bne.n	80065aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800659e:	4b33      	ldr	r3, [pc, #204]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	4a32      	ldr	r2, [pc, #200]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 80065a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065aa:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d21d      	bcs.n	80065f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b8:	4b2b      	ldr	r3, [pc, #172]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f023 020f 	bic.w	r2, r3, #15
 80065c0:	4929      	ldr	r1, [pc, #164]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065c8:	f7fe fa6c 	bl	8004aa4 <HAL_GetTick>
 80065cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ce:	e00a      	b.n	80065e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065d0:	f7fe fa68 	bl	8004aa4 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	f241 3288 	movw	r2, #5000	; 0x1388
 80065de:	4293      	cmp	r3, r2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e03b      	b.n	800665e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e6:	4b20      	ldr	r3, [pc, #128]	; (8006668 <HAL_RCC_ClockConfig+0x260>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d1ed      	bne.n	80065d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006600:	4b1a      	ldr	r3, [pc, #104]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	4917      	ldr	r1, [pc, #92]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 800660e:	4313      	orrs	r3, r2
 8006610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	490f      	ldr	r1, [pc, #60]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 800662e:	4313      	orrs	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006632:	f000 f825 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 8006636:	4602      	mov	r2, r0
 8006638:	4b0c      	ldr	r3, [pc, #48]	; (800666c <HAL_RCC_ClockConfig+0x264>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	490c      	ldr	r1, [pc, #48]	; (8006674 <HAL_RCC_ClockConfig+0x26c>)
 8006644:	5ccb      	ldrb	r3, [r1, r3]
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	fa22 f303 	lsr.w	r3, r2, r3
 800664e:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <HAL_RCC_ClockConfig+0x270>)
 8006650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_RCC_ClockConfig+0x274>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe f9d8 	bl	8004a0c <HAL_InitTick>
 800665c:	4603      	mov	r3, r0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	40022000 	.word	0x40022000
 800666c:	40021000 	.word	0x40021000
 8006670:	04c4b400 	.word	0x04c4b400
 8006674:	08012ec8 	.word	0x08012ec8
 8006678:	20000000 	.word	0x20000000
 800667c:	20000004 	.word	0x20000004

08006680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006686:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b04      	cmp	r3, #4
 8006690:	d102      	bne.n	8006698 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006692:	4b2a      	ldr	r3, [pc, #168]	; (800673c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006694:	613b      	str	r3, [r7, #16]
 8006696:	e047      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006698:	4b27      	ldr	r3, [pc, #156]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d102      	bne.n	80066aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066a4:	4b26      	ldr	r3, [pc, #152]	; (8006740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	e03e      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066aa:	4b23      	ldr	r3, [pc, #140]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
 80066b2:	2b0c      	cmp	r3, #12
 80066b4:	d136      	bne.n	8006724 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066b6:	4b20      	ldr	r3, [pc, #128]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066c0:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	3301      	adds	r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d10c      	bne.n	80066ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066d4:	4a1a      	ldr	r2, [pc, #104]	; (8006740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066de:	68d2      	ldr	r2, [r2, #12]
 80066e0:	0a12      	lsrs	r2, r2, #8
 80066e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	617b      	str	r3, [r7, #20]
      break;
 80066ec:	e00c      	b.n	8006708 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066ee:	4a13      	ldr	r2, [pc, #76]	; (800673c <HAL_RCC_GetSysClockFreq+0xbc>)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f8:	68d2      	ldr	r2, [r2, #12]
 80066fa:	0a12      	lsrs	r2, r2, #8
 80066fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]
      break;
 8006706:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006708:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	0e5b      	lsrs	r3, r3, #25
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	3301      	adds	r3, #1
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	e001      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006728:	693b      	ldr	r3, [r7, #16]
}
 800672a:	4618      	mov	r0, r3
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40021000 	.word	0x40021000
 800673c:	00f42400 	.word	0x00f42400
 8006740:	007a1200 	.word	0x007a1200

08006744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006748:	4b03      	ldr	r3, [pc, #12]	; (8006758 <HAL_RCC_GetHCLKFreq+0x14>)
 800674a:	681b      	ldr	r3, [r3, #0]
}
 800674c:	4618      	mov	r0, r3
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20000000 	.word	0x20000000

0800675c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006760:	f7ff fff0 	bl	8006744 <HAL_RCC_GetHCLKFreq>
 8006764:	4602      	mov	r2, r0
 8006766:	4b06      	ldr	r3, [pc, #24]	; (8006780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	0a1b      	lsrs	r3, r3, #8
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	4904      	ldr	r1, [pc, #16]	; (8006784 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40021000 	.word	0x40021000
 8006784:	08012ed8 	.word	0x08012ed8

08006788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800678c:	f7ff ffda 	bl	8006744 <HAL_RCC_GetHCLKFreq>
 8006790:	4602      	mov	r2, r0
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	0adb      	lsrs	r3, r3, #11
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	4904      	ldr	r1, [pc, #16]	; (80067b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800679e:	5ccb      	ldrb	r3, [r1, r3]
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40021000 	.word	0x40021000
 80067b0:	08012ed8 	.word	0x08012ed8

080067b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067ba:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067c4:	4b1b      	ldr	r3, [pc, #108]	; (8006834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 030f 	and.w	r3, r3, #15
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d10c      	bne.n	80067f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067d8:	4a17      	ldr	r2, [pc, #92]	; (8006838 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e2:	68d2      	ldr	r2, [r2, #12]
 80067e4:	0a12      	lsrs	r2, r2, #8
 80067e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	617b      	str	r3, [r7, #20]
    break;
 80067f0:	e00c      	b.n	800680c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067f2:	4a12      	ldr	r2, [pc, #72]	; (800683c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fa:	4a0e      	ldr	r2, [pc, #56]	; (8006834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067fc:	68d2      	ldr	r2, [r2, #12]
 80067fe:	0a12      	lsrs	r2, r2, #8
 8006800:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006804:	fb02 f303 	mul.w	r3, r2, r3
 8006808:	617b      	str	r3, [r7, #20]
    break;
 800680a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	0e5b      	lsrs	r3, r3, #25
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	3301      	adds	r3, #1
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006826:	687b      	ldr	r3, [r7, #4]
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40021000 	.word	0x40021000
 8006838:	007a1200 	.word	0x007a1200
 800683c:	00f42400 	.word	0x00f42400

08006840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006848:	2300      	movs	r3, #0
 800684a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800684c:	2300      	movs	r3, #0
 800684e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8098 	beq.w	800698e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800685e:	2300      	movs	r3, #0
 8006860:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006862:	4b43      	ldr	r3, [pc, #268]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10d      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800686e:	4b40      	ldr	r3, [pc, #256]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006872:	4a3f      	ldr	r2, [pc, #252]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006878:	6593      	str	r3, [r2, #88]	; 0x58
 800687a:	4b3d      	ldr	r3, [pc, #244]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006882:	60bb      	str	r3, [r7, #8]
 8006884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006886:	2301      	movs	r3, #1
 8006888:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800688a:	4b3a      	ldr	r3, [pc, #232]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a39      	ldr	r2, [pc, #228]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006896:	f7fe f905 	bl	8004aa4 <HAL_GetTick>
 800689a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800689c:	e009      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689e:	f7fe f901 	bl	8004aa4 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d902      	bls.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	74fb      	strb	r3, [r7, #19]
        break;
 80068b0:	e005      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b2:	4b30      	ldr	r3, [pc, #192]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0ef      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068be:	7cfb      	ldrb	r3, [r7, #19]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d159      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068c4:	4b2a      	ldr	r3, [pc, #168]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d01e      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d019      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068e0:	4b23      	ldr	r3, [pc, #140]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068ec:	4b20      	ldr	r3, [pc, #128]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f2:	4a1f      	ldr	r2, [pc, #124]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068fc:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006902:	4a1b      	ldr	r2, [pc, #108]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800690c:	4a18      	ldr	r2, [pc, #96]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d016      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691e:	f7fe f8c1 	bl	8004aa4 <HAL_GetTick>
 8006922:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006924:	e00b      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006926:	f7fe f8bd 	bl	8004aa4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f241 3288 	movw	r2, #5000	; 0x1388
 8006934:	4293      	cmp	r3, r2
 8006936:	d902      	bls.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	74fb      	strb	r3, [r7, #19]
            break;
 800693c:	e006      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0ec      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800694c:	7cfb      	ldrb	r3, [r7, #19]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	4903      	ldr	r1, [pc, #12]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006968:	e008      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800696a:	7cfb      	ldrb	r3, [r7, #19]
 800696c:	74bb      	strb	r3, [r7, #18]
 800696e:	e005      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006970:	40021000 	.word	0x40021000
 8006974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800697c:	7c7b      	ldrb	r3, [r7, #17]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d105      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006982:	4ba6      	ldr	r3, [pc, #664]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006986:	4aa5      	ldr	r2, [pc, #660]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800698c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800699a:	4ba0      	ldr	r3, [pc, #640]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800699c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a0:	f023 0203 	bic.w	r2, r3, #3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	499c      	ldr	r1, [pc, #624]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069bc:	4b97      	ldr	r3, [pc, #604]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	f023 020c 	bic.w	r2, r3, #12
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	4994      	ldr	r1, [pc, #592]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069de:	4b8f      	ldr	r3, [pc, #572]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	498b      	ldr	r1, [pc, #556]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a00:	4b86      	ldr	r3, [pc, #536]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	4983      	ldr	r1, [pc, #524]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a22:	4b7e      	ldr	r3, [pc, #504]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	497a      	ldr	r1, [pc, #488]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a44:	4b75      	ldr	r3, [pc, #468]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	4972      	ldr	r1, [pc, #456]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a66:	4b6d      	ldr	r3, [pc, #436]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	4969      	ldr	r1, [pc, #420]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a88:	4b64      	ldr	r3, [pc, #400]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	4961      	ldr	r1, [pc, #388]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aaa:	4b5c      	ldr	r3, [pc, #368]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	4958      	ldr	r1, [pc, #352]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d015      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006acc:	4b53      	ldr	r3, [pc, #332]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	4950      	ldr	r1, [pc, #320]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aea:	d105      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aec:	4b4b      	ldr	r3, [pc, #300]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4a4a      	ldr	r2, [pc, #296]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b04:	4b45      	ldr	r3, [pc, #276]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	4942      	ldr	r1, [pc, #264]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b22:	d105      	bne.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b24:	4b3d      	ldr	r3, [pc, #244]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	4a3c      	ldr	r2, [pc, #240]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d015      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b3c:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	4934      	ldr	r1, [pc, #208]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b5a:	d105      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b5c:	4b2f      	ldr	r3, [pc, #188]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4a2e      	ldr	r2, [pc, #184]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d015      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b74:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b82:	4926      	ldr	r1, [pc, #152]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b92:	d105      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b94:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d015      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bac:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	4918      	ldr	r1, [pc, #96]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bca:	d105      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bcc:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d015      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006be4:	4b0d      	ldr	r3, [pc, #52]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf2:	490a      	ldr	r1, [pc, #40]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c02:	d105      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	40021000 	.word	0x40021000

08006c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e042      	b.n	8006cb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fd fd0f 	bl	8004668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2224      	movs	r2, #36	; 0x24
 8006c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fee2 	bl	8007a34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fc43 	bl	80074fc <UART_SetConfig>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e01b      	b.n	8006cb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 ff61 	bl	8007b78 <UART_CheckIdleState>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d17b      	bne.n	8006dd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_UART_Transmit+0x26>
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e074      	b.n	8006dd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2221      	movs	r2, #33	; 0x21
 8006cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cfa:	f7fd fed3 	bl	8004aa4 <HAL_GetTick>
 8006cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d18:	d108      	bne.n	8006d2c <HAL_UART_Transmit+0x6c>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	e003      	b.n	8006d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d34:	e030      	b.n	8006d98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 ffc3 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e03d      	b.n	8006dd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10b      	bne.n	8006d76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	3302      	adds	r3, #2
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	e007      	b.n	8006d86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	781a      	ldrb	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1c8      	bne.n	8006d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2200      	movs	r2, #0
 8006dac:	2140      	movs	r1, #64	; 0x40
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 ff8c 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e006      	b.n	8006dd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e000      	b.n	8006dd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006dd2:	2302      	movs	r3, #2
  }
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3720      	adds	r7, #32
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df0:	2b20      	cmp	r3, #32
 8006df2:	d137      	bne.n	8006e64 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <HAL_UART_Receive_IT+0x24>
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e030      	b.n	8006e66 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_UART_Receive_IT+0x94>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01f      	beq.n	8006e54 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d018      	beq.n	8006e54 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	6a3a      	ldr	r2, [r7, #32]
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e6      	bne.n	8006e22 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	461a      	mov	r2, r3
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 ffa4 	bl	8007da8 <UART_Start_Receive_IT>
 8006e60:	4603      	mov	r3, r0
 8006e62:	e000      	b.n	8006e66 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40008000 	.word	0x40008000

08006e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b0ba      	sub	sp, #232	; 0xe8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11b      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d015      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d105      	bne.n	8006ed4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d009      	beq.n	8006ee8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 82e3 	beq.w	80074a4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
      }
      return;
 8006ee6:	e2dd      	b.n	80074a4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 8123 	beq.w	8007138 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ef2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ef6:	4b8d      	ldr	r3, [pc, #564]	; (800712c <HAL_UART_IRQHandler+0x2b8>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006efe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f02:	4b8b      	ldr	r3, [pc, #556]	; (8007130 <HAL_UART_IRQHandler+0x2bc>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 8116 	beq.w	8007138 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d011      	beq.n	8006f3c <HAL_UART_IRQHandler+0xc8>
 8006f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d011      	beq.n	8006f6c <HAL_UART_IRQHandler+0xf8>
 8006f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f62:	f043 0204 	orr.w	r2, r3, #4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d011      	beq.n	8006f9c <HAL_UART_IRQHandler+0x128>
 8006f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f92:	f043 0202 	orr.w	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006fb8:	4b5c      	ldr	r3, [pc, #368]	; (800712c <HAL_UART_IRQHandler+0x2b8>)
 8006fba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fce:	f043 0208 	orr.w	r2, r3, #8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d012      	beq.n	800700a <HAL_UART_IRQHandler+0x196>
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00c      	beq.n	800700a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 8249 	beq.w	80074a8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d013      	beq.n	800704a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d105      	bne.n	800703a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800702e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b40      	cmp	r3, #64	; 0x40
 8007060:	d005      	beq.n	800706e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007066:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800706a:	2b00      	cmp	r3, #0
 800706c:	d054      	beq.n	8007118 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 ffbc 	bl	8007fec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d146      	bne.n	8007110 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3308      	adds	r3, #8
 8007088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800709c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	3308      	adds	r3, #8
 80070aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1d9      	bne.n	8007082 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d017      	beq.n	8007108 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <HAL_UART_IRQHandler+0x2c0>)
 80070e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fd fe71 	bl	8004dd0 <HAL_DMA_Abort_IT>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d019      	beq.n	8007128 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007102:	4610      	mov	r0, r2
 8007104:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007106:	e00f      	b.n	8007128 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f9e1 	bl	80074d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710e:	e00b      	b.n	8007128 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f9dd 	bl	80074d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007116:	e007      	b.n	8007128 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9d9 	bl	80074d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007126:	e1bf      	b.n	80074a8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007128:	bf00      	nop
    return;
 800712a:	e1bd      	b.n	80074a8 <HAL_UART_IRQHandler+0x634>
 800712c:	10000001 	.word	0x10000001
 8007130:	04000120 	.word	0x04000120
 8007134:	080080b9 	.word	0x080080b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800713c:	2b01      	cmp	r3, #1
 800713e:	f040 8153 	bne.w	80073e8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007146:	f003 0310 	and.w	r3, r3, #16
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 814c 	beq.w	80073e8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8145 	beq.w	80073e8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2210      	movs	r2, #16
 8007164:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	f040 80bb 	bne.w	80072ec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007184:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 818f 	beq.w	80074ac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007198:	429a      	cmp	r2, r3
 800719a:	f080 8187 	bcs.w	80074ac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f040 8087 	bne.w	80072ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1da      	bne.n	80071bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3308      	adds	r3, #8
 800720c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800722a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800722e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800723c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e1      	bne.n	8007206 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800726c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e3      	bne.n	8007242 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007298:	f023 0310 	bic.w	r3, r3, #16
 800729c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80072ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e4      	bne.n	8007288 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fd fd2a 	bl	8004d1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f8fd 	bl	80074e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072ea:	e0df      	b.n	80074ac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007306:	b29b      	uxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 80d1 	beq.w	80074b0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800730e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80cc 	beq.w	80074b0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800732c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800733a:	647b      	str	r3, [r7, #68]	; 0x44
 800733c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e4      	bne.n	8007318 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3308      	adds	r3, #8
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	623b      	str	r3, [r7, #32]
   return(result);
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007376:	633a      	str	r2, [r7, #48]	; 0x30
 8007378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800737c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e1      	bne.n	800734e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0310 	bic.w	r3, r3, #16
 80073b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	69b9      	ldr	r1, [r7, #24]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	617b      	str	r3, [r7, #20]
   return(result);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e4      	bne.n	800739e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f87f 	bl	80074e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073e6:	e063      	b.n	80074b0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00e      	beq.n	8007412 <HAL_UART_IRQHandler+0x59e>
 80073f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d008      	beq.n	8007412 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007408:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fbb2 	bl	8008b74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007410:	e051      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800741a:	2b00      	cmp	r3, #0
 800741c:	d014      	beq.n	8007448 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800741e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800742a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800742e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d008      	beq.n	8007448 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743a:	2b00      	cmp	r3, #0
 800743c:	d03a      	beq.n	80074b4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
    }
    return;
 8007446:	e035      	b.n	80074b4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <HAL_UART_IRQHandler+0x5f4>
 8007454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fe3f 	bl	80080e4 <UART_EndTransmit_IT>
    return;
 8007466:	e026      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <HAL_UART_IRQHandler+0x614>
 8007474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007478:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 fb8b 	bl	8008b9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007486:	e016      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d010      	beq.n	80074b6 <HAL_UART_IRQHandler+0x642>
 8007494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007498:	2b00      	cmp	r3, #0
 800749a:	da0c      	bge.n	80074b6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 fb73 	bl	8008b88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074a2:	e008      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
      return;
 80074a4:	bf00      	nop
 80074a6:	e006      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
    return;
 80074a8:	bf00      	nop
 80074aa:	e004      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
      return;
 80074ac:	bf00      	nop
 80074ae:	e002      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
      return;
 80074b0:	bf00      	nop
 80074b2:	e000      	b.n	80074b6 <HAL_UART_IRQHandler+0x642>
    return;
 80074b4:	bf00      	nop
  }
}
 80074b6:	37e8      	adds	r7, #232	; 0xe8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074fc:	b5b0      	push	{r4, r5, r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	4313      	orrs	r3, r2
 800751e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	4baf      	ldr	r3, [pc, #700]	; (80077e4 <UART_SetConfig+0x2e8>)
 8007528:	4013      	ands	r3, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6812      	ldr	r2, [r2, #0]
 800752e:	69f9      	ldr	r1, [r7, #28]
 8007530:	430b      	orrs	r3, r1
 8007532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4aa4      	ldr	r2, [pc, #656]	; (80077e8 <UART_SetConfig+0x2ec>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	4313      	orrs	r3, r2
 8007562:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800756e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	69f9      	ldr	r1, [r7, #28]
 8007578:	430b      	orrs	r3, r1
 800757a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	f023 010f 	bic.w	r1, r3, #15
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a95      	ldr	r2, [pc, #596]	; (80077ec <UART_SetConfig+0x2f0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d120      	bne.n	80075de <UART_SetConfig+0xe2>
 800759c:	4b94      	ldr	r3, [pc, #592]	; (80077f0 <UART_SetConfig+0x2f4>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d816      	bhi.n	80075d8 <UART_SetConfig+0xdc>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <UART_SetConfig+0xb4>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075c1 	.word	0x080075c1
 80075b4:	080075cd 	.word	0x080075cd
 80075b8:	080075c7 	.word	0x080075c7
 80075bc:	080075d3 	.word	0x080075d3
 80075c0:	2301      	movs	r3, #1
 80075c2:	76fb      	strb	r3, [r7, #27]
 80075c4:	e0bc      	b.n	8007740 <UART_SetConfig+0x244>
 80075c6:	2302      	movs	r3, #2
 80075c8:	76fb      	strb	r3, [r7, #27]
 80075ca:	e0b9      	b.n	8007740 <UART_SetConfig+0x244>
 80075cc:	2304      	movs	r3, #4
 80075ce:	76fb      	strb	r3, [r7, #27]
 80075d0:	e0b6      	b.n	8007740 <UART_SetConfig+0x244>
 80075d2:	2308      	movs	r3, #8
 80075d4:	76fb      	strb	r3, [r7, #27]
 80075d6:	e0b3      	b.n	8007740 <UART_SetConfig+0x244>
 80075d8:	2310      	movs	r3, #16
 80075da:	76fb      	strb	r3, [r7, #27]
 80075dc:	e0b0      	b.n	8007740 <UART_SetConfig+0x244>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a84      	ldr	r2, [pc, #528]	; (80077f4 <UART_SetConfig+0x2f8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d132      	bne.n	800764e <UART_SetConfig+0x152>
 80075e8:	4b81      	ldr	r3, [pc, #516]	; (80077f0 <UART_SetConfig+0x2f4>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	f003 030c 	and.w	r3, r3, #12
 80075f2:	2b0c      	cmp	r3, #12
 80075f4:	d828      	bhi.n	8007648 <UART_SetConfig+0x14c>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <UART_SetConfig+0x100>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007631 	.word	0x08007631
 8007600:	08007649 	.word	0x08007649
 8007604:	08007649 	.word	0x08007649
 8007608:	08007649 	.word	0x08007649
 800760c:	0800763d 	.word	0x0800763d
 8007610:	08007649 	.word	0x08007649
 8007614:	08007649 	.word	0x08007649
 8007618:	08007649 	.word	0x08007649
 800761c:	08007637 	.word	0x08007637
 8007620:	08007649 	.word	0x08007649
 8007624:	08007649 	.word	0x08007649
 8007628:	08007649 	.word	0x08007649
 800762c:	08007643 	.word	0x08007643
 8007630:	2300      	movs	r3, #0
 8007632:	76fb      	strb	r3, [r7, #27]
 8007634:	e084      	b.n	8007740 <UART_SetConfig+0x244>
 8007636:	2302      	movs	r3, #2
 8007638:	76fb      	strb	r3, [r7, #27]
 800763a:	e081      	b.n	8007740 <UART_SetConfig+0x244>
 800763c:	2304      	movs	r3, #4
 800763e:	76fb      	strb	r3, [r7, #27]
 8007640:	e07e      	b.n	8007740 <UART_SetConfig+0x244>
 8007642:	2308      	movs	r3, #8
 8007644:	76fb      	strb	r3, [r7, #27]
 8007646:	e07b      	b.n	8007740 <UART_SetConfig+0x244>
 8007648:	2310      	movs	r3, #16
 800764a:	76fb      	strb	r3, [r7, #27]
 800764c:	e078      	b.n	8007740 <UART_SetConfig+0x244>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a69      	ldr	r2, [pc, #420]	; (80077f8 <UART_SetConfig+0x2fc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d120      	bne.n	800769a <UART_SetConfig+0x19e>
 8007658:	4b65      	ldr	r3, [pc, #404]	; (80077f0 <UART_SetConfig+0x2f4>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007662:	2b30      	cmp	r3, #48	; 0x30
 8007664:	d013      	beq.n	800768e <UART_SetConfig+0x192>
 8007666:	2b30      	cmp	r3, #48	; 0x30
 8007668:	d814      	bhi.n	8007694 <UART_SetConfig+0x198>
 800766a:	2b20      	cmp	r3, #32
 800766c:	d009      	beq.n	8007682 <UART_SetConfig+0x186>
 800766e:	2b20      	cmp	r3, #32
 8007670:	d810      	bhi.n	8007694 <UART_SetConfig+0x198>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <UART_SetConfig+0x180>
 8007676:	2b10      	cmp	r3, #16
 8007678:	d006      	beq.n	8007688 <UART_SetConfig+0x18c>
 800767a:	e00b      	b.n	8007694 <UART_SetConfig+0x198>
 800767c:	2300      	movs	r3, #0
 800767e:	76fb      	strb	r3, [r7, #27]
 8007680:	e05e      	b.n	8007740 <UART_SetConfig+0x244>
 8007682:	2302      	movs	r3, #2
 8007684:	76fb      	strb	r3, [r7, #27]
 8007686:	e05b      	b.n	8007740 <UART_SetConfig+0x244>
 8007688:	2304      	movs	r3, #4
 800768a:	76fb      	strb	r3, [r7, #27]
 800768c:	e058      	b.n	8007740 <UART_SetConfig+0x244>
 800768e:	2308      	movs	r3, #8
 8007690:	76fb      	strb	r3, [r7, #27]
 8007692:	e055      	b.n	8007740 <UART_SetConfig+0x244>
 8007694:	2310      	movs	r3, #16
 8007696:	76fb      	strb	r3, [r7, #27]
 8007698:	e052      	b.n	8007740 <UART_SetConfig+0x244>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a57      	ldr	r2, [pc, #348]	; (80077fc <UART_SetConfig+0x300>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d120      	bne.n	80076e6 <UART_SetConfig+0x1ea>
 80076a4:	4b52      	ldr	r3, [pc, #328]	; (80077f0 <UART_SetConfig+0x2f4>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076ae:	2bc0      	cmp	r3, #192	; 0xc0
 80076b0:	d013      	beq.n	80076da <UART_SetConfig+0x1de>
 80076b2:	2bc0      	cmp	r3, #192	; 0xc0
 80076b4:	d814      	bhi.n	80076e0 <UART_SetConfig+0x1e4>
 80076b6:	2b80      	cmp	r3, #128	; 0x80
 80076b8:	d009      	beq.n	80076ce <UART_SetConfig+0x1d2>
 80076ba:	2b80      	cmp	r3, #128	; 0x80
 80076bc:	d810      	bhi.n	80076e0 <UART_SetConfig+0x1e4>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <UART_SetConfig+0x1cc>
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d006      	beq.n	80076d4 <UART_SetConfig+0x1d8>
 80076c6:	e00b      	b.n	80076e0 <UART_SetConfig+0x1e4>
 80076c8:	2300      	movs	r3, #0
 80076ca:	76fb      	strb	r3, [r7, #27]
 80076cc:	e038      	b.n	8007740 <UART_SetConfig+0x244>
 80076ce:	2302      	movs	r3, #2
 80076d0:	76fb      	strb	r3, [r7, #27]
 80076d2:	e035      	b.n	8007740 <UART_SetConfig+0x244>
 80076d4:	2304      	movs	r3, #4
 80076d6:	76fb      	strb	r3, [r7, #27]
 80076d8:	e032      	b.n	8007740 <UART_SetConfig+0x244>
 80076da:	2308      	movs	r3, #8
 80076dc:	76fb      	strb	r3, [r7, #27]
 80076de:	e02f      	b.n	8007740 <UART_SetConfig+0x244>
 80076e0:	2310      	movs	r3, #16
 80076e2:	76fb      	strb	r3, [r7, #27]
 80076e4:	e02c      	b.n	8007740 <UART_SetConfig+0x244>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3f      	ldr	r2, [pc, #252]	; (80077e8 <UART_SetConfig+0x2ec>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d125      	bne.n	800773c <UART_SetConfig+0x240>
 80076f0:	4b3f      	ldr	r3, [pc, #252]	; (80077f0 <UART_SetConfig+0x2f4>)
 80076f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076fe:	d017      	beq.n	8007730 <UART_SetConfig+0x234>
 8007700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007704:	d817      	bhi.n	8007736 <UART_SetConfig+0x23a>
 8007706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800770a:	d00b      	beq.n	8007724 <UART_SetConfig+0x228>
 800770c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007710:	d811      	bhi.n	8007736 <UART_SetConfig+0x23a>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <UART_SetConfig+0x222>
 8007716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771a:	d006      	beq.n	800772a <UART_SetConfig+0x22e>
 800771c:	e00b      	b.n	8007736 <UART_SetConfig+0x23a>
 800771e:	2300      	movs	r3, #0
 8007720:	76fb      	strb	r3, [r7, #27]
 8007722:	e00d      	b.n	8007740 <UART_SetConfig+0x244>
 8007724:	2302      	movs	r3, #2
 8007726:	76fb      	strb	r3, [r7, #27]
 8007728:	e00a      	b.n	8007740 <UART_SetConfig+0x244>
 800772a:	2304      	movs	r3, #4
 800772c:	76fb      	strb	r3, [r7, #27]
 800772e:	e007      	b.n	8007740 <UART_SetConfig+0x244>
 8007730:	2308      	movs	r3, #8
 8007732:	76fb      	strb	r3, [r7, #27]
 8007734:	e004      	b.n	8007740 <UART_SetConfig+0x244>
 8007736:	2310      	movs	r3, #16
 8007738:	76fb      	strb	r3, [r7, #27]
 800773a:	e001      	b.n	8007740 <UART_SetConfig+0x244>
 800773c:	2310      	movs	r3, #16
 800773e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a28      	ldr	r2, [pc, #160]	; (80077e8 <UART_SetConfig+0x2ec>)
 8007746:	4293      	cmp	r3, r2
 8007748:	f040 809e 	bne.w	8007888 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800774c:	7efb      	ldrb	r3, [r7, #27]
 800774e:	2b08      	cmp	r3, #8
 8007750:	d823      	bhi.n	800779a <UART_SetConfig+0x29e>
 8007752:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <UART_SetConfig+0x25c>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	0800777d 	.word	0x0800777d
 800775c:	0800779b 	.word	0x0800779b
 8007760:	08007785 	.word	0x08007785
 8007764:	0800779b 	.word	0x0800779b
 8007768:	0800778b 	.word	0x0800778b
 800776c:	0800779b 	.word	0x0800779b
 8007770:	0800779b 	.word	0x0800779b
 8007774:	0800779b 	.word	0x0800779b
 8007778:	08007793 	.word	0x08007793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800777c:	f7fe ffee 	bl	800675c <HAL_RCC_GetPCLK1Freq>
 8007780:	6178      	str	r0, [r7, #20]
        break;
 8007782:	e00f      	b.n	80077a4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007784:	4b1e      	ldr	r3, [pc, #120]	; (8007800 <UART_SetConfig+0x304>)
 8007786:	617b      	str	r3, [r7, #20]
        break;
 8007788:	e00c      	b.n	80077a4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800778a:	f7fe ff79 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 800778e:	6178      	str	r0, [r7, #20]
        break;
 8007790:	e008      	b.n	80077a4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007796:	617b      	str	r3, [r7, #20]
        break;
 8007798:	e004      	b.n	80077a4 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	76bb      	strb	r3, [r7, #26]
        break;
 80077a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 812c 	beq.w	8007a04 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	4a14      	ldr	r2, [pc, #80]	; (8007804 <UART_SetConfig+0x308>)
 80077b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b6:	461a      	mov	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80077be:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	4613      	mov	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d305      	bcc.n	80077dc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d915      	bls.n	8007808 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	76bb      	strb	r3, [r7, #26]
 80077e0:	e110      	b.n	8007a04 <UART_SetConfig+0x508>
 80077e2:	bf00      	nop
 80077e4:	cfff69f3 	.word	0xcfff69f3
 80077e8:	40008000 	.word	0x40008000
 80077ec:	40013800 	.word	0x40013800
 80077f0:	40021000 	.word	0x40021000
 80077f4:	40004400 	.word	0x40004400
 80077f8:	40004800 	.word	0x40004800
 80077fc:	40004c00 	.word	0x40004c00
 8007800:	00f42400 	.word	0x00f42400
 8007804:	08012ee0 	.word	0x08012ee0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	4618      	mov	r0, r3
 800780c:	f04f 0100 	mov.w	r1, #0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	4a85      	ldr	r2, [pc, #532]	; (8007a2c <UART_SetConfig+0x530>)
 8007816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800781a:	b29a      	uxth	r2, r3
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	f7f9 faba 	bl	8000d98 <__aeabi_uldivmod>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4610      	mov	r0, r2
 800782a:	4619      	mov	r1, r3
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	020b      	lsls	r3, r1, #8
 8007836:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800783a:	0202      	lsls	r2, r0, #8
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	6849      	ldr	r1, [r1, #4]
 8007840:	0849      	lsrs	r1, r1, #1
 8007842:	4608      	mov	r0, r1
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	1814      	adds	r4, r2, r0
 800784a:	eb43 0501 	adc.w	r5, r3, r1
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	461a      	mov	r2, r3
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f9 fa9c 	bl	8000d98 <__aeabi_uldivmod>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4613      	mov	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786e:	d308      	bcc.n	8007882 <UART_SetConfig+0x386>
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007876:	d204      	bcs.n	8007882 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	60da      	str	r2, [r3, #12]
 8007880:	e0c0      	b.n	8007a04 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	76bb      	strb	r3, [r7, #26]
 8007886:	e0bd      	b.n	8007a04 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007890:	d164      	bne.n	800795c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007892:	7efb      	ldrb	r3, [r7, #27]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d828      	bhi.n	80078ea <UART_SetConfig+0x3ee>
 8007898:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <UART_SetConfig+0x3a4>)
 800789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789e:	bf00      	nop
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078cd 	.word	0x080078cd
 80078a8:	080078d5 	.word	0x080078d5
 80078ac:	080078eb 	.word	0x080078eb
 80078b0:	080078db 	.word	0x080078db
 80078b4:	080078eb 	.word	0x080078eb
 80078b8:	080078eb 	.word	0x080078eb
 80078bc:	080078eb 	.word	0x080078eb
 80078c0:	080078e3 	.word	0x080078e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c4:	f7fe ff4a 	bl	800675c <HAL_RCC_GetPCLK1Freq>
 80078c8:	6178      	str	r0, [r7, #20]
        break;
 80078ca:	e013      	b.n	80078f4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078cc:	f7fe ff5c 	bl	8006788 <HAL_RCC_GetPCLK2Freq>
 80078d0:	6178      	str	r0, [r7, #20]
        break;
 80078d2:	e00f      	b.n	80078f4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d4:	4b56      	ldr	r3, [pc, #344]	; (8007a30 <UART_SetConfig+0x534>)
 80078d6:	617b      	str	r3, [r7, #20]
        break;
 80078d8:	e00c      	b.n	80078f4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078da:	f7fe fed1 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 80078de:	6178      	str	r0, [r7, #20]
        break;
 80078e0:	e008      	b.n	80078f4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e6:	617b      	str	r3, [r7, #20]
        break;
 80078e8:	e004      	b.n	80078f4 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	76bb      	strb	r3, [r7, #26]
        break;
 80078f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8084 	beq.w	8007a04 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	4a4a      	ldr	r2, [pc, #296]	; (8007a2c <UART_SetConfig+0x530>)
 8007902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007906:	461a      	mov	r2, r3
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	fbb3 f3f2 	udiv	r3, r3, r2
 800790e:	005a      	lsls	r2, r3, #1
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	441a      	add	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007920:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b0f      	cmp	r3, #15
 8007926:	d916      	bls.n	8007956 <UART_SetConfig+0x45a>
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800792e:	d212      	bcs.n	8007956 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f023 030f 	bic.w	r3, r3, #15
 8007938:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	085b      	lsrs	r3, r3, #1
 800793e:	b29b      	uxth	r3, r3
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	b29a      	uxth	r2, r3
 8007946:	89fb      	ldrh	r3, [r7, #14]
 8007948:	4313      	orrs	r3, r2
 800794a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	89fa      	ldrh	r2, [r7, #14]
 8007952:	60da      	str	r2, [r3, #12]
 8007954:	e056      	b.n	8007a04 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	76bb      	strb	r3, [r7, #26]
 800795a:	e053      	b.n	8007a04 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 800795c:	7efb      	ldrb	r3, [r7, #27]
 800795e:	2b08      	cmp	r3, #8
 8007960:	d827      	bhi.n	80079b2 <UART_SetConfig+0x4b6>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <UART_SetConfig+0x46c>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	0800798d 	.word	0x0800798d
 800796c:	08007995 	.word	0x08007995
 8007970:	0800799d 	.word	0x0800799d
 8007974:	080079b3 	.word	0x080079b3
 8007978:	080079a3 	.word	0x080079a3
 800797c:	080079b3 	.word	0x080079b3
 8007980:	080079b3 	.word	0x080079b3
 8007984:	080079b3 	.word	0x080079b3
 8007988:	080079ab 	.word	0x080079ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800798c:	f7fe fee6 	bl	800675c <HAL_RCC_GetPCLK1Freq>
 8007990:	6178      	str	r0, [r7, #20]
        break;
 8007992:	e013      	b.n	80079bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007994:	f7fe fef8 	bl	8006788 <HAL_RCC_GetPCLK2Freq>
 8007998:	6178      	str	r0, [r7, #20]
        break;
 800799a:	e00f      	b.n	80079bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800799c:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <UART_SetConfig+0x534>)
 800799e:	617b      	str	r3, [r7, #20]
        break;
 80079a0:	e00c      	b.n	80079bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079a2:	f7fe fe6d 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 80079a6:	6178      	str	r0, [r7, #20]
        break;
 80079a8:	e008      	b.n	80079bc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ae:	617b      	str	r3, [r7, #20]
        break;
 80079b0:	e004      	b.n	80079bc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	76bb      	strb	r3, [r7, #26]
        break;
 80079ba:	bf00      	nop
    }

    if (pclk != 0U)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d020      	beq.n	8007a04 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	4a19      	ldr	r2, [pc, #100]	; (8007a2c <UART_SetConfig+0x530>)
 80079c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079cc:	461a      	mov	r2, r3
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	441a      	add	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b0f      	cmp	r3, #15
 80079ea:	d909      	bls.n	8007a00 <UART_SetConfig+0x504>
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f2:	d205      	bcs.n	8007a00 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60da      	str	r2, [r3, #12]
 80079fe:	e001      	b.n	8007a04 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007a20:	7ebb      	ldrb	r3, [r7, #26]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3720      	adds	r7, #32
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bdb0      	pop	{r4, r5, r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08012ee0 	.word	0x08012ee0
 8007a30:	00f42400 	.word	0x00f42400

08007a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	f003 0304 	and.w	r3, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	f003 0310 	and.w	r3, r3, #16
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01a      	beq.n	8007b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b32:	d10a      	bne.n	8007b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	605a      	str	r2, [r3, #4]
  }
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b098      	sub	sp, #96	; 0x60
 8007b7c:	af02      	add	r7, sp, #8
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b88:	f7fc ff8c 	bl	8004aa4 <HAL_GetTick>
 8007b8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d12f      	bne.n	8007bfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f88e 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d022      	beq.n	8007bfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bca:	653b      	str	r3, [r7, #80]	; 0x50
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8007bd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e6      	bne.n	8007bb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e063      	b.n	8007cc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d149      	bne.n	8007c9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c12:	2200      	movs	r2, #0
 8007c14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f857 	bl	8007ccc <UART_WaitOnFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d03c      	beq.n	8007c9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	623b      	str	r3, [r7, #32]
   return(result);
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c42:	633b      	str	r3, [r7, #48]	; 0x30
 8007c44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e6      	bne.n	8007c24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f023 0301 	bic.w	r3, r3, #1
 8007c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c76:	61fa      	str	r2, [r7, #28]
 8007c78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	69b9      	ldr	r1, [r7, #24]
 8007c7c:	69fa      	ldr	r2, [r7, #28]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	617b      	str	r3, [r7, #20]
   return(result);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e012      	b.n	8007cc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3758      	adds	r7, #88	; 0x58
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cdc:	e04f      	b.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce4:	d04b      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce6:	f7fc fedd 	bl	8004aa4 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e04e      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d037      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b80      	cmp	r3, #128	; 0x80
 8007d12:	d034      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d031      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d110      	bne.n	8007d4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f95b 	bl	8007fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e029      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d58:	d111      	bne.n	8007d7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f941 	bl	8007fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e00f      	b.n	8007d9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4013      	ands	r3, r2
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	bf0c      	ite	eq
 8007d8e:	2301      	moveq	r3, #1
 8007d90:	2300      	movne	r3, #0
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d0a0      	beq.n	8007cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b0a3      	sub	sp, #140	; 0x8c
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	88fa      	ldrh	r2, [r7, #6]
 8007dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dda:	d10e      	bne.n	8007dfa <UART_Start_Receive_IT+0x52>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <UART_Start_Receive_IT+0x48>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007dea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dee:	e02d      	b.n	8007e4c <UART_Start_Receive_IT+0xa4>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	22ff      	movs	r2, #255	; 0xff
 8007df4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007df8:	e028      	b.n	8007e4c <UART_Start_Receive_IT+0xa4>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10d      	bne.n	8007e1e <UART_Start_Receive_IT+0x76>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <UART_Start_Receive_IT+0x6c>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	22ff      	movs	r2, #255	; 0xff
 8007e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e12:	e01b      	b.n	8007e4c <UART_Start_Receive_IT+0xa4>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	227f      	movs	r2, #127	; 0x7f
 8007e18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e1c:	e016      	b.n	8007e4c <UART_Start_Receive_IT+0xa4>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e26:	d10d      	bne.n	8007e44 <UART_Start_Receive_IT+0x9c>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <UART_Start_Receive_IT+0x92>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	227f      	movs	r2, #127	; 0x7f
 8007e34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e38:	e008      	b.n	8007e4c <UART_Start_Receive_IT+0xa4>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	223f      	movs	r2, #63	; 0x3f
 8007e3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e42:	e003      	b.n	8007e4c <UART_Start_Receive_IT+0xa4>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2222      	movs	r2, #34	; 0x22
 8007e58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007e80:	673a      	str	r2, [r7, #112]	; 0x70
 8007e82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007e86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e3      	bne.n	8007e5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9c:	d14f      	bne.n	8007f3e <UART_Start_Receive_IT+0x196>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d349      	bcc.n	8007f3e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb2:	d107      	bne.n	8007ec4 <UART_Start_Receive_IT+0x11c>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d103      	bne.n	8007ec4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4a47      	ldr	r2, [pc, #284]	; (8007fdc <UART_Start_Receive_IT+0x234>)
 8007ec0:	675a      	str	r2, [r3, #116]	; 0x74
 8007ec2:	e002      	b.n	8007eca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4a46      	ldr	r2, [pc, #280]	; (8007fe0 <UART_Start_Receive_IT+0x238>)
 8007ec8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01a      	beq.n	8007f08 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ef6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007efa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e4      	bne.n	8007ed2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f28:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e5      	bne.n	8007f08 <UART_Start_Receive_IT+0x160>
 8007f3c:	e046      	b.n	8007fcc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f46:	d107      	bne.n	8007f58 <UART_Start_Receive_IT+0x1b0>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d103      	bne.n	8007f58 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a24      	ldr	r2, [pc, #144]	; (8007fe4 <UART_Start_Receive_IT+0x23c>)
 8007f54:	675a      	str	r2, [r3, #116]	; 0x74
 8007f56:	e002      	b.n	8007f5e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4a23      	ldr	r2, [pc, #140]	; (8007fe8 <UART_Start_Receive_IT+0x240>)
 8007f5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d019      	beq.n	8007f9a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f7a:	677b      	str	r3, [r7, #116]	; 0x74
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f84:	637b      	str	r3, [r7, #52]	; 0x34
 8007f86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e6      	bne.n	8007f66 <UART_Start_Receive_IT+0x1be>
 8007f98:	e018      	b.n	8007fcc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f043 0320 	orr.w	r3, r3, #32
 8007fae:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fb8:	623b      	str	r3, [r7, #32]
 8007fba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	69f9      	ldr	r1, [r7, #28]
 8007fbe:	6a3a      	ldr	r2, [r7, #32]
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e6      	bne.n	8007f9a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	378c      	adds	r7, #140	; 0x8c
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	0800880d 	.word	0x0800880d
 8007fe0:	080084ad 	.word	0x080084ad
 8007fe4:	080082f5 	.word	0x080082f5
 8007fe8:	0800813d 	.word	0x0800813d

08007fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b095      	sub	sp, #84	; 0x54
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008012:	643b      	str	r3, [r7, #64]	; 0x40
 8008014:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1e6      	bne.n	8007ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3308      	adds	r3, #8
 800802c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	61fb      	str	r3, [r7, #28]
   return(result);
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800803c:	f023 0301 	bic.w	r3, r3, #1
 8008040:	64bb      	str	r3, [r7, #72]	; 0x48
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800804a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e3      	bne.n	8008026 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008062:	2b01      	cmp	r3, #1
 8008064:	d118      	bne.n	8008098 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	e853 3f00 	ldrex	r3, [r3]
 8008072:	60bb      	str	r3, [r7, #8]
   return(result);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f023 0310 	bic.w	r3, r3, #16
 800807a:	647b      	str	r3, [r7, #68]	; 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	6979      	ldr	r1, [r7, #20]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	e841 2300 	strex	r3, r2, [r1]
 8008090:	613b      	str	r3, [r7, #16]
   return(result);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e6      	bne.n	8008066 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080ac:	bf00      	nop
 80080ae:	3754      	adds	r7, #84	; 0x54
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7ff f9fa 	bl	80074d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080dc:	bf00      	nop
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008100:	61fb      	str	r3, [r7, #28]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	61bb      	str	r3, [r7, #24]
 800810c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6979      	ldr	r1, [r7, #20]
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	613b      	str	r3, [r7, #16]
   return(result);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e6      	bne.n	80080ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff f9c5 	bl	80074bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008132:	bf00      	nop
 8008134:	3720      	adds	r7, #32
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b09c      	sub	sp, #112	; 0x70
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800814a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008154:	2b22      	cmp	r3, #34	; 0x22
 8008156:	f040 80be 	bne.w	80082d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008164:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008168:	b2d9      	uxtb	r1, r3
 800816a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800816e:	b2da      	uxtb	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008174:	400a      	ands	r2, r1
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 80a1 	bne.w	80082e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80081c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e6      	bne.n	80081a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	667b      	str	r3, [r7, #100]	; 0x64
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081f6:	647a      	str	r2, [r7, #68]	; 0x44
 80081f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a33      	ldr	r2, [pc, #204]	; (80082f0 <UART_RxISR_8BIT+0x1b4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d01f      	beq.n	8008268 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d018      	beq.n	8008268 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	e853 3f00 	ldrex	r3, [r3]
 8008242:	623b      	str	r3, [r7, #32]
   return(result);
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800824a:	663b      	str	r3, [r7, #96]	; 0x60
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	461a      	mov	r2, r3
 8008252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008254:	633b      	str	r3, [r7, #48]	; 0x30
 8008256:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800825a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825c:	e841 2300 	strex	r3, r2, [r1]
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e6      	bne.n	8008236 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826c:	2b01      	cmp	r3, #1
 800826e:	d12e      	bne.n	80082ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	60fb      	str	r3, [r7, #12]
   return(result);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0310 	bic.w	r3, r3, #16
 800828a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008294:	61fb      	str	r3, [r7, #28]
 8008296:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	69b9      	ldr	r1, [r7, #24]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	617b      	str	r3, [r7, #20]
   return(result);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e6      	bne.n	8008276 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b10      	cmp	r3, #16
 80082b4:	d103      	bne.n	80082be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2210      	movs	r2, #16
 80082bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff f90c 	bl	80074e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082cc:	e00b      	b.n	80082e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7fc f90a 	bl	80044e8 <HAL_UART_RxCpltCallback>
}
 80082d4:	e007      	b.n	80082e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699a      	ldr	r2, [r3, #24]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f042 0208 	orr.w	r2, r2, #8
 80082e4:	619a      	str	r2, [r3, #24]
}
 80082e6:	bf00      	nop
 80082e8:	3770      	adds	r7, #112	; 0x70
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40008000 	.word	0x40008000

080082f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b09c      	sub	sp, #112	; 0x70
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008302:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830c:	2b22      	cmp	r3, #34	; 0x22
 800830e:	f040 80be 	bne.w	800848e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008320:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008322:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008326:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800832a:	4013      	ands	r3, r2
 800832c:	b29a      	uxth	r2, r3
 800832e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008336:	1c9a      	adds	r2, r3, #2
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008342:	b29b      	uxth	r3, r3
 8008344:	3b01      	subs	r3, #1
 8008346:	b29a      	uxth	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008354:	b29b      	uxth	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 80a1 	bne.w	800849e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800836a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800836c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008370:	667b      	str	r3, [r7, #100]	; 0x64
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800837a:	657b      	str	r3, [r7, #84]	; 0x54
 800837c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e6      	bne.n	800835c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3308      	adds	r3, #8
 8008394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	663b      	str	r3, [r7, #96]	; 0x60
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083ae:	643a      	str	r2, [r7, #64]	; 0x40
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e5      	bne.n	800838e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a33      	ldr	r2, [pc, #204]	; (80084a8 <UART_RxISR_16BIT+0x1b4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d01f      	beq.n	8008420 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d018      	beq.n	8008420 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800840e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d12e      	bne.n	8008486 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	60bb      	str	r3, [r7, #8]
   return(result);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f023 0310 	bic.w	r3, r3, #16
 8008442:	65bb      	str	r3, [r7, #88]	; 0x58
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6979      	ldr	r1, [r7, #20]
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	613b      	str	r3, [r7, #16]
   return(result);
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e6      	bne.n	800842e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	2b10      	cmp	r3, #16
 800846c:	d103      	bne.n	8008476 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2210      	movs	r2, #16
 8008474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff f830 	bl	80074e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008484:	e00b      	b.n	800849e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7fc f82e 	bl	80044e8 <HAL_UART_RxCpltCallback>
}
 800848c:	e007      	b.n	800849e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	699a      	ldr	r2, [r3, #24]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0208 	orr.w	r2, r2, #8
 800849c:	619a      	str	r2, [r3, #24]
}
 800849e:	bf00      	nop
 80084a0:	3770      	adds	r7, #112	; 0x70
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	40008000 	.word	0x40008000

080084ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b0ac      	sub	sp, #176	; 0xb0
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e2:	2b22      	cmp	r3, #34	; 0x22
 80084e4:	f040 8182 	bne.w	80087ec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084f2:	e125      	b.n	8008740 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008502:	b2d9      	uxtb	r1, r3
 8008504:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008508:	b2da      	uxtb	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850e:	400a      	ands	r2, r1
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800853a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	2b00      	cmp	r3, #0
 8008544:	d053      	beq.n	80085ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d011      	beq.n	8008576 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2201      	movs	r2, #1
 8008564:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856c:	f043 0201 	orr.w	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008576:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d011      	beq.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2202      	movs	r2, #2
 8008594:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859c:	f043 0204 	orr.w	r2, r3, #4
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d011      	beq.n	80085d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80085b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2204      	movs	r2, #4
 80085c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085cc:	f043 0202 	orr.w	r2, r3, #2
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d006      	beq.n	80085ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fe ff75 	bl	80074d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f040 80a2 	bne.w	8008740 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800860a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	461a      	mov	r2, r3
 800861a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800861e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008620:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008624:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800862c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e4      	bne.n	80085fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800863c:	e853 3f00 	ldrex	r3, [r3]
 8008640:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008648:	f023 0301 	bic.w	r3, r3, #1
 800864c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3308      	adds	r3, #8
 8008656:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800865a:	66ba      	str	r2, [r7, #104]	; 0x68
 800865c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008660:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008662:	e841 2300 	strex	r3, r2, [r1]
 8008666:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e1      	bne.n	8008632 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a5f      	ldr	r2, [pc, #380]	; (8008804 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d021      	beq.n	80086d0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d01a      	beq.n	80086d0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80086a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086bc:	657b      	str	r3, [r7, #84]	; 0x54
 80086be:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086c4:	e841 2300 	strex	r3, r2, [r1]
 80086c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e4      	bne.n	800869a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d130      	bne.n	800873a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	f023 0310 	bic.w	r3, r3, #16
 80086f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008700:	643b      	str	r3, [r7, #64]	; 0x40
 8008702:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e4      	bne.n	80086de <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	f003 0310 	and.w	r3, r3, #16
 800871e:	2b10      	cmp	r3, #16
 8008720:	d103      	bne.n	800872a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2210      	movs	r2, #16
 8008728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7fe fed6 	bl	80074e4 <HAL_UARTEx_RxEventCallback>
 8008738:	e002      	b.n	8008740 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fb fed4 	bl	80044e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008740:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008744:	2b00      	cmp	r3, #0
 8008746:	d006      	beq.n	8008756 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b00      	cmp	r3, #0
 8008752:	f47f aecf 	bne.w	80084f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800875c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008760:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008764:	2b00      	cmp	r3, #0
 8008766:	d049      	beq.n	80087fc <UART_RxISR_8BIT_FIFOEN+0x350>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800876e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008772:	429a      	cmp	r2, r3
 8008774:	d242      	bcs.n	80087fc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3308      	adds	r3, #8
 800877c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	61fb      	str	r3, [r7, #28]
   return(result);
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800878c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800879a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e3      	bne.n	8008776 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a15      	ldr	r2, [pc, #84]	; (8008808 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80087b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f043 0320 	orr.w	r3, r3, #32
 80087c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6979      	ldr	r1, [r7, #20]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	613b      	str	r3, [r7, #16]
   return(result);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e4      	bne.n	80087b4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087ea:	e007      	b.n	80087fc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0208 	orr.w	r2, r2, #8
 80087fa:	619a      	str	r2, [r3, #24]
}
 80087fc:	bf00      	nop
 80087fe:	37b0      	adds	r7, #176	; 0xb0
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	40008000 	.word	0x40008000
 8008808:	0800813d 	.word	0x0800813d

0800880c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b0ae      	sub	sp, #184	; 0xb8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800881a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008842:	2b22      	cmp	r3, #34	; 0x22
 8008844:	f040 8186 	bne.w	8008b54 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800884e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008852:	e129      	b.n	8008aa8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008866:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800886a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800886e:	4013      	ands	r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008876:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887c:	1c9a      	adds	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008888:	b29b      	uxth	r3, r3
 800888a:	3b01      	subs	r3, #1
 800888c:	b29a      	uxth	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	69db      	ldr	r3, [r3, #28]
 800889a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800889e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088a2:	f003 0307 	and.w	r3, r3, #7
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d053      	beq.n	8008952 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d011      	beq.n	80088da <UART_RxISR_16BIT_FIFOEN+0xce>
 80088b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2201      	movs	r2, #1
 80088c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d0:	f043 0201 	orr.w	r2, r3, #1
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d011      	beq.n	800890a <UART_RxISR_16BIT_FIFOEN+0xfe>
 80088e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00b      	beq.n	800890a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2202      	movs	r2, #2
 80088f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008900:	f043 0204 	orr.w	r2, r3, #4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800890a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d011      	beq.n	800893a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008916:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2204      	movs	r2, #4
 8008928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008930:	f043 0202 	orr.w	r2, r3, #2
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008940:	2b00      	cmp	r3, #0
 8008942:	d006      	beq.n	8008952 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7fe fdc3 	bl	80074d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	f040 80a4 	bne.w	8008aa8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008968:	e853 3f00 	ldrex	r3, [r3]
 800896c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800896e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008982:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008986:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800898a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800898e:	e841 2300 	strex	r3, r2, [r1]
 8008992:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1e2      	bne.n	8008960 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3308      	adds	r3, #8
 80089a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089a4:	e853 3f00 	ldrex	r3, [r3]
 80089a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80089aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089b0:	f023 0301 	bic.w	r3, r3, #1
 80089b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80089c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e1      	bne.n	800899a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a5f      	ldr	r2, [pc, #380]	; (8008b6c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d021      	beq.n	8008a38 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01a      	beq.n	8008a38 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0a:	e853 3f00 	ldrex	r3, [r3]
 8008a0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a2c:	e841 2300 	strex	r3, r2, [r1]
 8008a30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e4      	bne.n	8008a02 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d130      	bne.n	8008aa2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	f023 0310 	bic.w	r3, r3, #16
 8008a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a68:	647b      	str	r3, [r7, #68]	; 0x44
 8008a6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e4      	bne.n	8008a46 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b10      	cmp	r3, #16
 8008a88:	d103      	bne.n	8008a92 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2210      	movs	r2, #16
 8008a90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7fe fd22 	bl	80074e4 <HAL_UARTEx_RxEventCallback>
 8008aa0:	e002      	b.n	8008aa8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7fb fd20 	bl	80044e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008aa8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d006      	beq.n	8008abe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ab4:	f003 0320 	and.w	r3, r3, #32
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f47f aecb 	bne.w	8008854 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ac4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ac8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d049      	beq.n	8008b64 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ad6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d242      	bcs.n	8008b64 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	623b      	str	r3, [r7, #32]
   return(result);
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b02:	633a      	str	r2, [r7, #48]	; 0x30
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e3      	bne.n	8008ade <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a15      	ldr	r2, [pc, #84]	; (8008b70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008b1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f043 0320 	orr.w	r3, r3, #32
 8008b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b3e:	61fb      	str	r3, [r7, #28]
 8008b40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	69fa      	ldr	r2, [r7, #28]
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e4      	bne.n	8008b1c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b52:	e007      	b.n	8008b64 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0208 	orr.w	r2, r2, #8
 8008b62:	619a      	str	r2, [r3, #24]
}
 8008b64:	bf00      	nop
 8008b66:	37b8      	adds	r7, #184	; 0xb8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40008000 	.word	0x40008000
 8008b70:	080082f5 	.word	0x080082f5

08008b74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e027      	b.n	8008c16 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2224      	movs	r2, #36	; 0x24
 8008bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0201 	bic.w	r2, r2, #1
 8008bec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d101      	bne.n	8008c3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e02d      	b.n	8008c96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2224      	movs	r2, #36	; 0x24
 8008c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0201 	bic.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	430a      	orrs	r2, r1
 8008c74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f850 	bl	8008d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d101      	bne.n	8008cb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e02d      	b.n	8008d12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2224      	movs	r2, #36	; 0x24
 8008cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f022 0201 	bic.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f812 	bl	8008d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d108      	bne.n	8008d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d3c:	e031      	b.n	8008da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d3e:	2308      	movs	r3, #8
 8008d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d42:	2308      	movs	r3, #8
 8008d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	0e5b      	lsrs	r3, r3, #25
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	0f5b      	lsrs	r3, r3, #29
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	7b3a      	ldrb	r2, [r7, #12]
 8008d6a:	4911      	ldr	r1, [pc, #68]	; (8008db0 <UARTEx_SetNbDataToProcess+0x94>)
 8008d6c:	5c8a      	ldrb	r2, [r1, r2]
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d72:	7b3a      	ldrb	r2, [r7, #12]
 8008d74:	490f      	ldr	r1, [pc, #60]	; (8008db4 <UARTEx_SetNbDataToProcess+0x98>)
 8008d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	7b7a      	ldrb	r2, [r7, #13]
 8008d88:	4909      	ldr	r1, [pc, #36]	; (8008db0 <UARTEx_SetNbDataToProcess+0x94>)
 8008d8a:	5c8a      	ldrb	r2, [r1, r2]
 8008d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d90:	7b7a      	ldrb	r2, [r7, #13]
 8008d92:	4908      	ldr	r1, [pc, #32]	; (8008db4 <UARTEx_SetNbDataToProcess+0x98>)
 8008d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008da2:	bf00      	nop
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	08012ef8 	.word	0x08012ef8
 8008db4:	08012f00 	.word	0x08012f00

08008db8 <__errno>:
 8008db8:	4b01      	ldr	r3, [pc, #4]	; (8008dc0 <__errno+0x8>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2000000c 	.word	0x2000000c

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4d0d      	ldr	r5, [pc, #52]	; (8008dfc <__libc_init_array+0x38>)
 8008dc8:	4c0d      	ldr	r4, [pc, #52]	; (8008e00 <__libc_init_array+0x3c>)
 8008dca:	1b64      	subs	r4, r4, r5
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	2600      	movs	r6, #0
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4d0b      	ldr	r5, [pc, #44]	; (8008e04 <__libc_init_array+0x40>)
 8008dd6:	4c0c      	ldr	r4, [pc, #48]	; (8008e08 <__libc_init_array+0x44>)
 8008dd8:	f007 fca0 	bl	801071c <_init>
 8008ddc:	1b64      	subs	r4, r4, r5
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	2600      	movs	r6, #0
 8008de2:	42a6      	cmp	r6, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dec:	4798      	blx	r3
 8008dee:	3601      	adds	r6, #1
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df6:	4798      	blx	r3
 8008df8:	3601      	adds	r6, #1
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	08013a10 	.word	0x08013a10
 8008e00:	08013a10 	.word	0x08013a10
 8008e04:	08013a10 	.word	0x08013a10
 8008e08:	08013a14 	.word	0x08013a14

08008e0c <memset>:
 8008e0c:	4402      	add	r2, r0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d100      	bne.n	8008e16 <memset+0xa>
 8008e14:	4770      	bx	lr
 8008e16:	f803 1b01 	strb.w	r1, [r3], #1
 8008e1a:	e7f9      	b.n	8008e10 <memset+0x4>

08008e1c <__cvt>:
 8008e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e20:	ec55 4b10 	vmov	r4, r5, d0
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	460e      	mov	r6, r1
 8008e28:	4619      	mov	r1, r3
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	bfbb      	ittet	lt
 8008e2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e32:	461d      	movlt	r5, r3
 8008e34:	2300      	movge	r3, #0
 8008e36:	232d      	movlt	r3, #45	; 0x2d
 8008e38:	700b      	strb	r3, [r1, #0]
 8008e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e40:	4691      	mov	r9, r2
 8008e42:	f023 0820 	bic.w	r8, r3, #32
 8008e46:	bfbc      	itt	lt
 8008e48:	4622      	movlt	r2, r4
 8008e4a:	4614      	movlt	r4, r2
 8008e4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e50:	d005      	beq.n	8008e5e <__cvt+0x42>
 8008e52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e56:	d100      	bne.n	8008e5a <__cvt+0x3e>
 8008e58:	3601      	adds	r6, #1
 8008e5a:	2102      	movs	r1, #2
 8008e5c:	e000      	b.n	8008e60 <__cvt+0x44>
 8008e5e:	2103      	movs	r1, #3
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	ab02      	add	r3, sp, #8
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	ec45 4b10 	vmov	d0, r4, r5
 8008e6c:	4653      	mov	r3, sl
 8008e6e:	4632      	mov	r2, r6
 8008e70:	f001 ffc2 	bl	800adf8 <_dtoa_r>
 8008e74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e78:	4607      	mov	r7, r0
 8008e7a:	d102      	bne.n	8008e82 <__cvt+0x66>
 8008e7c:	f019 0f01 	tst.w	r9, #1
 8008e80:	d022      	beq.n	8008ec8 <__cvt+0xac>
 8008e82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e86:	eb07 0906 	add.w	r9, r7, r6
 8008e8a:	d110      	bne.n	8008eae <__cvt+0x92>
 8008e8c:	783b      	ldrb	r3, [r7, #0]
 8008e8e:	2b30      	cmp	r3, #48	; 0x30
 8008e90:	d10a      	bne.n	8008ea8 <__cvt+0x8c>
 8008e92:	2200      	movs	r2, #0
 8008e94:	2300      	movs	r3, #0
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fe4d 	bl	8000b38 <__aeabi_dcmpeq>
 8008e9e:	b918      	cbnz	r0, 8008ea8 <__cvt+0x8c>
 8008ea0:	f1c6 0601 	rsb	r6, r6, #1
 8008ea4:	f8ca 6000 	str.w	r6, [sl]
 8008ea8:	f8da 3000 	ldr.w	r3, [sl]
 8008eac:	4499      	add	r9, r3
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	f7f7 fe3f 	bl	8000b38 <__aeabi_dcmpeq>
 8008eba:	b108      	cbz	r0, 8008ec0 <__cvt+0xa4>
 8008ebc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ec0:	2230      	movs	r2, #48	; 0x30
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	454b      	cmp	r3, r9
 8008ec6:	d307      	bcc.n	8008ed8 <__cvt+0xbc>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ecc:	1bdb      	subs	r3, r3, r7
 8008ece:	4638      	mov	r0, r7
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	b004      	add	sp, #16
 8008ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed8:	1c59      	adds	r1, r3, #1
 8008eda:	9103      	str	r1, [sp, #12]
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	e7f0      	b.n	8008ec2 <__cvt+0xa6>

08008ee0 <__exponent>:
 8008ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2900      	cmp	r1, #0
 8008ee6:	bfb8      	it	lt
 8008ee8:	4249      	neglt	r1, r1
 8008eea:	f803 2b02 	strb.w	r2, [r3], #2
 8008eee:	bfb4      	ite	lt
 8008ef0:	222d      	movlt	r2, #45	; 0x2d
 8008ef2:	222b      	movge	r2, #43	; 0x2b
 8008ef4:	2909      	cmp	r1, #9
 8008ef6:	7042      	strb	r2, [r0, #1]
 8008ef8:	dd2a      	ble.n	8008f50 <__exponent+0x70>
 8008efa:	f10d 0407 	add.w	r4, sp, #7
 8008efe:	46a4      	mov	ip, r4
 8008f00:	270a      	movs	r7, #10
 8008f02:	46a6      	mov	lr, r4
 8008f04:	460a      	mov	r2, r1
 8008f06:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f0a:	fb07 1516 	mls	r5, r7, r6, r1
 8008f0e:	3530      	adds	r5, #48	; 0x30
 8008f10:	2a63      	cmp	r2, #99	; 0x63
 8008f12:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	dcf1      	bgt.n	8008f02 <__exponent+0x22>
 8008f1e:	3130      	adds	r1, #48	; 0x30
 8008f20:	f1ae 0502 	sub.w	r5, lr, #2
 8008f24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f28:	1c44      	adds	r4, r0, #1
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	4561      	cmp	r1, ip
 8008f2e:	d30a      	bcc.n	8008f46 <__exponent+0x66>
 8008f30:	f10d 0209 	add.w	r2, sp, #9
 8008f34:	eba2 020e 	sub.w	r2, r2, lr
 8008f38:	4565      	cmp	r5, ip
 8008f3a:	bf88      	it	hi
 8008f3c:	2200      	movhi	r2, #0
 8008f3e:	4413      	add	r3, r2
 8008f40:	1a18      	subs	r0, r3, r0
 8008f42:	b003      	add	sp, #12
 8008f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f4e:	e7ed      	b.n	8008f2c <__exponent+0x4c>
 8008f50:	2330      	movs	r3, #48	; 0x30
 8008f52:	3130      	adds	r1, #48	; 0x30
 8008f54:	7083      	strb	r3, [r0, #2]
 8008f56:	70c1      	strb	r1, [r0, #3]
 8008f58:	1d03      	adds	r3, r0, #4
 8008f5a:	e7f1      	b.n	8008f40 <__exponent+0x60>

08008f5c <_printf_float>:
 8008f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	ed2d 8b02 	vpush	{d8}
 8008f64:	b08d      	sub	sp, #52	; 0x34
 8008f66:	460c      	mov	r4, r1
 8008f68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f6c:	4616      	mov	r6, r2
 8008f6e:	461f      	mov	r7, r3
 8008f70:	4605      	mov	r5, r0
 8008f72:	f003 fa65 	bl	800c440 <_localeconv_r>
 8008f76:	f8d0 a000 	ldr.w	sl, [r0]
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	f7f7 f95a 	bl	8000234 <strlen>
 8008f80:	2300      	movs	r3, #0
 8008f82:	930a      	str	r3, [sp, #40]	; 0x28
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	9305      	str	r3, [sp, #20]
 8008f88:	f8d8 3000 	ldr.w	r3, [r8]
 8008f8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f90:	3307      	adds	r3, #7
 8008f92:	f023 0307 	bic.w	r3, r3, #7
 8008f96:	f103 0208 	add.w	r2, r3, #8
 8008f9a:	f8c8 2000 	str.w	r2, [r8]
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008fa6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008faa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fae:	9307      	str	r3, [sp, #28]
 8008fb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fb4:	ee08 0a10 	vmov	s16, r0
 8008fb8:	4b9f      	ldr	r3, [pc, #636]	; (8009238 <_printf_float+0x2dc>)
 8008fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc2:	f7f7 fdeb 	bl	8000b9c <__aeabi_dcmpun>
 8008fc6:	bb88      	cbnz	r0, 800902c <_printf_float+0xd0>
 8008fc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fcc:	4b9a      	ldr	r3, [pc, #616]	; (8009238 <_printf_float+0x2dc>)
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	f7f7 fdc5 	bl	8000b60 <__aeabi_dcmple>
 8008fd6:	bb48      	cbnz	r0, 800902c <_printf_float+0xd0>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2300      	movs	r3, #0
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4649      	mov	r1, r9
 8008fe0:	f7f7 fdb4 	bl	8000b4c <__aeabi_dcmplt>
 8008fe4:	b110      	cbz	r0, 8008fec <_printf_float+0x90>
 8008fe6:	232d      	movs	r3, #45	; 0x2d
 8008fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fec:	4b93      	ldr	r3, [pc, #588]	; (800923c <_printf_float+0x2e0>)
 8008fee:	4894      	ldr	r0, [pc, #592]	; (8009240 <_printf_float+0x2e4>)
 8008ff0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ff4:	bf94      	ite	ls
 8008ff6:	4698      	movls	r8, r3
 8008ff8:	4680      	movhi	r8, r0
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	6123      	str	r3, [r4, #16]
 8008ffe:	9b05      	ldr	r3, [sp, #20]
 8009000:	f023 0204 	bic.w	r2, r3, #4
 8009004:	6022      	str	r2, [r4, #0]
 8009006:	f04f 0900 	mov.w	r9, #0
 800900a:	9700      	str	r7, [sp, #0]
 800900c:	4633      	mov	r3, r6
 800900e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009010:	4621      	mov	r1, r4
 8009012:	4628      	mov	r0, r5
 8009014:	f000 f9d8 	bl	80093c8 <_printf_common>
 8009018:	3001      	adds	r0, #1
 800901a:	f040 8090 	bne.w	800913e <_printf_float+0x1e2>
 800901e:	f04f 30ff 	mov.w	r0, #4294967295
 8009022:	b00d      	add	sp, #52	; 0x34
 8009024:	ecbd 8b02 	vpop	{d8}
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	4642      	mov	r2, r8
 800902e:	464b      	mov	r3, r9
 8009030:	4640      	mov	r0, r8
 8009032:	4649      	mov	r1, r9
 8009034:	f7f7 fdb2 	bl	8000b9c <__aeabi_dcmpun>
 8009038:	b140      	cbz	r0, 800904c <_printf_float+0xf0>
 800903a:	464b      	mov	r3, r9
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfbc      	itt	lt
 8009040:	232d      	movlt	r3, #45	; 0x2d
 8009042:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009046:	487f      	ldr	r0, [pc, #508]	; (8009244 <_printf_float+0x2e8>)
 8009048:	4b7f      	ldr	r3, [pc, #508]	; (8009248 <_printf_float+0x2ec>)
 800904a:	e7d1      	b.n	8008ff0 <_printf_float+0x94>
 800904c:	6863      	ldr	r3, [r4, #4]
 800904e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009052:	9206      	str	r2, [sp, #24]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	d13f      	bne.n	80090d8 <_printf_float+0x17c>
 8009058:	2306      	movs	r3, #6
 800905a:	6063      	str	r3, [r4, #4]
 800905c:	9b05      	ldr	r3, [sp, #20]
 800905e:	6861      	ldr	r1, [r4, #4]
 8009060:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009064:	2300      	movs	r3, #0
 8009066:	9303      	str	r3, [sp, #12]
 8009068:	ab0a      	add	r3, sp, #40	; 0x28
 800906a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800906e:	ab09      	add	r3, sp, #36	; 0x24
 8009070:	ec49 8b10 	vmov	d0, r8, r9
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	6022      	str	r2, [r4, #0]
 8009078:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800907c:	4628      	mov	r0, r5
 800907e:	f7ff fecd 	bl	8008e1c <__cvt>
 8009082:	9b06      	ldr	r3, [sp, #24]
 8009084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009086:	2b47      	cmp	r3, #71	; 0x47
 8009088:	4680      	mov	r8, r0
 800908a:	d108      	bne.n	800909e <_printf_float+0x142>
 800908c:	1cc8      	adds	r0, r1, #3
 800908e:	db02      	blt.n	8009096 <_printf_float+0x13a>
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	4299      	cmp	r1, r3
 8009094:	dd41      	ble.n	800911a <_printf_float+0x1be>
 8009096:	f1ab 0b02 	sub.w	fp, fp, #2
 800909a:	fa5f fb8b 	uxtb.w	fp, fp
 800909e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090a2:	d820      	bhi.n	80090e6 <_printf_float+0x18a>
 80090a4:	3901      	subs	r1, #1
 80090a6:	465a      	mov	r2, fp
 80090a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090ac:	9109      	str	r1, [sp, #36]	; 0x24
 80090ae:	f7ff ff17 	bl	8008ee0 <__exponent>
 80090b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090b4:	1813      	adds	r3, r2, r0
 80090b6:	2a01      	cmp	r2, #1
 80090b8:	4681      	mov	r9, r0
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	dc02      	bgt.n	80090c4 <_printf_float+0x168>
 80090be:	6822      	ldr	r2, [r4, #0]
 80090c0:	07d2      	lsls	r2, r2, #31
 80090c2:	d501      	bpl.n	80090c8 <_printf_float+0x16c>
 80090c4:	3301      	adds	r3, #1
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d09c      	beq.n	800900a <_printf_float+0xae>
 80090d0:	232d      	movs	r3, #45	; 0x2d
 80090d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d6:	e798      	b.n	800900a <_printf_float+0xae>
 80090d8:	9a06      	ldr	r2, [sp, #24]
 80090da:	2a47      	cmp	r2, #71	; 0x47
 80090dc:	d1be      	bne.n	800905c <_printf_float+0x100>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1bc      	bne.n	800905c <_printf_float+0x100>
 80090e2:	2301      	movs	r3, #1
 80090e4:	e7b9      	b.n	800905a <_printf_float+0xfe>
 80090e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80090ea:	d118      	bne.n	800911e <_printf_float+0x1c2>
 80090ec:	2900      	cmp	r1, #0
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	dd0b      	ble.n	800910a <_printf_float+0x1ae>
 80090f2:	6121      	str	r1, [r4, #16]
 80090f4:	b913      	cbnz	r3, 80090fc <_printf_float+0x1a0>
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	07d0      	lsls	r0, r2, #31
 80090fa:	d502      	bpl.n	8009102 <_printf_float+0x1a6>
 80090fc:	3301      	adds	r3, #1
 80090fe:	440b      	add	r3, r1
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	65a1      	str	r1, [r4, #88]	; 0x58
 8009104:	f04f 0900 	mov.w	r9, #0
 8009108:	e7de      	b.n	80090c8 <_printf_float+0x16c>
 800910a:	b913      	cbnz	r3, 8009112 <_printf_float+0x1b6>
 800910c:	6822      	ldr	r2, [r4, #0]
 800910e:	07d2      	lsls	r2, r2, #31
 8009110:	d501      	bpl.n	8009116 <_printf_float+0x1ba>
 8009112:	3302      	adds	r3, #2
 8009114:	e7f4      	b.n	8009100 <_printf_float+0x1a4>
 8009116:	2301      	movs	r3, #1
 8009118:	e7f2      	b.n	8009100 <_printf_float+0x1a4>
 800911a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800911e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009120:	4299      	cmp	r1, r3
 8009122:	db05      	blt.n	8009130 <_printf_float+0x1d4>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	6121      	str	r1, [r4, #16]
 8009128:	07d8      	lsls	r0, r3, #31
 800912a:	d5ea      	bpl.n	8009102 <_printf_float+0x1a6>
 800912c:	1c4b      	adds	r3, r1, #1
 800912e:	e7e7      	b.n	8009100 <_printf_float+0x1a4>
 8009130:	2900      	cmp	r1, #0
 8009132:	bfd4      	ite	le
 8009134:	f1c1 0202 	rsble	r2, r1, #2
 8009138:	2201      	movgt	r2, #1
 800913a:	4413      	add	r3, r2
 800913c:	e7e0      	b.n	8009100 <_printf_float+0x1a4>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	055a      	lsls	r2, r3, #21
 8009142:	d407      	bmi.n	8009154 <_printf_float+0x1f8>
 8009144:	6923      	ldr	r3, [r4, #16]
 8009146:	4642      	mov	r2, r8
 8009148:	4631      	mov	r1, r6
 800914a:	4628      	mov	r0, r5
 800914c:	47b8      	blx	r7
 800914e:	3001      	adds	r0, #1
 8009150:	d12c      	bne.n	80091ac <_printf_float+0x250>
 8009152:	e764      	b.n	800901e <_printf_float+0xc2>
 8009154:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009158:	f240 80e0 	bls.w	800931c <_printf_float+0x3c0>
 800915c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009160:	2200      	movs	r2, #0
 8009162:	2300      	movs	r3, #0
 8009164:	f7f7 fce8 	bl	8000b38 <__aeabi_dcmpeq>
 8009168:	2800      	cmp	r0, #0
 800916a:	d034      	beq.n	80091d6 <_printf_float+0x27a>
 800916c:	4a37      	ldr	r2, [pc, #220]	; (800924c <_printf_float+0x2f0>)
 800916e:	2301      	movs	r3, #1
 8009170:	4631      	mov	r1, r6
 8009172:	4628      	mov	r0, r5
 8009174:	47b8      	blx	r7
 8009176:	3001      	adds	r0, #1
 8009178:	f43f af51 	beq.w	800901e <_printf_float+0xc2>
 800917c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009180:	429a      	cmp	r2, r3
 8009182:	db02      	blt.n	800918a <_printf_float+0x22e>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	07d8      	lsls	r0, r3, #31
 8009188:	d510      	bpl.n	80091ac <_printf_float+0x250>
 800918a:	ee18 3a10 	vmov	r3, s16
 800918e:	4652      	mov	r2, sl
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	f43f af41 	beq.w	800901e <_printf_float+0xc2>
 800919c:	f04f 0800 	mov.w	r8, #0
 80091a0:	f104 091a 	add.w	r9, r4, #26
 80091a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a6:	3b01      	subs	r3, #1
 80091a8:	4543      	cmp	r3, r8
 80091aa:	dc09      	bgt.n	80091c0 <_printf_float+0x264>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	079b      	lsls	r3, r3, #30
 80091b0:	f100 8105 	bmi.w	80093be <_printf_float+0x462>
 80091b4:	68e0      	ldr	r0, [r4, #12]
 80091b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b8:	4298      	cmp	r0, r3
 80091ba:	bfb8      	it	lt
 80091bc:	4618      	movlt	r0, r3
 80091be:	e730      	b.n	8009022 <_printf_float+0xc6>
 80091c0:	2301      	movs	r3, #1
 80091c2:	464a      	mov	r2, r9
 80091c4:	4631      	mov	r1, r6
 80091c6:	4628      	mov	r0, r5
 80091c8:	47b8      	blx	r7
 80091ca:	3001      	adds	r0, #1
 80091cc:	f43f af27 	beq.w	800901e <_printf_float+0xc2>
 80091d0:	f108 0801 	add.w	r8, r8, #1
 80091d4:	e7e6      	b.n	80091a4 <_printf_float+0x248>
 80091d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dc39      	bgt.n	8009250 <_printf_float+0x2f4>
 80091dc:	4a1b      	ldr	r2, [pc, #108]	; (800924c <_printf_float+0x2f0>)
 80091de:	2301      	movs	r3, #1
 80091e0:	4631      	mov	r1, r6
 80091e2:	4628      	mov	r0, r5
 80091e4:	47b8      	blx	r7
 80091e6:	3001      	adds	r0, #1
 80091e8:	f43f af19 	beq.w	800901e <_printf_float+0xc2>
 80091ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f0:	4313      	orrs	r3, r2
 80091f2:	d102      	bne.n	80091fa <_printf_float+0x29e>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	07d9      	lsls	r1, r3, #31
 80091f8:	d5d8      	bpl.n	80091ac <_printf_float+0x250>
 80091fa:	ee18 3a10 	vmov	r3, s16
 80091fe:	4652      	mov	r2, sl
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	f43f af09 	beq.w	800901e <_printf_float+0xc2>
 800920c:	f04f 0900 	mov.w	r9, #0
 8009210:	f104 0a1a 	add.w	sl, r4, #26
 8009214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009216:	425b      	negs	r3, r3
 8009218:	454b      	cmp	r3, r9
 800921a:	dc01      	bgt.n	8009220 <_printf_float+0x2c4>
 800921c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921e:	e792      	b.n	8009146 <_printf_float+0x1ea>
 8009220:	2301      	movs	r3, #1
 8009222:	4652      	mov	r2, sl
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	f43f aef7 	beq.w	800901e <_printf_float+0xc2>
 8009230:	f109 0901 	add.w	r9, r9, #1
 8009234:	e7ee      	b.n	8009214 <_printf_float+0x2b8>
 8009236:	bf00      	nop
 8009238:	7fefffff 	.word	0x7fefffff
 800923c:	08012f0c 	.word	0x08012f0c
 8009240:	08012f10 	.word	0x08012f10
 8009244:	08012f18 	.word	0x08012f18
 8009248:	08012f14 	.word	0x08012f14
 800924c:	08012f1c 	.word	0x08012f1c
 8009250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009254:	429a      	cmp	r2, r3
 8009256:	bfa8      	it	ge
 8009258:	461a      	movge	r2, r3
 800925a:	2a00      	cmp	r2, #0
 800925c:	4691      	mov	r9, r2
 800925e:	dc37      	bgt.n	80092d0 <_printf_float+0x374>
 8009260:	f04f 0b00 	mov.w	fp, #0
 8009264:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009268:	f104 021a 	add.w	r2, r4, #26
 800926c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800926e:	9305      	str	r3, [sp, #20]
 8009270:	eba3 0309 	sub.w	r3, r3, r9
 8009274:	455b      	cmp	r3, fp
 8009276:	dc33      	bgt.n	80092e0 <_printf_float+0x384>
 8009278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800927c:	429a      	cmp	r2, r3
 800927e:	db3b      	blt.n	80092f8 <_printf_float+0x39c>
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	07da      	lsls	r2, r3, #31
 8009284:	d438      	bmi.n	80092f8 <_printf_float+0x39c>
 8009286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009288:	9b05      	ldr	r3, [sp, #20]
 800928a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	eba2 0901 	sub.w	r9, r2, r1
 8009292:	4599      	cmp	r9, r3
 8009294:	bfa8      	it	ge
 8009296:	4699      	movge	r9, r3
 8009298:	f1b9 0f00 	cmp.w	r9, #0
 800929c:	dc35      	bgt.n	800930a <_printf_float+0x3ae>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092a6:	f104 0a1a 	add.w	sl, r4, #26
 80092aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092ae:	1a9b      	subs	r3, r3, r2
 80092b0:	eba3 0309 	sub.w	r3, r3, r9
 80092b4:	4543      	cmp	r3, r8
 80092b6:	f77f af79 	ble.w	80091ac <_printf_float+0x250>
 80092ba:	2301      	movs	r3, #1
 80092bc:	4652      	mov	r2, sl
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f aeaa 	beq.w	800901e <_printf_float+0xc2>
 80092ca:	f108 0801 	add.w	r8, r8, #1
 80092ce:	e7ec      	b.n	80092aa <_printf_float+0x34e>
 80092d0:	4613      	mov	r3, r2
 80092d2:	4631      	mov	r1, r6
 80092d4:	4642      	mov	r2, r8
 80092d6:	4628      	mov	r0, r5
 80092d8:	47b8      	blx	r7
 80092da:	3001      	adds	r0, #1
 80092dc:	d1c0      	bne.n	8009260 <_printf_float+0x304>
 80092de:	e69e      	b.n	800901e <_printf_float+0xc2>
 80092e0:	2301      	movs	r3, #1
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	9205      	str	r2, [sp, #20]
 80092e8:	47b8      	blx	r7
 80092ea:	3001      	adds	r0, #1
 80092ec:	f43f ae97 	beq.w	800901e <_printf_float+0xc2>
 80092f0:	9a05      	ldr	r2, [sp, #20]
 80092f2:	f10b 0b01 	add.w	fp, fp, #1
 80092f6:	e7b9      	b.n	800926c <_printf_float+0x310>
 80092f8:	ee18 3a10 	vmov	r3, s16
 80092fc:	4652      	mov	r2, sl
 80092fe:	4631      	mov	r1, r6
 8009300:	4628      	mov	r0, r5
 8009302:	47b8      	blx	r7
 8009304:	3001      	adds	r0, #1
 8009306:	d1be      	bne.n	8009286 <_printf_float+0x32a>
 8009308:	e689      	b.n	800901e <_printf_float+0xc2>
 800930a:	9a05      	ldr	r2, [sp, #20]
 800930c:	464b      	mov	r3, r9
 800930e:	4442      	add	r2, r8
 8009310:	4631      	mov	r1, r6
 8009312:	4628      	mov	r0, r5
 8009314:	47b8      	blx	r7
 8009316:	3001      	adds	r0, #1
 8009318:	d1c1      	bne.n	800929e <_printf_float+0x342>
 800931a:	e680      	b.n	800901e <_printf_float+0xc2>
 800931c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800931e:	2a01      	cmp	r2, #1
 8009320:	dc01      	bgt.n	8009326 <_printf_float+0x3ca>
 8009322:	07db      	lsls	r3, r3, #31
 8009324:	d538      	bpl.n	8009398 <_printf_float+0x43c>
 8009326:	2301      	movs	r3, #1
 8009328:	4642      	mov	r2, r8
 800932a:	4631      	mov	r1, r6
 800932c:	4628      	mov	r0, r5
 800932e:	47b8      	blx	r7
 8009330:	3001      	adds	r0, #1
 8009332:	f43f ae74 	beq.w	800901e <_printf_float+0xc2>
 8009336:	ee18 3a10 	vmov	r3, s16
 800933a:	4652      	mov	r2, sl
 800933c:	4631      	mov	r1, r6
 800933e:	4628      	mov	r0, r5
 8009340:	47b8      	blx	r7
 8009342:	3001      	adds	r0, #1
 8009344:	f43f ae6b 	beq.w	800901e <_printf_float+0xc2>
 8009348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800934c:	2200      	movs	r2, #0
 800934e:	2300      	movs	r3, #0
 8009350:	f7f7 fbf2 	bl	8000b38 <__aeabi_dcmpeq>
 8009354:	b9d8      	cbnz	r0, 800938e <_printf_float+0x432>
 8009356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009358:	f108 0201 	add.w	r2, r8, #1
 800935c:	3b01      	subs	r3, #1
 800935e:	4631      	mov	r1, r6
 8009360:	4628      	mov	r0, r5
 8009362:	47b8      	blx	r7
 8009364:	3001      	adds	r0, #1
 8009366:	d10e      	bne.n	8009386 <_printf_float+0x42a>
 8009368:	e659      	b.n	800901e <_printf_float+0xc2>
 800936a:	2301      	movs	r3, #1
 800936c:	4652      	mov	r2, sl
 800936e:	4631      	mov	r1, r6
 8009370:	4628      	mov	r0, r5
 8009372:	47b8      	blx	r7
 8009374:	3001      	adds	r0, #1
 8009376:	f43f ae52 	beq.w	800901e <_printf_float+0xc2>
 800937a:	f108 0801 	add.w	r8, r8, #1
 800937e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009380:	3b01      	subs	r3, #1
 8009382:	4543      	cmp	r3, r8
 8009384:	dcf1      	bgt.n	800936a <_printf_float+0x40e>
 8009386:	464b      	mov	r3, r9
 8009388:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800938c:	e6dc      	b.n	8009148 <_printf_float+0x1ec>
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	f104 0a1a 	add.w	sl, r4, #26
 8009396:	e7f2      	b.n	800937e <_printf_float+0x422>
 8009398:	2301      	movs	r3, #1
 800939a:	4642      	mov	r2, r8
 800939c:	e7df      	b.n	800935e <_printf_float+0x402>
 800939e:	2301      	movs	r3, #1
 80093a0:	464a      	mov	r2, r9
 80093a2:	4631      	mov	r1, r6
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae38 	beq.w	800901e <_printf_float+0xc2>
 80093ae:	f108 0801 	add.w	r8, r8, #1
 80093b2:	68e3      	ldr	r3, [r4, #12]
 80093b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093b6:	1a5b      	subs	r3, r3, r1
 80093b8:	4543      	cmp	r3, r8
 80093ba:	dcf0      	bgt.n	800939e <_printf_float+0x442>
 80093bc:	e6fa      	b.n	80091b4 <_printf_float+0x258>
 80093be:	f04f 0800 	mov.w	r8, #0
 80093c2:	f104 0919 	add.w	r9, r4, #25
 80093c6:	e7f4      	b.n	80093b2 <_printf_float+0x456>

080093c8 <_printf_common>:
 80093c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093cc:	4616      	mov	r6, r2
 80093ce:	4699      	mov	r9, r3
 80093d0:	688a      	ldr	r2, [r1, #8]
 80093d2:	690b      	ldr	r3, [r1, #16]
 80093d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093d8:	4293      	cmp	r3, r2
 80093da:	bfb8      	it	lt
 80093dc:	4613      	movlt	r3, r2
 80093de:	6033      	str	r3, [r6, #0]
 80093e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093e4:	4607      	mov	r7, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	b10a      	cbz	r2, 80093ee <_printf_common+0x26>
 80093ea:	3301      	adds	r3, #1
 80093ec:	6033      	str	r3, [r6, #0]
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	0699      	lsls	r1, r3, #26
 80093f2:	bf42      	ittt	mi
 80093f4:	6833      	ldrmi	r3, [r6, #0]
 80093f6:	3302      	addmi	r3, #2
 80093f8:	6033      	strmi	r3, [r6, #0]
 80093fa:	6825      	ldr	r5, [r4, #0]
 80093fc:	f015 0506 	ands.w	r5, r5, #6
 8009400:	d106      	bne.n	8009410 <_printf_common+0x48>
 8009402:	f104 0a19 	add.w	sl, r4, #25
 8009406:	68e3      	ldr	r3, [r4, #12]
 8009408:	6832      	ldr	r2, [r6, #0]
 800940a:	1a9b      	subs	r3, r3, r2
 800940c:	42ab      	cmp	r3, r5
 800940e:	dc26      	bgt.n	800945e <_printf_common+0x96>
 8009410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009414:	1e13      	subs	r3, r2, #0
 8009416:	6822      	ldr	r2, [r4, #0]
 8009418:	bf18      	it	ne
 800941a:	2301      	movne	r3, #1
 800941c:	0692      	lsls	r2, r2, #26
 800941e:	d42b      	bmi.n	8009478 <_printf_common+0xb0>
 8009420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009424:	4649      	mov	r1, r9
 8009426:	4638      	mov	r0, r7
 8009428:	47c0      	blx	r8
 800942a:	3001      	adds	r0, #1
 800942c:	d01e      	beq.n	800946c <_printf_common+0xa4>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	68e5      	ldr	r5, [r4, #12]
 8009432:	6832      	ldr	r2, [r6, #0]
 8009434:	f003 0306 	and.w	r3, r3, #6
 8009438:	2b04      	cmp	r3, #4
 800943a:	bf08      	it	eq
 800943c:	1aad      	subeq	r5, r5, r2
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	6922      	ldr	r2, [r4, #16]
 8009442:	bf0c      	ite	eq
 8009444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009448:	2500      	movne	r5, #0
 800944a:	4293      	cmp	r3, r2
 800944c:	bfc4      	itt	gt
 800944e:	1a9b      	subgt	r3, r3, r2
 8009450:	18ed      	addgt	r5, r5, r3
 8009452:	2600      	movs	r6, #0
 8009454:	341a      	adds	r4, #26
 8009456:	42b5      	cmp	r5, r6
 8009458:	d11a      	bne.n	8009490 <_printf_common+0xc8>
 800945a:	2000      	movs	r0, #0
 800945c:	e008      	b.n	8009470 <_printf_common+0xa8>
 800945e:	2301      	movs	r3, #1
 8009460:	4652      	mov	r2, sl
 8009462:	4649      	mov	r1, r9
 8009464:	4638      	mov	r0, r7
 8009466:	47c0      	blx	r8
 8009468:	3001      	adds	r0, #1
 800946a:	d103      	bne.n	8009474 <_printf_common+0xac>
 800946c:	f04f 30ff 	mov.w	r0, #4294967295
 8009470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009474:	3501      	adds	r5, #1
 8009476:	e7c6      	b.n	8009406 <_printf_common+0x3e>
 8009478:	18e1      	adds	r1, r4, r3
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	2030      	movs	r0, #48	; 0x30
 800947e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009482:	4422      	add	r2, r4
 8009484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800948c:	3302      	adds	r3, #2
 800948e:	e7c7      	b.n	8009420 <_printf_common+0x58>
 8009490:	2301      	movs	r3, #1
 8009492:	4622      	mov	r2, r4
 8009494:	4649      	mov	r1, r9
 8009496:	4638      	mov	r0, r7
 8009498:	47c0      	blx	r8
 800949a:	3001      	adds	r0, #1
 800949c:	d0e6      	beq.n	800946c <_printf_common+0xa4>
 800949e:	3601      	adds	r6, #1
 80094a0:	e7d9      	b.n	8009456 <_printf_common+0x8e>
	...

080094a4 <_printf_i>:
 80094a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	460c      	mov	r4, r1
 80094aa:	4691      	mov	r9, r2
 80094ac:	7e27      	ldrb	r7, [r4, #24]
 80094ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094b0:	2f78      	cmp	r7, #120	; 0x78
 80094b2:	4680      	mov	r8, r0
 80094b4:	469a      	mov	sl, r3
 80094b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094ba:	d807      	bhi.n	80094cc <_printf_i+0x28>
 80094bc:	2f62      	cmp	r7, #98	; 0x62
 80094be:	d80a      	bhi.n	80094d6 <_printf_i+0x32>
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	f000 80d8 	beq.w	8009676 <_printf_i+0x1d2>
 80094c6:	2f58      	cmp	r7, #88	; 0x58
 80094c8:	f000 80a3 	beq.w	8009612 <_printf_i+0x16e>
 80094cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094d4:	e03a      	b.n	800954c <_printf_i+0xa8>
 80094d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094da:	2b15      	cmp	r3, #21
 80094dc:	d8f6      	bhi.n	80094cc <_printf_i+0x28>
 80094de:	a001      	add	r0, pc, #4	; (adr r0, 80094e4 <_printf_i+0x40>)
 80094e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094e4:	0800953d 	.word	0x0800953d
 80094e8:	08009551 	.word	0x08009551
 80094ec:	080094cd 	.word	0x080094cd
 80094f0:	080094cd 	.word	0x080094cd
 80094f4:	080094cd 	.word	0x080094cd
 80094f8:	080094cd 	.word	0x080094cd
 80094fc:	08009551 	.word	0x08009551
 8009500:	080094cd 	.word	0x080094cd
 8009504:	080094cd 	.word	0x080094cd
 8009508:	080094cd 	.word	0x080094cd
 800950c:	080094cd 	.word	0x080094cd
 8009510:	0800965d 	.word	0x0800965d
 8009514:	08009581 	.word	0x08009581
 8009518:	0800963f 	.word	0x0800963f
 800951c:	080094cd 	.word	0x080094cd
 8009520:	080094cd 	.word	0x080094cd
 8009524:	0800967f 	.word	0x0800967f
 8009528:	080094cd 	.word	0x080094cd
 800952c:	08009581 	.word	0x08009581
 8009530:	080094cd 	.word	0x080094cd
 8009534:	080094cd 	.word	0x080094cd
 8009538:	08009647 	.word	0x08009647
 800953c:	680b      	ldr	r3, [r1, #0]
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	600a      	str	r2, [r1, #0]
 8009544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800954c:	2301      	movs	r3, #1
 800954e:	e0a3      	b.n	8009698 <_printf_i+0x1f4>
 8009550:	6825      	ldr	r5, [r4, #0]
 8009552:	6808      	ldr	r0, [r1, #0]
 8009554:	062e      	lsls	r6, r5, #24
 8009556:	f100 0304 	add.w	r3, r0, #4
 800955a:	d50a      	bpl.n	8009572 <_printf_i+0xce>
 800955c:	6805      	ldr	r5, [r0, #0]
 800955e:	600b      	str	r3, [r1, #0]
 8009560:	2d00      	cmp	r5, #0
 8009562:	da03      	bge.n	800956c <_printf_i+0xc8>
 8009564:	232d      	movs	r3, #45	; 0x2d
 8009566:	426d      	negs	r5, r5
 8009568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800956c:	485e      	ldr	r0, [pc, #376]	; (80096e8 <_printf_i+0x244>)
 800956e:	230a      	movs	r3, #10
 8009570:	e019      	b.n	80095a6 <_printf_i+0x102>
 8009572:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009576:	6805      	ldr	r5, [r0, #0]
 8009578:	600b      	str	r3, [r1, #0]
 800957a:	bf18      	it	ne
 800957c:	b22d      	sxthne	r5, r5
 800957e:	e7ef      	b.n	8009560 <_printf_i+0xbc>
 8009580:	680b      	ldr	r3, [r1, #0]
 8009582:	6825      	ldr	r5, [r4, #0]
 8009584:	1d18      	adds	r0, r3, #4
 8009586:	6008      	str	r0, [r1, #0]
 8009588:	0628      	lsls	r0, r5, #24
 800958a:	d501      	bpl.n	8009590 <_printf_i+0xec>
 800958c:	681d      	ldr	r5, [r3, #0]
 800958e:	e002      	b.n	8009596 <_printf_i+0xf2>
 8009590:	0669      	lsls	r1, r5, #25
 8009592:	d5fb      	bpl.n	800958c <_printf_i+0xe8>
 8009594:	881d      	ldrh	r5, [r3, #0]
 8009596:	4854      	ldr	r0, [pc, #336]	; (80096e8 <_printf_i+0x244>)
 8009598:	2f6f      	cmp	r7, #111	; 0x6f
 800959a:	bf0c      	ite	eq
 800959c:	2308      	moveq	r3, #8
 800959e:	230a      	movne	r3, #10
 80095a0:	2100      	movs	r1, #0
 80095a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095a6:	6866      	ldr	r6, [r4, #4]
 80095a8:	60a6      	str	r6, [r4, #8]
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	bfa2      	ittt	ge
 80095ae:	6821      	ldrge	r1, [r4, #0]
 80095b0:	f021 0104 	bicge.w	r1, r1, #4
 80095b4:	6021      	strge	r1, [r4, #0]
 80095b6:	b90d      	cbnz	r5, 80095bc <_printf_i+0x118>
 80095b8:	2e00      	cmp	r6, #0
 80095ba:	d04d      	beq.n	8009658 <_printf_i+0x1b4>
 80095bc:	4616      	mov	r6, r2
 80095be:	fbb5 f1f3 	udiv	r1, r5, r3
 80095c2:	fb03 5711 	mls	r7, r3, r1, r5
 80095c6:	5dc7      	ldrb	r7, [r0, r7]
 80095c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095cc:	462f      	mov	r7, r5
 80095ce:	42bb      	cmp	r3, r7
 80095d0:	460d      	mov	r5, r1
 80095d2:	d9f4      	bls.n	80095be <_printf_i+0x11a>
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d10b      	bne.n	80095f0 <_printf_i+0x14c>
 80095d8:	6823      	ldr	r3, [r4, #0]
 80095da:	07df      	lsls	r7, r3, #31
 80095dc:	d508      	bpl.n	80095f0 <_printf_i+0x14c>
 80095de:	6923      	ldr	r3, [r4, #16]
 80095e0:	6861      	ldr	r1, [r4, #4]
 80095e2:	4299      	cmp	r1, r3
 80095e4:	bfde      	ittt	le
 80095e6:	2330      	movle	r3, #48	; 0x30
 80095e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095f0:	1b92      	subs	r2, r2, r6
 80095f2:	6122      	str	r2, [r4, #16]
 80095f4:	f8cd a000 	str.w	sl, [sp]
 80095f8:	464b      	mov	r3, r9
 80095fa:	aa03      	add	r2, sp, #12
 80095fc:	4621      	mov	r1, r4
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff fee2 	bl	80093c8 <_printf_common>
 8009604:	3001      	adds	r0, #1
 8009606:	d14c      	bne.n	80096a2 <_printf_i+0x1fe>
 8009608:	f04f 30ff 	mov.w	r0, #4294967295
 800960c:	b004      	add	sp, #16
 800960e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009612:	4835      	ldr	r0, [pc, #212]	; (80096e8 <_printf_i+0x244>)
 8009614:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	680e      	ldr	r6, [r1, #0]
 800961c:	061f      	lsls	r7, r3, #24
 800961e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009622:	600e      	str	r6, [r1, #0]
 8009624:	d514      	bpl.n	8009650 <_printf_i+0x1ac>
 8009626:	07d9      	lsls	r1, r3, #31
 8009628:	bf44      	itt	mi
 800962a:	f043 0320 	orrmi.w	r3, r3, #32
 800962e:	6023      	strmi	r3, [r4, #0]
 8009630:	b91d      	cbnz	r5, 800963a <_printf_i+0x196>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	f023 0320 	bic.w	r3, r3, #32
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	2310      	movs	r3, #16
 800963c:	e7b0      	b.n	80095a0 <_printf_i+0xfc>
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f043 0320 	orr.w	r3, r3, #32
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	2378      	movs	r3, #120	; 0x78
 8009648:	4828      	ldr	r0, [pc, #160]	; (80096ec <_printf_i+0x248>)
 800964a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800964e:	e7e3      	b.n	8009618 <_printf_i+0x174>
 8009650:	065e      	lsls	r6, r3, #25
 8009652:	bf48      	it	mi
 8009654:	b2ad      	uxthmi	r5, r5
 8009656:	e7e6      	b.n	8009626 <_printf_i+0x182>
 8009658:	4616      	mov	r6, r2
 800965a:	e7bb      	b.n	80095d4 <_printf_i+0x130>
 800965c:	680b      	ldr	r3, [r1, #0]
 800965e:	6826      	ldr	r6, [r4, #0]
 8009660:	6960      	ldr	r0, [r4, #20]
 8009662:	1d1d      	adds	r5, r3, #4
 8009664:	600d      	str	r5, [r1, #0]
 8009666:	0635      	lsls	r5, r6, #24
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	d501      	bpl.n	8009670 <_printf_i+0x1cc>
 800966c:	6018      	str	r0, [r3, #0]
 800966e:	e002      	b.n	8009676 <_printf_i+0x1d2>
 8009670:	0671      	lsls	r1, r6, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0x1c8>
 8009674:	8018      	strh	r0, [r3, #0]
 8009676:	2300      	movs	r3, #0
 8009678:	6123      	str	r3, [r4, #16]
 800967a:	4616      	mov	r6, r2
 800967c:	e7ba      	b.n	80095f4 <_printf_i+0x150>
 800967e:	680b      	ldr	r3, [r1, #0]
 8009680:	1d1a      	adds	r2, r3, #4
 8009682:	600a      	str	r2, [r1, #0]
 8009684:	681e      	ldr	r6, [r3, #0]
 8009686:	6862      	ldr	r2, [r4, #4]
 8009688:	2100      	movs	r1, #0
 800968a:	4630      	mov	r0, r6
 800968c:	f7f6 fde0 	bl	8000250 <memchr>
 8009690:	b108      	cbz	r0, 8009696 <_printf_i+0x1f2>
 8009692:	1b80      	subs	r0, r0, r6
 8009694:	6060      	str	r0, [r4, #4]
 8009696:	6863      	ldr	r3, [r4, #4]
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	2300      	movs	r3, #0
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a0:	e7a8      	b.n	80095f4 <_printf_i+0x150>
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	4632      	mov	r2, r6
 80096a6:	4649      	mov	r1, r9
 80096a8:	4640      	mov	r0, r8
 80096aa:	47d0      	blx	sl
 80096ac:	3001      	adds	r0, #1
 80096ae:	d0ab      	beq.n	8009608 <_printf_i+0x164>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	079b      	lsls	r3, r3, #30
 80096b4:	d413      	bmi.n	80096de <_printf_i+0x23a>
 80096b6:	68e0      	ldr	r0, [r4, #12]
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	4298      	cmp	r0, r3
 80096bc:	bfb8      	it	lt
 80096be:	4618      	movlt	r0, r3
 80096c0:	e7a4      	b.n	800960c <_printf_i+0x168>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4632      	mov	r2, r6
 80096c6:	4649      	mov	r1, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	47d0      	blx	sl
 80096cc:	3001      	adds	r0, #1
 80096ce:	d09b      	beq.n	8009608 <_printf_i+0x164>
 80096d0:	3501      	adds	r5, #1
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	9903      	ldr	r1, [sp, #12]
 80096d6:	1a5b      	subs	r3, r3, r1
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dcf2      	bgt.n	80096c2 <_printf_i+0x21e>
 80096dc:	e7eb      	b.n	80096b6 <_printf_i+0x212>
 80096de:	2500      	movs	r5, #0
 80096e0:	f104 0619 	add.w	r6, r4, #25
 80096e4:	e7f5      	b.n	80096d2 <_printf_i+0x22e>
 80096e6:	bf00      	nop
 80096e8:	08012f1e 	.word	0x08012f1e
 80096ec:	08012f2f 	.word	0x08012f2f

080096f0 <_scanf_float>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	b087      	sub	sp, #28
 80096f6:	4617      	mov	r7, r2
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	688b      	ldr	r3, [r1, #8]
 80096fc:	1e5a      	subs	r2, r3, #1
 80096fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009702:	bf83      	ittte	hi
 8009704:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009708:	195b      	addhi	r3, r3, r5
 800970a:	9302      	strhi	r3, [sp, #8]
 800970c:	2300      	movls	r3, #0
 800970e:	bf86      	itte	hi
 8009710:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009714:	608b      	strhi	r3, [r1, #8]
 8009716:	9302      	strls	r3, [sp, #8]
 8009718:	680b      	ldr	r3, [r1, #0]
 800971a:	468b      	mov	fp, r1
 800971c:	2500      	movs	r5, #0
 800971e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009722:	f84b 3b1c 	str.w	r3, [fp], #28
 8009726:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800972a:	4680      	mov	r8, r0
 800972c:	460c      	mov	r4, r1
 800972e:	465e      	mov	r6, fp
 8009730:	46aa      	mov	sl, r5
 8009732:	46a9      	mov	r9, r5
 8009734:	9501      	str	r5, [sp, #4]
 8009736:	68a2      	ldr	r2, [r4, #8]
 8009738:	b152      	cbz	r2, 8009750 <_scanf_float+0x60>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b4e      	cmp	r3, #78	; 0x4e
 8009740:	d864      	bhi.n	800980c <_scanf_float+0x11c>
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d83c      	bhi.n	80097c0 <_scanf_float+0xd0>
 8009746:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800974a:	b2c8      	uxtb	r0, r1
 800974c:	280e      	cmp	r0, #14
 800974e:	d93a      	bls.n	80097c6 <_scanf_float+0xd6>
 8009750:	f1b9 0f00 	cmp.w	r9, #0
 8009754:	d003      	beq.n	800975e <_scanf_float+0x6e>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009762:	f1ba 0f01 	cmp.w	sl, #1
 8009766:	f200 8113 	bhi.w	8009990 <_scanf_float+0x2a0>
 800976a:	455e      	cmp	r6, fp
 800976c:	f200 8105 	bhi.w	800997a <_scanf_float+0x28a>
 8009770:	2501      	movs	r5, #1
 8009772:	4628      	mov	r0, r5
 8009774:	b007      	add	sp, #28
 8009776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800977e:	2a0d      	cmp	r2, #13
 8009780:	d8e6      	bhi.n	8009750 <_scanf_float+0x60>
 8009782:	a101      	add	r1, pc, #4	; (adr r1, 8009788 <_scanf_float+0x98>)
 8009784:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009788:	080098c7 	.word	0x080098c7
 800978c:	08009751 	.word	0x08009751
 8009790:	08009751 	.word	0x08009751
 8009794:	08009751 	.word	0x08009751
 8009798:	08009927 	.word	0x08009927
 800979c:	080098ff 	.word	0x080098ff
 80097a0:	08009751 	.word	0x08009751
 80097a4:	08009751 	.word	0x08009751
 80097a8:	080098d5 	.word	0x080098d5
 80097ac:	08009751 	.word	0x08009751
 80097b0:	08009751 	.word	0x08009751
 80097b4:	08009751 	.word	0x08009751
 80097b8:	08009751 	.word	0x08009751
 80097bc:	0800988d 	.word	0x0800988d
 80097c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80097c4:	e7db      	b.n	800977e <_scanf_float+0x8e>
 80097c6:	290e      	cmp	r1, #14
 80097c8:	d8c2      	bhi.n	8009750 <_scanf_float+0x60>
 80097ca:	a001      	add	r0, pc, #4	; (adr r0, 80097d0 <_scanf_float+0xe0>)
 80097cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80097d0:	0800987f 	.word	0x0800987f
 80097d4:	08009751 	.word	0x08009751
 80097d8:	0800987f 	.word	0x0800987f
 80097dc:	08009913 	.word	0x08009913
 80097e0:	08009751 	.word	0x08009751
 80097e4:	0800982d 	.word	0x0800982d
 80097e8:	08009869 	.word	0x08009869
 80097ec:	08009869 	.word	0x08009869
 80097f0:	08009869 	.word	0x08009869
 80097f4:	08009869 	.word	0x08009869
 80097f8:	08009869 	.word	0x08009869
 80097fc:	08009869 	.word	0x08009869
 8009800:	08009869 	.word	0x08009869
 8009804:	08009869 	.word	0x08009869
 8009808:	08009869 	.word	0x08009869
 800980c:	2b6e      	cmp	r3, #110	; 0x6e
 800980e:	d809      	bhi.n	8009824 <_scanf_float+0x134>
 8009810:	2b60      	cmp	r3, #96	; 0x60
 8009812:	d8b2      	bhi.n	800977a <_scanf_float+0x8a>
 8009814:	2b54      	cmp	r3, #84	; 0x54
 8009816:	d077      	beq.n	8009908 <_scanf_float+0x218>
 8009818:	2b59      	cmp	r3, #89	; 0x59
 800981a:	d199      	bne.n	8009750 <_scanf_float+0x60>
 800981c:	2d07      	cmp	r5, #7
 800981e:	d197      	bne.n	8009750 <_scanf_float+0x60>
 8009820:	2508      	movs	r5, #8
 8009822:	e029      	b.n	8009878 <_scanf_float+0x188>
 8009824:	2b74      	cmp	r3, #116	; 0x74
 8009826:	d06f      	beq.n	8009908 <_scanf_float+0x218>
 8009828:	2b79      	cmp	r3, #121	; 0x79
 800982a:	e7f6      	b.n	800981a <_scanf_float+0x12a>
 800982c:	6821      	ldr	r1, [r4, #0]
 800982e:	05c8      	lsls	r0, r1, #23
 8009830:	d51a      	bpl.n	8009868 <_scanf_float+0x178>
 8009832:	9b02      	ldr	r3, [sp, #8]
 8009834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009838:	6021      	str	r1, [r4, #0]
 800983a:	f109 0901 	add.w	r9, r9, #1
 800983e:	b11b      	cbz	r3, 8009848 <_scanf_float+0x158>
 8009840:	3b01      	subs	r3, #1
 8009842:	3201      	adds	r2, #1
 8009844:	9302      	str	r3, [sp, #8]
 8009846:	60a2      	str	r2, [r4, #8]
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	3301      	adds	r3, #1
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3b01      	subs	r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	607b      	str	r3, [r7, #4]
 800985c:	f340 8084 	ble.w	8009968 <_scanf_float+0x278>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	e766      	b.n	8009736 <_scanf_float+0x46>
 8009868:	eb1a 0f05 	cmn.w	sl, r5
 800986c:	f47f af70 	bne.w	8009750 <_scanf_float+0x60>
 8009870:	6822      	ldr	r2, [r4, #0]
 8009872:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009876:	6022      	str	r2, [r4, #0]
 8009878:	f806 3b01 	strb.w	r3, [r6], #1
 800987c:	e7e4      	b.n	8009848 <_scanf_float+0x158>
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	0610      	lsls	r0, r2, #24
 8009882:	f57f af65 	bpl.w	8009750 <_scanf_float+0x60>
 8009886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800988a:	e7f4      	b.n	8009876 <_scanf_float+0x186>
 800988c:	f1ba 0f00 	cmp.w	sl, #0
 8009890:	d10e      	bne.n	80098b0 <_scanf_float+0x1c0>
 8009892:	f1b9 0f00 	cmp.w	r9, #0
 8009896:	d10e      	bne.n	80098b6 <_scanf_float+0x1c6>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800989e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098a2:	d108      	bne.n	80098b6 <_scanf_float+0x1c6>
 80098a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098a8:	6022      	str	r2, [r4, #0]
 80098aa:	f04f 0a01 	mov.w	sl, #1
 80098ae:	e7e3      	b.n	8009878 <_scanf_float+0x188>
 80098b0:	f1ba 0f02 	cmp.w	sl, #2
 80098b4:	d055      	beq.n	8009962 <_scanf_float+0x272>
 80098b6:	2d01      	cmp	r5, #1
 80098b8:	d002      	beq.n	80098c0 <_scanf_float+0x1d0>
 80098ba:	2d04      	cmp	r5, #4
 80098bc:	f47f af48 	bne.w	8009750 <_scanf_float+0x60>
 80098c0:	3501      	adds	r5, #1
 80098c2:	b2ed      	uxtb	r5, r5
 80098c4:	e7d8      	b.n	8009878 <_scanf_float+0x188>
 80098c6:	f1ba 0f01 	cmp.w	sl, #1
 80098ca:	f47f af41 	bne.w	8009750 <_scanf_float+0x60>
 80098ce:	f04f 0a02 	mov.w	sl, #2
 80098d2:	e7d1      	b.n	8009878 <_scanf_float+0x188>
 80098d4:	b97d      	cbnz	r5, 80098f6 <_scanf_float+0x206>
 80098d6:	f1b9 0f00 	cmp.w	r9, #0
 80098da:	f47f af3c 	bne.w	8009756 <_scanf_float+0x66>
 80098de:	6822      	ldr	r2, [r4, #0]
 80098e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80098e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098e8:	f47f af39 	bne.w	800975e <_scanf_float+0x6e>
 80098ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098f0:	6022      	str	r2, [r4, #0]
 80098f2:	2501      	movs	r5, #1
 80098f4:	e7c0      	b.n	8009878 <_scanf_float+0x188>
 80098f6:	2d03      	cmp	r5, #3
 80098f8:	d0e2      	beq.n	80098c0 <_scanf_float+0x1d0>
 80098fa:	2d05      	cmp	r5, #5
 80098fc:	e7de      	b.n	80098bc <_scanf_float+0x1cc>
 80098fe:	2d02      	cmp	r5, #2
 8009900:	f47f af26 	bne.w	8009750 <_scanf_float+0x60>
 8009904:	2503      	movs	r5, #3
 8009906:	e7b7      	b.n	8009878 <_scanf_float+0x188>
 8009908:	2d06      	cmp	r5, #6
 800990a:	f47f af21 	bne.w	8009750 <_scanf_float+0x60>
 800990e:	2507      	movs	r5, #7
 8009910:	e7b2      	b.n	8009878 <_scanf_float+0x188>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	0591      	lsls	r1, r2, #22
 8009916:	f57f af1b 	bpl.w	8009750 <_scanf_float+0x60>
 800991a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800991e:	6022      	str	r2, [r4, #0]
 8009920:	f8cd 9004 	str.w	r9, [sp, #4]
 8009924:	e7a8      	b.n	8009878 <_scanf_float+0x188>
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800992c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009930:	d006      	beq.n	8009940 <_scanf_float+0x250>
 8009932:	0550      	lsls	r0, r2, #21
 8009934:	f57f af0c 	bpl.w	8009750 <_scanf_float+0x60>
 8009938:	f1b9 0f00 	cmp.w	r9, #0
 800993c:	f43f af0f 	beq.w	800975e <_scanf_float+0x6e>
 8009940:	0591      	lsls	r1, r2, #22
 8009942:	bf58      	it	pl
 8009944:	9901      	ldrpl	r1, [sp, #4]
 8009946:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800994a:	bf58      	it	pl
 800994c:	eba9 0101 	subpl.w	r1, r9, r1
 8009950:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009954:	bf58      	it	pl
 8009956:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800995a:	6022      	str	r2, [r4, #0]
 800995c:	f04f 0900 	mov.w	r9, #0
 8009960:	e78a      	b.n	8009878 <_scanf_float+0x188>
 8009962:	f04f 0a03 	mov.w	sl, #3
 8009966:	e787      	b.n	8009878 <_scanf_float+0x188>
 8009968:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800996c:	4639      	mov	r1, r7
 800996e:	4640      	mov	r0, r8
 8009970:	4798      	blx	r3
 8009972:	2800      	cmp	r0, #0
 8009974:	f43f aedf 	beq.w	8009736 <_scanf_float+0x46>
 8009978:	e6ea      	b.n	8009750 <_scanf_float+0x60>
 800997a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800997e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009982:	463a      	mov	r2, r7
 8009984:	4640      	mov	r0, r8
 8009986:	4798      	blx	r3
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	3b01      	subs	r3, #1
 800998c:	6123      	str	r3, [r4, #16]
 800998e:	e6ec      	b.n	800976a <_scanf_float+0x7a>
 8009990:	1e6b      	subs	r3, r5, #1
 8009992:	2b06      	cmp	r3, #6
 8009994:	d825      	bhi.n	80099e2 <_scanf_float+0x2f2>
 8009996:	2d02      	cmp	r5, #2
 8009998:	d836      	bhi.n	8009a08 <_scanf_float+0x318>
 800999a:	455e      	cmp	r6, fp
 800999c:	f67f aee8 	bls.w	8009770 <_scanf_float+0x80>
 80099a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099a8:	463a      	mov	r2, r7
 80099aa:	4640      	mov	r0, r8
 80099ac:	4798      	blx	r3
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	e7f1      	b.n	800999a <_scanf_float+0x2aa>
 80099b6:	9802      	ldr	r0, [sp, #8]
 80099b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80099c0:	9002      	str	r0, [sp, #8]
 80099c2:	463a      	mov	r2, r7
 80099c4:	4640      	mov	r0, r8
 80099c6:	4798      	blx	r3
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099d2:	fa5f fa8a 	uxtb.w	sl, sl
 80099d6:	f1ba 0f02 	cmp.w	sl, #2
 80099da:	d1ec      	bne.n	80099b6 <_scanf_float+0x2c6>
 80099dc:	3d03      	subs	r5, #3
 80099de:	b2ed      	uxtb	r5, r5
 80099e0:	1b76      	subs	r6, r6, r5
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	05da      	lsls	r2, r3, #23
 80099e6:	d52f      	bpl.n	8009a48 <_scanf_float+0x358>
 80099e8:	055b      	lsls	r3, r3, #21
 80099ea:	d510      	bpl.n	8009a0e <_scanf_float+0x31e>
 80099ec:	455e      	cmp	r6, fp
 80099ee:	f67f aebf 	bls.w	8009770 <_scanf_float+0x80>
 80099f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099fa:	463a      	mov	r2, r7
 80099fc:	4640      	mov	r0, r8
 80099fe:	4798      	blx	r3
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	6123      	str	r3, [r4, #16]
 8009a06:	e7f1      	b.n	80099ec <_scanf_float+0x2fc>
 8009a08:	46aa      	mov	sl, r5
 8009a0a:	9602      	str	r6, [sp, #8]
 8009a0c:	e7df      	b.n	80099ce <_scanf_float+0x2de>
 8009a0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a12:	6923      	ldr	r3, [r4, #16]
 8009a14:	2965      	cmp	r1, #101	; 0x65
 8009a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	d00c      	beq.n	8009a3c <_scanf_float+0x34c>
 8009a22:	2945      	cmp	r1, #69	; 0x45
 8009a24:	d00a      	beq.n	8009a3c <_scanf_float+0x34c>
 8009a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4798      	blx	r3
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	1eb5      	subs	r5, r6, #2
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a40:	463a      	mov	r2, r7
 8009a42:	4640      	mov	r0, r8
 8009a44:	4798      	blx	r3
 8009a46:	462e      	mov	r6, r5
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	f015 0510 	ands.w	r5, r5, #16
 8009a4e:	d158      	bne.n	8009b02 <_scanf_float+0x412>
 8009a50:	7035      	strb	r5, [r6, #0]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a5c:	d11c      	bne.n	8009a98 <_scanf_float+0x3a8>
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	454b      	cmp	r3, r9
 8009a62:	eba3 0209 	sub.w	r2, r3, r9
 8009a66:	d124      	bne.n	8009ab2 <_scanf_float+0x3c2>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4659      	mov	r1, fp
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	f000 ff71 	bl	800a954 <_strtod_r>
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	6821      	ldr	r1, [r4, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f011 0f02 	tst.w	r1, #2
 8009a7c:	ec57 6b10 	vmov	r6, r7, d0
 8009a80:	f103 0204 	add.w	r2, r3, #4
 8009a84:	d020      	beq.n	8009ac8 <_scanf_float+0x3d8>
 8009a86:	9903      	ldr	r1, [sp, #12]
 8009a88:	600a      	str	r2, [r1, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	e9c3 6700 	strd	r6, r7, [r3]
 8009a90:	68e3      	ldr	r3, [r4, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60e3      	str	r3, [r4, #12]
 8009a96:	e66c      	b.n	8009772 <_scanf_float+0x82>
 8009a98:	9b04      	ldr	r3, [sp, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d0e4      	beq.n	8009a68 <_scanf_float+0x378>
 8009a9e:	9905      	ldr	r1, [sp, #20]
 8009aa0:	230a      	movs	r3, #10
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	3101      	adds	r1, #1
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	f001 f83a 	bl	800ab20 <_strtol_r>
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	9e05      	ldr	r6, [sp, #20]
 8009ab0:	1ac2      	subs	r2, r0, r3
 8009ab2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009ab6:	429e      	cmp	r6, r3
 8009ab8:	bf28      	it	cs
 8009aba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009abe:	4912      	ldr	r1, [pc, #72]	; (8009b08 <_scanf_float+0x418>)
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	f000 f8cf 	bl	8009c64 <siprintf>
 8009ac6:	e7cf      	b.n	8009a68 <_scanf_float+0x378>
 8009ac8:	f011 0f04 	tst.w	r1, #4
 8009acc:	9903      	ldr	r1, [sp, #12]
 8009ace:	600a      	str	r2, [r1, #0]
 8009ad0:	d1db      	bne.n	8009a8a <_scanf_float+0x39a>
 8009ad2:	f8d3 8000 	ldr.w	r8, [r3]
 8009ad6:	ee10 2a10 	vmov	r2, s0
 8009ada:	ee10 0a10 	vmov	r0, s0
 8009ade:	463b      	mov	r3, r7
 8009ae0:	4639      	mov	r1, r7
 8009ae2:	f7f7 f85b 	bl	8000b9c <__aeabi_dcmpun>
 8009ae6:	b128      	cbz	r0, 8009af4 <_scanf_float+0x404>
 8009ae8:	4808      	ldr	r0, [pc, #32]	; (8009b0c <_scanf_float+0x41c>)
 8009aea:	f000 f8b5 	bl	8009c58 <nanf>
 8009aee:	ed88 0a00 	vstr	s0, [r8]
 8009af2:	e7cd      	b.n	8009a90 <_scanf_float+0x3a0>
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f7 f8ae 	bl	8000c58 <__aeabi_d2f>
 8009afc:	f8c8 0000 	str.w	r0, [r8]
 8009b00:	e7c6      	b.n	8009a90 <_scanf_float+0x3a0>
 8009b02:	2500      	movs	r5, #0
 8009b04:	e635      	b.n	8009772 <_scanf_float+0x82>
 8009b06:	bf00      	nop
 8009b08:	08012f40 	.word	0x08012f40
 8009b0c:	0801304b 	.word	0x0801304b

08009b10 <iprintf>:
 8009b10:	b40f      	push	{r0, r1, r2, r3}
 8009b12:	4b0a      	ldr	r3, [pc, #40]	; (8009b3c <iprintf+0x2c>)
 8009b14:	b513      	push	{r0, r1, r4, lr}
 8009b16:	681c      	ldr	r4, [r3, #0]
 8009b18:	b124      	cbz	r4, 8009b24 <iprintf+0x14>
 8009b1a:	69a3      	ldr	r3, [r4, #24]
 8009b1c:	b913      	cbnz	r3, 8009b24 <iprintf+0x14>
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f002 f870 	bl	800bc04 <__sinit>
 8009b24:	ab05      	add	r3, sp, #20
 8009b26:	9a04      	ldr	r2, [sp, #16]
 8009b28:	68a1      	ldr	r1, [r4, #8]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f003 fc15 	bl	800d35c <_vfiprintf_r>
 8009b32:	b002      	add	sp, #8
 8009b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b38:	b004      	add	sp, #16
 8009b3a:	4770      	bx	lr
 8009b3c:	2000000c 	.word	0x2000000c

08009b40 <putchar>:
 8009b40:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <putchar+0x28>)
 8009b42:	b513      	push	{r0, r1, r4, lr}
 8009b44:	681c      	ldr	r4, [r3, #0]
 8009b46:	4601      	mov	r1, r0
 8009b48:	b134      	cbz	r4, 8009b58 <putchar+0x18>
 8009b4a:	69a3      	ldr	r3, [r4, #24]
 8009b4c:	b923      	cbnz	r3, 8009b58 <putchar+0x18>
 8009b4e:	9001      	str	r0, [sp, #4]
 8009b50:	4620      	mov	r0, r4
 8009b52:	f002 f857 	bl	800bc04 <__sinit>
 8009b56:	9901      	ldr	r1, [sp, #4]
 8009b58:	68a2      	ldr	r2, [r4, #8]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	b002      	add	sp, #8
 8009b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b62:	f003 bd2b 	b.w	800d5bc <_putc_r>
 8009b66:	bf00      	nop
 8009b68:	2000000c 	.word	0x2000000c

08009b6c <_puts_r>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	460e      	mov	r6, r1
 8009b70:	4605      	mov	r5, r0
 8009b72:	b118      	cbz	r0, 8009b7c <_puts_r+0x10>
 8009b74:	6983      	ldr	r3, [r0, #24]
 8009b76:	b90b      	cbnz	r3, 8009b7c <_puts_r+0x10>
 8009b78:	f002 f844 	bl	800bc04 <__sinit>
 8009b7c:	69ab      	ldr	r3, [r5, #24]
 8009b7e:	68ac      	ldr	r4, [r5, #8]
 8009b80:	b913      	cbnz	r3, 8009b88 <_puts_r+0x1c>
 8009b82:	4628      	mov	r0, r5
 8009b84:	f002 f83e 	bl	800bc04 <__sinit>
 8009b88:	4b2c      	ldr	r3, [pc, #176]	; (8009c3c <_puts_r+0xd0>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d120      	bne.n	8009bd0 <_puts_r+0x64>
 8009b8e:	686c      	ldr	r4, [r5, #4]
 8009b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b92:	07db      	lsls	r3, r3, #31
 8009b94:	d405      	bmi.n	8009ba2 <_puts_r+0x36>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	0598      	lsls	r0, r3, #22
 8009b9a:	d402      	bmi.n	8009ba2 <_puts_r+0x36>
 8009b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b9e:	f002 fc54 	bl	800c44a <__retarget_lock_acquire_recursive>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	0719      	lsls	r1, r3, #28
 8009ba6:	d51d      	bpl.n	8009be4 <_puts_r+0x78>
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	b1db      	cbz	r3, 8009be4 <_puts_r+0x78>
 8009bac:	3e01      	subs	r6, #1
 8009bae:	68a3      	ldr	r3, [r4, #8]
 8009bb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	bb39      	cbnz	r1, 8009c0a <_puts_r+0x9e>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	da38      	bge.n	8009c30 <_puts_r+0xc4>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	210a      	movs	r1, #10
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 ffae 	bl	800ab24 <__swbuf_r>
 8009bc8:	3001      	adds	r0, #1
 8009bca:	d011      	beq.n	8009bf0 <_puts_r+0x84>
 8009bcc:	250a      	movs	r5, #10
 8009bce:	e011      	b.n	8009bf4 <_puts_r+0x88>
 8009bd0:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <_puts_r+0xd4>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d101      	bne.n	8009bda <_puts_r+0x6e>
 8009bd6:	68ac      	ldr	r4, [r5, #8]
 8009bd8:	e7da      	b.n	8009b90 <_puts_r+0x24>
 8009bda:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <_puts_r+0xd8>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	bf08      	it	eq
 8009be0:	68ec      	ldreq	r4, [r5, #12]
 8009be2:	e7d5      	b.n	8009b90 <_puts_r+0x24>
 8009be4:	4621      	mov	r1, r4
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 ffee 	bl	800abc8 <__swsetup_r>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0dd      	beq.n	8009bac <_puts_r+0x40>
 8009bf0:	f04f 35ff 	mov.w	r5, #4294967295
 8009bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bf6:	07da      	lsls	r2, r3, #31
 8009bf8:	d405      	bmi.n	8009c06 <_puts_r+0x9a>
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	059b      	lsls	r3, r3, #22
 8009bfe:	d402      	bmi.n	8009c06 <_puts_r+0x9a>
 8009c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c02:	f002 fc23 	bl	800c44c <__retarget_lock_release_recursive>
 8009c06:	4628      	mov	r0, r5
 8009c08:	bd70      	pop	{r4, r5, r6, pc}
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da04      	bge.n	8009c18 <_puts_r+0xac>
 8009c0e:	69a2      	ldr	r2, [r4, #24]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	dc06      	bgt.n	8009c22 <_puts_r+0xb6>
 8009c14:	290a      	cmp	r1, #10
 8009c16:	d004      	beq.n	8009c22 <_puts_r+0xb6>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	7019      	strb	r1, [r3, #0]
 8009c20:	e7c5      	b.n	8009bae <_puts_r+0x42>
 8009c22:	4622      	mov	r2, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 ff7d 	bl	800ab24 <__swbuf_r>
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d1bf      	bne.n	8009bae <_puts_r+0x42>
 8009c2e:	e7df      	b.n	8009bf0 <_puts_r+0x84>
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	250a      	movs	r5, #10
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	6022      	str	r2, [r4, #0]
 8009c38:	701d      	strb	r5, [r3, #0]
 8009c3a:	e7db      	b.n	8009bf4 <_puts_r+0x88>
 8009c3c:	080131ec 	.word	0x080131ec
 8009c40:	0801320c 	.word	0x0801320c
 8009c44:	080131cc 	.word	0x080131cc

08009c48 <puts>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <puts+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f7ff bf8d 	b.w	8009b6c <_puts_r>
 8009c52:	bf00      	nop
 8009c54:	2000000c 	.word	0x2000000c

08009c58 <nanf>:
 8009c58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c60 <nanf+0x8>
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	7fc00000 	.word	0x7fc00000

08009c64 <siprintf>:
 8009c64:	b40e      	push	{r1, r2, r3}
 8009c66:	b500      	push	{lr}
 8009c68:	b09c      	sub	sp, #112	; 0x70
 8009c6a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c6c:	9002      	str	r0, [sp, #8]
 8009c6e:	9006      	str	r0, [sp, #24]
 8009c70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c74:	4809      	ldr	r0, [pc, #36]	; (8009c9c <siprintf+0x38>)
 8009c76:	9107      	str	r1, [sp, #28]
 8009c78:	9104      	str	r1, [sp, #16]
 8009c7a:	4909      	ldr	r1, [pc, #36]	; (8009ca0 <siprintf+0x3c>)
 8009c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c80:	9105      	str	r1, [sp, #20]
 8009c82:	6800      	ldr	r0, [r0, #0]
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	a902      	add	r1, sp, #8
 8009c88:	f003 fa3e 	bl	800d108 <_svfiprintf_r>
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
 8009c92:	b01c      	add	sp, #112	; 0x70
 8009c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c98:	b003      	add	sp, #12
 8009c9a:	4770      	bx	lr
 8009c9c:	2000000c 	.word	0x2000000c
 8009ca0:	ffff0208 	.word	0xffff0208

08009ca4 <strcpy>:
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009caa:	f803 2b01 	strb.w	r2, [r3], #1
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	d1f9      	bne.n	8009ca6 <strcpy+0x2>
 8009cb2:	4770      	bx	lr

08009cb4 <strncpy>:
 8009cb4:	b510      	push	{r4, lr}
 8009cb6:	3901      	subs	r1, #1
 8009cb8:	4603      	mov	r3, r0
 8009cba:	b132      	cbz	r2, 8009cca <strncpy+0x16>
 8009cbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009cc0:	f803 4b01 	strb.w	r4, [r3], #1
 8009cc4:	3a01      	subs	r2, #1
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	d1f7      	bne.n	8009cba <strncpy+0x6>
 8009cca:	441a      	add	r2, r3
 8009ccc:	2100      	movs	r1, #0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d100      	bne.n	8009cd4 <strncpy+0x20>
 8009cd2:	bd10      	pop	{r4, pc}
 8009cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8009cd8:	e7f9      	b.n	8009cce <strncpy+0x1a>

08009cda <strstr>:
 8009cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cdc:	780c      	ldrb	r4, [r1, #0]
 8009cde:	b164      	cbz	r4, 8009cfa <strstr+0x20>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	781a      	ldrb	r2, [r3, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	1c5e      	adds	r6, r3, #1
 8009ce8:	b90a      	cbnz	r2, 8009cee <strstr+0x14>
 8009cea:	4610      	mov	r0, r2
 8009cec:	e005      	b.n	8009cfa <strstr+0x20>
 8009cee:	4294      	cmp	r4, r2
 8009cf0:	d108      	bne.n	8009d04 <strstr+0x2a>
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009cf8:	b902      	cbnz	r2, 8009cfc <strstr+0x22>
 8009cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cfc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8009d00:	4297      	cmp	r7, r2
 8009d02:	d0f7      	beq.n	8009cf4 <strstr+0x1a>
 8009d04:	4633      	mov	r3, r6
 8009d06:	e7ec      	b.n	8009ce2 <strstr+0x8>

08009d08 <sulp>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	ec45 4b10 	vmov	d0, r4, r5
 8009d12:	4616      	mov	r6, r2
 8009d14:	f002 ff94 	bl	800cc40 <__ulp>
 8009d18:	ec51 0b10 	vmov	r0, r1, d0
 8009d1c:	b17e      	cbz	r6, 8009d3e <sulp+0x36>
 8009d1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dd09      	ble.n	8009d3e <sulp+0x36>
 8009d2a:	051b      	lsls	r3, r3, #20
 8009d2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009d30:	2400      	movs	r4, #0
 8009d32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009d36:	4622      	mov	r2, r4
 8009d38:	462b      	mov	r3, r5
 8009d3a:	f7f6 fc95 	bl	8000668 <__aeabi_dmul>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}

08009d40 <_strtod_l>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	b0a3      	sub	sp, #140	; 0x8c
 8009d46:	461f      	mov	r7, r3
 8009d48:	2300      	movs	r3, #0
 8009d4a:	931e      	str	r3, [sp, #120]	; 0x78
 8009d4c:	4ba4      	ldr	r3, [pc, #656]	; (8009fe0 <_strtod_l+0x2a0>)
 8009d4e:	9219      	str	r2, [sp, #100]	; 0x64
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	9307      	str	r3, [sp, #28]
 8009d54:	4604      	mov	r4, r0
 8009d56:	4618      	mov	r0, r3
 8009d58:	4688      	mov	r8, r1
 8009d5a:	f7f6 fa6b 	bl	8000234 <strlen>
 8009d5e:	f04f 0a00 	mov.w	sl, #0
 8009d62:	4605      	mov	r5, r0
 8009d64:	f04f 0b00 	mov.w	fp, #0
 8009d68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d6e:	781a      	ldrb	r2, [r3, #0]
 8009d70:	2a2b      	cmp	r2, #43	; 0x2b
 8009d72:	d04c      	beq.n	8009e0e <_strtod_l+0xce>
 8009d74:	d839      	bhi.n	8009dea <_strtod_l+0xaa>
 8009d76:	2a0d      	cmp	r2, #13
 8009d78:	d832      	bhi.n	8009de0 <_strtod_l+0xa0>
 8009d7a:	2a08      	cmp	r2, #8
 8009d7c:	d832      	bhi.n	8009de4 <_strtod_l+0xa4>
 8009d7e:	2a00      	cmp	r2, #0
 8009d80:	d03c      	beq.n	8009dfc <_strtod_l+0xbc>
 8009d82:	2300      	movs	r3, #0
 8009d84:	930e      	str	r3, [sp, #56]	; 0x38
 8009d86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d88:	7833      	ldrb	r3, [r6, #0]
 8009d8a:	2b30      	cmp	r3, #48	; 0x30
 8009d8c:	f040 80b4 	bne.w	8009ef8 <_strtod_l+0x1b8>
 8009d90:	7873      	ldrb	r3, [r6, #1]
 8009d92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d96:	2b58      	cmp	r3, #88	; 0x58
 8009d98:	d16c      	bne.n	8009e74 <_strtod_l+0x134>
 8009d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d9c:	9301      	str	r3, [sp, #4]
 8009d9e:	ab1e      	add	r3, sp, #120	; 0x78
 8009da0:	9702      	str	r7, [sp, #8]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	4a8f      	ldr	r2, [pc, #572]	; (8009fe4 <_strtod_l+0x2a4>)
 8009da6:	ab1f      	add	r3, sp, #124	; 0x7c
 8009da8:	a91d      	add	r1, sp, #116	; 0x74
 8009daa:	4620      	mov	r0, r4
 8009dac:	f002 f840 	bl	800be30 <__gethex>
 8009db0:	f010 0707 	ands.w	r7, r0, #7
 8009db4:	4605      	mov	r5, r0
 8009db6:	d005      	beq.n	8009dc4 <_strtod_l+0x84>
 8009db8:	2f06      	cmp	r7, #6
 8009dba:	d12a      	bne.n	8009e12 <_strtod_l+0xd2>
 8009dbc:	3601      	adds	r6, #1
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	961d      	str	r6, [sp, #116]	; 0x74
 8009dc2:	930e      	str	r3, [sp, #56]	; 0x38
 8009dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 8596 	bne.w	800a8f8 <_strtod_l+0xbb8>
 8009dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dce:	b1db      	cbz	r3, 8009e08 <_strtod_l+0xc8>
 8009dd0:	4652      	mov	r2, sl
 8009dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009dd6:	ec43 2b10 	vmov	d0, r2, r3
 8009dda:	b023      	add	sp, #140	; 0x8c
 8009ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de0:	2a20      	cmp	r2, #32
 8009de2:	d1ce      	bne.n	8009d82 <_strtod_l+0x42>
 8009de4:	3301      	adds	r3, #1
 8009de6:	931d      	str	r3, [sp, #116]	; 0x74
 8009de8:	e7c0      	b.n	8009d6c <_strtod_l+0x2c>
 8009dea:	2a2d      	cmp	r2, #45	; 0x2d
 8009dec:	d1c9      	bne.n	8009d82 <_strtod_l+0x42>
 8009dee:	2201      	movs	r2, #1
 8009df0:	920e      	str	r2, [sp, #56]	; 0x38
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	921d      	str	r2, [sp, #116]	; 0x74
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1c4      	bne.n	8009d86 <_strtod_l+0x46>
 8009dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dfe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f040 8576 	bne.w	800a8f4 <_strtod_l+0xbb4>
 8009e08:	4652      	mov	r2, sl
 8009e0a:	465b      	mov	r3, fp
 8009e0c:	e7e3      	b.n	8009dd6 <_strtod_l+0x96>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	e7ee      	b.n	8009df0 <_strtod_l+0xb0>
 8009e12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009e14:	b13a      	cbz	r2, 8009e26 <_strtod_l+0xe6>
 8009e16:	2135      	movs	r1, #53	; 0x35
 8009e18:	a820      	add	r0, sp, #128	; 0x80
 8009e1a:	f003 f81c 	bl	800ce56 <__copybits>
 8009e1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009e20:	4620      	mov	r0, r4
 8009e22:	f002 fbe1 	bl	800c5e8 <_Bfree>
 8009e26:	3f01      	subs	r7, #1
 8009e28:	2f05      	cmp	r7, #5
 8009e2a:	d807      	bhi.n	8009e3c <_strtod_l+0xfc>
 8009e2c:	e8df f007 	tbb	[pc, r7]
 8009e30:	1d180b0e 	.word	0x1d180b0e
 8009e34:	030e      	.short	0x030e
 8009e36:	f04f 0b00 	mov.w	fp, #0
 8009e3a:	46da      	mov	sl, fp
 8009e3c:	0728      	lsls	r0, r5, #28
 8009e3e:	d5c1      	bpl.n	8009dc4 <_strtod_l+0x84>
 8009e40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009e44:	e7be      	b.n	8009dc4 <_strtod_l+0x84>
 8009e46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8009e4a:	e7f7      	b.n	8009e3c <_strtod_l+0xfc>
 8009e4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009e50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009e52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009e56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e5e:	e7ed      	b.n	8009e3c <_strtod_l+0xfc>
 8009e60:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009fe8 <_strtod_l+0x2a8>
 8009e64:	f04f 0a00 	mov.w	sl, #0
 8009e68:	e7e8      	b.n	8009e3c <_strtod_l+0xfc>
 8009e6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009e6e:	f04f 3aff 	mov.w	sl, #4294967295
 8009e72:	e7e3      	b.n	8009e3c <_strtod_l+0xfc>
 8009e74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e76:	1c5a      	adds	r2, r3, #1
 8009e78:	921d      	str	r2, [sp, #116]	; 0x74
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	2b30      	cmp	r3, #48	; 0x30
 8009e7e:	d0f9      	beq.n	8009e74 <_strtod_l+0x134>
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d09f      	beq.n	8009dc4 <_strtod_l+0x84>
 8009e84:	2301      	movs	r3, #1
 8009e86:	f04f 0900 	mov.w	r9, #0
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e94:	464f      	mov	r7, r9
 8009e96:	220a      	movs	r2, #10
 8009e98:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009e9a:	7806      	ldrb	r6, [r0, #0]
 8009e9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009ea0:	b2d9      	uxtb	r1, r3
 8009ea2:	2909      	cmp	r1, #9
 8009ea4:	d92a      	bls.n	8009efc <_strtod_l+0x1bc>
 8009ea6:	9907      	ldr	r1, [sp, #28]
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	f003 fc2c 	bl	800d706 <strncmp>
 8009eae:	b398      	cbz	r0, 8009f18 <_strtod_l+0x1d8>
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	4633      	mov	r3, r6
 8009eb4:	463d      	mov	r5, r7
 8009eb6:	9007      	str	r0, [sp, #28]
 8009eb8:	4602      	mov	r2, r0
 8009eba:	2b65      	cmp	r3, #101	; 0x65
 8009ebc:	d001      	beq.n	8009ec2 <_strtod_l+0x182>
 8009ebe:	2b45      	cmp	r3, #69	; 0x45
 8009ec0:	d118      	bne.n	8009ef4 <_strtod_l+0x1b4>
 8009ec2:	b91d      	cbnz	r5, 8009ecc <_strtod_l+0x18c>
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	4303      	orrs	r3, r0
 8009ec8:	d098      	beq.n	8009dfc <_strtod_l+0xbc>
 8009eca:	2500      	movs	r5, #0
 8009ecc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009ed0:	f108 0301 	add.w	r3, r8, #1
 8009ed4:	931d      	str	r3, [sp, #116]	; 0x74
 8009ed6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009eda:	2b2b      	cmp	r3, #43	; 0x2b
 8009edc:	d075      	beq.n	8009fca <_strtod_l+0x28a>
 8009ede:	2b2d      	cmp	r3, #45	; 0x2d
 8009ee0:	d07b      	beq.n	8009fda <_strtod_l+0x29a>
 8009ee2:	f04f 0c00 	mov.w	ip, #0
 8009ee6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009eea:	2909      	cmp	r1, #9
 8009eec:	f240 8082 	bls.w	8009ff4 <_strtod_l+0x2b4>
 8009ef0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	e09d      	b.n	800a034 <_strtod_l+0x2f4>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e7c4      	b.n	8009e86 <_strtod_l+0x146>
 8009efc:	2f08      	cmp	r7, #8
 8009efe:	bfd8      	it	le
 8009f00:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009f02:	f100 0001 	add.w	r0, r0, #1
 8009f06:	bfda      	itte	le
 8009f08:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f0c:	9309      	strle	r3, [sp, #36]	; 0x24
 8009f0e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009f12:	3701      	adds	r7, #1
 8009f14:	901d      	str	r0, [sp, #116]	; 0x74
 8009f16:	e7bf      	b.n	8009e98 <_strtod_l+0x158>
 8009f18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f1a:	195a      	adds	r2, r3, r5
 8009f1c:	921d      	str	r2, [sp, #116]	; 0x74
 8009f1e:	5d5b      	ldrb	r3, [r3, r5]
 8009f20:	2f00      	cmp	r7, #0
 8009f22:	d037      	beq.n	8009f94 <_strtod_l+0x254>
 8009f24:	9007      	str	r0, [sp, #28]
 8009f26:	463d      	mov	r5, r7
 8009f28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009f2c:	2a09      	cmp	r2, #9
 8009f2e:	d912      	bls.n	8009f56 <_strtod_l+0x216>
 8009f30:	2201      	movs	r2, #1
 8009f32:	e7c2      	b.n	8009eba <_strtod_l+0x17a>
 8009f34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	921d      	str	r2, [sp, #116]	; 0x74
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	2b30      	cmp	r3, #48	; 0x30
 8009f40:	d0f8      	beq.n	8009f34 <_strtod_l+0x1f4>
 8009f42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009f46:	2a08      	cmp	r2, #8
 8009f48:	f200 84db 	bhi.w	800a902 <_strtod_l+0xbc2>
 8009f4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009f4e:	9007      	str	r0, [sp, #28]
 8009f50:	2000      	movs	r0, #0
 8009f52:	920a      	str	r2, [sp, #40]	; 0x28
 8009f54:	4605      	mov	r5, r0
 8009f56:	3b30      	subs	r3, #48	; 0x30
 8009f58:	f100 0201 	add.w	r2, r0, #1
 8009f5c:	d014      	beq.n	8009f88 <_strtod_l+0x248>
 8009f5e:	9907      	ldr	r1, [sp, #28]
 8009f60:	4411      	add	r1, r2
 8009f62:	9107      	str	r1, [sp, #28]
 8009f64:	462a      	mov	r2, r5
 8009f66:	eb00 0e05 	add.w	lr, r0, r5
 8009f6a:	210a      	movs	r1, #10
 8009f6c:	4572      	cmp	r2, lr
 8009f6e:	d113      	bne.n	8009f98 <_strtod_l+0x258>
 8009f70:	182a      	adds	r2, r5, r0
 8009f72:	2a08      	cmp	r2, #8
 8009f74:	f105 0501 	add.w	r5, r5, #1
 8009f78:	4405      	add	r5, r0
 8009f7a:	dc1c      	bgt.n	8009fb6 <_strtod_l+0x276>
 8009f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f7e:	220a      	movs	r2, #10
 8009f80:	fb02 3301 	mla	r3, r2, r1, r3
 8009f84:	9309      	str	r3, [sp, #36]	; 0x24
 8009f86:	2200      	movs	r2, #0
 8009f88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f8a:	1c59      	adds	r1, r3, #1
 8009f8c:	911d      	str	r1, [sp, #116]	; 0x74
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	4610      	mov	r0, r2
 8009f92:	e7c9      	b.n	8009f28 <_strtod_l+0x1e8>
 8009f94:	4638      	mov	r0, r7
 8009f96:	e7d2      	b.n	8009f3e <_strtod_l+0x1fe>
 8009f98:	2a08      	cmp	r2, #8
 8009f9a:	dc04      	bgt.n	8009fa6 <_strtod_l+0x266>
 8009f9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f9e:	434e      	muls	r6, r1
 8009fa0:	9609      	str	r6, [sp, #36]	; 0x24
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	e7e2      	b.n	8009f6c <_strtod_l+0x22c>
 8009fa6:	f102 0c01 	add.w	ip, r2, #1
 8009faa:	f1bc 0f10 	cmp.w	ip, #16
 8009fae:	bfd8      	it	le
 8009fb0:	fb01 f909 	mulle.w	r9, r1, r9
 8009fb4:	e7f5      	b.n	8009fa2 <_strtod_l+0x262>
 8009fb6:	2d10      	cmp	r5, #16
 8009fb8:	bfdc      	itt	le
 8009fba:	220a      	movle	r2, #10
 8009fbc:	fb02 3909 	mlale	r9, r2, r9, r3
 8009fc0:	e7e1      	b.n	8009f86 <_strtod_l+0x246>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9307      	str	r3, [sp, #28]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	e77c      	b.n	8009ec4 <_strtod_l+0x184>
 8009fca:	f04f 0c00 	mov.w	ip, #0
 8009fce:	f108 0302 	add.w	r3, r8, #2
 8009fd2:	931d      	str	r3, [sp, #116]	; 0x74
 8009fd4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009fd8:	e785      	b.n	8009ee6 <_strtod_l+0x1a6>
 8009fda:	f04f 0c01 	mov.w	ip, #1
 8009fde:	e7f6      	b.n	8009fce <_strtod_l+0x28e>
 8009fe0:	08013298 	.word	0x08013298
 8009fe4:	08012f48 	.word	0x08012f48
 8009fe8:	7ff00000 	.word	0x7ff00000
 8009fec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009fee:	1c59      	adds	r1, r3, #1
 8009ff0:	911d      	str	r1, [sp, #116]	; 0x74
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b30      	cmp	r3, #48	; 0x30
 8009ff6:	d0f9      	beq.n	8009fec <_strtod_l+0x2ac>
 8009ff8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009ffc:	2908      	cmp	r1, #8
 8009ffe:	f63f af79 	bhi.w	8009ef4 <_strtod_l+0x1b4>
 800a002:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a008:	9308      	str	r3, [sp, #32]
 800a00a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a00c:	1c59      	adds	r1, r3, #1
 800a00e:	911d      	str	r1, [sp, #116]	; 0x74
 800a010:	785b      	ldrb	r3, [r3, #1]
 800a012:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a016:	2e09      	cmp	r6, #9
 800a018:	d937      	bls.n	800a08a <_strtod_l+0x34a>
 800a01a:	9e08      	ldr	r6, [sp, #32]
 800a01c:	1b89      	subs	r1, r1, r6
 800a01e:	2908      	cmp	r1, #8
 800a020:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a024:	dc02      	bgt.n	800a02c <_strtod_l+0x2ec>
 800a026:	4576      	cmp	r6, lr
 800a028:	bfa8      	it	ge
 800a02a:	4676      	movge	r6, lr
 800a02c:	f1bc 0f00 	cmp.w	ip, #0
 800a030:	d000      	beq.n	800a034 <_strtod_l+0x2f4>
 800a032:	4276      	negs	r6, r6
 800a034:	2d00      	cmp	r5, #0
 800a036:	d14f      	bne.n	800a0d8 <_strtod_l+0x398>
 800a038:	9904      	ldr	r1, [sp, #16]
 800a03a:	4301      	orrs	r1, r0
 800a03c:	f47f aec2 	bne.w	8009dc4 <_strtod_l+0x84>
 800a040:	2a00      	cmp	r2, #0
 800a042:	f47f aedb 	bne.w	8009dfc <_strtod_l+0xbc>
 800a046:	2b69      	cmp	r3, #105	; 0x69
 800a048:	d027      	beq.n	800a09a <_strtod_l+0x35a>
 800a04a:	dc24      	bgt.n	800a096 <_strtod_l+0x356>
 800a04c:	2b49      	cmp	r3, #73	; 0x49
 800a04e:	d024      	beq.n	800a09a <_strtod_l+0x35a>
 800a050:	2b4e      	cmp	r3, #78	; 0x4e
 800a052:	f47f aed3 	bne.w	8009dfc <_strtod_l+0xbc>
 800a056:	499e      	ldr	r1, [pc, #632]	; (800a2d0 <_strtod_l+0x590>)
 800a058:	a81d      	add	r0, sp, #116	; 0x74
 800a05a:	f002 f941 	bl	800c2e0 <__match>
 800a05e:	2800      	cmp	r0, #0
 800a060:	f43f aecc 	beq.w	8009dfc <_strtod_l+0xbc>
 800a064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b28      	cmp	r3, #40	; 0x28
 800a06a:	d12d      	bne.n	800a0c8 <_strtod_l+0x388>
 800a06c:	4999      	ldr	r1, [pc, #612]	; (800a2d4 <_strtod_l+0x594>)
 800a06e:	aa20      	add	r2, sp, #128	; 0x80
 800a070:	a81d      	add	r0, sp, #116	; 0x74
 800a072:	f002 f949 	bl	800c308 <__hexnan>
 800a076:	2805      	cmp	r0, #5
 800a078:	d126      	bne.n	800a0c8 <_strtod_l+0x388>
 800a07a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a07c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a080:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a084:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a088:	e69c      	b.n	8009dc4 <_strtod_l+0x84>
 800a08a:	210a      	movs	r1, #10
 800a08c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a090:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a094:	e7b9      	b.n	800a00a <_strtod_l+0x2ca>
 800a096:	2b6e      	cmp	r3, #110	; 0x6e
 800a098:	e7db      	b.n	800a052 <_strtod_l+0x312>
 800a09a:	498f      	ldr	r1, [pc, #572]	; (800a2d8 <_strtod_l+0x598>)
 800a09c:	a81d      	add	r0, sp, #116	; 0x74
 800a09e:	f002 f91f 	bl	800c2e0 <__match>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f43f aeaa 	beq.w	8009dfc <_strtod_l+0xbc>
 800a0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0aa:	498c      	ldr	r1, [pc, #560]	; (800a2dc <_strtod_l+0x59c>)
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	a81d      	add	r0, sp, #116	; 0x74
 800a0b0:	931d      	str	r3, [sp, #116]	; 0x74
 800a0b2:	f002 f915 	bl	800c2e0 <__match>
 800a0b6:	b910      	cbnz	r0, 800a0be <_strtod_l+0x37e>
 800a0b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	931d      	str	r3, [sp, #116]	; 0x74
 800a0be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a2ec <_strtod_l+0x5ac>
 800a0c2:	f04f 0a00 	mov.w	sl, #0
 800a0c6:	e67d      	b.n	8009dc4 <_strtod_l+0x84>
 800a0c8:	4885      	ldr	r0, [pc, #532]	; (800a2e0 <_strtod_l+0x5a0>)
 800a0ca:	f003 fac1 	bl	800d650 <nan>
 800a0ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a0d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a0d6:	e675      	b.n	8009dc4 <_strtod_l+0x84>
 800a0d8:	9b07      	ldr	r3, [sp, #28]
 800a0da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0dc:	1af3      	subs	r3, r6, r3
 800a0de:	2f00      	cmp	r7, #0
 800a0e0:	bf08      	it	eq
 800a0e2:	462f      	moveq	r7, r5
 800a0e4:	2d10      	cmp	r5, #16
 800a0e6:	9308      	str	r3, [sp, #32]
 800a0e8:	46a8      	mov	r8, r5
 800a0ea:	bfa8      	it	ge
 800a0ec:	f04f 0810 	movge.w	r8, #16
 800a0f0:	f7f6 fa40 	bl	8000574 <__aeabi_ui2d>
 800a0f4:	2d09      	cmp	r5, #9
 800a0f6:	4682      	mov	sl, r0
 800a0f8:	468b      	mov	fp, r1
 800a0fa:	dd13      	ble.n	800a124 <_strtod_l+0x3e4>
 800a0fc:	4b79      	ldr	r3, [pc, #484]	; (800a2e4 <_strtod_l+0x5a4>)
 800a0fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a102:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a106:	f7f6 faaf 	bl	8000668 <__aeabi_dmul>
 800a10a:	4682      	mov	sl, r0
 800a10c:	4648      	mov	r0, r9
 800a10e:	468b      	mov	fp, r1
 800a110:	f7f6 fa30 	bl	8000574 <__aeabi_ui2d>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4650      	mov	r0, sl
 800a11a:	4659      	mov	r1, fp
 800a11c:	f7f6 f8ee 	bl	80002fc <__adddf3>
 800a120:	4682      	mov	sl, r0
 800a122:	468b      	mov	fp, r1
 800a124:	2d0f      	cmp	r5, #15
 800a126:	dc38      	bgt.n	800a19a <_strtod_l+0x45a>
 800a128:	9b08      	ldr	r3, [sp, #32]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f43f ae4a 	beq.w	8009dc4 <_strtod_l+0x84>
 800a130:	dd24      	ble.n	800a17c <_strtod_l+0x43c>
 800a132:	2b16      	cmp	r3, #22
 800a134:	dc0b      	bgt.n	800a14e <_strtod_l+0x40e>
 800a136:	4d6b      	ldr	r5, [pc, #428]	; (800a2e4 <_strtod_l+0x5a4>)
 800a138:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a13c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a140:	4652      	mov	r2, sl
 800a142:	465b      	mov	r3, fp
 800a144:	f7f6 fa90 	bl	8000668 <__aeabi_dmul>
 800a148:	4682      	mov	sl, r0
 800a14a:	468b      	mov	fp, r1
 800a14c:	e63a      	b.n	8009dc4 <_strtod_l+0x84>
 800a14e:	9a08      	ldr	r2, [sp, #32]
 800a150:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a154:	4293      	cmp	r3, r2
 800a156:	db20      	blt.n	800a19a <_strtod_l+0x45a>
 800a158:	4c62      	ldr	r4, [pc, #392]	; (800a2e4 <_strtod_l+0x5a4>)
 800a15a:	f1c5 050f 	rsb	r5, r5, #15
 800a15e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a162:	4652      	mov	r2, sl
 800a164:	465b      	mov	r3, fp
 800a166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16a:	f7f6 fa7d 	bl	8000668 <__aeabi_dmul>
 800a16e:	9b08      	ldr	r3, [sp, #32]
 800a170:	1b5d      	subs	r5, r3, r5
 800a172:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a176:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a17a:	e7e3      	b.n	800a144 <_strtod_l+0x404>
 800a17c:	9b08      	ldr	r3, [sp, #32]
 800a17e:	3316      	adds	r3, #22
 800a180:	db0b      	blt.n	800a19a <_strtod_l+0x45a>
 800a182:	9b07      	ldr	r3, [sp, #28]
 800a184:	4a57      	ldr	r2, [pc, #348]	; (800a2e4 <_strtod_l+0x5a4>)
 800a186:	1b9e      	subs	r6, r3, r6
 800a188:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a18c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a190:	4650      	mov	r0, sl
 800a192:	4659      	mov	r1, fp
 800a194:	f7f6 fb92 	bl	80008bc <__aeabi_ddiv>
 800a198:	e7d6      	b.n	800a148 <_strtod_l+0x408>
 800a19a:	9b08      	ldr	r3, [sp, #32]
 800a19c:	eba5 0808 	sub.w	r8, r5, r8
 800a1a0:	4498      	add	r8, r3
 800a1a2:	f1b8 0f00 	cmp.w	r8, #0
 800a1a6:	dd71      	ble.n	800a28c <_strtod_l+0x54c>
 800a1a8:	f018 030f 	ands.w	r3, r8, #15
 800a1ac:	d00a      	beq.n	800a1c4 <_strtod_l+0x484>
 800a1ae:	494d      	ldr	r1, [pc, #308]	; (800a2e4 <_strtod_l+0x5a4>)
 800a1b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1b4:	4652      	mov	r2, sl
 800a1b6:	465b      	mov	r3, fp
 800a1b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1bc:	f7f6 fa54 	bl	8000668 <__aeabi_dmul>
 800a1c0:	4682      	mov	sl, r0
 800a1c2:	468b      	mov	fp, r1
 800a1c4:	f038 080f 	bics.w	r8, r8, #15
 800a1c8:	d04d      	beq.n	800a266 <_strtod_l+0x526>
 800a1ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a1ce:	dd22      	ble.n	800a216 <_strtod_l+0x4d6>
 800a1d0:	2500      	movs	r5, #0
 800a1d2:	462e      	mov	r6, r5
 800a1d4:	9509      	str	r5, [sp, #36]	; 0x24
 800a1d6:	9507      	str	r5, [sp, #28]
 800a1d8:	2322      	movs	r3, #34	; 0x22
 800a1da:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a2ec <_strtod_l+0x5ac>
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	f04f 0a00 	mov.w	sl, #0
 800a1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f43f adec 	beq.w	8009dc4 <_strtod_l+0x84>
 800a1ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f002 f9fa 	bl	800c5e8 <_Bfree>
 800a1f4:	9907      	ldr	r1, [sp, #28]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f002 f9f6 	bl	800c5e8 <_Bfree>
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4620      	mov	r0, r4
 800a200:	f002 f9f2 	bl	800c5e8 <_Bfree>
 800a204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a206:	4620      	mov	r0, r4
 800a208:	f002 f9ee 	bl	800c5e8 <_Bfree>
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	f002 f9ea 	bl	800c5e8 <_Bfree>
 800a214:	e5d6      	b.n	8009dc4 <_strtod_l+0x84>
 800a216:	2300      	movs	r3, #0
 800a218:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a21c:	4650      	mov	r0, sl
 800a21e:	4659      	mov	r1, fp
 800a220:	4699      	mov	r9, r3
 800a222:	f1b8 0f01 	cmp.w	r8, #1
 800a226:	dc21      	bgt.n	800a26c <_strtod_l+0x52c>
 800a228:	b10b      	cbz	r3, 800a22e <_strtod_l+0x4ee>
 800a22a:	4682      	mov	sl, r0
 800a22c:	468b      	mov	fp, r1
 800a22e:	4b2e      	ldr	r3, [pc, #184]	; (800a2e8 <_strtod_l+0x5a8>)
 800a230:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a234:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a238:	4652      	mov	r2, sl
 800a23a:	465b      	mov	r3, fp
 800a23c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a240:	f7f6 fa12 	bl	8000668 <__aeabi_dmul>
 800a244:	4b29      	ldr	r3, [pc, #164]	; (800a2ec <_strtod_l+0x5ac>)
 800a246:	460a      	mov	r2, r1
 800a248:	400b      	ands	r3, r1
 800a24a:	4929      	ldr	r1, [pc, #164]	; (800a2f0 <_strtod_l+0x5b0>)
 800a24c:	428b      	cmp	r3, r1
 800a24e:	4682      	mov	sl, r0
 800a250:	d8be      	bhi.n	800a1d0 <_strtod_l+0x490>
 800a252:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a256:	428b      	cmp	r3, r1
 800a258:	bf86      	itte	hi
 800a25a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a2f4 <_strtod_l+0x5b4>
 800a25e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a262:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a266:	2300      	movs	r3, #0
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	e081      	b.n	800a370 <_strtod_l+0x630>
 800a26c:	f018 0f01 	tst.w	r8, #1
 800a270:	d007      	beq.n	800a282 <_strtod_l+0x542>
 800a272:	4b1d      	ldr	r3, [pc, #116]	; (800a2e8 <_strtod_l+0x5a8>)
 800a274:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f7f6 f9f4 	bl	8000668 <__aeabi_dmul>
 800a280:	2301      	movs	r3, #1
 800a282:	f109 0901 	add.w	r9, r9, #1
 800a286:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a28a:	e7ca      	b.n	800a222 <_strtod_l+0x4e2>
 800a28c:	d0eb      	beq.n	800a266 <_strtod_l+0x526>
 800a28e:	f1c8 0800 	rsb	r8, r8, #0
 800a292:	f018 020f 	ands.w	r2, r8, #15
 800a296:	d00a      	beq.n	800a2ae <_strtod_l+0x56e>
 800a298:	4b12      	ldr	r3, [pc, #72]	; (800a2e4 <_strtod_l+0x5a4>)
 800a29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a29e:	4650      	mov	r0, sl
 800a2a0:	4659      	mov	r1, fp
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 fb09 	bl	80008bc <__aeabi_ddiv>
 800a2aa:	4682      	mov	sl, r0
 800a2ac:	468b      	mov	fp, r1
 800a2ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a2b2:	d0d8      	beq.n	800a266 <_strtod_l+0x526>
 800a2b4:	f1b8 0f1f 	cmp.w	r8, #31
 800a2b8:	dd1e      	ble.n	800a2f8 <_strtod_l+0x5b8>
 800a2ba:	2500      	movs	r5, #0
 800a2bc:	462e      	mov	r6, r5
 800a2be:	9509      	str	r5, [sp, #36]	; 0x24
 800a2c0:	9507      	str	r5, [sp, #28]
 800a2c2:	2322      	movs	r3, #34	; 0x22
 800a2c4:	f04f 0a00 	mov.w	sl, #0
 800a2c8:	f04f 0b00 	mov.w	fp, #0
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	e789      	b.n	800a1e4 <_strtod_l+0x4a4>
 800a2d0:	08012f19 	.word	0x08012f19
 800a2d4:	08012f5c 	.word	0x08012f5c
 800a2d8:	08012f11 	.word	0x08012f11
 800a2dc:	08013150 	.word	0x08013150
 800a2e0:	0801304b 	.word	0x0801304b
 800a2e4:	08013338 	.word	0x08013338
 800a2e8:	08013310 	.word	0x08013310
 800a2ec:	7ff00000 	.word	0x7ff00000
 800a2f0:	7ca00000 	.word	0x7ca00000
 800a2f4:	7fefffff 	.word	0x7fefffff
 800a2f8:	f018 0310 	ands.w	r3, r8, #16
 800a2fc:	bf18      	it	ne
 800a2fe:	236a      	movne	r3, #106	; 0x6a
 800a300:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a6b8 <_strtod_l+0x978>
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	4650      	mov	r0, sl
 800a308:	4659      	mov	r1, fp
 800a30a:	2300      	movs	r3, #0
 800a30c:	f018 0f01 	tst.w	r8, #1
 800a310:	d004      	beq.n	800a31c <_strtod_l+0x5dc>
 800a312:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a316:	f7f6 f9a7 	bl	8000668 <__aeabi_dmul>
 800a31a:	2301      	movs	r3, #1
 800a31c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a320:	f109 0908 	add.w	r9, r9, #8
 800a324:	d1f2      	bne.n	800a30c <_strtod_l+0x5cc>
 800a326:	b10b      	cbz	r3, 800a32c <_strtod_l+0x5ec>
 800a328:	4682      	mov	sl, r0
 800a32a:	468b      	mov	fp, r1
 800a32c:	9b04      	ldr	r3, [sp, #16]
 800a32e:	b1bb      	cbz	r3, 800a360 <_strtod_l+0x620>
 800a330:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a334:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a338:	2b00      	cmp	r3, #0
 800a33a:	4659      	mov	r1, fp
 800a33c:	dd10      	ble.n	800a360 <_strtod_l+0x620>
 800a33e:	2b1f      	cmp	r3, #31
 800a340:	f340 8128 	ble.w	800a594 <_strtod_l+0x854>
 800a344:	2b34      	cmp	r3, #52	; 0x34
 800a346:	bfde      	ittt	le
 800a348:	3b20      	suble	r3, #32
 800a34a:	f04f 32ff 	movle.w	r2, #4294967295
 800a34e:	fa02 f303 	lslle.w	r3, r2, r3
 800a352:	f04f 0a00 	mov.w	sl, #0
 800a356:	bfcc      	ite	gt
 800a358:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a35c:	ea03 0b01 	andle.w	fp, r3, r1
 800a360:	2200      	movs	r2, #0
 800a362:	2300      	movs	r3, #0
 800a364:	4650      	mov	r0, sl
 800a366:	4659      	mov	r1, fp
 800a368:	f7f6 fbe6 	bl	8000b38 <__aeabi_dcmpeq>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d1a4      	bne.n	800a2ba <_strtod_l+0x57a>
 800a370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a376:	462b      	mov	r3, r5
 800a378:	463a      	mov	r2, r7
 800a37a:	4620      	mov	r0, r4
 800a37c:	f002 f9a0 	bl	800c6c0 <__s2b>
 800a380:	9009      	str	r0, [sp, #36]	; 0x24
 800a382:	2800      	cmp	r0, #0
 800a384:	f43f af24 	beq.w	800a1d0 <_strtod_l+0x490>
 800a388:	9b07      	ldr	r3, [sp, #28]
 800a38a:	1b9e      	subs	r6, r3, r6
 800a38c:	9b08      	ldr	r3, [sp, #32]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bfb4      	ite	lt
 800a392:	4633      	movlt	r3, r6
 800a394:	2300      	movge	r3, #0
 800a396:	9310      	str	r3, [sp, #64]	; 0x40
 800a398:	9b08      	ldr	r3, [sp, #32]
 800a39a:	2500      	movs	r5, #0
 800a39c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a3a0:	9318      	str	r3, [sp, #96]	; 0x60
 800a3a2:	462e      	mov	r6, r5
 800a3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	6859      	ldr	r1, [r3, #4]
 800a3aa:	f002 f8dd 	bl	800c568 <_Balloc>
 800a3ae:	9007      	str	r0, [sp, #28]
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	f43f af11 	beq.w	800a1d8 <_strtod_l+0x498>
 800a3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b8:	691a      	ldr	r2, [r3, #16]
 800a3ba:	3202      	adds	r2, #2
 800a3bc:	f103 010c 	add.w	r1, r3, #12
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	300c      	adds	r0, #12
 800a3c4:	f002 f8c2 	bl	800c54c <memcpy>
 800a3c8:	ec4b ab10 	vmov	d0, sl, fp
 800a3cc:	aa20      	add	r2, sp, #128	; 0x80
 800a3ce:	a91f      	add	r1, sp, #124	; 0x7c
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a3d6:	f002 fcaf 	bl	800cd38 <__d2b>
 800a3da:	901e      	str	r0, [sp, #120]	; 0x78
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	f43f aefb 	beq.w	800a1d8 <_strtod_l+0x498>
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f002 fa05 	bl	800c7f4 <__i2b>
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	f43f aef3 	beq.w	800a1d8 <_strtod_l+0x498>
 800a3f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3f4:	9904      	ldr	r1, [sp, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bfab      	itete	ge
 800a3fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a3fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a3fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a400:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a404:	bfac      	ite	ge
 800a406:	eb03 0902 	addge.w	r9, r3, r2
 800a40a:	1ad7      	sublt	r7, r2, r3
 800a40c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a40e:	eba3 0801 	sub.w	r8, r3, r1
 800a412:	4490      	add	r8, r2
 800a414:	4ba3      	ldr	r3, [pc, #652]	; (800a6a4 <_strtod_l+0x964>)
 800a416:	f108 38ff 	add.w	r8, r8, #4294967295
 800a41a:	4598      	cmp	r8, r3
 800a41c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a420:	f280 80cc 	bge.w	800a5bc <_strtod_l+0x87c>
 800a424:	eba3 0308 	sub.w	r3, r3, r8
 800a428:	2b1f      	cmp	r3, #31
 800a42a:	eba2 0203 	sub.w	r2, r2, r3
 800a42e:	f04f 0101 	mov.w	r1, #1
 800a432:	f300 80b6 	bgt.w	800a5a2 <_strtod_l+0x862>
 800a436:	fa01 f303 	lsl.w	r3, r1, r3
 800a43a:	9311      	str	r3, [sp, #68]	; 0x44
 800a43c:	2300      	movs	r3, #0
 800a43e:	930c      	str	r3, [sp, #48]	; 0x30
 800a440:	eb09 0802 	add.w	r8, r9, r2
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	45c1      	cmp	r9, r8
 800a448:	4417      	add	r7, r2
 800a44a:	441f      	add	r7, r3
 800a44c:	464b      	mov	r3, r9
 800a44e:	bfa8      	it	ge
 800a450:	4643      	movge	r3, r8
 800a452:	42bb      	cmp	r3, r7
 800a454:	bfa8      	it	ge
 800a456:	463b      	movge	r3, r7
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bfc2      	ittt	gt
 800a45c:	eba8 0803 	subgt.w	r8, r8, r3
 800a460:	1aff      	subgt	r7, r7, r3
 800a462:	eba9 0903 	subgt.w	r9, r9, r3
 800a466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dd17      	ble.n	800a49c <_strtod_l+0x75c>
 800a46c:	4631      	mov	r1, r6
 800a46e:	461a      	mov	r2, r3
 800a470:	4620      	mov	r0, r4
 800a472:	f002 fa7b 	bl	800c96c <__pow5mult>
 800a476:	4606      	mov	r6, r0
 800a478:	2800      	cmp	r0, #0
 800a47a:	f43f aead 	beq.w	800a1d8 <_strtod_l+0x498>
 800a47e:	4601      	mov	r1, r0
 800a480:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a482:	4620      	mov	r0, r4
 800a484:	f002 f9cc 	bl	800c820 <__multiply>
 800a488:	900f      	str	r0, [sp, #60]	; 0x3c
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f43f aea4 	beq.w	800a1d8 <_strtod_l+0x498>
 800a490:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a492:	4620      	mov	r0, r4
 800a494:	f002 f8a8 	bl	800c5e8 <_Bfree>
 800a498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a49a:	931e      	str	r3, [sp, #120]	; 0x78
 800a49c:	f1b8 0f00 	cmp.w	r8, #0
 800a4a0:	f300 8091 	bgt.w	800a5c6 <_strtod_l+0x886>
 800a4a4:	9b08      	ldr	r3, [sp, #32]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	dd08      	ble.n	800a4bc <_strtod_l+0x77c>
 800a4aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a4ac:	9907      	ldr	r1, [sp, #28]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f002 fa5c 	bl	800c96c <__pow5mult>
 800a4b4:	9007      	str	r0, [sp, #28]
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f43f ae8e 	beq.w	800a1d8 <_strtod_l+0x498>
 800a4bc:	2f00      	cmp	r7, #0
 800a4be:	dd08      	ble.n	800a4d2 <_strtod_l+0x792>
 800a4c0:	9907      	ldr	r1, [sp, #28]
 800a4c2:	463a      	mov	r2, r7
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f002 faab 	bl	800ca20 <__lshift>
 800a4ca:	9007      	str	r0, [sp, #28]
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f43f ae83 	beq.w	800a1d8 <_strtod_l+0x498>
 800a4d2:	f1b9 0f00 	cmp.w	r9, #0
 800a4d6:	dd08      	ble.n	800a4ea <_strtod_l+0x7aa>
 800a4d8:	4631      	mov	r1, r6
 800a4da:	464a      	mov	r2, r9
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f002 fa9f 	bl	800ca20 <__lshift>
 800a4e2:	4606      	mov	r6, r0
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f ae77 	beq.w	800a1d8 <_strtod_l+0x498>
 800a4ea:	9a07      	ldr	r2, [sp, #28]
 800a4ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f002 fb1e 	bl	800cb30 <__mdiff>
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f43f ae6e 	beq.w	800a1d8 <_strtod_l+0x498>
 800a4fc:	68c3      	ldr	r3, [r0, #12]
 800a4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a500:	2300      	movs	r3, #0
 800a502:	60c3      	str	r3, [r0, #12]
 800a504:	4631      	mov	r1, r6
 800a506:	f002 faf7 	bl	800caf8 <__mcmp>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	da65      	bge.n	800a5da <_strtod_l+0x89a>
 800a50e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a510:	ea53 030a 	orrs.w	r3, r3, sl
 800a514:	f040 8087 	bne.w	800a626 <_strtod_l+0x8e6>
 800a518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 8082 	bne.w	800a626 <_strtod_l+0x8e6>
 800a522:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a526:	0d1b      	lsrs	r3, r3, #20
 800a528:	051b      	lsls	r3, r3, #20
 800a52a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a52e:	d97a      	bls.n	800a626 <_strtod_l+0x8e6>
 800a530:	696b      	ldr	r3, [r5, #20]
 800a532:	b913      	cbnz	r3, 800a53a <_strtod_l+0x7fa>
 800a534:	692b      	ldr	r3, [r5, #16]
 800a536:	2b01      	cmp	r3, #1
 800a538:	dd75      	ble.n	800a626 <_strtod_l+0x8e6>
 800a53a:	4629      	mov	r1, r5
 800a53c:	2201      	movs	r2, #1
 800a53e:	4620      	mov	r0, r4
 800a540:	f002 fa6e 	bl	800ca20 <__lshift>
 800a544:	4631      	mov	r1, r6
 800a546:	4605      	mov	r5, r0
 800a548:	f002 fad6 	bl	800caf8 <__mcmp>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	dd6a      	ble.n	800a626 <_strtod_l+0x8e6>
 800a550:	9904      	ldr	r1, [sp, #16]
 800a552:	4a55      	ldr	r2, [pc, #340]	; (800a6a8 <_strtod_l+0x968>)
 800a554:	465b      	mov	r3, fp
 800a556:	2900      	cmp	r1, #0
 800a558:	f000 8085 	beq.w	800a666 <_strtod_l+0x926>
 800a55c:	ea02 010b 	and.w	r1, r2, fp
 800a560:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a564:	dc7f      	bgt.n	800a666 <_strtod_l+0x926>
 800a566:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a56a:	f77f aeaa 	ble.w	800a2c2 <_strtod_l+0x582>
 800a56e:	4a4f      	ldr	r2, [pc, #316]	; (800a6ac <_strtod_l+0x96c>)
 800a570:	2300      	movs	r3, #0
 800a572:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a576:	4650      	mov	r0, sl
 800a578:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a57c:	4659      	mov	r1, fp
 800a57e:	f7f6 f873 	bl	8000668 <__aeabi_dmul>
 800a582:	460b      	mov	r3, r1
 800a584:	4303      	orrs	r3, r0
 800a586:	bf08      	it	eq
 800a588:	2322      	moveq	r3, #34	; 0x22
 800a58a:	4682      	mov	sl, r0
 800a58c:	468b      	mov	fp, r1
 800a58e:	bf08      	it	eq
 800a590:	6023      	streq	r3, [r4, #0]
 800a592:	e62b      	b.n	800a1ec <_strtod_l+0x4ac>
 800a594:	f04f 32ff 	mov.w	r2, #4294967295
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	ea03 0a0a 	and.w	sl, r3, sl
 800a5a0:	e6de      	b.n	800a360 <_strtod_l+0x620>
 800a5a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a5a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a5aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a5ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a5b2:	fa01 f308 	lsl.w	r3, r1, r8
 800a5b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5b8:	9111      	str	r1, [sp, #68]	; 0x44
 800a5ba:	e741      	b.n	800a440 <_strtod_l+0x700>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	930c      	str	r3, [sp, #48]	; 0x30
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	9311      	str	r3, [sp, #68]	; 0x44
 800a5c4:	e73c      	b.n	800a440 <_strtod_l+0x700>
 800a5c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f002 fa28 	bl	800ca20 <__lshift>
 800a5d0:	901e      	str	r0, [sp, #120]	; 0x78
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	f47f af66 	bne.w	800a4a4 <_strtod_l+0x764>
 800a5d8:	e5fe      	b.n	800a1d8 <_strtod_l+0x498>
 800a5da:	465f      	mov	r7, fp
 800a5dc:	d16e      	bne.n	800a6bc <_strtod_l+0x97c>
 800a5de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a5e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5e4:	b342      	cbz	r2, 800a638 <_strtod_l+0x8f8>
 800a5e6:	4a32      	ldr	r2, [pc, #200]	; (800a6b0 <_strtod_l+0x970>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d128      	bne.n	800a63e <_strtod_l+0x8fe>
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	b1eb      	cbz	r3, 800a62e <_strtod_l+0x8ee>
 800a5f2:	4a2d      	ldr	r2, [pc, #180]	; (800a6a8 <_strtod_l+0x968>)
 800a5f4:	403a      	ands	r2, r7
 800a5f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a5fa:	f04f 31ff 	mov.w	r1, #4294967295
 800a5fe:	d819      	bhi.n	800a634 <_strtod_l+0x8f4>
 800a600:	0d12      	lsrs	r2, r2, #20
 800a602:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a606:	fa01 f303 	lsl.w	r3, r1, r3
 800a60a:	4298      	cmp	r0, r3
 800a60c:	d117      	bne.n	800a63e <_strtod_l+0x8fe>
 800a60e:	4b29      	ldr	r3, [pc, #164]	; (800a6b4 <_strtod_l+0x974>)
 800a610:	429f      	cmp	r7, r3
 800a612:	d102      	bne.n	800a61a <_strtod_l+0x8da>
 800a614:	3001      	adds	r0, #1
 800a616:	f43f addf 	beq.w	800a1d8 <_strtod_l+0x498>
 800a61a:	4b23      	ldr	r3, [pc, #140]	; (800a6a8 <_strtod_l+0x968>)
 800a61c:	403b      	ands	r3, r7
 800a61e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a622:	f04f 0a00 	mov.w	sl, #0
 800a626:	9b04      	ldr	r3, [sp, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1a0      	bne.n	800a56e <_strtod_l+0x82e>
 800a62c:	e5de      	b.n	800a1ec <_strtod_l+0x4ac>
 800a62e:	f04f 33ff 	mov.w	r3, #4294967295
 800a632:	e7ea      	b.n	800a60a <_strtod_l+0x8ca>
 800a634:	460b      	mov	r3, r1
 800a636:	e7e8      	b.n	800a60a <_strtod_l+0x8ca>
 800a638:	ea53 030a 	orrs.w	r3, r3, sl
 800a63c:	d088      	beq.n	800a550 <_strtod_l+0x810>
 800a63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a640:	b1db      	cbz	r3, 800a67a <_strtod_l+0x93a>
 800a642:	423b      	tst	r3, r7
 800a644:	d0ef      	beq.n	800a626 <_strtod_l+0x8e6>
 800a646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a648:	9a04      	ldr	r2, [sp, #16]
 800a64a:	4650      	mov	r0, sl
 800a64c:	4659      	mov	r1, fp
 800a64e:	b1c3      	cbz	r3, 800a682 <_strtod_l+0x942>
 800a650:	f7ff fb5a 	bl	8009d08 <sulp>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a65c:	f7f5 fe4e 	bl	80002fc <__adddf3>
 800a660:	4682      	mov	sl, r0
 800a662:	468b      	mov	fp, r1
 800a664:	e7df      	b.n	800a626 <_strtod_l+0x8e6>
 800a666:	4013      	ands	r3, r2
 800a668:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a66c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a670:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a674:	f04f 3aff 	mov.w	sl, #4294967295
 800a678:	e7d5      	b.n	800a626 <_strtod_l+0x8e6>
 800a67a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a67c:	ea13 0f0a 	tst.w	r3, sl
 800a680:	e7e0      	b.n	800a644 <_strtod_l+0x904>
 800a682:	f7ff fb41 	bl	8009d08 <sulp>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a68e:	f7f5 fe33 	bl	80002f8 <__aeabi_dsub>
 800a692:	2200      	movs	r2, #0
 800a694:	2300      	movs	r3, #0
 800a696:	4682      	mov	sl, r0
 800a698:	468b      	mov	fp, r1
 800a69a:	f7f6 fa4d 	bl	8000b38 <__aeabi_dcmpeq>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d0c1      	beq.n	800a626 <_strtod_l+0x8e6>
 800a6a2:	e60e      	b.n	800a2c2 <_strtod_l+0x582>
 800a6a4:	fffffc02 	.word	0xfffffc02
 800a6a8:	7ff00000 	.word	0x7ff00000
 800a6ac:	39500000 	.word	0x39500000
 800a6b0:	000fffff 	.word	0x000fffff
 800a6b4:	7fefffff 	.word	0x7fefffff
 800a6b8:	08012f70 	.word	0x08012f70
 800a6bc:	4631      	mov	r1, r6
 800a6be:	4628      	mov	r0, r5
 800a6c0:	f002 fb96 	bl	800cdf0 <__ratio>
 800a6c4:	ec59 8b10 	vmov	r8, r9, d0
 800a6c8:	ee10 0a10 	vmov	r0, s0
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f7f6 fa44 	bl	8000b60 <__aeabi_dcmple>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d07c      	beq.n	800a7d6 <_strtod_l+0xa96>
 800a6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d04c      	beq.n	800a77c <_strtod_l+0xa3c>
 800a6e2:	4b95      	ldr	r3, [pc, #596]	; (800a938 <_strtod_l+0xbf8>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a6ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a938 <_strtod_l+0xbf8>
 800a6ee:	f04f 0800 	mov.w	r8, #0
 800a6f2:	4b92      	ldr	r3, [pc, #584]	; (800a93c <_strtod_l+0xbfc>)
 800a6f4:	403b      	ands	r3, r7
 800a6f6:	9311      	str	r3, [sp, #68]	; 0x44
 800a6f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6fa:	4b91      	ldr	r3, [pc, #580]	; (800a940 <_strtod_l+0xc00>)
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	f040 80b2 	bne.w	800a866 <_strtod_l+0xb26>
 800a702:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a70a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a70e:	ec4b ab10 	vmov	d0, sl, fp
 800a712:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a716:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a71a:	f002 fa91 	bl	800cc40 <__ulp>
 800a71e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a722:	ec53 2b10 	vmov	r2, r3, d0
 800a726:	f7f5 ff9f 	bl	8000668 <__aeabi_dmul>
 800a72a:	4652      	mov	r2, sl
 800a72c:	465b      	mov	r3, fp
 800a72e:	f7f5 fde5 	bl	80002fc <__adddf3>
 800a732:	460b      	mov	r3, r1
 800a734:	4981      	ldr	r1, [pc, #516]	; (800a93c <_strtod_l+0xbfc>)
 800a736:	4a83      	ldr	r2, [pc, #524]	; (800a944 <_strtod_l+0xc04>)
 800a738:	4019      	ands	r1, r3
 800a73a:	4291      	cmp	r1, r2
 800a73c:	4682      	mov	sl, r0
 800a73e:	d95e      	bls.n	800a7fe <_strtod_l+0xabe>
 800a740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a742:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a746:	4293      	cmp	r3, r2
 800a748:	d103      	bne.n	800a752 <_strtod_l+0xa12>
 800a74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a74c:	3301      	adds	r3, #1
 800a74e:	f43f ad43 	beq.w	800a1d8 <_strtod_l+0x498>
 800a752:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a950 <_strtod_l+0xc10>
 800a756:	f04f 3aff 	mov.w	sl, #4294967295
 800a75a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a75c:	4620      	mov	r0, r4
 800a75e:	f001 ff43 	bl	800c5e8 <_Bfree>
 800a762:	9907      	ldr	r1, [sp, #28]
 800a764:	4620      	mov	r0, r4
 800a766:	f001 ff3f 	bl	800c5e8 <_Bfree>
 800a76a:	4631      	mov	r1, r6
 800a76c:	4620      	mov	r0, r4
 800a76e:	f001 ff3b 	bl	800c5e8 <_Bfree>
 800a772:	4629      	mov	r1, r5
 800a774:	4620      	mov	r0, r4
 800a776:	f001 ff37 	bl	800c5e8 <_Bfree>
 800a77a:	e613      	b.n	800a3a4 <_strtod_l+0x664>
 800a77c:	f1ba 0f00 	cmp.w	sl, #0
 800a780:	d11b      	bne.n	800a7ba <_strtod_l+0xa7a>
 800a782:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a786:	b9f3      	cbnz	r3, 800a7c6 <_strtod_l+0xa86>
 800a788:	4b6b      	ldr	r3, [pc, #428]	; (800a938 <_strtod_l+0xbf8>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f6 f9dc 	bl	8000b4c <__aeabi_dcmplt>
 800a794:	b9d0      	cbnz	r0, 800a7cc <_strtod_l+0xa8c>
 800a796:	4640      	mov	r0, r8
 800a798:	4649      	mov	r1, r9
 800a79a:	4b6b      	ldr	r3, [pc, #428]	; (800a948 <_strtod_l+0xc08>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	f7f5 ff63 	bl	8000668 <__aeabi_dmul>
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	4689      	mov	r9, r1
 800a7a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a7aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a7ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800a7b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a7b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a7b8:	e79b      	b.n	800a6f2 <_strtod_l+0x9b2>
 800a7ba:	f1ba 0f01 	cmp.w	sl, #1
 800a7be:	d102      	bne.n	800a7c6 <_strtod_l+0xa86>
 800a7c0:	2f00      	cmp	r7, #0
 800a7c2:	f43f ad7e 	beq.w	800a2c2 <_strtod_l+0x582>
 800a7c6:	4b61      	ldr	r3, [pc, #388]	; (800a94c <_strtod_l+0xc0c>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	e78c      	b.n	800a6e6 <_strtod_l+0x9a6>
 800a7cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a948 <_strtod_l+0xc08>
 800a7d0:	f04f 0800 	mov.w	r8, #0
 800a7d4:	e7e7      	b.n	800a7a6 <_strtod_l+0xa66>
 800a7d6:	4b5c      	ldr	r3, [pc, #368]	; (800a948 <_strtod_l+0xc08>)
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f7f5 ff43 	bl	8000668 <__aeabi_dmul>
 800a7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	4689      	mov	r9, r1
 800a7e8:	b933      	cbnz	r3, 800a7f8 <_strtod_l+0xab8>
 800a7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7ee:	9012      	str	r0, [sp, #72]	; 0x48
 800a7f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a7f6:	e7dd      	b.n	800a7b4 <_strtod_l+0xa74>
 800a7f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a7fc:	e7f9      	b.n	800a7f2 <_strtod_l+0xab2>
 800a7fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a802:	9b04      	ldr	r3, [sp, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1a8      	bne.n	800a75a <_strtod_l+0xa1a>
 800a808:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a80c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a80e:	0d1b      	lsrs	r3, r3, #20
 800a810:	051b      	lsls	r3, r3, #20
 800a812:	429a      	cmp	r2, r3
 800a814:	d1a1      	bne.n	800a75a <_strtod_l+0xa1a>
 800a816:	4640      	mov	r0, r8
 800a818:	4649      	mov	r1, r9
 800a81a:	f7f6 fad5 	bl	8000dc8 <__aeabi_d2lz>
 800a81e:	f7f5 fef5 	bl	800060c <__aeabi_l2d>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4640      	mov	r0, r8
 800a828:	4649      	mov	r1, r9
 800a82a:	f7f5 fd65 	bl	80002f8 <__aeabi_dsub>
 800a82e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a830:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a834:	ea43 030a 	orr.w	r3, r3, sl
 800a838:	4313      	orrs	r3, r2
 800a83a:	4680      	mov	r8, r0
 800a83c:	4689      	mov	r9, r1
 800a83e:	d053      	beq.n	800a8e8 <_strtod_l+0xba8>
 800a840:	a335      	add	r3, pc, #212	; (adr r3, 800a918 <_strtod_l+0xbd8>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f6 f981 	bl	8000b4c <__aeabi_dcmplt>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	f47f acce 	bne.w	800a1ec <_strtod_l+0x4ac>
 800a850:	a333      	add	r3, pc, #204	; (adr r3, 800a920 <_strtod_l+0xbe0>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f6 f995 	bl	8000b88 <__aeabi_dcmpgt>
 800a85e:	2800      	cmp	r0, #0
 800a860:	f43f af7b 	beq.w	800a75a <_strtod_l+0xa1a>
 800a864:	e4c2      	b.n	800a1ec <_strtod_l+0x4ac>
 800a866:	9b04      	ldr	r3, [sp, #16]
 800a868:	b333      	cbz	r3, 800a8b8 <_strtod_l+0xb78>
 800a86a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a86c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a870:	d822      	bhi.n	800a8b8 <_strtod_l+0xb78>
 800a872:	a32d      	add	r3, pc, #180	; (adr r3, 800a928 <_strtod_l+0xbe8>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f6 f970 	bl	8000b60 <__aeabi_dcmple>
 800a880:	b1a0      	cbz	r0, 800a8ac <_strtod_l+0xb6c>
 800a882:	4649      	mov	r1, r9
 800a884:	4640      	mov	r0, r8
 800a886:	f7f6 f9c7 	bl	8000c18 <__aeabi_d2uiz>
 800a88a:	2801      	cmp	r0, #1
 800a88c:	bf38      	it	cc
 800a88e:	2001      	movcc	r0, #1
 800a890:	f7f5 fe70 	bl	8000574 <__aeabi_ui2d>
 800a894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a896:	4680      	mov	r8, r0
 800a898:	4689      	mov	r9, r1
 800a89a:	bb13      	cbnz	r3, 800a8e2 <_strtod_l+0xba2>
 800a89c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8a0:	9014      	str	r0, [sp, #80]	; 0x50
 800a8a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a8a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a8a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a8ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a8b4:	1a9b      	subs	r3, r3, r2
 800a8b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a8c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a8c4:	f002 f9bc 	bl	800cc40 <__ulp>
 800a8c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8cc:	ec53 2b10 	vmov	r2, r3, d0
 800a8d0:	f7f5 feca 	bl	8000668 <__aeabi_dmul>
 800a8d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8d8:	f7f5 fd10 	bl	80002fc <__adddf3>
 800a8dc:	4682      	mov	sl, r0
 800a8de:	468b      	mov	fp, r1
 800a8e0:	e78f      	b.n	800a802 <_strtod_l+0xac2>
 800a8e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a8e6:	e7dd      	b.n	800a8a4 <_strtod_l+0xb64>
 800a8e8:	a311      	add	r3, pc, #68	; (adr r3, 800a930 <_strtod_l+0xbf0>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	f7f6 f92d 	bl	8000b4c <__aeabi_dcmplt>
 800a8f2:	e7b4      	b.n	800a85e <_strtod_l+0xb1e>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a8f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a8fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	f7ff ba65 	b.w	8009dcc <_strtod_l+0x8c>
 800a902:	2b65      	cmp	r3, #101	; 0x65
 800a904:	f43f ab5d 	beq.w	8009fc2 <_strtod_l+0x282>
 800a908:	2b45      	cmp	r3, #69	; 0x45
 800a90a:	f43f ab5a 	beq.w	8009fc2 <_strtod_l+0x282>
 800a90e:	2201      	movs	r2, #1
 800a910:	f7ff bb92 	b.w	800a038 <_strtod_l+0x2f8>
 800a914:	f3af 8000 	nop.w
 800a918:	94a03595 	.word	0x94a03595
 800a91c:	3fdfffff 	.word	0x3fdfffff
 800a920:	35afe535 	.word	0x35afe535
 800a924:	3fe00000 	.word	0x3fe00000
 800a928:	ffc00000 	.word	0xffc00000
 800a92c:	41dfffff 	.word	0x41dfffff
 800a930:	94a03595 	.word	0x94a03595
 800a934:	3fcfffff 	.word	0x3fcfffff
 800a938:	3ff00000 	.word	0x3ff00000
 800a93c:	7ff00000 	.word	0x7ff00000
 800a940:	7fe00000 	.word	0x7fe00000
 800a944:	7c9fffff 	.word	0x7c9fffff
 800a948:	3fe00000 	.word	0x3fe00000
 800a94c:	bff00000 	.word	0xbff00000
 800a950:	7fefffff 	.word	0x7fefffff

0800a954 <_strtod_r>:
 800a954:	4b01      	ldr	r3, [pc, #4]	; (800a95c <_strtod_r+0x8>)
 800a956:	f7ff b9f3 	b.w	8009d40 <_strtod_l>
 800a95a:	bf00      	nop
 800a95c:	20000074 	.word	0x20000074

0800a960 <strtok>:
 800a960:	4b16      	ldr	r3, [pc, #88]	; (800a9bc <strtok+0x5c>)
 800a962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a964:	681e      	ldr	r6, [r3, #0]
 800a966:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a968:	4605      	mov	r5, r0
 800a96a:	b9fc      	cbnz	r4, 800a9ac <strtok+0x4c>
 800a96c:	2050      	movs	r0, #80	; 0x50
 800a96e:	9101      	str	r1, [sp, #4]
 800a970:	f001 fdd2 	bl	800c518 <malloc>
 800a974:	9901      	ldr	r1, [sp, #4]
 800a976:	65b0      	str	r0, [r6, #88]	; 0x58
 800a978:	4602      	mov	r2, r0
 800a97a:	b920      	cbnz	r0, 800a986 <strtok+0x26>
 800a97c:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <strtok+0x60>)
 800a97e:	4811      	ldr	r0, [pc, #68]	; (800a9c4 <strtok+0x64>)
 800a980:	2157      	movs	r1, #87	; 0x57
 800a982:	f000 f98f 	bl	800aca4 <__assert_func>
 800a986:	e9c0 4400 	strd	r4, r4, [r0]
 800a98a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a98e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a992:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a996:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a99a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a99e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a9a2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a9a6:	6184      	str	r4, [r0, #24]
 800a9a8:	7704      	strb	r4, [r0, #28]
 800a9aa:	6244      	str	r4, [r0, #36]	; 0x24
 800a9ac:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	b002      	add	sp, #8
 800a9b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9b8:	f000 b806 	b.w	800a9c8 <__strtok_r>
 800a9bc:	2000000c 	.word	0x2000000c
 800a9c0:	08012f98 	.word	0x08012f98
 800a9c4:	08012faf 	.word	0x08012faf

0800a9c8 <__strtok_r>:
 800a9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ca:	b908      	cbnz	r0, 800a9d0 <__strtok_r+0x8>
 800a9cc:	6810      	ldr	r0, [r2, #0]
 800a9ce:	b188      	cbz	r0, 800a9f4 <__strtok_r+0x2c>
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a9d8:	460f      	mov	r7, r1
 800a9da:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a9de:	b91e      	cbnz	r6, 800a9e8 <__strtok_r+0x20>
 800a9e0:	b965      	cbnz	r5, 800a9fc <__strtok_r+0x34>
 800a9e2:	6015      	str	r5, [r2, #0]
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	e005      	b.n	800a9f4 <__strtok_r+0x2c>
 800a9e8:	42b5      	cmp	r5, r6
 800a9ea:	d1f6      	bne.n	800a9da <__strtok_r+0x12>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1f0      	bne.n	800a9d2 <__strtok_r+0xa>
 800a9f0:	6014      	str	r4, [r2, #0]
 800a9f2:	7003      	strb	r3, [r0, #0]
 800a9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f6:	461c      	mov	r4, r3
 800a9f8:	e00c      	b.n	800aa14 <__strtok_r+0x4c>
 800a9fa:	b915      	cbnz	r5, 800aa02 <__strtok_r+0x3a>
 800a9fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa00:	460e      	mov	r6, r1
 800aa02:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aa06:	42ab      	cmp	r3, r5
 800aa08:	d1f7      	bne.n	800a9fa <__strtok_r+0x32>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d0f3      	beq.n	800a9f6 <__strtok_r+0x2e>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aa14:	6014      	str	r4, [r2, #0]
 800aa16:	e7ed      	b.n	800a9f4 <__strtok_r+0x2c>

0800aa18 <_strtol_l.isra.0>:
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1e:	d001      	beq.n	800aa24 <_strtol_l.isra.0+0xc>
 800aa20:	2b24      	cmp	r3, #36	; 0x24
 800aa22:	d906      	bls.n	800aa32 <_strtol_l.isra.0+0x1a>
 800aa24:	f7fe f9c8 	bl	8008db8 <__errno>
 800aa28:	2316      	movs	r3, #22
 800aa2a:	6003      	str	r3, [r0, #0]
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa32:	4f3a      	ldr	r7, [pc, #232]	; (800ab1c <_strtol_l.isra.0+0x104>)
 800aa34:	468e      	mov	lr, r1
 800aa36:	4676      	mov	r6, lr
 800aa38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aa3c:	5de5      	ldrb	r5, [r4, r7]
 800aa3e:	f015 0508 	ands.w	r5, r5, #8
 800aa42:	d1f8      	bne.n	800aa36 <_strtol_l.isra.0+0x1e>
 800aa44:	2c2d      	cmp	r4, #45	; 0x2d
 800aa46:	d134      	bne.n	800aab2 <_strtol_l.isra.0+0x9a>
 800aa48:	f89e 4000 	ldrb.w	r4, [lr]
 800aa4c:	f04f 0801 	mov.w	r8, #1
 800aa50:	f106 0e02 	add.w	lr, r6, #2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d05c      	beq.n	800ab12 <_strtol_l.isra.0+0xfa>
 800aa58:	2b10      	cmp	r3, #16
 800aa5a:	d10c      	bne.n	800aa76 <_strtol_l.isra.0+0x5e>
 800aa5c:	2c30      	cmp	r4, #48	; 0x30
 800aa5e:	d10a      	bne.n	800aa76 <_strtol_l.isra.0+0x5e>
 800aa60:	f89e 4000 	ldrb.w	r4, [lr]
 800aa64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aa68:	2c58      	cmp	r4, #88	; 0x58
 800aa6a:	d14d      	bne.n	800ab08 <_strtol_l.isra.0+0xf0>
 800aa6c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800aa70:	2310      	movs	r3, #16
 800aa72:	f10e 0e02 	add.w	lr, lr, #2
 800aa76:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800aa7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa7e:	2600      	movs	r6, #0
 800aa80:	fbbc f9f3 	udiv	r9, ip, r3
 800aa84:	4635      	mov	r5, r6
 800aa86:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800aa8e:	2f09      	cmp	r7, #9
 800aa90:	d818      	bhi.n	800aac4 <_strtol_l.isra.0+0xac>
 800aa92:	463c      	mov	r4, r7
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	dd24      	ble.n	800aae2 <_strtol_l.isra.0+0xca>
 800aa98:	2e00      	cmp	r6, #0
 800aa9a:	db1f      	blt.n	800aadc <_strtol_l.isra.0+0xc4>
 800aa9c:	45a9      	cmp	r9, r5
 800aa9e:	d31d      	bcc.n	800aadc <_strtol_l.isra.0+0xc4>
 800aaa0:	d101      	bne.n	800aaa6 <_strtol_l.isra.0+0x8e>
 800aaa2:	45a2      	cmp	sl, r4
 800aaa4:	db1a      	blt.n	800aadc <_strtol_l.isra.0+0xc4>
 800aaa6:	fb05 4503 	mla	r5, r5, r3, r4
 800aaaa:	2601      	movs	r6, #1
 800aaac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aab0:	e7eb      	b.n	800aa8a <_strtol_l.isra.0+0x72>
 800aab2:	2c2b      	cmp	r4, #43	; 0x2b
 800aab4:	bf08      	it	eq
 800aab6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800aaba:	46a8      	mov	r8, r5
 800aabc:	bf08      	it	eq
 800aabe:	f106 0e02 	addeq.w	lr, r6, #2
 800aac2:	e7c7      	b.n	800aa54 <_strtol_l.isra.0+0x3c>
 800aac4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800aac8:	2f19      	cmp	r7, #25
 800aaca:	d801      	bhi.n	800aad0 <_strtol_l.isra.0+0xb8>
 800aacc:	3c37      	subs	r4, #55	; 0x37
 800aace:	e7e1      	b.n	800aa94 <_strtol_l.isra.0+0x7c>
 800aad0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800aad4:	2f19      	cmp	r7, #25
 800aad6:	d804      	bhi.n	800aae2 <_strtol_l.isra.0+0xca>
 800aad8:	3c57      	subs	r4, #87	; 0x57
 800aada:	e7db      	b.n	800aa94 <_strtol_l.isra.0+0x7c>
 800aadc:	f04f 36ff 	mov.w	r6, #4294967295
 800aae0:	e7e4      	b.n	800aaac <_strtol_l.isra.0+0x94>
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	da05      	bge.n	800aaf2 <_strtol_l.isra.0+0xda>
 800aae6:	2322      	movs	r3, #34	; 0x22
 800aae8:	6003      	str	r3, [r0, #0]
 800aaea:	4665      	mov	r5, ip
 800aaec:	b942      	cbnz	r2, 800ab00 <_strtol_l.isra.0+0xe8>
 800aaee:	4628      	mov	r0, r5
 800aaf0:	e79d      	b.n	800aa2e <_strtol_l.isra.0+0x16>
 800aaf2:	f1b8 0f00 	cmp.w	r8, #0
 800aaf6:	d000      	beq.n	800aafa <_strtol_l.isra.0+0xe2>
 800aaf8:	426d      	negs	r5, r5
 800aafa:	2a00      	cmp	r2, #0
 800aafc:	d0f7      	beq.n	800aaee <_strtol_l.isra.0+0xd6>
 800aafe:	b10e      	cbz	r6, 800ab04 <_strtol_l.isra.0+0xec>
 800ab00:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ab04:	6011      	str	r1, [r2, #0]
 800ab06:	e7f2      	b.n	800aaee <_strtol_l.isra.0+0xd6>
 800ab08:	2430      	movs	r4, #48	; 0x30
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1b3      	bne.n	800aa76 <_strtol_l.isra.0+0x5e>
 800ab0e:	2308      	movs	r3, #8
 800ab10:	e7b1      	b.n	800aa76 <_strtol_l.isra.0+0x5e>
 800ab12:	2c30      	cmp	r4, #48	; 0x30
 800ab14:	d0a4      	beq.n	800aa60 <_strtol_l.isra.0+0x48>
 800ab16:	230a      	movs	r3, #10
 800ab18:	e7ad      	b.n	800aa76 <_strtol_l.isra.0+0x5e>
 800ab1a:	bf00      	nop
 800ab1c:	0801304d 	.word	0x0801304d

0800ab20 <_strtol_r>:
 800ab20:	f7ff bf7a 	b.w	800aa18 <_strtol_l.isra.0>

0800ab24 <__swbuf_r>:
 800ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab26:	460e      	mov	r6, r1
 800ab28:	4614      	mov	r4, r2
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	b118      	cbz	r0, 800ab36 <__swbuf_r+0x12>
 800ab2e:	6983      	ldr	r3, [r0, #24]
 800ab30:	b90b      	cbnz	r3, 800ab36 <__swbuf_r+0x12>
 800ab32:	f001 f867 	bl	800bc04 <__sinit>
 800ab36:	4b21      	ldr	r3, [pc, #132]	; (800abbc <__swbuf_r+0x98>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	d12b      	bne.n	800ab94 <__swbuf_r+0x70>
 800ab3c:	686c      	ldr	r4, [r5, #4]
 800ab3e:	69a3      	ldr	r3, [r4, #24]
 800ab40:	60a3      	str	r3, [r4, #8]
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	071a      	lsls	r2, r3, #28
 800ab46:	d52f      	bpl.n	800aba8 <__swbuf_r+0x84>
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	b36b      	cbz	r3, 800aba8 <__swbuf_r+0x84>
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	6820      	ldr	r0, [r4, #0]
 800ab50:	1ac0      	subs	r0, r0, r3
 800ab52:	6963      	ldr	r3, [r4, #20]
 800ab54:	b2f6      	uxtb	r6, r6
 800ab56:	4283      	cmp	r3, r0
 800ab58:	4637      	mov	r7, r6
 800ab5a:	dc04      	bgt.n	800ab66 <__swbuf_r+0x42>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 ffbc 	bl	800badc <_fflush_r>
 800ab64:	bb30      	cbnz	r0, 800abb4 <__swbuf_r+0x90>
 800ab66:	68a3      	ldr	r3, [r4, #8]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	60a3      	str	r3, [r4, #8]
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	6022      	str	r2, [r4, #0]
 800ab72:	701e      	strb	r6, [r3, #0]
 800ab74:	6963      	ldr	r3, [r4, #20]
 800ab76:	3001      	adds	r0, #1
 800ab78:	4283      	cmp	r3, r0
 800ab7a:	d004      	beq.n	800ab86 <__swbuf_r+0x62>
 800ab7c:	89a3      	ldrh	r3, [r4, #12]
 800ab7e:	07db      	lsls	r3, r3, #31
 800ab80:	d506      	bpl.n	800ab90 <__swbuf_r+0x6c>
 800ab82:	2e0a      	cmp	r6, #10
 800ab84:	d104      	bne.n	800ab90 <__swbuf_r+0x6c>
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 ffa7 	bl	800badc <_fflush_r>
 800ab8e:	b988      	cbnz	r0, 800abb4 <__swbuf_r+0x90>
 800ab90:	4638      	mov	r0, r7
 800ab92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab94:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <__swbuf_r+0x9c>)
 800ab96:	429c      	cmp	r4, r3
 800ab98:	d101      	bne.n	800ab9e <__swbuf_r+0x7a>
 800ab9a:	68ac      	ldr	r4, [r5, #8]
 800ab9c:	e7cf      	b.n	800ab3e <__swbuf_r+0x1a>
 800ab9e:	4b09      	ldr	r3, [pc, #36]	; (800abc4 <__swbuf_r+0xa0>)
 800aba0:	429c      	cmp	r4, r3
 800aba2:	bf08      	it	eq
 800aba4:	68ec      	ldreq	r4, [r5, #12]
 800aba6:	e7ca      	b.n	800ab3e <__swbuf_r+0x1a>
 800aba8:	4621      	mov	r1, r4
 800abaa:	4628      	mov	r0, r5
 800abac:	f000 f80c 	bl	800abc8 <__swsetup_r>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d0cb      	beq.n	800ab4c <__swbuf_r+0x28>
 800abb4:	f04f 37ff 	mov.w	r7, #4294967295
 800abb8:	e7ea      	b.n	800ab90 <__swbuf_r+0x6c>
 800abba:	bf00      	nop
 800abbc:	080131ec 	.word	0x080131ec
 800abc0:	0801320c 	.word	0x0801320c
 800abc4:	080131cc 	.word	0x080131cc

0800abc8 <__swsetup_r>:
 800abc8:	4b32      	ldr	r3, [pc, #200]	; (800ac94 <__swsetup_r+0xcc>)
 800abca:	b570      	push	{r4, r5, r6, lr}
 800abcc:	681d      	ldr	r5, [r3, #0]
 800abce:	4606      	mov	r6, r0
 800abd0:	460c      	mov	r4, r1
 800abd2:	b125      	cbz	r5, 800abde <__swsetup_r+0x16>
 800abd4:	69ab      	ldr	r3, [r5, #24]
 800abd6:	b913      	cbnz	r3, 800abde <__swsetup_r+0x16>
 800abd8:	4628      	mov	r0, r5
 800abda:	f001 f813 	bl	800bc04 <__sinit>
 800abde:	4b2e      	ldr	r3, [pc, #184]	; (800ac98 <__swsetup_r+0xd0>)
 800abe0:	429c      	cmp	r4, r3
 800abe2:	d10f      	bne.n	800ac04 <__swsetup_r+0x3c>
 800abe4:	686c      	ldr	r4, [r5, #4]
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abec:	0719      	lsls	r1, r3, #28
 800abee:	d42c      	bmi.n	800ac4a <__swsetup_r+0x82>
 800abf0:	06dd      	lsls	r5, r3, #27
 800abf2:	d411      	bmi.n	800ac18 <__swsetup_r+0x50>
 800abf4:	2309      	movs	r3, #9
 800abf6:	6033      	str	r3, [r6, #0]
 800abf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ac02:	e03e      	b.n	800ac82 <__swsetup_r+0xba>
 800ac04:	4b25      	ldr	r3, [pc, #148]	; (800ac9c <__swsetup_r+0xd4>)
 800ac06:	429c      	cmp	r4, r3
 800ac08:	d101      	bne.n	800ac0e <__swsetup_r+0x46>
 800ac0a:	68ac      	ldr	r4, [r5, #8]
 800ac0c:	e7eb      	b.n	800abe6 <__swsetup_r+0x1e>
 800ac0e:	4b24      	ldr	r3, [pc, #144]	; (800aca0 <__swsetup_r+0xd8>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	bf08      	it	eq
 800ac14:	68ec      	ldreq	r4, [r5, #12]
 800ac16:	e7e6      	b.n	800abe6 <__swsetup_r+0x1e>
 800ac18:	0758      	lsls	r0, r3, #29
 800ac1a:	d512      	bpl.n	800ac42 <__swsetup_r+0x7a>
 800ac1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac1e:	b141      	cbz	r1, 800ac32 <__swsetup_r+0x6a>
 800ac20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac24:	4299      	cmp	r1, r3
 800ac26:	d002      	beq.n	800ac2e <__swsetup_r+0x66>
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f002 f967 	bl	800cefc <_free_r>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	6363      	str	r3, [r4, #52]	; 0x34
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac38:	81a3      	strh	r3, [r4, #12]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	6063      	str	r3, [r4, #4]
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	6023      	str	r3, [r4, #0]
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f043 0308 	orr.w	r3, r3, #8
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	6923      	ldr	r3, [r4, #16]
 800ac4c:	b94b      	cbnz	r3, 800ac62 <__swsetup_r+0x9a>
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac58:	d003      	beq.n	800ac62 <__swsetup_r+0x9a>
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f001 fc1b 	bl	800c498 <__smakebuf_r>
 800ac62:	89a0      	ldrh	r0, [r4, #12]
 800ac64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac68:	f010 0301 	ands.w	r3, r0, #1
 800ac6c:	d00a      	beq.n	800ac84 <__swsetup_r+0xbc>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60a3      	str	r3, [r4, #8]
 800ac72:	6963      	ldr	r3, [r4, #20]
 800ac74:	425b      	negs	r3, r3
 800ac76:	61a3      	str	r3, [r4, #24]
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	b943      	cbnz	r3, 800ac8e <__swsetup_r+0xc6>
 800ac7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac80:	d1ba      	bne.n	800abf8 <__swsetup_r+0x30>
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
 800ac84:	0781      	lsls	r1, r0, #30
 800ac86:	bf58      	it	pl
 800ac88:	6963      	ldrpl	r3, [r4, #20]
 800ac8a:	60a3      	str	r3, [r4, #8]
 800ac8c:	e7f4      	b.n	800ac78 <__swsetup_r+0xb0>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e7f7      	b.n	800ac82 <__swsetup_r+0xba>
 800ac92:	bf00      	nop
 800ac94:	2000000c 	.word	0x2000000c
 800ac98:	080131ec 	.word	0x080131ec
 800ac9c:	0801320c 	.word	0x0801320c
 800aca0:	080131cc 	.word	0x080131cc

0800aca4 <__assert_func>:
 800aca4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aca6:	4614      	mov	r4, r2
 800aca8:	461a      	mov	r2, r3
 800acaa:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <__assert_func+0x2c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4605      	mov	r5, r0
 800acb0:	68d8      	ldr	r0, [r3, #12]
 800acb2:	b14c      	cbz	r4, 800acc8 <__assert_func+0x24>
 800acb4:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <__assert_func+0x30>)
 800acb6:	9100      	str	r1, [sp, #0]
 800acb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acbc:	4906      	ldr	r1, [pc, #24]	; (800acd8 <__assert_func+0x34>)
 800acbe:	462b      	mov	r3, r5
 800acc0:	f001 f81e 	bl	800bd00 <fiprintf>
 800acc4:	f002 fd50 	bl	800d768 <abort>
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <__assert_func+0x38>)
 800acca:	461c      	mov	r4, r3
 800accc:	e7f3      	b.n	800acb6 <__assert_func+0x12>
 800acce:	bf00      	nop
 800acd0:	2000000c 	.word	0x2000000c
 800acd4:	08013010 	.word	0x08013010
 800acd8:	0801301d 	.word	0x0801301d
 800acdc:	0801304b 	.word	0x0801304b

0800ace0 <quorem>:
 800ace0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	6903      	ldr	r3, [r0, #16]
 800ace6:	690c      	ldr	r4, [r1, #16]
 800ace8:	42a3      	cmp	r3, r4
 800acea:	4607      	mov	r7, r0
 800acec:	f2c0 8081 	blt.w	800adf2 <quorem+0x112>
 800acf0:	3c01      	subs	r4, #1
 800acf2:	f101 0814 	add.w	r8, r1, #20
 800acf6:	f100 0514 	add.w	r5, r0, #20
 800acfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad14:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad18:	d331      	bcc.n	800ad7e <quorem+0x9e>
 800ad1a:	f04f 0e00 	mov.w	lr, #0
 800ad1e:	4640      	mov	r0, r8
 800ad20:	46ac      	mov	ip, r5
 800ad22:	46f2      	mov	sl, lr
 800ad24:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad28:	b293      	uxth	r3, r2
 800ad2a:	fb06 e303 	mla	r3, r6, r3, lr
 800ad2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	ebaa 0303 	sub.w	r3, sl, r3
 800ad38:	0c12      	lsrs	r2, r2, #16
 800ad3a:	f8dc a000 	ldr.w	sl, [ip]
 800ad3e:	fb06 e202 	mla	r2, r6, r2, lr
 800ad42:	fa13 f38a 	uxtah	r3, r3, sl
 800ad46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad4a:	fa1f fa82 	uxth.w	sl, r2
 800ad4e:	f8dc 2000 	ldr.w	r2, [ip]
 800ad52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ad56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad60:	4581      	cmp	r9, r0
 800ad62:	f84c 3b04 	str.w	r3, [ip], #4
 800ad66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad6a:	d2db      	bcs.n	800ad24 <quorem+0x44>
 800ad6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad70:	b92b      	cbnz	r3, 800ad7e <quorem+0x9e>
 800ad72:	9b01      	ldr	r3, [sp, #4]
 800ad74:	3b04      	subs	r3, #4
 800ad76:	429d      	cmp	r5, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	d32e      	bcc.n	800adda <quorem+0xfa>
 800ad7c:	613c      	str	r4, [r7, #16]
 800ad7e:	4638      	mov	r0, r7
 800ad80:	f001 feba 	bl	800caf8 <__mcmp>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	db24      	blt.n	800add2 <quorem+0xf2>
 800ad88:	3601      	adds	r6, #1
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f04f 0c00 	mov.w	ip, #0
 800ad90:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad94:	f8d0 e000 	ldr.w	lr, [r0]
 800ad98:	b293      	uxth	r3, r2
 800ad9a:	ebac 0303 	sub.w	r3, ip, r3
 800ad9e:	0c12      	lsrs	r2, r2, #16
 800ada0:	fa13 f38e 	uxtah	r3, r3, lr
 800ada4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ada8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adac:	b29b      	uxth	r3, r3
 800adae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adb2:	45c1      	cmp	r9, r8
 800adb4:	f840 3b04 	str.w	r3, [r0], #4
 800adb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800adbc:	d2e8      	bcs.n	800ad90 <quorem+0xb0>
 800adbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adc6:	b922      	cbnz	r2, 800add2 <quorem+0xf2>
 800adc8:	3b04      	subs	r3, #4
 800adca:	429d      	cmp	r5, r3
 800adcc:	461a      	mov	r2, r3
 800adce:	d30a      	bcc.n	800ade6 <quorem+0x106>
 800add0:	613c      	str	r4, [r7, #16]
 800add2:	4630      	mov	r0, r6
 800add4:	b003      	add	sp, #12
 800add6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adda:	6812      	ldr	r2, [r2, #0]
 800addc:	3b04      	subs	r3, #4
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d1cc      	bne.n	800ad7c <quorem+0x9c>
 800ade2:	3c01      	subs	r4, #1
 800ade4:	e7c7      	b.n	800ad76 <quorem+0x96>
 800ade6:	6812      	ldr	r2, [r2, #0]
 800ade8:	3b04      	subs	r3, #4
 800adea:	2a00      	cmp	r2, #0
 800adec:	d1f0      	bne.n	800add0 <quorem+0xf0>
 800adee:	3c01      	subs	r4, #1
 800adf0:	e7eb      	b.n	800adca <quorem+0xea>
 800adf2:	2000      	movs	r0, #0
 800adf4:	e7ee      	b.n	800add4 <quorem+0xf4>
	...

0800adf8 <_dtoa_r>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	ed2d 8b02 	vpush	{d8}
 800ae00:	ec57 6b10 	vmov	r6, r7, d0
 800ae04:	b095      	sub	sp, #84	; 0x54
 800ae06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae0c:	9105      	str	r1, [sp, #20]
 800ae0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ae12:	4604      	mov	r4, r0
 800ae14:	9209      	str	r2, [sp, #36]	; 0x24
 800ae16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae18:	b975      	cbnz	r5, 800ae38 <_dtoa_r+0x40>
 800ae1a:	2010      	movs	r0, #16
 800ae1c:	f001 fb7c 	bl	800c518 <malloc>
 800ae20:	4602      	mov	r2, r0
 800ae22:	6260      	str	r0, [r4, #36]	; 0x24
 800ae24:	b920      	cbnz	r0, 800ae30 <_dtoa_r+0x38>
 800ae26:	4bb2      	ldr	r3, [pc, #712]	; (800b0f0 <_dtoa_r+0x2f8>)
 800ae28:	21ea      	movs	r1, #234	; 0xea
 800ae2a:	48b2      	ldr	r0, [pc, #712]	; (800b0f4 <_dtoa_r+0x2fc>)
 800ae2c:	f7ff ff3a 	bl	800aca4 <__assert_func>
 800ae30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae34:	6005      	str	r5, [r0, #0]
 800ae36:	60c5      	str	r5, [r0, #12]
 800ae38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae3a:	6819      	ldr	r1, [r3, #0]
 800ae3c:	b151      	cbz	r1, 800ae54 <_dtoa_r+0x5c>
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	604a      	str	r2, [r1, #4]
 800ae42:	2301      	movs	r3, #1
 800ae44:	4093      	lsls	r3, r2
 800ae46:	608b      	str	r3, [r1, #8]
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f001 fbcd 	bl	800c5e8 <_Bfree>
 800ae4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae50:	2200      	movs	r2, #0
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	1e3b      	subs	r3, r7, #0
 800ae56:	bfb9      	ittee	lt
 800ae58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae5c:	9303      	strlt	r3, [sp, #12]
 800ae5e:	2300      	movge	r3, #0
 800ae60:	f8c8 3000 	strge.w	r3, [r8]
 800ae64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ae68:	4ba3      	ldr	r3, [pc, #652]	; (800b0f8 <_dtoa_r+0x300>)
 800ae6a:	bfbc      	itt	lt
 800ae6c:	2201      	movlt	r2, #1
 800ae6e:	f8c8 2000 	strlt.w	r2, [r8]
 800ae72:	ea33 0309 	bics.w	r3, r3, r9
 800ae76:	d11b      	bne.n	800aeb0 <_dtoa_r+0xb8>
 800ae78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae7a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae7e:	6013      	str	r3, [r2, #0]
 800ae80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae84:	4333      	orrs	r3, r6
 800ae86:	f000 857a 	beq.w	800b97e <_dtoa_r+0xb86>
 800ae8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae8c:	b963      	cbnz	r3, 800aea8 <_dtoa_r+0xb0>
 800ae8e:	4b9b      	ldr	r3, [pc, #620]	; (800b0fc <_dtoa_r+0x304>)
 800ae90:	e024      	b.n	800aedc <_dtoa_r+0xe4>
 800ae92:	4b9b      	ldr	r3, [pc, #620]	; (800b100 <_dtoa_r+0x308>)
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	9800      	ldr	r0, [sp, #0]
 800ae9e:	b015      	add	sp, #84	; 0x54
 800aea0:	ecbd 8b02 	vpop	{d8}
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	4b94      	ldr	r3, [pc, #592]	; (800b0fc <_dtoa_r+0x304>)
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	3303      	adds	r3, #3
 800aeae:	e7f3      	b.n	800ae98 <_dtoa_r+0xa0>
 800aeb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	ec51 0b17 	vmov	r0, r1, d7
 800aeba:	2300      	movs	r3, #0
 800aebc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aec0:	f7f5 fe3a 	bl	8000b38 <__aeabi_dcmpeq>
 800aec4:	4680      	mov	r8, r0
 800aec6:	b158      	cbz	r0, 800aee0 <_dtoa_r+0xe8>
 800aec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aeca:	2301      	movs	r3, #1
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 8551 	beq.w	800b978 <_dtoa_r+0xb80>
 800aed6:	488b      	ldr	r0, [pc, #556]	; (800b104 <_dtoa_r+0x30c>)
 800aed8:	6018      	str	r0, [r3, #0]
 800aeda:	1e43      	subs	r3, r0, #1
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	e7dd      	b.n	800ae9c <_dtoa_r+0xa4>
 800aee0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aee4:	aa12      	add	r2, sp, #72	; 0x48
 800aee6:	a913      	add	r1, sp, #76	; 0x4c
 800aee8:	4620      	mov	r0, r4
 800aeea:	f001 ff25 	bl	800cd38 <__d2b>
 800aeee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aef2:	4683      	mov	fp, r0
 800aef4:	2d00      	cmp	r5, #0
 800aef6:	d07c      	beq.n	800aff2 <_dtoa_r+0x1fa>
 800aef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aefa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aefe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800af06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af12:	4b7d      	ldr	r3, [pc, #500]	; (800b108 <_dtoa_r+0x310>)
 800af14:	2200      	movs	r2, #0
 800af16:	4630      	mov	r0, r6
 800af18:	4639      	mov	r1, r7
 800af1a:	f7f5 f9ed 	bl	80002f8 <__aeabi_dsub>
 800af1e:	a36e      	add	r3, pc, #440	; (adr r3, 800b0d8 <_dtoa_r+0x2e0>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 fba0 	bl	8000668 <__aeabi_dmul>
 800af28:	a36d      	add	r3, pc, #436	; (adr r3, 800b0e0 <_dtoa_r+0x2e8>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f7f5 f9e5 	bl	80002fc <__adddf3>
 800af32:	4606      	mov	r6, r0
 800af34:	4628      	mov	r0, r5
 800af36:	460f      	mov	r7, r1
 800af38:	f7f5 fb2c 	bl	8000594 <__aeabi_i2d>
 800af3c:	a36a      	add	r3, pc, #424	; (adr r3, 800b0e8 <_dtoa_r+0x2f0>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 fb91 	bl	8000668 <__aeabi_dmul>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	4630      	mov	r0, r6
 800af4c:	4639      	mov	r1, r7
 800af4e:	f7f5 f9d5 	bl	80002fc <__adddf3>
 800af52:	4606      	mov	r6, r0
 800af54:	460f      	mov	r7, r1
 800af56:	f7f5 fe37 	bl	8000bc8 <__aeabi_d2iz>
 800af5a:	2200      	movs	r2, #0
 800af5c:	4682      	mov	sl, r0
 800af5e:	2300      	movs	r3, #0
 800af60:	4630      	mov	r0, r6
 800af62:	4639      	mov	r1, r7
 800af64:	f7f5 fdf2 	bl	8000b4c <__aeabi_dcmplt>
 800af68:	b148      	cbz	r0, 800af7e <_dtoa_r+0x186>
 800af6a:	4650      	mov	r0, sl
 800af6c:	f7f5 fb12 	bl	8000594 <__aeabi_i2d>
 800af70:	4632      	mov	r2, r6
 800af72:	463b      	mov	r3, r7
 800af74:	f7f5 fde0 	bl	8000b38 <__aeabi_dcmpeq>
 800af78:	b908      	cbnz	r0, 800af7e <_dtoa_r+0x186>
 800af7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af7e:	f1ba 0f16 	cmp.w	sl, #22
 800af82:	d854      	bhi.n	800b02e <_dtoa_r+0x236>
 800af84:	4b61      	ldr	r3, [pc, #388]	; (800b10c <_dtoa_r+0x314>)
 800af86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af92:	f7f5 fddb 	bl	8000b4c <__aeabi_dcmplt>
 800af96:	2800      	cmp	r0, #0
 800af98:	d04b      	beq.n	800b032 <_dtoa_r+0x23a>
 800af9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af9e:	2300      	movs	r3, #0
 800afa0:	930e      	str	r3, [sp, #56]	; 0x38
 800afa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afa4:	1b5d      	subs	r5, r3, r5
 800afa6:	1e6b      	subs	r3, r5, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	bf43      	ittte	mi
 800afac:	2300      	movmi	r3, #0
 800afae:	f1c5 0801 	rsbmi	r8, r5, #1
 800afb2:	9304      	strmi	r3, [sp, #16]
 800afb4:	f04f 0800 	movpl.w	r8, #0
 800afb8:	f1ba 0f00 	cmp.w	sl, #0
 800afbc:	db3b      	blt.n	800b036 <_dtoa_r+0x23e>
 800afbe:	9b04      	ldr	r3, [sp, #16]
 800afc0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800afc4:	4453      	add	r3, sl
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	2300      	movs	r3, #0
 800afca:	9306      	str	r3, [sp, #24]
 800afcc:	9b05      	ldr	r3, [sp, #20]
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d869      	bhi.n	800b0a6 <_dtoa_r+0x2ae>
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	bfc4      	itt	gt
 800afd6:	3b04      	subgt	r3, #4
 800afd8:	9305      	strgt	r3, [sp, #20]
 800afda:	9b05      	ldr	r3, [sp, #20]
 800afdc:	f1a3 0302 	sub.w	r3, r3, #2
 800afe0:	bfcc      	ite	gt
 800afe2:	2500      	movgt	r5, #0
 800afe4:	2501      	movle	r5, #1
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d869      	bhi.n	800b0be <_dtoa_r+0x2c6>
 800afea:	e8df f003 	tbb	[pc, r3]
 800afee:	4e2c      	.short	0x4e2c
 800aff0:	5a4c      	.short	0x5a4c
 800aff2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aff6:	441d      	add	r5, r3
 800aff8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800affc:	2b20      	cmp	r3, #32
 800affe:	bfc1      	itttt	gt
 800b000:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b004:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b008:	fa09 f303 	lslgt.w	r3, r9, r3
 800b00c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b010:	bfda      	itte	le
 800b012:	f1c3 0320 	rsble	r3, r3, #32
 800b016:	fa06 f003 	lslle.w	r0, r6, r3
 800b01a:	4318      	orrgt	r0, r3
 800b01c:	f7f5 faaa 	bl	8000574 <__aeabi_ui2d>
 800b020:	2301      	movs	r3, #1
 800b022:	4606      	mov	r6, r0
 800b024:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b028:	3d01      	subs	r5, #1
 800b02a:	9310      	str	r3, [sp, #64]	; 0x40
 800b02c:	e771      	b.n	800af12 <_dtoa_r+0x11a>
 800b02e:	2301      	movs	r3, #1
 800b030:	e7b6      	b.n	800afa0 <_dtoa_r+0x1a8>
 800b032:	900e      	str	r0, [sp, #56]	; 0x38
 800b034:	e7b5      	b.n	800afa2 <_dtoa_r+0x1aa>
 800b036:	f1ca 0300 	rsb	r3, sl, #0
 800b03a:	9306      	str	r3, [sp, #24]
 800b03c:	2300      	movs	r3, #0
 800b03e:	eba8 080a 	sub.w	r8, r8, sl
 800b042:	930d      	str	r3, [sp, #52]	; 0x34
 800b044:	e7c2      	b.n	800afcc <_dtoa_r+0x1d4>
 800b046:	2300      	movs	r3, #0
 800b048:	9308      	str	r3, [sp, #32]
 800b04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dc39      	bgt.n	800b0c4 <_dtoa_r+0x2cc>
 800b050:	f04f 0901 	mov.w	r9, #1
 800b054:	f8cd 9004 	str.w	r9, [sp, #4]
 800b058:	464b      	mov	r3, r9
 800b05a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b05e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b060:	2200      	movs	r2, #0
 800b062:	6042      	str	r2, [r0, #4]
 800b064:	2204      	movs	r2, #4
 800b066:	f102 0614 	add.w	r6, r2, #20
 800b06a:	429e      	cmp	r6, r3
 800b06c:	6841      	ldr	r1, [r0, #4]
 800b06e:	d92f      	bls.n	800b0d0 <_dtoa_r+0x2d8>
 800b070:	4620      	mov	r0, r4
 800b072:	f001 fa79 	bl	800c568 <_Balloc>
 800b076:	9000      	str	r0, [sp, #0]
 800b078:	2800      	cmp	r0, #0
 800b07a:	d14b      	bne.n	800b114 <_dtoa_r+0x31c>
 800b07c:	4b24      	ldr	r3, [pc, #144]	; (800b110 <_dtoa_r+0x318>)
 800b07e:	4602      	mov	r2, r0
 800b080:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b084:	e6d1      	b.n	800ae2a <_dtoa_r+0x32>
 800b086:	2301      	movs	r3, #1
 800b088:	e7de      	b.n	800b048 <_dtoa_r+0x250>
 800b08a:	2300      	movs	r3, #0
 800b08c:	9308      	str	r3, [sp, #32]
 800b08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b090:	eb0a 0903 	add.w	r9, sl, r3
 800b094:	f109 0301 	add.w	r3, r9, #1
 800b098:	2b01      	cmp	r3, #1
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	bfb8      	it	lt
 800b09e:	2301      	movlt	r3, #1
 800b0a0:	e7dd      	b.n	800b05e <_dtoa_r+0x266>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e7f2      	b.n	800b08c <_dtoa_r+0x294>
 800b0a6:	2501      	movs	r5, #1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9305      	str	r3, [sp, #20]
 800b0ac:	9508      	str	r5, [sp, #32]
 800b0ae:	f04f 39ff 	mov.w	r9, #4294967295
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0b8:	2312      	movs	r3, #18
 800b0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b0bc:	e7cf      	b.n	800b05e <_dtoa_r+0x266>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	9308      	str	r3, [sp, #32]
 800b0c2:	e7f4      	b.n	800b0ae <_dtoa_r+0x2b6>
 800b0c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b0c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0cc:	464b      	mov	r3, r9
 800b0ce:	e7c6      	b.n	800b05e <_dtoa_r+0x266>
 800b0d0:	3101      	adds	r1, #1
 800b0d2:	6041      	str	r1, [r0, #4]
 800b0d4:	0052      	lsls	r2, r2, #1
 800b0d6:	e7c6      	b.n	800b066 <_dtoa_r+0x26e>
 800b0d8:	636f4361 	.word	0x636f4361
 800b0dc:	3fd287a7 	.word	0x3fd287a7
 800b0e0:	8b60c8b3 	.word	0x8b60c8b3
 800b0e4:	3fc68a28 	.word	0x3fc68a28
 800b0e8:	509f79fb 	.word	0x509f79fb
 800b0ec:	3fd34413 	.word	0x3fd34413
 800b0f0:	08012f98 	.word	0x08012f98
 800b0f4:	0801315a 	.word	0x0801315a
 800b0f8:	7ff00000 	.word	0x7ff00000
 800b0fc:	08013156 	.word	0x08013156
 800b100:	0801314d 	.word	0x0801314d
 800b104:	08012f1d 	.word	0x08012f1d
 800b108:	3ff80000 	.word	0x3ff80000
 800b10c:	08013338 	.word	0x08013338
 800b110:	080131b9 	.word	0x080131b9
 800b114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b116:	9a00      	ldr	r2, [sp, #0]
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	2b0e      	cmp	r3, #14
 800b11e:	f200 80ad 	bhi.w	800b27c <_dtoa_r+0x484>
 800b122:	2d00      	cmp	r5, #0
 800b124:	f000 80aa 	beq.w	800b27c <_dtoa_r+0x484>
 800b128:	f1ba 0f00 	cmp.w	sl, #0
 800b12c:	dd36      	ble.n	800b19c <_dtoa_r+0x3a4>
 800b12e:	4ac3      	ldr	r2, [pc, #780]	; (800b43c <_dtoa_r+0x644>)
 800b130:	f00a 030f 	and.w	r3, sl, #15
 800b134:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b138:	ed93 7b00 	vldr	d7, [r3]
 800b13c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b140:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b144:	eeb0 8a47 	vmov.f32	s16, s14
 800b148:	eef0 8a67 	vmov.f32	s17, s15
 800b14c:	d016      	beq.n	800b17c <_dtoa_r+0x384>
 800b14e:	4bbc      	ldr	r3, [pc, #752]	; (800b440 <_dtoa_r+0x648>)
 800b150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b158:	f7f5 fbb0 	bl	80008bc <__aeabi_ddiv>
 800b15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b160:	f007 070f 	and.w	r7, r7, #15
 800b164:	2503      	movs	r5, #3
 800b166:	4eb6      	ldr	r6, [pc, #728]	; (800b440 <_dtoa_r+0x648>)
 800b168:	b957      	cbnz	r7, 800b180 <_dtoa_r+0x388>
 800b16a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b16e:	ec53 2b18 	vmov	r2, r3, d8
 800b172:	f7f5 fba3 	bl	80008bc <__aeabi_ddiv>
 800b176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b17a:	e029      	b.n	800b1d0 <_dtoa_r+0x3d8>
 800b17c:	2502      	movs	r5, #2
 800b17e:	e7f2      	b.n	800b166 <_dtoa_r+0x36e>
 800b180:	07f9      	lsls	r1, r7, #31
 800b182:	d508      	bpl.n	800b196 <_dtoa_r+0x39e>
 800b184:	ec51 0b18 	vmov	r0, r1, d8
 800b188:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b18c:	f7f5 fa6c 	bl	8000668 <__aeabi_dmul>
 800b190:	ec41 0b18 	vmov	d8, r0, r1
 800b194:	3501      	adds	r5, #1
 800b196:	107f      	asrs	r7, r7, #1
 800b198:	3608      	adds	r6, #8
 800b19a:	e7e5      	b.n	800b168 <_dtoa_r+0x370>
 800b19c:	f000 80a6 	beq.w	800b2ec <_dtoa_r+0x4f4>
 800b1a0:	f1ca 0600 	rsb	r6, sl, #0
 800b1a4:	4ba5      	ldr	r3, [pc, #660]	; (800b43c <_dtoa_r+0x644>)
 800b1a6:	4fa6      	ldr	r7, [pc, #664]	; (800b440 <_dtoa_r+0x648>)
 800b1a8:	f006 020f 	and.w	r2, r6, #15
 800b1ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1b8:	f7f5 fa56 	bl	8000668 <__aeabi_dmul>
 800b1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1c0:	1136      	asrs	r6, r6, #4
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	2502      	movs	r5, #2
 800b1c6:	2e00      	cmp	r6, #0
 800b1c8:	f040 8085 	bne.w	800b2d6 <_dtoa_r+0x4de>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1d2      	bne.n	800b176 <_dtoa_r+0x37e>
 800b1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 808c 	beq.w	800b2f0 <_dtoa_r+0x4f8>
 800b1d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1dc:	4b99      	ldr	r3, [pc, #612]	; (800b444 <_dtoa_r+0x64c>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	4639      	mov	r1, r7
 800b1e4:	f7f5 fcb2 	bl	8000b4c <__aeabi_dcmplt>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	f000 8081 	beq.w	800b2f0 <_dtoa_r+0x4f8>
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d07d      	beq.n	800b2f0 <_dtoa_r+0x4f8>
 800b1f4:	f1b9 0f00 	cmp.w	r9, #0
 800b1f8:	dd3c      	ble.n	800b274 <_dtoa_r+0x47c>
 800b1fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b1fe:	9307      	str	r3, [sp, #28]
 800b200:	2200      	movs	r2, #0
 800b202:	4b91      	ldr	r3, [pc, #580]	; (800b448 <_dtoa_r+0x650>)
 800b204:	4630      	mov	r0, r6
 800b206:	4639      	mov	r1, r7
 800b208:	f7f5 fa2e 	bl	8000668 <__aeabi_dmul>
 800b20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b210:	3501      	adds	r5, #1
 800b212:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b216:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b21a:	4628      	mov	r0, r5
 800b21c:	f7f5 f9ba 	bl	8000594 <__aeabi_i2d>
 800b220:	4632      	mov	r2, r6
 800b222:	463b      	mov	r3, r7
 800b224:	f7f5 fa20 	bl	8000668 <__aeabi_dmul>
 800b228:	4b88      	ldr	r3, [pc, #544]	; (800b44c <_dtoa_r+0x654>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	f7f5 f866 	bl	80002fc <__adddf3>
 800b230:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b238:	9303      	str	r3, [sp, #12]
 800b23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d15c      	bne.n	800b2fa <_dtoa_r+0x502>
 800b240:	4b83      	ldr	r3, [pc, #524]	; (800b450 <_dtoa_r+0x658>)
 800b242:	2200      	movs	r2, #0
 800b244:	4630      	mov	r0, r6
 800b246:	4639      	mov	r1, r7
 800b248:	f7f5 f856 	bl	80002f8 <__aeabi_dsub>
 800b24c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	f7f5 fc98 	bl	8000b88 <__aeabi_dcmpgt>
 800b258:	2800      	cmp	r0, #0
 800b25a:	f040 8296 	bne.w	800b78a <_dtoa_r+0x992>
 800b25e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b262:	4630      	mov	r0, r6
 800b264:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b268:	4639      	mov	r1, r7
 800b26a:	f7f5 fc6f 	bl	8000b4c <__aeabi_dcmplt>
 800b26e:	2800      	cmp	r0, #0
 800b270:	f040 8288 	bne.w	800b784 <_dtoa_r+0x98c>
 800b274:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b278:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b27c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f2c0 8158 	blt.w	800b534 <_dtoa_r+0x73c>
 800b284:	f1ba 0f0e 	cmp.w	sl, #14
 800b288:	f300 8154 	bgt.w	800b534 <_dtoa_r+0x73c>
 800b28c:	4b6b      	ldr	r3, [pc, #428]	; (800b43c <_dtoa_r+0x644>)
 800b28e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b292:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f280 80e3 	bge.w	800b464 <_dtoa_r+0x66c>
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f300 80df 	bgt.w	800b464 <_dtoa_r+0x66c>
 800b2a6:	f040 826d 	bne.w	800b784 <_dtoa_r+0x98c>
 800b2aa:	4b69      	ldr	r3, [pc, #420]	; (800b450 <_dtoa_r+0x658>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	f7f5 f9d9 	bl	8000668 <__aeabi_dmul>
 800b2b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2ba:	f7f5 fc5b 	bl	8000b74 <__aeabi_dcmpge>
 800b2be:	9e01      	ldr	r6, [sp, #4]
 800b2c0:	4637      	mov	r7, r6
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	f040 8243 	bne.w	800b74e <_dtoa_r+0x956>
 800b2c8:	9d00      	ldr	r5, [sp, #0]
 800b2ca:	2331      	movs	r3, #49	; 0x31
 800b2cc:	f805 3b01 	strb.w	r3, [r5], #1
 800b2d0:	f10a 0a01 	add.w	sl, sl, #1
 800b2d4:	e23f      	b.n	800b756 <_dtoa_r+0x95e>
 800b2d6:	07f2      	lsls	r2, r6, #31
 800b2d8:	d505      	bpl.n	800b2e6 <_dtoa_r+0x4ee>
 800b2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2de:	f7f5 f9c3 	bl	8000668 <__aeabi_dmul>
 800b2e2:	3501      	adds	r5, #1
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	1076      	asrs	r6, r6, #1
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	e76c      	b.n	800b1c6 <_dtoa_r+0x3ce>
 800b2ec:	2502      	movs	r5, #2
 800b2ee:	e76f      	b.n	800b1d0 <_dtoa_r+0x3d8>
 800b2f0:	9b01      	ldr	r3, [sp, #4]
 800b2f2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b2f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2f8:	e78d      	b.n	800b216 <_dtoa_r+0x41e>
 800b2fa:	9900      	ldr	r1, [sp, #0]
 800b2fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b2fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b300:	4b4e      	ldr	r3, [pc, #312]	; (800b43c <_dtoa_r+0x644>)
 800b302:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b306:	4401      	add	r1, r0
 800b308:	9102      	str	r1, [sp, #8]
 800b30a:	9908      	ldr	r1, [sp, #32]
 800b30c:	eeb0 8a47 	vmov.f32	s16, s14
 800b310:	eef0 8a67 	vmov.f32	s17, s15
 800b314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b31c:	2900      	cmp	r1, #0
 800b31e:	d045      	beq.n	800b3ac <_dtoa_r+0x5b4>
 800b320:	494c      	ldr	r1, [pc, #304]	; (800b454 <_dtoa_r+0x65c>)
 800b322:	2000      	movs	r0, #0
 800b324:	f7f5 faca 	bl	80008bc <__aeabi_ddiv>
 800b328:	ec53 2b18 	vmov	r2, r3, d8
 800b32c:	f7f4 ffe4 	bl	80002f8 <__aeabi_dsub>
 800b330:	9d00      	ldr	r5, [sp, #0]
 800b332:	ec41 0b18 	vmov	d8, r0, r1
 800b336:	4639      	mov	r1, r7
 800b338:	4630      	mov	r0, r6
 800b33a:	f7f5 fc45 	bl	8000bc8 <__aeabi_d2iz>
 800b33e:	900c      	str	r0, [sp, #48]	; 0x30
 800b340:	f7f5 f928 	bl	8000594 <__aeabi_i2d>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f4 ffd4 	bl	80002f8 <__aeabi_dsub>
 800b350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b352:	3330      	adds	r3, #48	; 0x30
 800b354:	f805 3b01 	strb.w	r3, [r5], #1
 800b358:	ec53 2b18 	vmov	r2, r3, d8
 800b35c:	4606      	mov	r6, r0
 800b35e:	460f      	mov	r7, r1
 800b360:	f7f5 fbf4 	bl	8000b4c <__aeabi_dcmplt>
 800b364:	2800      	cmp	r0, #0
 800b366:	d165      	bne.n	800b434 <_dtoa_r+0x63c>
 800b368:	4632      	mov	r2, r6
 800b36a:	463b      	mov	r3, r7
 800b36c:	4935      	ldr	r1, [pc, #212]	; (800b444 <_dtoa_r+0x64c>)
 800b36e:	2000      	movs	r0, #0
 800b370:	f7f4 ffc2 	bl	80002f8 <__aeabi_dsub>
 800b374:	ec53 2b18 	vmov	r2, r3, d8
 800b378:	f7f5 fbe8 	bl	8000b4c <__aeabi_dcmplt>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f040 80b9 	bne.w	800b4f4 <_dtoa_r+0x6fc>
 800b382:	9b02      	ldr	r3, [sp, #8]
 800b384:	429d      	cmp	r5, r3
 800b386:	f43f af75 	beq.w	800b274 <_dtoa_r+0x47c>
 800b38a:	4b2f      	ldr	r3, [pc, #188]	; (800b448 <_dtoa_r+0x650>)
 800b38c:	ec51 0b18 	vmov	r0, r1, d8
 800b390:	2200      	movs	r2, #0
 800b392:	f7f5 f969 	bl	8000668 <__aeabi_dmul>
 800b396:	4b2c      	ldr	r3, [pc, #176]	; (800b448 <_dtoa_r+0x650>)
 800b398:	ec41 0b18 	vmov	d8, r0, r1
 800b39c:	2200      	movs	r2, #0
 800b39e:	4630      	mov	r0, r6
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	f7f5 f961 	bl	8000668 <__aeabi_dmul>
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	460f      	mov	r7, r1
 800b3aa:	e7c4      	b.n	800b336 <_dtoa_r+0x53e>
 800b3ac:	ec51 0b17 	vmov	r0, r1, d7
 800b3b0:	f7f5 f95a 	bl	8000668 <__aeabi_dmul>
 800b3b4:	9b02      	ldr	r3, [sp, #8]
 800b3b6:	9d00      	ldr	r5, [sp, #0]
 800b3b8:	930c      	str	r3, [sp, #48]	; 0x30
 800b3ba:	ec41 0b18 	vmov	d8, r0, r1
 800b3be:	4639      	mov	r1, r7
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7f5 fc01 	bl	8000bc8 <__aeabi_d2iz>
 800b3c6:	9011      	str	r0, [sp, #68]	; 0x44
 800b3c8:	f7f5 f8e4 	bl	8000594 <__aeabi_i2d>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	f7f4 ff90 	bl	80002f8 <__aeabi_dsub>
 800b3d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3da:	3330      	adds	r3, #48	; 0x30
 800b3dc:	f805 3b01 	strb.w	r3, [r5], #1
 800b3e0:	9b02      	ldr	r3, [sp, #8]
 800b3e2:	429d      	cmp	r5, r3
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	460f      	mov	r7, r1
 800b3e8:	f04f 0200 	mov.w	r2, #0
 800b3ec:	d134      	bne.n	800b458 <_dtoa_r+0x660>
 800b3ee:	4b19      	ldr	r3, [pc, #100]	; (800b454 <_dtoa_r+0x65c>)
 800b3f0:	ec51 0b18 	vmov	r0, r1, d8
 800b3f4:	f7f4 ff82 	bl	80002fc <__adddf3>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	4639      	mov	r1, r7
 800b400:	f7f5 fbc2 	bl	8000b88 <__aeabi_dcmpgt>
 800b404:	2800      	cmp	r0, #0
 800b406:	d175      	bne.n	800b4f4 <_dtoa_r+0x6fc>
 800b408:	ec53 2b18 	vmov	r2, r3, d8
 800b40c:	4911      	ldr	r1, [pc, #68]	; (800b454 <_dtoa_r+0x65c>)
 800b40e:	2000      	movs	r0, #0
 800b410:	f7f4 ff72 	bl	80002f8 <__aeabi_dsub>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4630      	mov	r0, r6
 800b41a:	4639      	mov	r1, r7
 800b41c:	f7f5 fb96 	bl	8000b4c <__aeabi_dcmplt>
 800b420:	2800      	cmp	r0, #0
 800b422:	f43f af27 	beq.w	800b274 <_dtoa_r+0x47c>
 800b426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b428:	1e6b      	subs	r3, r5, #1
 800b42a:	930c      	str	r3, [sp, #48]	; 0x30
 800b42c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b430:	2b30      	cmp	r3, #48	; 0x30
 800b432:	d0f8      	beq.n	800b426 <_dtoa_r+0x62e>
 800b434:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b438:	e04a      	b.n	800b4d0 <_dtoa_r+0x6d8>
 800b43a:	bf00      	nop
 800b43c:	08013338 	.word	0x08013338
 800b440:	08013310 	.word	0x08013310
 800b444:	3ff00000 	.word	0x3ff00000
 800b448:	40240000 	.word	0x40240000
 800b44c:	401c0000 	.word	0x401c0000
 800b450:	40140000 	.word	0x40140000
 800b454:	3fe00000 	.word	0x3fe00000
 800b458:	4baf      	ldr	r3, [pc, #700]	; (800b718 <_dtoa_r+0x920>)
 800b45a:	f7f5 f905 	bl	8000668 <__aeabi_dmul>
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	e7ac      	b.n	800b3be <_dtoa_r+0x5c6>
 800b464:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b468:	9d00      	ldr	r5, [sp, #0]
 800b46a:	4642      	mov	r2, r8
 800b46c:	464b      	mov	r3, r9
 800b46e:	4630      	mov	r0, r6
 800b470:	4639      	mov	r1, r7
 800b472:	f7f5 fa23 	bl	80008bc <__aeabi_ddiv>
 800b476:	f7f5 fba7 	bl	8000bc8 <__aeabi_d2iz>
 800b47a:	9002      	str	r0, [sp, #8]
 800b47c:	f7f5 f88a 	bl	8000594 <__aeabi_i2d>
 800b480:	4642      	mov	r2, r8
 800b482:	464b      	mov	r3, r9
 800b484:	f7f5 f8f0 	bl	8000668 <__aeabi_dmul>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4630      	mov	r0, r6
 800b48e:	4639      	mov	r1, r7
 800b490:	f7f4 ff32 	bl	80002f8 <__aeabi_dsub>
 800b494:	9e02      	ldr	r6, [sp, #8]
 800b496:	9f01      	ldr	r7, [sp, #4]
 800b498:	3630      	adds	r6, #48	; 0x30
 800b49a:	f805 6b01 	strb.w	r6, [r5], #1
 800b49e:	9e00      	ldr	r6, [sp, #0]
 800b4a0:	1bae      	subs	r6, r5, r6
 800b4a2:	42b7      	cmp	r7, r6
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	460b      	mov	r3, r1
 800b4a8:	d137      	bne.n	800b51a <_dtoa_r+0x722>
 800b4aa:	f7f4 ff27 	bl	80002fc <__adddf3>
 800b4ae:	4642      	mov	r2, r8
 800b4b0:	464b      	mov	r3, r9
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	f7f5 fb67 	bl	8000b88 <__aeabi_dcmpgt>
 800b4ba:	b9c8      	cbnz	r0, 800b4f0 <_dtoa_r+0x6f8>
 800b4bc:	4642      	mov	r2, r8
 800b4be:	464b      	mov	r3, r9
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	f7f5 fb38 	bl	8000b38 <__aeabi_dcmpeq>
 800b4c8:	b110      	cbz	r0, 800b4d0 <_dtoa_r+0x6d8>
 800b4ca:	9b02      	ldr	r3, [sp, #8]
 800b4cc:	07d9      	lsls	r1, r3, #31
 800b4ce:	d40f      	bmi.n	800b4f0 <_dtoa_r+0x6f8>
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4659      	mov	r1, fp
 800b4d4:	f001 f888 	bl	800c5e8 <_Bfree>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	702b      	strb	r3, [r5, #0]
 800b4dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4de:	f10a 0001 	add.w	r0, sl, #1
 800b4e2:	6018      	str	r0, [r3, #0]
 800b4e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f43f acd8 	beq.w	800ae9c <_dtoa_r+0xa4>
 800b4ec:	601d      	str	r5, [r3, #0]
 800b4ee:	e4d5      	b.n	800ae9c <_dtoa_r+0xa4>
 800b4f0:	f8cd a01c 	str.w	sl, [sp, #28]
 800b4f4:	462b      	mov	r3, r5
 800b4f6:	461d      	mov	r5, r3
 800b4f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4fc:	2a39      	cmp	r2, #57	; 0x39
 800b4fe:	d108      	bne.n	800b512 <_dtoa_r+0x71a>
 800b500:	9a00      	ldr	r2, [sp, #0]
 800b502:	429a      	cmp	r2, r3
 800b504:	d1f7      	bne.n	800b4f6 <_dtoa_r+0x6fe>
 800b506:	9a07      	ldr	r2, [sp, #28]
 800b508:	9900      	ldr	r1, [sp, #0]
 800b50a:	3201      	adds	r2, #1
 800b50c:	9207      	str	r2, [sp, #28]
 800b50e:	2230      	movs	r2, #48	; 0x30
 800b510:	700a      	strb	r2, [r1, #0]
 800b512:	781a      	ldrb	r2, [r3, #0]
 800b514:	3201      	adds	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	e78c      	b.n	800b434 <_dtoa_r+0x63c>
 800b51a:	4b7f      	ldr	r3, [pc, #508]	; (800b718 <_dtoa_r+0x920>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	f7f5 f8a3 	bl	8000668 <__aeabi_dmul>
 800b522:	2200      	movs	r2, #0
 800b524:	2300      	movs	r3, #0
 800b526:	4606      	mov	r6, r0
 800b528:	460f      	mov	r7, r1
 800b52a:	f7f5 fb05 	bl	8000b38 <__aeabi_dcmpeq>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d09b      	beq.n	800b46a <_dtoa_r+0x672>
 800b532:	e7cd      	b.n	800b4d0 <_dtoa_r+0x6d8>
 800b534:	9a08      	ldr	r2, [sp, #32]
 800b536:	2a00      	cmp	r2, #0
 800b538:	f000 80c4 	beq.w	800b6c4 <_dtoa_r+0x8cc>
 800b53c:	9a05      	ldr	r2, [sp, #20]
 800b53e:	2a01      	cmp	r2, #1
 800b540:	f300 80a8 	bgt.w	800b694 <_dtoa_r+0x89c>
 800b544:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b546:	2a00      	cmp	r2, #0
 800b548:	f000 80a0 	beq.w	800b68c <_dtoa_r+0x894>
 800b54c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b550:	9e06      	ldr	r6, [sp, #24]
 800b552:	4645      	mov	r5, r8
 800b554:	9a04      	ldr	r2, [sp, #16]
 800b556:	2101      	movs	r1, #1
 800b558:	441a      	add	r2, r3
 800b55a:	4620      	mov	r0, r4
 800b55c:	4498      	add	r8, r3
 800b55e:	9204      	str	r2, [sp, #16]
 800b560:	f001 f948 	bl	800c7f4 <__i2b>
 800b564:	4607      	mov	r7, r0
 800b566:	2d00      	cmp	r5, #0
 800b568:	dd0b      	ble.n	800b582 <_dtoa_r+0x78a>
 800b56a:	9b04      	ldr	r3, [sp, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	dd08      	ble.n	800b582 <_dtoa_r+0x78a>
 800b570:	42ab      	cmp	r3, r5
 800b572:	9a04      	ldr	r2, [sp, #16]
 800b574:	bfa8      	it	ge
 800b576:	462b      	movge	r3, r5
 800b578:	eba8 0803 	sub.w	r8, r8, r3
 800b57c:	1aed      	subs	r5, r5, r3
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	9304      	str	r3, [sp, #16]
 800b582:	9b06      	ldr	r3, [sp, #24]
 800b584:	b1fb      	cbz	r3, 800b5c6 <_dtoa_r+0x7ce>
 800b586:	9b08      	ldr	r3, [sp, #32]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 809f 	beq.w	800b6cc <_dtoa_r+0x8d4>
 800b58e:	2e00      	cmp	r6, #0
 800b590:	dd11      	ble.n	800b5b6 <_dtoa_r+0x7be>
 800b592:	4639      	mov	r1, r7
 800b594:	4632      	mov	r2, r6
 800b596:	4620      	mov	r0, r4
 800b598:	f001 f9e8 	bl	800c96c <__pow5mult>
 800b59c:	465a      	mov	r2, fp
 800b59e:	4601      	mov	r1, r0
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f001 f93c 	bl	800c820 <__multiply>
 800b5a8:	4659      	mov	r1, fp
 800b5aa:	9007      	str	r0, [sp, #28]
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f001 f81b 	bl	800c5e8 <_Bfree>
 800b5b2:	9b07      	ldr	r3, [sp, #28]
 800b5b4:	469b      	mov	fp, r3
 800b5b6:	9b06      	ldr	r3, [sp, #24]
 800b5b8:	1b9a      	subs	r2, r3, r6
 800b5ba:	d004      	beq.n	800b5c6 <_dtoa_r+0x7ce>
 800b5bc:	4659      	mov	r1, fp
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f001 f9d4 	bl	800c96c <__pow5mult>
 800b5c4:	4683      	mov	fp, r0
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f001 f913 	bl	800c7f4 <__i2b>
 800b5ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	dd7c      	ble.n	800b6d0 <_dtoa_r+0x8d8>
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4601      	mov	r1, r0
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 f9c6 	bl	800c96c <__pow5mult>
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	dd76      	ble.n	800b6d6 <_dtoa_r+0x8de>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9306      	str	r3, [sp, #24]
 800b5ec:	6933      	ldr	r3, [r6, #16]
 800b5ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5f2:	6918      	ldr	r0, [r3, #16]
 800b5f4:	f001 f8ae 	bl	800c754 <__hi0bits>
 800b5f8:	f1c0 0020 	rsb	r0, r0, #32
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	4418      	add	r0, r3
 800b600:	f010 001f 	ands.w	r0, r0, #31
 800b604:	f000 8086 	beq.w	800b714 <_dtoa_r+0x91c>
 800b608:	f1c0 0320 	rsb	r3, r0, #32
 800b60c:	2b04      	cmp	r3, #4
 800b60e:	dd7f      	ble.n	800b710 <_dtoa_r+0x918>
 800b610:	f1c0 001c 	rsb	r0, r0, #28
 800b614:	9b04      	ldr	r3, [sp, #16]
 800b616:	4403      	add	r3, r0
 800b618:	4480      	add	r8, r0
 800b61a:	4405      	add	r5, r0
 800b61c:	9304      	str	r3, [sp, #16]
 800b61e:	f1b8 0f00 	cmp.w	r8, #0
 800b622:	dd05      	ble.n	800b630 <_dtoa_r+0x838>
 800b624:	4659      	mov	r1, fp
 800b626:	4642      	mov	r2, r8
 800b628:	4620      	mov	r0, r4
 800b62a:	f001 f9f9 	bl	800ca20 <__lshift>
 800b62e:	4683      	mov	fp, r0
 800b630:	9b04      	ldr	r3, [sp, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	dd05      	ble.n	800b642 <_dtoa_r+0x84a>
 800b636:	4631      	mov	r1, r6
 800b638:	461a      	mov	r2, r3
 800b63a:	4620      	mov	r0, r4
 800b63c:	f001 f9f0 	bl	800ca20 <__lshift>
 800b640:	4606      	mov	r6, r0
 800b642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b644:	2b00      	cmp	r3, #0
 800b646:	d069      	beq.n	800b71c <_dtoa_r+0x924>
 800b648:	4631      	mov	r1, r6
 800b64a:	4658      	mov	r0, fp
 800b64c:	f001 fa54 	bl	800caf8 <__mcmp>
 800b650:	2800      	cmp	r0, #0
 800b652:	da63      	bge.n	800b71c <_dtoa_r+0x924>
 800b654:	2300      	movs	r3, #0
 800b656:	4659      	mov	r1, fp
 800b658:	220a      	movs	r2, #10
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 ffe6 	bl	800c62c <__multadd>
 800b660:	9b08      	ldr	r3, [sp, #32]
 800b662:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b666:	4683      	mov	fp, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 818f 	beq.w	800b98c <_dtoa_r+0xb94>
 800b66e:	4639      	mov	r1, r7
 800b670:	2300      	movs	r3, #0
 800b672:	220a      	movs	r2, #10
 800b674:	4620      	mov	r0, r4
 800b676:	f000 ffd9 	bl	800c62c <__multadd>
 800b67a:	f1b9 0f00 	cmp.w	r9, #0
 800b67e:	4607      	mov	r7, r0
 800b680:	f300 808e 	bgt.w	800b7a0 <_dtoa_r+0x9a8>
 800b684:	9b05      	ldr	r3, [sp, #20]
 800b686:	2b02      	cmp	r3, #2
 800b688:	dc50      	bgt.n	800b72c <_dtoa_r+0x934>
 800b68a:	e089      	b.n	800b7a0 <_dtoa_r+0x9a8>
 800b68c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b68e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b692:	e75d      	b.n	800b550 <_dtoa_r+0x758>
 800b694:	9b01      	ldr	r3, [sp, #4]
 800b696:	1e5e      	subs	r6, r3, #1
 800b698:	9b06      	ldr	r3, [sp, #24]
 800b69a:	42b3      	cmp	r3, r6
 800b69c:	bfbf      	itttt	lt
 800b69e:	9b06      	ldrlt	r3, [sp, #24]
 800b6a0:	9606      	strlt	r6, [sp, #24]
 800b6a2:	1af2      	sublt	r2, r6, r3
 800b6a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b6a6:	bfb6      	itet	lt
 800b6a8:	189b      	addlt	r3, r3, r2
 800b6aa:	1b9e      	subge	r6, r3, r6
 800b6ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b6ae:	9b01      	ldr	r3, [sp, #4]
 800b6b0:	bfb8      	it	lt
 800b6b2:	2600      	movlt	r6, #0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bfb5      	itete	lt
 800b6b8:	eba8 0503 	sublt.w	r5, r8, r3
 800b6bc:	9b01      	ldrge	r3, [sp, #4]
 800b6be:	2300      	movlt	r3, #0
 800b6c0:	4645      	movge	r5, r8
 800b6c2:	e747      	b.n	800b554 <_dtoa_r+0x75c>
 800b6c4:	9e06      	ldr	r6, [sp, #24]
 800b6c6:	9f08      	ldr	r7, [sp, #32]
 800b6c8:	4645      	mov	r5, r8
 800b6ca:	e74c      	b.n	800b566 <_dtoa_r+0x76e>
 800b6cc:	9a06      	ldr	r2, [sp, #24]
 800b6ce:	e775      	b.n	800b5bc <_dtoa_r+0x7c4>
 800b6d0:	9b05      	ldr	r3, [sp, #20]
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	dc18      	bgt.n	800b708 <_dtoa_r+0x910>
 800b6d6:	9b02      	ldr	r3, [sp, #8]
 800b6d8:	b9b3      	cbnz	r3, 800b708 <_dtoa_r+0x910>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e0:	b9a3      	cbnz	r3, 800b70c <_dtoa_r+0x914>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6e8:	0d1b      	lsrs	r3, r3, #20
 800b6ea:	051b      	lsls	r3, r3, #20
 800b6ec:	b12b      	cbz	r3, 800b6fa <_dtoa_r+0x902>
 800b6ee:	9b04      	ldr	r3, [sp, #16]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	f108 0801 	add.w	r8, r8, #1
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	9306      	str	r3, [sp, #24]
 800b6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f47f af74 	bne.w	800b5ec <_dtoa_r+0x7f4>
 800b704:	2001      	movs	r0, #1
 800b706:	e779      	b.n	800b5fc <_dtoa_r+0x804>
 800b708:	2300      	movs	r3, #0
 800b70a:	e7f6      	b.n	800b6fa <_dtoa_r+0x902>
 800b70c:	9b02      	ldr	r3, [sp, #8]
 800b70e:	e7f4      	b.n	800b6fa <_dtoa_r+0x902>
 800b710:	d085      	beq.n	800b61e <_dtoa_r+0x826>
 800b712:	4618      	mov	r0, r3
 800b714:	301c      	adds	r0, #28
 800b716:	e77d      	b.n	800b614 <_dtoa_r+0x81c>
 800b718:	40240000 	.word	0x40240000
 800b71c:	9b01      	ldr	r3, [sp, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	dc38      	bgt.n	800b794 <_dtoa_r+0x99c>
 800b722:	9b05      	ldr	r3, [sp, #20]
 800b724:	2b02      	cmp	r3, #2
 800b726:	dd35      	ble.n	800b794 <_dtoa_r+0x99c>
 800b728:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b72c:	f1b9 0f00 	cmp.w	r9, #0
 800b730:	d10d      	bne.n	800b74e <_dtoa_r+0x956>
 800b732:	4631      	mov	r1, r6
 800b734:	464b      	mov	r3, r9
 800b736:	2205      	movs	r2, #5
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 ff77 	bl	800c62c <__multadd>
 800b73e:	4601      	mov	r1, r0
 800b740:	4606      	mov	r6, r0
 800b742:	4658      	mov	r0, fp
 800b744:	f001 f9d8 	bl	800caf8 <__mcmp>
 800b748:	2800      	cmp	r0, #0
 800b74a:	f73f adbd 	bgt.w	800b2c8 <_dtoa_r+0x4d0>
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	9d00      	ldr	r5, [sp, #0]
 800b752:	ea6f 0a03 	mvn.w	sl, r3
 800b756:	f04f 0800 	mov.w	r8, #0
 800b75a:	4631      	mov	r1, r6
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 ff43 	bl	800c5e8 <_Bfree>
 800b762:	2f00      	cmp	r7, #0
 800b764:	f43f aeb4 	beq.w	800b4d0 <_dtoa_r+0x6d8>
 800b768:	f1b8 0f00 	cmp.w	r8, #0
 800b76c:	d005      	beq.n	800b77a <_dtoa_r+0x982>
 800b76e:	45b8      	cmp	r8, r7
 800b770:	d003      	beq.n	800b77a <_dtoa_r+0x982>
 800b772:	4641      	mov	r1, r8
 800b774:	4620      	mov	r0, r4
 800b776:	f000 ff37 	bl	800c5e8 <_Bfree>
 800b77a:	4639      	mov	r1, r7
 800b77c:	4620      	mov	r0, r4
 800b77e:	f000 ff33 	bl	800c5e8 <_Bfree>
 800b782:	e6a5      	b.n	800b4d0 <_dtoa_r+0x6d8>
 800b784:	2600      	movs	r6, #0
 800b786:	4637      	mov	r7, r6
 800b788:	e7e1      	b.n	800b74e <_dtoa_r+0x956>
 800b78a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b78c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b790:	4637      	mov	r7, r6
 800b792:	e599      	b.n	800b2c8 <_dtoa_r+0x4d0>
 800b794:	9b08      	ldr	r3, [sp, #32]
 800b796:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f000 80fd 	beq.w	800b99a <_dtoa_r+0xba2>
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	dd05      	ble.n	800b7b0 <_dtoa_r+0x9b8>
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	462a      	mov	r2, r5
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f001 f939 	bl	800ca20 <__lshift>
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	9b06      	ldr	r3, [sp, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d05c      	beq.n	800b870 <_dtoa_r+0xa78>
 800b7b6:	6879      	ldr	r1, [r7, #4]
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 fed5 	bl	800c568 <_Balloc>
 800b7be:	4605      	mov	r5, r0
 800b7c0:	b928      	cbnz	r0, 800b7ce <_dtoa_r+0x9d6>
 800b7c2:	4b80      	ldr	r3, [pc, #512]	; (800b9c4 <_dtoa_r+0xbcc>)
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b7ca:	f7ff bb2e 	b.w	800ae2a <_dtoa_r+0x32>
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	3202      	adds	r2, #2
 800b7d2:	0092      	lsls	r2, r2, #2
 800b7d4:	f107 010c 	add.w	r1, r7, #12
 800b7d8:	300c      	adds	r0, #12
 800b7da:	f000 feb7 	bl	800c54c <memcpy>
 800b7de:	2201      	movs	r2, #1
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f001 f91c 	bl	800ca20 <__lshift>
 800b7e8:	9b00      	ldr	r3, [sp, #0]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	444b      	add	r3, r9
 800b7f2:	9307      	str	r3, [sp, #28]
 800b7f4:	9b02      	ldr	r3, [sp, #8]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	46b8      	mov	r8, r7
 800b7fc:	9306      	str	r3, [sp, #24]
 800b7fe:	4607      	mov	r7, r0
 800b800:	9b01      	ldr	r3, [sp, #4]
 800b802:	4631      	mov	r1, r6
 800b804:	3b01      	subs	r3, #1
 800b806:	4658      	mov	r0, fp
 800b808:	9302      	str	r3, [sp, #8]
 800b80a:	f7ff fa69 	bl	800ace0 <quorem>
 800b80e:	4603      	mov	r3, r0
 800b810:	3330      	adds	r3, #48	; 0x30
 800b812:	9004      	str	r0, [sp, #16]
 800b814:	4641      	mov	r1, r8
 800b816:	4658      	mov	r0, fp
 800b818:	9308      	str	r3, [sp, #32]
 800b81a:	f001 f96d 	bl	800caf8 <__mcmp>
 800b81e:	463a      	mov	r2, r7
 800b820:	4681      	mov	r9, r0
 800b822:	4631      	mov	r1, r6
 800b824:	4620      	mov	r0, r4
 800b826:	f001 f983 	bl	800cb30 <__mdiff>
 800b82a:	68c2      	ldr	r2, [r0, #12]
 800b82c:	9b08      	ldr	r3, [sp, #32]
 800b82e:	4605      	mov	r5, r0
 800b830:	bb02      	cbnz	r2, 800b874 <_dtoa_r+0xa7c>
 800b832:	4601      	mov	r1, r0
 800b834:	4658      	mov	r0, fp
 800b836:	f001 f95f 	bl	800caf8 <__mcmp>
 800b83a:	9b08      	ldr	r3, [sp, #32]
 800b83c:	4602      	mov	r2, r0
 800b83e:	4629      	mov	r1, r5
 800b840:	4620      	mov	r0, r4
 800b842:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b846:	f000 fecf 	bl	800c5e8 <_Bfree>
 800b84a:	9b05      	ldr	r3, [sp, #20]
 800b84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b84e:	9d01      	ldr	r5, [sp, #4]
 800b850:	ea43 0102 	orr.w	r1, r3, r2
 800b854:	9b06      	ldr	r3, [sp, #24]
 800b856:	430b      	orrs	r3, r1
 800b858:	9b08      	ldr	r3, [sp, #32]
 800b85a:	d10d      	bne.n	800b878 <_dtoa_r+0xa80>
 800b85c:	2b39      	cmp	r3, #57	; 0x39
 800b85e:	d029      	beq.n	800b8b4 <_dtoa_r+0xabc>
 800b860:	f1b9 0f00 	cmp.w	r9, #0
 800b864:	dd01      	ble.n	800b86a <_dtoa_r+0xa72>
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	3331      	adds	r3, #49	; 0x31
 800b86a:	9a02      	ldr	r2, [sp, #8]
 800b86c:	7013      	strb	r3, [r2, #0]
 800b86e:	e774      	b.n	800b75a <_dtoa_r+0x962>
 800b870:	4638      	mov	r0, r7
 800b872:	e7b9      	b.n	800b7e8 <_dtoa_r+0x9f0>
 800b874:	2201      	movs	r2, #1
 800b876:	e7e2      	b.n	800b83e <_dtoa_r+0xa46>
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	db06      	blt.n	800b88c <_dtoa_r+0xa94>
 800b87e:	9905      	ldr	r1, [sp, #20]
 800b880:	ea41 0909 	orr.w	r9, r1, r9
 800b884:	9906      	ldr	r1, [sp, #24]
 800b886:	ea59 0101 	orrs.w	r1, r9, r1
 800b88a:	d120      	bne.n	800b8ce <_dtoa_r+0xad6>
 800b88c:	2a00      	cmp	r2, #0
 800b88e:	ddec      	ble.n	800b86a <_dtoa_r+0xa72>
 800b890:	4659      	mov	r1, fp
 800b892:	2201      	movs	r2, #1
 800b894:	4620      	mov	r0, r4
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	f001 f8c2 	bl	800ca20 <__lshift>
 800b89c:	4631      	mov	r1, r6
 800b89e:	4683      	mov	fp, r0
 800b8a0:	f001 f92a 	bl	800caf8 <__mcmp>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	dc02      	bgt.n	800b8b0 <_dtoa_r+0xab8>
 800b8aa:	d1de      	bne.n	800b86a <_dtoa_r+0xa72>
 800b8ac:	07da      	lsls	r2, r3, #31
 800b8ae:	d5dc      	bpl.n	800b86a <_dtoa_r+0xa72>
 800b8b0:	2b39      	cmp	r3, #57	; 0x39
 800b8b2:	d1d8      	bne.n	800b866 <_dtoa_r+0xa6e>
 800b8b4:	9a02      	ldr	r2, [sp, #8]
 800b8b6:	2339      	movs	r3, #57	; 0x39
 800b8b8:	7013      	strb	r3, [r2, #0]
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	461d      	mov	r5, r3
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b8c4:	2a39      	cmp	r2, #57	; 0x39
 800b8c6:	d050      	beq.n	800b96a <_dtoa_r+0xb72>
 800b8c8:	3201      	adds	r2, #1
 800b8ca:	701a      	strb	r2, [r3, #0]
 800b8cc:	e745      	b.n	800b75a <_dtoa_r+0x962>
 800b8ce:	2a00      	cmp	r2, #0
 800b8d0:	dd03      	ble.n	800b8da <_dtoa_r+0xae2>
 800b8d2:	2b39      	cmp	r3, #57	; 0x39
 800b8d4:	d0ee      	beq.n	800b8b4 <_dtoa_r+0xabc>
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	e7c7      	b.n	800b86a <_dtoa_r+0xa72>
 800b8da:	9a01      	ldr	r2, [sp, #4]
 800b8dc:	9907      	ldr	r1, [sp, #28]
 800b8de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b8e2:	428a      	cmp	r2, r1
 800b8e4:	d02a      	beq.n	800b93c <_dtoa_r+0xb44>
 800b8e6:	4659      	mov	r1, fp
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fe9d 	bl	800c62c <__multadd>
 800b8f2:	45b8      	cmp	r8, r7
 800b8f4:	4683      	mov	fp, r0
 800b8f6:	f04f 0300 	mov.w	r3, #0
 800b8fa:	f04f 020a 	mov.w	r2, #10
 800b8fe:	4641      	mov	r1, r8
 800b900:	4620      	mov	r0, r4
 800b902:	d107      	bne.n	800b914 <_dtoa_r+0xb1c>
 800b904:	f000 fe92 	bl	800c62c <__multadd>
 800b908:	4680      	mov	r8, r0
 800b90a:	4607      	mov	r7, r0
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	3301      	adds	r3, #1
 800b910:	9301      	str	r3, [sp, #4]
 800b912:	e775      	b.n	800b800 <_dtoa_r+0xa08>
 800b914:	f000 fe8a 	bl	800c62c <__multadd>
 800b918:	4639      	mov	r1, r7
 800b91a:	4680      	mov	r8, r0
 800b91c:	2300      	movs	r3, #0
 800b91e:	220a      	movs	r2, #10
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fe83 	bl	800c62c <__multadd>
 800b926:	4607      	mov	r7, r0
 800b928:	e7f0      	b.n	800b90c <_dtoa_r+0xb14>
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	9a00      	ldr	r2, [sp, #0]
 800b930:	bfcc      	ite	gt
 800b932:	464d      	movgt	r5, r9
 800b934:	2501      	movle	r5, #1
 800b936:	4415      	add	r5, r2
 800b938:	f04f 0800 	mov.w	r8, #0
 800b93c:	4659      	mov	r1, fp
 800b93e:	2201      	movs	r2, #1
 800b940:	4620      	mov	r0, r4
 800b942:	9301      	str	r3, [sp, #4]
 800b944:	f001 f86c 	bl	800ca20 <__lshift>
 800b948:	4631      	mov	r1, r6
 800b94a:	4683      	mov	fp, r0
 800b94c:	f001 f8d4 	bl	800caf8 <__mcmp>
 800b950:	2800      	cmp	r0, #0
 800b952:	dcb2      	bgt.n	800b8ba <_dtoa_r+0xac2>
 800b954:	d102      	bne.n	800b95c <_dtoa_r+0xb64>
 800b956:	9b01      	ldr	r3, [sp, #4]
 800b958:	07db      	lsls	r3, r3, #31
 800b95a:	d4ae      	bmi.n	800b8ba <_dtoa_r+0xac2>
 800b95c:	462b      	mov	r3, r5
 800b95e:	461d      	mov	r5, r3
 800b960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b964:	2a30      	cmp	r2, #48	; 0x30
 800b966:	d0fa      	beq.n	800b95e <_dtoa_r+0xb66>
 800b968:	e6f7      	b.n	800b75a <_dtoa_r+0x962>
 800b96a:	9a00      	ldr	r2, [sp, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d1a5      	bne.n	800b8bc <_dtoa_r+0xac4>
 800b970:	f10a 0a01 	add.w	sl, sl, #1
 800b974:	2331      	movs	r3, #49	; 0x31
 800b976:	e779      	b.n	800b86c <_dtoa_r+0xa74>
 800b978:	4b13      	ldr	r3, [pc, #76]	; (800b9c8 <_dtoa_r+0xbd0>)
 800b97a:	f7ff baaf 	b.w	800aedc <_dtoa_r+0xe4>
 800b97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b980:	2b00      	cmp	r3, #0
 800b982:	f47f aa86 	bne.w	800ae92 <_dtoa_r+0x9a>
 800b986:	4b11      	ldr	r3, [pc, #68]	; (800b9cc <_dtoa_r+0xbd4>)
 800b988:	f7ff baa8 	b.w	800aedc <_dtoa_r+0xe4>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	dc03      	bgt.n	800b99a <_dtoa_r+0xba2>
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	2b02      	cmp	r3, #2
 800b996:	f73f aec9 	bgt.w	800b72c <_dtoa_r+0x934>
 800b99a:	9d00      	ldr	r5, [sp, #0]
 800b99c:	4631      	mov	r1, r6
 800b99e:	4658      	mov	r0, fp
 800b9a0:	f7ff f99e 	bl	800ace0 <quorem>
 800b9a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b9a8:	f805 3b01 	strb.w	r3, [r5], #1
 800b9ac:	9a00      	ldr	r2, [sp, #0]
 800b9ae:	1aaa      	subs	r2, r5, r2
 800b9b0:	4591      	cmp	r9, r2
 800b9b2:	ddba      	ble.n	800b92a <_dtoa_r+0xb32>
 800b9b4:	4659      	mov	r1, fp
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	220a      	movs	r2, #10
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 fe36 	bl	800c62c <__multadd>
 800b9c0:	4683      	mov	fp, r0
 800b9c2:	e7eb      	b.n	800b99c <_dtoa_r+0xba4>
 800b9c4:	080131b9 	.word	0x080131b9
 800b9c8:	08012f1c 	.word	0x08012f1c
 800b9cc:	0801314d 	.word	0x0801314d

0800b9d0 <__sflush_r>:
 800b9d0:	898a      	ldrh	r2, [r1, #12]
 800b9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	0710      	lsls	r0, r2, #28
 800b9da:	460c      	mov	r4, r1
 800b9dc:	d458      	bmi.n	800ba90 <__sflush_r+0xc0>
 800b9de:	684b      	ldr	r3, [r1, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	dc05      	bgt.n	800b9f0 <__sflush_r+0x20>
 800b9e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dc02      	bgt.n	800b9f0 <__sflush_r+0x20>
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9f2:	2e00      	cmp	r6, #0
 800b9f4:	d0f9      	beq.n	800b9ea <__sflush_r+0x1a>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b9fc:	682f      	ldr	r7, [r5, #0]
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	d032      	beq.n	800ba68 <__sflush_r+0x98>
 800ba02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	075a      	lsls	r2, r3, #29
 800ba08:	d505      	bpl.n	800ba16 <__sflush_r+0x46>
 800ba0a:	6863      	ldr	r3, [r4, #4]
 800ba0c:	1ac0      	subs	r0, r0, r3
 800ba0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba10:	b10b      	cbz	r3, 800ba16 <__sflush_r+0x46>
 800ba12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba14:	1ac0      	subs	r0, r0, r3
 800ba16:	2300      	movs	r3, #0
 800ba18:	4602      	mov	r2, r0
 800ba1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba1c:	6a21      	ldr	r1, [r4, #32]
 800ba1e:	4628      	mov	r0, r5
 800ba20:	47b0      	blx	r6
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	d106      	bne.n	800ba36 <__sflush_r+0x66>
 800ba28:	6829      	ldr	r1, [r5, #0]
 800ba2a:	291d      	cmp	r1, #29
 800ba2c:	d82c      	bhi.n	800ba88 <__sflush_r+0xb8>
 800ba2e:	4a2a      	ldr	r2, [pc, #168]	; (800bad8 <__sflush_r+0x108>)
 800ba30:	40ca      	lsrs	r2, r1
 800ba32:	07d6      	lsls	r6, r2, #31
 800ba34:	d528      	bpl.n	800ba88 <__sflush_r+0xb8>
 800ba36:	2200      	movs	r2, #0
 800ba38:	6062      	str	r2, [r4, #4]
 800ba3a:	04d9      	lsls	r1, r3, #19
 800ba3c:	6922      	ldr	r2, [r4, #16]
 800ba3e:	6022      	str	r2, [r4, #0]
 800ba40:	d504      	bpl.n	800ba4c <__sflush_r+0x7c>
 800ba42:	1c42      	adds	r2, r0, #1
 800ba44:	d101      	bne.n	800ba4a <__sflush_r+0x7a>
 800ba46:	682b      	ldr	r3, [r5, #0]
 800ba48:	b903      	cbnz	r3, 800ba4c <__sflush_r+0x7c>
 800ba4a:	6560      	str	r0, [r4, #84]	; 0x54
 800ba4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba4e:	602f      	str	r7, [r5, #0]
 800ba50:	2900      	cmp	r1, #0
 800ba52:	d0ca      	beq.n	800b9ea <__sflush_r+0x1a>
 800ba54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba58:	4299      	cmp	r1, r3
 800ba5a:	d002      	beq.n	800ba62 <__sflush_r+0x92>
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f001 fa4d 	bl	800cefc <_free_r>
 800ba62:	2000      	movs	r0, #0
 800ba64:	6360      	str	r0, [r4, #52]	; 0x34
 800ba66:	e7c1      	b.n	800b9ec <__sflush_r+0x1c>
 800ba68:	6a21      	ldr	r1, [r4, #32]
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b0      	blx	r6
 800ba70:	1c41      	adds	r1, r0, #1
 800ba72:	d1c7      	bne.n	800ba04 <__sflush_r+0x34>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d0c4      	beq.n	800ba04 <__sflush_r+0x34>
 800ba7a:	2b1d      	cmp	r3, #29
 800ba7c:	d001      	beq.n	800ba82 <__sflush_r+0xb2>
 800ba7e:	2b16      	cmp	r3, #22
 800ba80:	d101      	bne.n	800ba86 <__sflush_r+0xb6>
 800ba82:	602f      	str	r7, [r5, #0]
 800ba84:	e7b1      	b.n	800b9ea <__sflush_r+0x1a>
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba8c:	81a3      	strh	r3, [r4, #12]
 800ba8e:	e7ad      	b.n	800b9ec <__sflush_r+0x1c>
 800ba90:	690f      	ldr	r7, [r1, #16]
 800ba92:	2f00      	cmp	r7, #0
 800ba94:	d0a9      	beq.n	800b9ea <__sflush_r+0x1a>
 800ba96:	0793      	lsls	r3, r2, #30
 800ba98:	680e      	ldr	r6, [r1, #0]
 800ba9a:	bf08      	it	eq
 800ba9c:	694b      	ldreq	r3, [r1, #20]
 800ba9e:	600f      	str	r7, [r1, #0]
 800baa0:	bf18      	it	ne
 800baa2:	2300      	movne	r3, #0
 800baa4:	eba6 0807 	sub.w	r8, r6, r7
 800baa8:	608b      	str	r3, [r1, #8]
 800baaa:	f1b8 0f00 	cmp.w	r8, #0
 800baae:	dd9c      	ble.n	800b9ea <__sflush_r+0x1a>
 800bab0:	6a21      	ldr	r1, [r4, #32]
 800bab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bab4:	4643      	mov	r3, r8
 800bab6:	463a      	mov	r2, r7
 800bab8:	4628      	mov	r0, r5
 800baba:	47b0      	blx	r6
 800babc:	2800      	cmp	r0, #0
 800babe:	dc06      	bgt.n	800bace <__sflush_r+0xfe>
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bac6:	81a3      	strh	r3, [r4, #12]
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	e78e      	b.n	800b9ec <__sflush_r+0x1c>
 800bace:	4407      	add	r7, r0
 800bad0:	eba8 0800 	sub.w	r8, r8, r0
 800bad4:	e7e9      	b.n	800baaa <__sflush_r+0xda>
 800bad6:	bf00      	nop
 800bad8:	20400001 	.word	0x20400001

0800badc <_fflush_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	690b      	ldr	r3, [r1, #16]
 800bae0:	4605      	mov	r5, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	b913      	cbnz	r3, 800baec <_fflush_r+0x10>
 800bae6:	2500      	movs	r5, #0
 800bae8:	4628      	mov	r0, r5
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	b118      	cbz	r0, 800baf6 <_fflush_r+0x1a>
 800baee:	6983      	ldr	r3, [r0, #24]
 800baf0:	b90b      	cbnz	r3, 800baf6 <_fflush_r+0x1a>
 800baf2:	f000 f887 	bl	800bc04 <__sinit>
 800baf6:	4b14      	ldr	r3, [pc, #80]	; (800bb48 <_fflush_r+0x6c>)
 800baf8:	429c      	cmp	r4, r3
 800bafa:	d11b      	bne.n	800bb34 <_fflush_r+0x58>
 800bafc:	686c      	ldr	r4, [r5, #4]
 800bafe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d0ef      	beq.n	800bae6 <_fflush_r+0xa>
 800bb06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb08:	07d0      	lsls	r0, r2, #31
 800bb0a:	d404      	bmi.n	800bb16 <_fflush_r+0x3a>
 800bb0c:	0599      	lsls	r1, r3, #22
 800bb0e:	d402      	bmi.n	800bb16 <_fflush_r+0x3a>
 800bb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb12:	f000 fc9a 	bl	800c44a <__retarget_lock_acquire_recursive>
 800bb16:	4628      	mov	r0, r5
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f7ff ff59 	bl	800b9d0 <__sflush_r>
 800bb1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb20:	07da      	lsls	r2, r3, #31
 800bb22:	4605      	mov	r5, r0
 800bb24:	d4e0      	bmi.n	800bae8 <_fflush_r+0xc>
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	059b      	lsls	r3, r3, #22
 800bb2a:	d4dd      	bmi.n	800bae8 <_fflush_r+0xc>
 800bb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb2e:	f000 fc8d 	bl	800c44c <__retarget_lock_release_recursive>
 800bb32:	e7d9      	b.n	800bae8 <_fflush_r+0xc>
 800bb34:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <_fflush_r+0x70>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d101      	bne.n	800bb3e <_fflush_r+0x62>
 800bb3a:	68ac      	ldr	r4, [r5, #8]
 800bb3c:	e7df      	b.n	800bafe <_fflush_r+0x22>
 800bb3e:	4b04      	ldr	r3, [pc, #16]	; (800bb50 <_fflush_r+0x74>)
 800bb40:	429c      	cmp	r4, r3
 800bb42:	bf08      	it	eq
 800bb44:	68ec      	ldreq	r4, [r5, #12]
 800bb46:	e7da      	b.n	800bafe <_fflush_r+0x22>
 800bb48:	080131ec 	.word	0x080131ec
 800bb4c:	0801320c 	.word	0x0801320c
 800bb50:	080131cc 	.word	0x080131cc

0800bb54 <std>:
 800bb54:	2300      	movs	r3, #0
 800bb56:	b510      	push	{r4, lr}
 800bb58:	4604      	mov	r4, r0
 800bb5a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb62:	6083      	str	r3, [r0, #8]
 800bb64:	8181      	strh	r1, [r0, #12]
 800bb66:	6643      	str	r3, [r0, #100]	; 0x64
 800bb68:	81c2      	strh	r2, [r0, #14]
 800bb6a:	6183      	str	r3, [r0, #24]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	2208      	movs	r2, #8
 800bb70:	305c      	adds	r0, #92	; 0x5c
 800bb72:	f7fd f94b 	bl	8008e0c <memset>
 800bb76:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <std+0x38>)
 800bb78:	6263      	str	r3, [r4, #36]	; 0x24
 800bb7a:	4b05      	ldr	r3, [pc, #20]	; (800bb90 <std+0x3c>)
 800bb7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb7e:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <std+0x40>)
 800bb80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb82:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <std+0x44>)
 800bb84:	6224      	str	r4, [r4, #32]
 800bb86:	6323      	str	r3, [r4, #48]	; 0x30
 800bb88:	bd10      	pop	{r4, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0800d681 	.word	0x0800d681
 800bb90:	0800d6a3 	.word	0x0800d6a3
 800bb94:	0800d6db 	.word	0x0800d6db
 800bb98:	0800d6ff 	.word	0x0800d6ff

0800bb9c <_cleanup_r>:
 800bb9c:	4901      	ldr	r1, [pc, #4]	; (800bba4 <_cleanup_r+0x8>)
 800bb9e:	f000 b8c1 	b.w	800bd24 <_fwalk_reent>
 800bba2:	bf00      	nop
 800bba4:	0800badd 	.word	0x0800badd

0800bba8 <__sfmoreglue>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	1e4a      	subs	r2, r1, #1
 800bbac:	2568      	movs	r5, #104	; 0x68
 800bbae:	4355      	muls	r5, r2
 800bbb0:	460e      	mov	r6, r1
 800bbb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbb6:	f001 f9f1 	bl	800cf9c <_malloc_r>
 800bbba:	4604      	mov	r4, r0
 800bbbc:	b140      	cbz	r0, 800bbd0 <__sfmoreglue+0x28>
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbc4:	300c      	adds	r0, #12
 800bbc6:	60a0      	str	r0, [r4, #8]
 800bbc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbcc:	f7fd f91e 	bl	8008e0c <memset>
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	bd70      	pop	{r4, r5, r6, pc}

0800bbd4 <__sfp_lock_acquire>:
 800bbd4:	4801      	ldr	r0, [pc, #4]	; (800bbdc <__sfp_lock_acquire+0x8>)
 800bbd6:	f000 bc38 	b.w	800c44a <__retarget_lock_acquire_recursive>
 800bbda:	bf00      	nop
 800bbdc:	2000089c 	.word	0x2000089c

0800bbe0 <__sfp_lock_release>:
 800bbe0:	4801      	ldr	r0, [pc, #4]	; (800bbe8 <__sfp_lock_release+0x8>)
 800bbe2:	f000 bc33 	b.w	800c44c <__retarget_lock_release_recursive>
 800bbe6:	bf00      	nop
 800bbe8:	2000089c 	.word	0x2000089c

0800bbec <__sinit_lock_acquire>:
 800bbec:	4801      	ldr	r0, [pc, #4]	; (800bbf4 <__sinit_lock_acquire+0x8>)
 800bbee:	f000 bc2c 	b.w	800c44a <__retarget_lock_acquire_recursive>
 800bbf2:	bf00      	nop
 800bbf4:	20000897 	.word	0x20000897

0800bbf8 <__sinit_lock_release>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	; (800bc00 <__sinit_lock_release+0x8>)
 800bbfa:	f000 bc27 	b.w	800c44c <__retarget_lock_release_recursive>
 800bbfe:	bf00      	nop
 800bc00:	20000897 	.word	0x20000897

0800bc04 <__sinit>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	4604      	mov	r4, r0
 800bc08:	f7ff fff0 	bl	800bbec <__sinit_lock_acquire>
 800bc0c:	69a3      	ldr	r3, [r4, #24]
 800bc0e:	b11b      	cbz	r3, 800bc18 <__sinit+0x14>
 800bc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc14:	f7ff bff0 	b.w	800bbf8 <__sinit_lock_release>
 800bc18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc1c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc1e:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <__sinit+0x68>)
 800bc20:	4a13      	ldr	r2, [pc, #76]	; (800bc70 <__sinit+0x6c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc26:	42a3      	cmp	r3, r4
 800bc28:	bf04      	itt	eq
 800bc2a:	2301      	moveq	r3, #1
 800bc2c:	61a3      	streq	r3, [r4, #24]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f820 	bl	800bc74 <__sfp>
 800bc34:	6060      	str	r0, [r4, #4]
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 f81c 	bl	800bc74 <__sfp>
 800bc3c:	60a0      	str	r0, [r4, #8]
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f818 	bl	800bc74 <__sfp>
 800bc44:	2200      	movs	r2, #0
 800bc46:	60e0      	str	r0, [r4, #12]
 800bc48:	2104      	movs	r1, #4
 800bc4a:	6860      	ldr	r0, [r4, #4]
 800bc4c:	f7ff ff82 	bl	800bb54 <std>
 800bc50:	68a0      	ldr	r0, [r4, #8]
 800bc52:	2201      	movs	r2, #1
 800bc54:	2109      	movs	r1, #9
 800bc56:	f7ff ff7d 	bl	800bb54 <std>
 800bc5a:	68e0      	ldr	r0, [r4, #12]
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	2112      	movs	r1, #18
 800bc60:	f7ff ff78 	bl	800bb54 <std>
 800bc64:	2301      	movs	r3, #1
 800bc66:	61a3      	str	r3, [r4, #24]
 800bc68:	e7d2      	b.n	800bc10 <__sinit+0xc>
 800bc6a:	bf00      	nop
 800bc6c:	08012f08 	.word	0x08012f08
 800bc70:	0800bb9d 	.word	0x0800bb9d

0800bc74 <__sfp>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	4607      	mov	r7, r0
 800bc78:	f7ff ffac 	bl	800bbd4 <__sfp_lock_acquire>
 800bc7c:	4b1e      	ldr	r3, [pc, #120]	; (800bcf8 <__sfp+0x84>)
 800bc7e:	681e      	ldr	r6, [r3, #0]
 800bc80:	69b3      	ldr	r3, [r6, #24]
 800bc82:	b913      	cbnz	r3, 800bc8a <__sfp+0x16>
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7ff ffbd 	bl	800bc04 <__sinit>
 800bc8a:	3648      	adds	r6, #72	; 0x48
 800bc8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	d503      	bpl.n	800bc9c <__sfp+0x28>
 800bc94:	6833      	ldr	r3, [r6, #0]
 800bc96:	b30b      	cbz	r3, 800bcdc <__sfp+0x68>
 800bc98:	6836      	ldr	r6, [r6, #0]
 800bc9a:	e7f7      	b.n	800bc8c <__sfp+0x18>
 800bc9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bca0:	b9d5      	cbnz	r5, 800bcd8 <__sfp+0x64>
 800bca2:	4b16      	ldr	r3, [pc, #88]	; (800bcfc <__sfp+0x88>)
 800bca4:	60e3      	str	r3, [r4, #12]
 800bca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcaa:	6665      	str	r5, [r4, #100]	; 0x64
 800bcac:	f000 fbcc 	bl	800c448 <__retarget_lock_init_recursive>
 800bcb0:	f7ff ff96 	bl	800bbe0 <__sfp_lock_release>
 800bcb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcbc:	6025      	str	r5, [r4, #0]
 800bcbe:	61a5      	str	r5, [r4, #24]
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	4629      	mov	r1, r5
 800bcc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcc8:	f7fd f8a0 	bl	8008e0c <memset>
 800bccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd8:	3468      	adds	r4, #104	; 0x68
 800bcda:	e7d9      	b.n	800bc90 <__sfp+0x1c>
 800bcdc:	2104      	movs	r1, #4
 800bcde:	4638      	mov	r0, r7
 800bce0:	f7ff ff62 	bl	800bba8 <__sfmoreglue>
 800bce4:	4604      	mov	r4, r0
 800bce6:	6030      	str	r0, [r6, #0]
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d1d5      	bne.n	800bc98 <__sfp+0x24>
 800bcec:	f7ff ff78 	bl	800bbe0 <__sfp_lock_release>
 800bcf0:	230c      	movs	r3, #12
 800bcf2:	603b      	str	r3, [r7, #0]
 800bcf4:	e7ee      	b.n	800bcd4 <__sfp+0x60>
 800bcf6:	bf00      	nop
 800bcf8:	08012f08 	.word	0x08012f08
 800bcfc:	ffff0001 	.word	0xffff0001

0800bd00 <fiprintf>:
 800bd00:	b40e      	push	{r1, r2, r3}
 800bd02:	b503      	push	{r0, r1, lr}
 800bd04:	4601      	mov	r1, r0
 800bd06:	ab03      	add	r3, sp, #12
 800bd08:	4805      	ldr	r0, [pc, #20]	; (800bd20 <fiprintf+0x20>)
 800bd0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd0e:	6800      	ldr	r0, [r0, #0]
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	f001 fb23 	bl	800d35c <_vfiprintf_r>
 800bd16:	b002      	add	sp, #8
 800bd18:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd1c:	b003      	add	sp, #12
 800bd1e:	4770      	bx	lr
 800bd20:	2000000c 	.word	0x2000000c

0800bd24 <_fwalk_reent>:
 800bd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd28:	4606      	mov	r6, r0
 800bd2a:	4688      	mov	r8, r1
 800bd2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd30:	2700      	movs	r7, #0
 800bd32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd36:	f1b9 0901 	subs.w	r9, r9, #1
 800bd3a:	d505      	bpl.n	800bd48 <_fwalk_reent+0x24>
 800bd3c:	6824      	ldr	r4, [r4, #0]
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	d1f7      	bne.n	800bd32 <_fwalk_reent+0xe>
 800bd42:	4638      	mov	r0, r7
 800bd44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd48:	89ab      	ldrh	r3, [r5, #12]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d907      	bls.n	800bd5e <_fwalk_reent+0x3a>
 800bd4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd52:	3301      	adds	r3, #1
 800bd54:	d003      	beq.n	800bd5e <_fwalk_reent+0x3a>
 800bd56:	4629      	mov	r1, r5
 800bd58:	4630      	mov	r0, r6
 800bd5a:	47c0      	blx	r8
 800bd5c:	4307      	orrs	r7, r0
 800bd5e:	3568      	adds	r5, #104	; 0x68
 800bd60:	e7e9      	b.n	800bd36 <_fwalk_reent+0x12>

0800bd62 <rshift>:
 800bd62:	6903      	ldr	r3, [r0, #16]
 800bd64:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd70:	f100 0414 	add.w	r4, r0, #20
 800bd74:	dd45      	ble.n	800be02 <rshift+0xa0>
 800bd76:	f011 011f 	ands.w	r1, r1, #31
 800bd7a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd7e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd82:	d10c      	bne.n	800bd9e <rshift+0x3c>
 800bd84:	f100 0710 	add.w	r7, r0, #16
 800bd88:	4629      	mov	r1, r5
 800bd8a:	42b1      	cmp	r1, r6
 800bd8c:	d334      	bcc.n	800bdf8 <rshift+0x96>
 800bd8e:	1a9b      	subs	r3, r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	1eea      	subs	r2, r5, #3
 800bd94:	4296      	cmp	r6, r2
 800bd96:	bf38      	it	cc
 800bd98:	2300      	movcc	r3, #0
 800bd9a:	4423      	add	r3, r4
 800bd9c:	e015      	b.n	800bdca <rshift+0x68>
 800bd9e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bda2:	f1c1 0820 	rsb	r8, r1, #32
 800bda6:	40cf      	lsrs	r7, r1
 800bda8:	f105 0e04 	add.w	lr, r5, #4
 800bdac:	46a1      	mov	r9, r4
 800bdae:	4576      	cmp	r6, lr
 800bdb0:	46f4      	mov	ip, lr
 800bdb2:	d815      	bhi.n	800bde0 <rshift+0x7e>
 800bdb4:	1a9b      	subs	r3, r3, r2
 800bdb6:	009a      	lsls	r2, r3, #2
 800bdb8:	3a04      	subs	r2, #4
 800bdba:	3501      	adds	r5, #1
 800bdbc:	42ae      	cmp	r6, r5
 800bdbe:	bf38      	it	cc
 800bdc0:	2200      	movcc	r2, #0
 800bdc2:	18a3      	adds	r3, r4, r2
 800bdc4:	50a7      	str	r7, [r4, r2]
 800bdc6:	b107      	cbz	r7, 800bdca <rshift+0x68>
 800bdc8:	3304      	adds	r3, #4
 800bdca:	1b1a      	subs	r2, r3, r4
 800bdcc:	42a3      	cmp	r3, r4
 800bdce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bdd2:	bf08      	it	eq
 800bdd4:	2300      	moveq	r3, #0
 800bdd6:	6102      	str	r2, [r0, #16]
 800bdd8:	bf08      	it	eq
 800bdda:	6143      	streq	r3, [r0, #20]
 800bddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bde0:	f8dc c000 	ldr.w	ip, [ip]
 800bde4:	fa0c fc08 	lsl.w	ip, ip, r8
 800bde8:	ea4c 0707 	orr.w	r7, ip, r7
 800bdec:	f849 7b04 	str.w	r7, [r9], #4
 800bdf0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bdf4:	40cf      	lsrs	r7, r1
 800bdf6:	e7da      	b.n	800bdae <rshift+0x4c>
 800bdf8:	f851 cb04 	ldr.w	ip, [r1], #4
 800bdfc:	f847 cf04 	str.w	ip, [r7, #4]!
 800be00:	e7c3      	b.n	800bd8a <rshift+0x28>
 800be02:	4623      	mov	r3, r4
 800be04:	e7e1      	b.n	800bdca <rshift+0x68>

0800be06 <__hexdig_fun>:
 800be06:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800be0a:	2b09      	cmp	r3, #9
 800be0c:	d802      	bhi.n	800be14 <__hexdig_fun+0xe>
 800be0e:	3820      	subs	r0, #32
 800be10:	b2c0      	uxtb	r0, r0
 800be12:	4770      	bx	lr
 800be14:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800be18:	2b05      	cmp	r3, #5
 800be1a:	d801      	bhi.n	800be20 <__hexdig_fun+0x1a>
 800be1c:	3847      	subs	r0, #71	; 0x47
 800be1e:	e7f7      	b.n	800be10 <__hexdig_fun+0xa>
 800be20:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800be24:	2b05      	cmp	r3, #5
 800be26:	d801      	bhi.n	800be2c <__hexdig_fun+0x26>
 800be28:	3827      	subs	r0, #39	; 0x27
 800be2a:	e7f1      	b.n	800be10 <__hexdig_fun+0xa>
 800be2c:	2000      	movs	r0, #0
 800be2e:	4770      	bx	lr

0800be30 <__gethex>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	ed2d 8b02 	vpush	{d8}
 800be38:	b089      	sub	sp, #36	; 0x24
 800be3a:	ee08 0a10 	vmov	s16, r0
 800be3e:	9304      	str	r3, [sp, #16]
 800be40:	4bbc      	ldr	r3, [pc, #752]	; (800c134 <__gethex+0x304>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	9301      	str	r3, [sp, #4]
 800be46:	4618      	mov	r0, r3
 800be48:	468b      	mov	fp, r1
 800be4a:	4690      	mov	r8, r2
 800be4c:	f7f4 f9f2 	bl	8000234 <strlen>
 800be50:	9b01      	ldr	r3, [sp, #4]
 800be52:	f8db 2000 	ldr.w	r2, [fp]
 800be56:	4403      	add	r3, r0
 800be58:	4682      	mov	sl, r0
 800be5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800be5e:	9305      	str	r3, [sp, #20]
 800be60:	1c93      	adds	r3, r2, #2
 800be62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800be66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800be6a:	32fe      	adds	r2, #254	; 0xfe
 800be6c:	18d1      	adds	r1, r2, r3
 800be6e:	461f      	mov	r7, r3
 800be70:	f813 0b01 	ldrb.w	r0, [r3], #1
 800be74:	9100      	str	r1, [sp, #0]
 800be76:	2830      	cmp	r0, #48	; 0x30
 800be78:	d0f8      	beq.n	800be6c <__gethex+0x3c>
 800be7a:	f7ff ffc4 	bl	800be06 <__hexdig_fun>
 800be7e:	4604      	mov	r4, r0
 800be80:	2800      	cmp	r0, #0
 800be82:	d13a      	bne.n	800befa <__gethex+0xca>
 800be84:	9901      	ldr	r1, [sp, #4]
 800be86:	4652      	mov	r2, sl
 800be88:	4638      	mov	r0, r7
 800be8a:	f001 fc3c 	bl	800d706 <strncmp>
 800be8e:	4605      	mov	r5, r0
 800be90:	2800      	cmp	r0, #0
 800be92:	d168      	bne.n	800bf66 <__gethex+0x136>
 800be94:	f817 000a 	ldrb.w	r0, [r7, sl]
 800be98:	eb07 060a 	add.w	r6, r7, sl
 800be9c:	f7ff ffb3 	bl	800be06 <__hexdig_fun>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d062      	beq.n	800bf6a <__gethex+0x13a>
 800bea4:	4633      	mov	r3, r6
 800bea6:	7818      	ldrb	r0, [r3, #0]
 800bea8:	2830      	cmp	r0, #48	; 0x30
 800beaa:	461f      	mov	r7, r3
 800beac:	f103 0301 	add.w	r3, r3, #1
 800beb0:	d0f9      	beq.n	800bea6 <__gethex+0x76>
 800beb2:	f7ff ffa8 	bl	800be06 <__hexdig_fun>
 800beb6:	2301      	movs	r3, #1
 800beb8:	fab0 f480 	clz	r4, r0
 800bebc:	0964      	lsrs	r4, r4, #5
 800bebe:	4635      	mov	r5, r6
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	463a      	mov	r2, r7
 800bec4:	4616      	mov	r6, r2
 800bec6:	3201      	adds	r2, #1
 800bec8:	7830      	ldrb	r0, [r6, #0]
 800beca:	f7ff ff9c 	bl	800be06 <__hexdig_fun>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1f8      	bne.n	800bec4 <__gethex+0x94>
 800bed2:	9901      	ldr	r1, [sp, #4]
 800bed4:	4652      	mov	r2, sl
 800bed6:	4630      	mov	r0, r6
 800bed8:	f001 fc15 	bl	800d706 <strncmp>
 800bedc:	b980      	cbnz	r0, 800bf00 <__gethex+0xd0>
 800bede:	b94d      	cbnz	r5, 800bef4 <__gethex+0xc4>
 800bee0:	eb06 050a 	add.w	r5, r6, sl
 800bee4:	462a      	mov	r2, r5
 800bee6:	4616      	mov	r6, r2
 800bee8:	3201      	adds	r2, #1
 800beea:	7830      	ldrb	r0, [r6, #0]
 800beec:	f7ff ff8b 	bl	800be06 <__hexdig_fun>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d1f8      	bne.n	800bee6 <__gethex+0xb6>
 800bef4:	1bad      	subs	r5, r5, r6
 800bef6:	00ad      	lsls	r5, r5, #2
 800bef8:	e004      	b.n	800bf04 <__gethex+0xd4>
 800befa:	2400      	movs	r4, #0
 800befc:	4625      	mov	r5, r4
 800befe:	e7e0      	b.n	800bec2 <__gethex+0x92>
 800bf00:	2d00      	cmp	r5, #0
 800bf02:	d1f7      	bne.n	800bef4 <__gethex+0xc4>
 800bf04:	7833      	ldrb	r3, [r6, #0]
 800bf06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf0a:	2b50      	cmp	r3, #80	; 0x50
 800bf0c:	d13b      	bne.n	800bf86 <__gethex+0x156>
 800bf0e:	7873      	ldrb	r3, [r6, #1]
 800bf10:	2b2b      	cmp	r3, #43	; 0x2b
 800bf12:	d02c      	beq.n	800bf6e <__gethex+0x13e>
 800bf14:	2b2d      	cmp	r3, #45	; 0x2d
 800bf16:	d02e      	beq.n	800bf76 <__gethex+0x146>
 800bf18:	1c71      	adds	r1, r6, #1
 800bf1a:	f04f 0900 	mov.w	r9, #0
 800bf1e:	7808      	ldrb	r0, [r1, #0]
 800bf20:	f7ff ff71 	bl	800be06 <__hexdig_fun>
 800bf24:	1e43      	subs	r3, r0, #1
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b18      	cmp	r3, #24
 800bf2a:	d82c      	bhi.n	800bf86 <__gethex+0x156>
 800bf2c:	f1a0 0210 	sub.w	r2, r0, #16
 800bf30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf34:	f7ff ff67 	bl	800be06 <__hexdig_fun>
 800bf38:	1e43      	subs	r3, r0, #1
 800bf3a:	b2db      	uxtb	r3, r3
 800bf3c:	2b18      	cmp	r3, #24
 800bf3e:	d91d      	bls.n	800bf7c <__gethex+0x14c>
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	d000      	beq.n	800bf48 <__gethex+0x118>
 800bf46:	4252      	negs	r2, r2
 800bf48:	4415      	add	r5, r2
 800bf4a:	f8cb 1000 	str.w	r1, [fp]
 800bf4e:	b1e4      	cbz	r4, 800bf8a <__gethex+0x15a>
 800bf50:	9b00      	ldr	r3, [sp, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	bf14      	ite	ne
 800bf56:	2700      	movne	r7, #0
 800bf58:	2706      	moveq	r7, #6
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	b009      	add	sp, #36	; 0x24
 800bf5e:	ecbd 8b02 	vpop	{d8}
 800bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf66:	463e      	mov	r6, r7
 800bf68:	4625      	mov	r5, r4
 800bf6a:	2401      	movs	r4, #1
 800bf6c:	e7ca      	b.n	800bf04 <__gethex+0xd4>
 800bf6e:	f04f 0900 	mov.w	r9, #0
 800bf72:	1cb1      	adds	r1, r6, #2
 800bf74:	e7d3      	b.n	800bf1e <__gethex+0xee>
 800bf76:	f04f 0901 	mov.w	r9, #1
 800bf7a:	e7fa      	b.n	800bf72 <__gethex+0x142>
 800bf7c:	230a      	movs	r3, #10
 800bf7e:	fb03 0202 	mla	r2, r3, r2, r0
 800bf82:	3a10      	subs	r2, #16
 800bf84:	e7d4      	b.n	800bf30 <__gethex+0x100>
 800bf86:	4631      	mov	r1, r6
 800bf88:	e7df      	b.n	800bf4a <__gethex+0x11a>
 800bf8a:	1bf3      	subs	r3, r6, r7
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	4621      	mov	r1, r4
 800bf90:	2b07      	cmp	r3, #7
 800bf92:	dc0b      	bgt.n	800bfac <__gethex+0x17c>
 800bf94:	ee18 0a10 	vmov	r0, s16
 800bf98:	f000 fae6 	bl	800c568 <_Balloc>
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	b940      	cbnz	r0, 800bfb2 <__gethex+0x182>
 800bfa0:	4b65      	ldr	r3, [pc, #404]	; (800c138 <__gethex+0x308>)
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	21de      	movs	r1, #222	; 0xde
 800bfa6:	4865      	ldr	r0, [pc, #404]	; (800c13c <__gethex+0x30c>)
 800bfa8:	f7fe fe7c 	bl	800aca4 <__assert_func>
 800bfac:	3101      	adds	r1, #1
 800bfae:	105b      	asrs	r3, r3, #1
 800bfb0:	e7ee      	b.n	800bf90 <__gethex+0x160>
 800bfb2:	f100 0914 	add.w	r9, r0, #20
 800bfb6:	f04f 0b00 	mov.w	fp, #0
 800bfba:	f1ca 0301 	rsb	r3, sl, #1
 800bfbe:	f8cd 9008 	str.w	r9, [sp, #8]
 800bfc2:	f8cd b000 	str.w	fp, [sp]
 800bfc6:	9306      	str	r3, [sp, #24]
 800bfc8:	42b7      	cmp	r7, r6
 800bfca:	d340      	bcc.n	800c04e <__gethex+0x21e>
 800bfcc:	9802      	ldr	r0, [sp, #8]
 800bfce:	9b00      	ldr	r3, [sp, #0]
 800bfd0:	f840 3b04 	str.w	r3, [r0], #4
 800bfd4:	eba0 0009 	sub.w	r0, r0, r9
 800bfd8:	1080      	asrs	r0, r0, #2
 800bfda:	0146      	lsls	r6, r0, #5
 800bfdc:	6120      	str	r0, [r4, #16]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f000 fbb8 	bl	800c754 <__hi0bits>
 800bfe4:	1a30      	subs	r0, r6, r0
 800bfe6:	f8d8 6000 	ldr.w	r6, [r8]
 800bfea:	42b0      	cmp	r0, r6
 800bfec:	dd63      	ble.n	800c0b6 <__gethex+0x286>
 800bfee:	1b87      	subs	r7, r0, r6
 800bff0:	4639      	mov	r1, r7
 800bff2:	4620      	mov	r0, r4
 800bff4:	f000 ff52 	bl	800ce9c <__any_on>
 800bff8:	4682      	mov	sl, r0
 800bffa:	b1a8      	cbz	r0, 800c028 <__gethex+0x1f8>
 800bffc:	1e7b      	subs	r3, r7, #1
 800bffe:	1159      	asrs	r1, r3, #5
 800c000:	f003 021f 	and.w	r2, r3, #31
 800c004:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c008:	f04f 0a01 	mov.w	sl, #1
 800c00c:	fa0a f202 	lsl.w	r2, sl, r2
 800c010:	420a      	tst	r2, r1
 800c012:	d009      	beq.n	800c028 <__gethex+0x1f8>
 800c014:	4553      	cmp	r3, sl
 800c016:	dd05      	ble.n	800c024 <__gethex+0x1f4>
 800c018:	1eb9      	subs	r1, r7, #2
 800c01a:	4620      	mov	r0, r4
 800c01c:	f000 ff3e 	bl	800ce9c <__any_on>
 800c020:	2800      	cmp	r0, #0
 800c022:	d145      	bne.n	800c0b0 <__gethex+0x280>
 800c024:	f04f 0a02 	mov.w	sl, #2
 800c028:	4639      	mov	r1, r7
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff fe99 	bl	800bd62 <rshift>
 800c030:	443d      	add	r5, r7
 800c032:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c036:	42ab      	cmp	r3, r5
 800c038:	da4c      	bge.n	800c0d4 <__gethex+0x2a4>
 800c03a:	ee18 0a10 	vmov	r0, s16
 800c03e:	4621      	mov	r1, r4
 800c040:	f000 fad2 	bl	800c5e8 <_Bfree>
 800c044:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c046:	2300      	movs	r3, #0
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	27a3      	movs	r7, #163	; 0xa3
 800c04c:	e785      	b.n	800bf5a <__gethex+0x12a>
 800c04e:	1e73      	subs	r3, r6, #1
 800c050:	9a05      	ldr	r2, [sp, #20]
 800c052:	9303      	str	r3, [sp, #12]
 800c054:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c058:	4293      	cmp	r3, r2
 800c05a:	d019      	beq.n	800c090 <__gethex+0x260>
 800c05c:	f1bb 0f20 	cmp.w	fp, #32
 800c060:	d107      	bne.n	800c072 <__gethex+0x242>
 800c062:	9b02      	ldr	r3, [sp, #8]
 800c064:	9a00      	ldr	r2, [sp, #0]
 800c066:	f843 2b04 	str.w	r2, [r3], #4
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	2300      	movs	r3, #0
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	469b      	mov	fp, r3
 800c072:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c076:	f7ff fec6 	bl	800be06 <__hexdig_fun>
 800c07a:	9b00      	ldr	r3, [sp, #0]
 800c07c:	f000 000f 	and.w	r0, r0, #15
 800c080:	fa00 f00b 	lsl.w	r0, r0, fp
 800c084:	4303      	orrs	r3, r0
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	f10b 0b04 	add.w	fp, fp, #4
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	e00d      	b.n	800c0ac <__gethex+0x27c>
 800c090:	9b03      	ldr	r3, [sp, #12]
 800c092:	9a06      	ldr	r2, [sp, #24]
 800c094:	4413      	add	r3, r2
 800c096:	42bb      	cmp	r3, r7
 800c098:	d3e0      	bcc.n	800c05c <__gethex+0x22c>
 800c09a:	4618      	mov	r0, r3
 800c09c:	9901      	ldr	r1, [sp, #4]
 800c09e:	9307      	str	r3, [sp, #28]
 800c0a0:	4652      	mov	r2, sl
 800c0a2:	f001 fb30 	bl	800d706 <strncmp>
 800c0a6:	9b07      	ldr	r3, [sp, #28]
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1d7      	bne.n	800c05c <__gethex+0x22c>
 800c0ac:	461e      	mov	r6, r3
 800c0ae:	e78b      	b.n	800bfc8 <__gethex+0x198>
 800c0b0:	f04f 0a03 	mov.w	sl, #3
 800c0b4:	e7b8      	b.n	800c028 <__gethex+0x1f8>
 800c0b6:	da0a      	bge.n	800c0ce <__gethex+0x29e>
 800c0b8:	1a37      	subs	r7, r6, r0
 800c0ba:	4621      	mov	r1, r4
 800c0bc:	ee18 0a10 	vmov	r0, s16
 800c0c0:	463a      	mov	r2, r7
 800c0c2:	f000 fcad 	bl	800ca20 <__lshift>
 800c0c6:	1bed      	subs	r5, r5, r7
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	f100 0914 	add.w	r9, r0, #20
 800c0ce:	f04f 0a00 	mov.w	sl, #0
 800c0d2:	e7ae      	b.n	800c032 <__gethex+0x202>
 800c0d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c0d8:	42a8      	cmp	r0, r5
 800c0da:	dd72      	ble.n	800c1c2 <__gethex+0x392>
 800c0dc:	1b45      	subs	r5, r0, r5
 800c0de:	42ae      	cmp	r6, r5
 800c0e0:	dc36      	bgt.n	800c150 <__gethex+0x320>
 800c0e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d02a      	beq.n	800c140 <__gethex+0x310>
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d02c      	beq.n	800c148 <__gethex+0x318>
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d115      	bne.n	800c11e <__gethex+0x2ee>
 800c0f2:	42ae      	cmp	r6, r5
 800c0f4:	d113      	bne.n	800c11e <__gethex+0x2ee>
 800c0f6:	2e01      	cmp	r6, #1
 800c0f8:	d10b      	bne.n	800c112 <__gethex+0x2e2>
 800c0fa:	9a04      	ldr	r2, [sp, #16]
 800c0fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	2301      	movs	r3, #1
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	f8c9 3000 	str.w	r3, [r9]
 800c10a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c10c:	2762      	movs	r7, #98	; 0x62
 800c10e:	601c      	str	r4, [r3, #0]
 800c110:	e723      	b.n	800bf5a <__gethex+0x12a>
 800c112:	1e71      	subs	r1, r6, #1
 800c114:	4620      	mov	r0, r4
 800c116:	f000 fec1 	bl	800ce9c <__any_on>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d1ed      	bne.n	800c0fa <__gethex+0x2ca>
 800c11e:	ee18 0a10 	vmov	r0, s16
 800c122:	4621      	mov	r1, r4
 800c124:	f000 fa60 	bl	800c5e8 <_Bfree>
 800c128:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c12a:	2300      	movs	r3, #0
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	2750      	movs	r7, #80	; 0x50
 800c130:	e713      	b.n	800bf5a <__gethex+0x12a>
 800c132:	bf00      	nop
 800c134:	08013298 	.word	0x08013298
 800c138:	080131b9 	.word	0x080131b9
 800c13c:	0801322c 	.word	0x0801322c
 800c140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1eb      	bne.n	800c11e <__gethex+0x2ee>
 800c146:	e7d8      	b.n	800c0fa <__gethex+0x2ca>
 800c148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1d5      	bne.n	800c0fa <__gethex+0x2ca>
 800c14e:	e7e6      	b.n	800c11e <__gethex+0x2ee>
 800c150:	1e6f      	subs	r7, r5, #1
 800c152:	f1ba 0f00 	cmp.w	sl, #0
 800c156:	d131      	bne.n	800c1bc <__gethex+0x38c>
 800c158:	b127      	cbz	r7, 800c164 <__gethex+0x334>
 800c15a:	4639      	mov	r1, r7
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fe9d 	bl	800ce9c <__any_on>
 800c162:	4682      	mov	sl, r0
 800c164:	117b      	asrs	r3, r7, #5
 800c166:	2101      	movs	r1, #1
 800c168:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c16c:	f007 071f 	and.w	r7, r7, #31
 800c170:	fa01 f707 	lsl.w	r7, r1, r7
 800c174:	421f      	tst	r7, r3
 800c176:	4629      	mov	r1, r5
 800c178:	4620      	mov	r0, r4
 800c17a:	bf18      	it	ne
 800c17c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c180:	1b76      	subs	r6, r6, r5
 800c182:	f7ff fdee 	bl	800bd62 <rshift>
 800c186:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c18a:	2702      	movs	r7, #2
 800c18c:	f1ba 0f00 	cmp.w	sl, #0
 800c190:	d048      	beq.n	800c224 <__gethex+0x3f4>
 800c192:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c196:	2b02      	cmp	r3, #2
 800c198:	d015      	beq.n	800c1c6 <__gethex+0x396>
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d017      	beq.n	800c1ce <__gethex+0x39e>
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d109      	bne.n	800c1b6 <__gethex+0x386>
 800c1a2:	f01a 0f02 	tst.w	sl, #2
 800c1a6:	d006      	beq.n	800c1b6 <__gethex+0x386>
 800c1a8:	f8d9 0000 	ldr.w	r0, [r9]
 800c1ac:	ea4a 0a00 	orr.w	sl, sl, r0
 800c1b0:	f01a 0f01 	tst.w	sl, #1
 800c1b4:	d10e      	bne.n	800c1d4 <__gethex+0x3a4>
 800c1b6:	f047 0710 	orr.w	r7, r7, #16
 800c1ba:	e033      	b.n	800c224 <__gethex+0x3f4>
 800c1bc:	f04f 0a01 	mov.w	sl, #1
 800c1c0:	e7d0      	b.n	800c164 <__gethex+0x334>
 800c1c2:	2701      	movs	r7, #1
 800c1c4:	e7e2      	b.n	800c18c <__gethex+0x35c>
 800c1c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1c8:	f1c3 0301 	rsb	r3, r3, #1
 800c1cc:	9315      	str	r3, [sp, #84]	; 0x54
 800c1ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d0f0      	beq.n	800c1b6 <__gethex+0x386>
 800c1d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c1d8:	f104 0314 	add.w	r3, r4, #20
 800c1dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c1e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c1e4:	f04f 0c00 	mov.w	ip, #0
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c1f2:	d01c      	beq.n	800c22e <__gethex+0x3fe>
 800c1f4:	3201      	adds	r2, #1
 800c1f6:	6002      	str	r2, [r0, #0]
 800c1f8:	2f02      	cmp	r7, #2
 800c1fa:	f104 0314 	add.w	r3, r4, #20
 800c1fe:	d13f      	bne.n	800c280 <__gethex+0x450>
 800c200:	f8d8 2000 	ldr.w	r2, [r8]
 800c204:	3a01      	subs	r2, #1
 800c206:	42b2      	cmp	r2, r6
 800c208:	d10a      	bne.n	800c220 <__gethex+0x3f0>
 800c20a:	1171      	asrs	r1, r6, #5
 800c20c:	2201      	movs	r2, #1
 800c20e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c212:	f006 061f 	and.w	r6, r6, #31
 800c216:	fa02 f606 	lsl.w	r6, r2, r6
 800c21a:	421e      	tst	r6, r3
 800c21c:	bf18      	it	ne
 800c21e:	4617      	movne	r7, r2
 800c220:	f047 0720 	orr.w	r7, r7, #32
 800c224:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c226:	601c      	str	r4, [r3, #0]
 800c228:	9b04      	ldr	r3, [sp, #16]
 800c22a:	601d      	str	r5, [r3, #0]
 800c22c:	e695      	b.n	800bf5a <__gethex+0x12a>
 800c22e:	4299      	cmp	r1, r3
 800c230:	f843 cc04 	str.w	ip, [r3, #-4]
 800c234:	d8d8      	bhi.n	800c1e8 <__gethex+0x3b8>
 800c236:	68a3      	ldr	r3, [r4, #8]
 800c238:	459b      	cmp	fp, r3
 800c23a:	db19      	blt.n	800c270 <__gethex+0x440>
 800c23c:	6861      	ldr	r1, [r4, #4]
 800c23e:	ee18 0a10 	vmov	r0, s16
 800c242:	3101      	adds	r1, #1
 800c244:	f000 f990 	bl	800c568 <_Balloc>
 800c248:	4681      	mov	r9, r0
 800c24a:	b918      	cbnz	r0, 800c254 <__gethex+0x424>
 800c24c:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <__gethex+0x488>)
 800c24e:	4602      	mov	r2, r0
 800c250:	2184      	movs	r1, #132	; 0x84
 800c252:	e6a8      	b.n	800bfa6 <__gethex+0x176>
 800c254:	6922      	ldr	r2, [r4, #16]
 800c256:	3202      	adds	r2, #2
 800c258:	f104 010c 	add.w	r1, r4, #12
 800c25c:	0092      	lsls	r2, r2, #2
 800c25e:	300c      	adds	r0, #12
 800c260:	f000 f974 	bl	800c54c <memcpy>
 800c264:	4621      	mov	r1, r4
 800c266:	ee18 0a10 	vmov	r0, s16
 800c26a:	f000 f9bd 	bl	800c5e8 <_Bfree>
 800c26e:	464c      	mov	r4, r9
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	1c5a      	adds	r2, r3, #1
 800c274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c278:	6122      	str	r2, [r4, #16]
 800c27a:	2201      	movs	r2, #1
 800c27c:	615a      	str	r2, [r3, #20]
 800c27e:	e7bb      	b.n	800c1f8 <__gethex+0x3c8>
 800c280:	6922      	ldr	r2, [r4, #16]
 800c282:	455a      	cmp	r2, fp
 800c284:	dd0b      	ble.n	800c29e <__gethex+0x46e>
 800c286:	2101      	movs	r1, #1
 800c288:	4620      	mov	r0, r4
 800c28a:	f7ff fd6a 	bl	800bd62 <rshift>
 800c28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c292:	3501      	adds	r5, #1
 800c294:	42ab      	cmp	r3, r5
 800c296:	f6ff aed0 	blt.w	800c03a <__gethex+0x20a>
 800c29a:	2701      	movs	r7, #1
 800c29c:	e7c0      	b.n	800c220 <__gethex+0x3f0>
 800c29e:	f016 061f 	ands.w	r6, r6, #31
 800c2a2:	d0fa      	beq.n	800c29a <__gethex+0x46a>
 800c2a4:	449a      	add	sl, r3
 800c2a6:	f1c6 0620 	rsb	r6, r6, #32
 800c2aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c2ae:	f000 fa51 	bl	800c754 <__hi0bits>
 800c2b2:	42b0      	cmp	r0, r6
 800c2b4:	dbe7      	blt.n	800c286 <__gethex+0x456>
 800c2b6:	e7f0      	b.n	800c29a <__gethex+0x46a>
 800c2b8:	080131b9 	.word	0x080131b9

0800c2bc <L_shift>:
 800c2bc:	f1c2 0208 	rsb	r2, r2, #8
 800c2c0:	0092      	lsls	r2, r2, #2
 800c2c2:	b570      	push	{r4, r5, r6, lr}
 800c2c4:	f1c2 0620 	rsb	r6, r2, #32
 800c2c8:	6843      	ldr	r3, [r0, #4]
 800c2ca:	6804      	ldr	r4, [r0, #0]
 800c2cc:	fa03 f506 	lsl.w	r5, r3, r6
 800c2d0:	432c      	orrs	r4, r5
 800c2d2:	40d3      	lsrs	r3, r2
 800c2d4:	6004      	str	r4, [r0, #0]
 800c2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c2da:	4288      	cmp	r0, r1
 800c2dc:	d3f4      	bcc.n	800c2c8 <L_shift+0xc>
 800c2de:	bd70      	pop	{r4, r5, r6, pc}

0800c2e0 <__match>:
 800c2e0:	b530      	push	{r4, r5, lr}
 800c2e2:	6803      	ldr	r3, [r0, #0]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ea:	b914      	cbnz	r4, 800c2f2 <__match+0x12>
 800c2ec:	6003      	str	r3, [r0, #0]
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	bd30      	pop	{r4, r5, pc}
 800c2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c2fa:	2d19      	cmp	r5, #25
 800c2fc:	bf98      	it	ls
 800c2fe:	3220      	addls	r2, #32
 800c300:	42a2      	cmp	r2, r4
 800c302:	d0f0      	beq.n	800c2e6 <__match+0x6>
 800c304:	2000      	movs	r0, #0
 800c306:	e7f3      	b.n	800c2f0 <__match+0x10>

0800c308 <__hexnan>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	680b      	ldr	r3, [r1, #0]
 800c30e:	6801      	ldr	r1, [r0, #0]
 800c310:	115e      	asrs	r6, r3, #5
 800c312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c316:	f013 031f 	ands.w	r3, r3, #31
 800c31a:	b087      	sub	sp, #28
 800c31c:	bf18      	it	ne
 800c31e:	3604      	addne	r6, #4
 800c320:	2500      	movs	r5, #0
 800c322:	1f37      	subs	r7, r6, #4
 800c324:	4682      	mov	sl, r0
 800c326:	4690      	mov	r8, r2
 800c328:	9301      	str	r3, [sp, #4]
 800c32a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c32e:	46b9      	mov	r9, r7
 800c330:	463c      	mov	r4, r7
 800c332:	9502      	str	r5, [sp, #8]
 800c334:	46ab      	mov	fp, r5
 800c336:	784a      	ldrb	r2, [r1, #1]
 800c338:	1c4b      	adds	r3, r1, #1
 800c33a:	9303      	str	r3, [sp, #12]
 800c33c:	b342      	cbz	r2, 800c390 <__hexnan+0x88>
 800c33e:	4610      	mov	r0, r2
 800c340:	9105      	str	r1, [sp, #20]
 800c342:	9204      	str	r2, [sp, #16]
 800c344:	f7ff fd5f 	bl	800be06 <__hexdig_fun>
 800c348:	2800      	cmp	r0, #0
 800c34a:	d14f      	bne.n	800c3ec <__hexnan+0xe4>
 800c34c:	9a04      	ldr	r2, [sp, #16]
 800c34e:	9905      	ldr	r1, [sp, #20]
 800c350:	2a20      	cmp	r2, #32
 800c352:	d818      	bhi.n	800c386 <__hexnan+0x7e>
 800c354:	9b02      	ldr	r3, [sp, #8]
 800c356:	459b      	cmp	fp, r3
 800c358:	dd13      	ble.n	800c382 <__hexnan+0x7a>
 800c35a:	454c      	cmp	r4, r9
 800c35c:	d206      	bcs.n	800c36c <__hexnan+0x64>
 800c35e:	2d07      	cmp	r5, #7
 800c360:	dc04      	bgt.n	800c36c <__hexnan+0x64>
 800c362:	462a      	mov	r2, r5
 800c364:	4649      	mov	r1, r9
 800c366:	4620      	mov	r0, r4
 800c368:	f7ff ffa8 	bl	800c2bc <L_shift>
 800c36c:	4544      	cmp	r4, r8
 800c36e:	d950      	bls.n	800c412 <__hexnan+0x10a>
 800c370:	2300      	movs	r3, #0
 800c372:	f1a4 0904 	sub.w	r9, r4, #4
 800c376:	f844 3c04 	str.w	r3, [r4, #-4]
 800c37a:	f8cd b008 	str.w	fp, [sp, #8]
 800c37e:	464c      	mov	r4, r9
 800c380:	461d      	mov	r5, r3
 800c382:	9903      	ldr	r1, [sp, #12]
 800c384:	e7d7      	b.n	800c336 <__hexnan+0x2e>
 800c386:	2a29      	cmp	r2, #41	; 0x29
 800c388:	d156      	bne.n	800c438 <__hexnan+0x130>
 800c38a:	3102      	adds	r1, #2
 800c38c:	f8ca 1000 	str.w	r1, [sl]
 800c390:	f1bb 0f00 	cmp.w	fp, #0
 800c394:	d050      	beq.n	800c438 <__hexnan+0x130>
 800c396:	454c      	cmp	r4, r9
 800c398:	d206      	bcs.n	800c3a8 <__hexnan+0xa0>
 800c39a:	2d07      	cmp	r5, #7
 800c39c:	dc04      	bgt.n	800c3a8 <__hexnan+0xa0>
 800c39e:	462a      	mov	r2, r5
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f7ff ff8a 	bl	800c2bc <L_shift>
 800c3a8:	4544      	cmp	r4, r8
 800c3aa:	d934      	bls.n	800c416 <__hexnan+0x10e>
 800c3ac:	f1a8 0204 	sub.w	r2, r8, #4
 800c3b0:	4623      	mov	r3, r4
 800c3b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c3ba:	429f      	cmp	r7, r3
 800c3bc:	d2f9      	bcs.n	800c3b2 <__hexnan+0xaa>
 800c3be:	1b3b      	subs	r3, r7, r4
 800c3c0:	f023 0303 	bic.w	r3, r3, #3
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	3401      	adds	r4, #1
 800c3c8:	3e03      	subs	r6, #3
 800c3ca:	42b4      	cmp	r4, r6
 800c3cc:	bf88      	it	hi
 800c3ce:	2304      	movhi	r3, #4
 800c3d0:	4443      	add	r3, r8
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f843 2b04 	str.w	r2, [r3], #4
 800c3d8:	429f      	cmp	r7, r3
 800c3da:	d2fb      	bcs.n	800c3d4 <__hexnan+0xcc>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	b91b      	cbnz	r3, 800c3e8 <__hexnan+0xe0>
 800c3e0:	4547      	cmp	r7, r8
 800c3e2:	d127      	bne.n	800c434 <__hexnan+0x12c>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	603b      	str	r3, [r7, #0]
 800c3e8:	2005      	movs	r0, #5
 800c3ea:	e026      	b.n	800c43a <__hexnan+0x132>
 800c3ec:	3501      	adds	r5, #1
 800c3ee:	2d08      	cmp	r5, #8
 800c3f0:	f10b 0b01 	add.w	fp, fp, #1
 800c3f4:	dd06      	ble.n	800c404 <__hexnan+0xfc>
 800c3f6:	4544      	cmp	r4, r8
 800c3f8:	d9c3      	bls.n	800c382 <__hexnan+0x7a>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800c400:	2501      	movs	r5, #1
 800c402:	3c04      	subs	r4, #4
 800c404:	6822      	ldr	r2, [r4, #0]
 800c406:	f000 000f 	and.w	r0, r0, #15
 800c40a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c40e:	6022      	str	r2, [r4, #0]
 800c410:	e7b7      	b.n	800c382 <__hexnan+0x7a>
 800c412:	2508      	movs	r5, #8
 800c414:	e7b5      	b.n	800c382 <__hexnan+0x7a>
 800c416:	9b01      	ldr	r3, [sp, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d0df      	beq.n	800c3dc <__hexnan+0xd4>
 800c41c:	f04f 32ff 	mov.w	r2, #4294967295
 800c420:	f1c3 0320 	rsb	r3, r3, #32
 800c424:	fa22 f303 	lsr.w	r3, r2, r3
 800c428:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c42c:	401a      	ands	r2, r3
 800c42e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c432:	e7d3      	b.n	800c3dc <__hexnan+0xd4>
 800c434:	3f04      	subs	r7, #4
 800c436:	e7d1      	b.n	800c3dc <__hexnan+0xd4>
 800c438:	2004      	movs	r0, #4
 800c43a:	b007      	add	sp, #28
 800c43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c440 <_localeconv_r>:
 800c440:	4800      	ldr	r0, [pc, #0]	; (800c444 <_localeconv_r+0x4>)
 800c442:	4770      	bx	lr
 800c444:	20000164 	.word	0x20000164

0800c448 <__retarget_lock_init_recursive>:
 800c448:	4770      	bx	lr

0800c44a <__retarget_lock_acquire_recursive>:
 800c44a:	4770      	bx	lr

0800c44c <__retarget_lock_release_recursive>:
 800c44c:	4770      	bx	lr

0800c44e <__swhatbuf_r>:
 800c44e:	b570      	push	{r4, r5, r6, lr}
 800c450:	460e      	mov	r6, r1
 800c452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c456:	2900      	cmp	r1, #0
 800c458:	b096      	sub	sp, #88	; 0x58
 800c45a:	4614      	mov	r4, r2
 800c45c:	461d      	mov	r5, r3
 800c45e:	da07      	bge.n	800c470 <__swhatbuf_r+0x22>
 800c460:	2300      	movs	r3, #0
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	89b3      	ldrh	r3, [r6, #12]
 800c466:	061a      	lsls	r2, r3, #24
 800c468:	d410      	bmi.n	800c48c <__swhatbuf_r+0x3e>
 800c46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46e:	e00e      	b.n	800c48e <__swhatbuf_r+0x40>
 800c470:	466a      	mov	r2, sp
 800c472:	f001 f991 	bl	800d798 <_fstat_r>
 800c476:	2800      	cmp	r0, #0
 800c478:	dbf2      	blt.n	800c460 <__swhatbuf_r+0x12>
 800c47a:	9a01      	ldr	r2, [sp, #4]
 800c47c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c480:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c484:	425a      	negs	r2, r3
 800c486:	415a      	adcs	r2, r3
 800c488:	602a      	str	r2, [r5, #0]
 800c48a:	e7ee      	b.n	800c46a <__swhatbuf_r+0x1c>
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	2000      	movs	r0, #0
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	b016      	add	sp, #88	; 0x58
 800c494:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c498 <__smakebuf_r>:
 800c498:	898b      	ldrh	r3, [r1, #12]
 800c49a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c49c:	079d      	lsls	r5, r3, #30
 800c49e:	4606      	mov	r6, r0
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	d507      	bpl.n	800c4b4 <__smakebuf_r+0x1c>
 800c4a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	6123      	str	r3, [r4, #16]
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	6163      	str	r3, [r4, #20]
 800c4b0:	b002      	add	sp, #8
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	ab01      	add	r3, sp, #4
 800c4b6:	466a      	mov	r2, sp
 800c4b8:	f7ff ffc9 	bl	800c44e <__swhatbuf_r>
 800c4bc:	9900      	ldr	r1, [sp, #0]
 800c4be:	4605      	mov	r5, r0
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f000 fd6b 	bl	800cf9c <_malloc_r>
 800c4c6:	b948      	cbnz	r0, 800c4dc <__smakebuf_r+0x44>
 800c4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4cc:	059a      	lsls	r2, r3, #22
 800c4ce:	d4ef      	bmi.n	800c4b0 <__smakebuf_r+0x18>
 800c4d0:	f023 0303 	bic.w	r3, r3, #3
 800c4d4:	f043 0302 	orr.w	r3, r3, #2
 800c4d8:	81a3      	strh	r3, [r4, #12]
 800c4da:	e7e3      	b.n	800c4a4 <__smakebuf_r+0xc>
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <__smakebuf_r+0x7c>)
 800c4de:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	6020      	str	r0, [r4, #0]
 800c4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	9b00      	ldr	r3, [sp, #0]
 800c4ec:	6163      	str	r3, [r4, #20]
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	6120      	str	r0, [r4, #16]
 800c4f2:	b15b      	cbz	r3, 800c50c <__smakebuf_r+0x74>
 800c4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f001 f95f 	bl	800d7bc <_isatty_r>
 800c4fe:	b128      	cbz	r0, 800c50c <__smakebuf_r+0x74>
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	f023 0303 	bic.w	r3, r3, #3
 800c506:	f043 0301 	orr.w	r3, r3, #1
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	89a0      	ldrh	r0, [r4, #12]
 800c50e:	4305      	orrs	r5, r0
 800c510:	81a5      	strh	r5, [r4, #12]
 800c512:	e7cd      	b.n	800c4b0 <__smakebuf_r+0x18>
 800c514:	0800bb9d 	.word	0x0800bb9d

0800c518 <malloc>:
 800c518:	4b02      	ldr	r3, [pc, #8]	; (800c524 <malloc+0xc>)
 800c51a:	4601      	mov	r1, r0
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	f000 bd3d 	b.w	800cf9c <_malloc_r>
 800c522:	bf00      	nop
 800c524:	2000000c 	.word	0x2000000c

0800c528 <__ascii_mbtowc>:
 800c528:	b082      	sub	sp, #8
 800c52a:	b901      	cbnz	r1, 800c52e <__ascii_mbtowc+0x6>
 800c52c:	a901      	add	r1, sp, #4
 800c52e:	b142      	cbz	r2, 800c542 <__ascii_mbtowc+0x1a>
 800c530:	b14b      	cbz	r3, 800c546 <__ascii_mbtowc+0x1e>
 800c532:	7813      	ldrb	r3, [r2, #0]
 800c534:	600b      	str	r3, [r1, #0]
 800c536:	7812      	ldrb	r2, [r2, #0]
 800c538:	1e10      	subs	r0, r2, #0
 800c53a:	bf18      	it	ne
 800c53c:	2001      	movne	r0, #1
 800c53e:	b002      	add	sp, #8
 800c540:	4770      	bx	lr
 800c542:	4610      	mov	r0, r2
 800c544:	e7fb      	b.n	800c53e <__ascii_mbtowc+0x16>
 800c546:	f06f 0001 	mvn.w	r0, #1
 800c54a:	e7f8      	b.n	800c53e <__ascii_mbtowc+0x16>

0800c54c <memcpy>:
 800c54c:	440a      	add	r2, r1
 800c54e:	4291      	cmp	r1, r2
 800c550:	f100 33ff 	add.w	r3, r0, #4294967295
 800c554:	d100      	bne.n	800c558 <memcpy+0xc>
 800c556:	4770      	bx	lr
 800c558:	b510      	push	{r4, lr}
 800c55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c562:	4291      	cmp	r1, r2
 800c564:	d1f9      	bne.n	800c55a <memcpy+0xe>
 800c566:	bd10      	pop	{r4, pc}

0800c568 <_Balloc>:
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c56c:	4604      	mov	r4, r0
 800c56e:	460d      	mov	r5, r1
 800c570:	b976      	cbnz	r6, 800c590 <_Balloc+0x28>
 800c572:	2010      	movs	r0, #16
 800c574:	f7ff ffd0 	bl	800c518 <malloc>
 800c578:	4602      	mov	r2, r0
 800c57a:	6260      	str	r0, [r4, #36]	; 0x24
 800c57c:	b920      	cbnz	r0, 800c588 <_Balloc+0x20>
 800c57e:	4b18      	ldr	r3, [pc, #96]	; (800c5e0 <_Balloc+0x78>)
 800c580:	4818      	ldr	r0, [pc, #96]	; (800c5e4 <_Balloc+0x7c>)
 800c582:	2166      	movs	r1, #102	; 0x66
 800c584:	f7fe fb8e 	bl	800aca4 <__assert_func>
 800c588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c58c:	6006      	str	r6, [r0, #0]
 800c58e:	60c6      	str	r6, [r0, #12]
 800c590:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c592:	68f3      	ldr	r3, [r6, #12]
 800c594:	b183      	cbz	r3, 800c5b8 <_Balloc+0x50>
 800c596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c59e:	b9b8      	cbnz	r0, 800c5d0 <_Balloc+0x68>
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	fa01 f605 	lsl.w	r6, r1, r5
 800c5a6:	1d72      	adds	r2, r6, #5
 800c5a8:	0092      	lsls	r2, r2, #2
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 fc97 	bl	800cede <_calloc_r>
 800c5b0:	b160      	cbz	r0, 800c5cc <_Balloc+0x64>
 800c5b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5b6:	e00e      	b.n	800c5d6 <_Balloc+0x6e>
 800c5b8:	2221      	movs	r2, #33	; 0x21
 800c5ba:	2104      	movs	r1, #4
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f000 fc8e 	bl	800cede <_calloc_r>
 800c5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5c4:	60f0      	str	r0, [r6, #12]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e4      	bne.n	800c596 <_Balloc+0x2e>
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}
 800c5d0:	6802      	ldr	r2, [r0, #0]
 800c5d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5dc:	e7f7      	b.n	800c5ce <_Balloc+0x66>
 800c5de:	bf00      	nop
 800c5e0:	08012f98 	.word	0x08012f98
 800c5e4:	080132ac 	.word	0x080132ac

0800c5e8 <_Bfree>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	460c      	mov	r4, r1
 800c5f0:	b976      	cbnz	r6, 800c610 <_Bfree+0x28>
 800c5f2:	2010      	movs	r0, #16
 800c5f4:	f7ff ff90 	bl	800c518 <malloc>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	6268      	str	r0, [r5, #36]	; 0x24
 800c5fc:	b920      	cbnz	r0, 800c608 <_Bfree+0x20>
 800c5fe:	4b09      	ldr	r3, [pc, #36]	; (800c624 <_Bfree+0x3c>)
 800c600:	4809      	ldr	r0, [pc, #36]	; (800c628 <_Bfree+0x40>)
 800c602:	218a      	movs	r1, #138	; 0x8a
 800c604:	f7fe fb4e 	bl	800aca4 <__assert_func>
 800c608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c60c:	6006      	str	r6, [r0, #0]
 800c60e:	60c6      	str	r6, [r0, #12]
 800c610:	b13c      	cbz	r4, 800c622 <_Bfree+0x3a>
 800c612:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c614:	6862      	ldr	r2, [r4, #4]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c61c:	6021      	str	r1, [r4, #0]
 800c61e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	08012f98 	.word	0x08012f98
 800c628:	080132ac 	.word	0x080132ac

0800c62c <__multadd>:
 800c62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c630:	690e      	ldr	r6, [r1, #16]
 800c632:	4607      	mov	r7, r0
 800c634:	4698      	mov	r8, r3
 800c636:	460c      	mov	r4, r1
 800c638:	f101 0014 	add.w	r0, r1, #20
 800c63c:	2300      	movs	r3, #0
 800c63e:	6805      	ldr	r5, [r0, #0]
 800c640:	b2a9      	uxth	r1, r5
 800c642:	fb02 8101 	mla	r1, r2, r1, r8
 800c646:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c64a:	0c2d      	lsrs	r5, r5, #16
 800c64c:	fb02 c505 	mla	r5, r2, r5, ip
 800c650:	b289      	uxth	r1, r1
 800c652:	3301      	adds	r3, #1
 800c654:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c658:	429e      	cmp	r6, r3
 800c65a:	f840 1b04 	str.w	r1, [r0], #4
 800c65e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c662:	dcec      	bgt.n	800c63e <__multadd+0x12>
 800c664:	f1b8 0f00 	cmp.w	r8, #0
 800c668:	d022      	beq.n	800c6b0 <__multadd+0x84>
 800c66a:	68a3      	ldr	r3, [r4, #8]
 800c66c:	42b3      	cmp	r3, r6
 800c66e:	dc19      	bgt.n	800c6a4 <__multadd+0x78>
 800c670:	6861      	ldr	r1, [r4, #4]
 800c672:	4638      	mov	r0, r7
 800c674:	3101      	adds	r1, #1
 800c676:	f7ff ff77 	bl	800c568 <_Balloc>
 800c67a:	4605      	mov	r5, r0
 800c67c:	b928      	cbnz	r0, 800c68a <__multadd+0x5e>
 800c67e:	4602      	mov	r2, r0
 800c680:	4b0d      	ldr	r3, [pc, #52]	; (800c6b8 <__multadd+0x8c>)
 800c682:	480e      	ldr	r0, [pc, #56]	; (800c6bc <__multadd+0x90>)
 800c684:	21b5      	movs	r1, #181	; 0xb5
 800c686:	f7fe fb0d 	bl	800aca4 <__assert_func>
 800c68a:	6922      	ldr	r2, [r4, #16]
 800c68c:	3202      	adds	r2, #2
 800c68e:	f104 010c 	add.w	r1, r4, #12
 800c692:	0092      	lsls	r2, r2, #2
 800c694:	300c      	adds	r0, #12
 800c696:	f7ff ff59 	bl	800c54c <memcpy>
 800c69a:	4621      	mov	r1, r4
 800c69c:	4638      	mov	r0, r7
 800c69e:	f7ff ffa3 	bl	800c5e8 <_Bfree>
 800c6a2:	462c      	mov	r4, r5
 800c6a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c6a8:	3601      	adds	r6, #1
 800c6aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800c6ae:	6126      	str	r6, [r4, #16]
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6b6:	bf00      	nop
 800c6b8:	080131b9 	.word	0x080131b9
 800c6bc:	080132ac 	.word	0x080132ac

0800c6c0 <__s2b>:
 800c6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	4615      	mov	r5, r2
 800c6c8:	461f      	mov	r7, r3
 800c6ca:	2209      	movs	r2, #9
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	4606      	mov	r6, r0
 800c6d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	db09      	blt.n	800c6f0 <__s2b+0x30>
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f7ff ff43 	bl	800c568 <_Balloc>
 800c6e2:	b940      	cbnz	r0, 800c6f6 <__s2b+0x36>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	4b19      	ldr	r3, [pc, #100]	; (800c74c <__s2b+0x8c>)
 800c6e8:	4819      	ldr	r0, [pc, #100]	; (800c750 <__s2b+0x90>)
 800c6ea:	21ce      	movs	r1, #206	; 0xce
 800c6ec:	f7fe fada 	bl	800aca4 <__assert_func>
 800c6f0:	0052      	lsls	r2, r2, #1
 800c6f2:	3101      	adds	r1, #1
 800c6f4:	e7f0      	b.n	800c6d8 <__s2b+0x18>
 800c6f6:	9b08      	ldr	r3, [sp, #32]
 800c6f8:	6143      	str	r3, [r0, #20]
 800c6fa:	2d09      	cmp	r5, #9
 800c6fc:	f04f 0301 	mov.w	r3, #1
 800c700:	6103      	str	r3, [r0, #16]
 800c702:	dd16      	ble.n	800c732 <__s2b+0x72>
 800c704:	f104 0909 	add.w	r9, r4, #9
 800c708:	46c8      	mov	r8, r9
 800c70a:	442c      	add	r4, r5
 800c70c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c710:	4601      	mov	r1, r0
 800c712:	3b30      	subs	r3, #48	; 0x30
 800c714:	220a      	movs	r2, #10
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff ff88 	bl	800c62c <__multadd>
 800c71c:	45a0      	cmp	r8, r4
 800c71e:	d1f5      	bne.n	800c70c <__s2b+0x4c>
 800c720:	f1a5 0408 	sub.w	r4, r5, #8
 800c724:	444c      	add	r4, r9
 800c726:	1b2d      	subs	r5, r5, r4
 800c728:	1963      	adds	r3, r4, r5
 800c72a:	42bb      	cmp	r3, r7
 800c72c:	db04      	blt.n	800c738 <__s2b+0x78>
 800c72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c732:	340a      	adds	r4, #10
 800c734:	2509      	movs	r5, #9
 800c736:	e7f6      	b.n	800c726 <__s2b+0x66>
 800c738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c73c:	4601      	mov	r1, r0
 800c73e:	3b30      	subs	r3, #48	; 0x30
 800c740:	220a      	movs	r2, #10
 800c742:	4630      	mov	r0, r6
 800c744:	f7ff ff72 	bl	800c62c <__multadd>
 800c748:	e7ee      	b.n	800c728 <__s2b+0x68>
 800c74a:	bf00      	nop
 800c74c:	080131b9 	.word	0x080131b9
 800c750:	080132ac 	.word	0x080132ac

0800c754 <__hi0bits>:
 800c754:	0c03      	lsrs	r3, r0, #16
 800c756:	041b      	lsls	r3, r3, #16
 800c758:	b9d3      	cbnz	r3, 800c790 <__hi0bits+0x3c>
 800c75a:	0400      	lsls	r0, r0, #16
 800c75c:	2310      	movs	r3, #16
 800c75e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c762:	bf04      	itt	eq
 800c764:	0200      	lsleq	r0, r0, #8
 800c766:	3308      	addeq	r3, #8
 800c768:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c76c:	bf04      	itt	eq
 800c76e:	0100      	lsleq	r0, r0, #4
 800c770:	3304      	addeq	r3, #4
 800c772:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c776:	bf04      	itt	eq
 800c778:	0080      	lsleq	r0, r0, #2
 800c77a:	3302      	addeq	r3, #2
 800c77c:	2800      	cmp	r0, #0
 800c77e:	db05      	blt.n	800c78c <__hi0bits+0x38>
 800c780:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c784:	f103 0301 	add.w	r3, r3, #1
 800c788:	bf08      	it	eq
 800c78a:	2320      	moveq	r3, #32
 800c78c:	4618      	mov	r0, r3
 800c78e:	4770      	bx	lr
 800c790:	2300      	movs	r3, #0
 800c792:	e7e4      	b.n	800c75e <__hi0bits+0xa>

0800c794 <__lo0bits>:
 800c794:	6803      	ldr	r3, [r0, #0]
 800c796:	f013 0207 	ands.w	r2, r3, #7
 800c79a:	4601      	mov	r1, r0
 800c79c:	d00b      	beq.n	800c7b6 <__lo0bits+0x22>
 800c79e:	07da      	lsls	r2, r3, #31
 800c7a0:	d424      	bmi.n	800c7ec <__lo0bits+0x58>
 800c7a2:	0798      	lsls	r0, r3, #30
 800c7a4:	bf49      	itett	mi
 800c7a6:	085b      	lsrmi	r3, r3, #1
 800c7a8:	089b      	lsrpl	r3, r3, #2
 800c7aa:	2001      	movmi	r0, #1
 800c7ac:	600b      	strmi	r3, [r1, #0]
 800c7ae:	bf5c      	itt	pl
 800c7b0:	600b      	strpl	r3, [r1, #0]
 800c7b2:	2002      	movpl	r0, #2
 800c7b4:	4770      	bx	lr
 800c7b6:	b298      	uxth	r0, r3
 800c7b8:	b9b0      	cbnz	r0, 800c7e8 <__lo0bits+0x54>
 800c7ba:	0c1b      	lsrs	r3, r3, #16
 800c7bc:	2010      	movs	r0, #16
 800c7be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c7c2:	bf04      	itt	eq
 800c7c4:	0a1b      	lsreq	r3, r3, #8
 800c7c6:	3008      	addeq	r0, #8
 800c7c8:	071a      	lsls	r2, r3, #28
 800c7ca:	bf04      	itt	eq
 800c7cc:	091b      	lsreq	r3, r3, #4
 800c7ce:	3004      	addeq	r0, #4
 800c7d0:	079a      	lsls	r2, r3, #30
 800c7d2:	bf04      	itt	eq
 800c7d4:	089b      	lsreq	r3, r3, #2
 800c7d6:	3002      	addeq	r0, #2
 800c7d8:	07da      	lsls	r2, r3, #31
 800c7da:	d403      	bmi.n	800c7e4 <__lo0bits+0x50>
 800c7dc:	085b      	lsrs	r3, r3, #1
 800c7de:	f100 0001 	add.w	r0, r0, #1
 800c7e2:	d005      	beq.n	800c7f0 <__lo0bits+0x5c>
 800c7e4:	600b      	str	r3, [r1, #0]
 800c7e6:	4770      	bx	lr
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	e7e8      	b.n	800c7be <__lo0bits+0x2a>
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	4770      	bx	lr
 800c7f0:	2020      	movs	r0, #32
 800c7f2:	4770      	bx	lr

0800c7f4 <__i2b>:
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	2101      	movs	r1, #1
 800c7fa:	f7ff feb5 	bl	800c568 <_Balloc>
 800c7fe:	4602      	mov	r2, r0
 800c800:	b928      	cbnz	r0, 800c80e <__i2b+0x1a>
 800c802:	4b05      	ldr	r3, [pc, #20]	; (800c818 <__i2b+0x24>)
 800c804:	4805      	ldr	r0, [pc, #20]	; (800c81c <__i2b+0x28>)
 800c806:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c80a:	f7fe fa4b 	bl	800aca4 <__assert_func>
 800c80e:	2301      	movs	r3, #1
 800c810:	6144      	str	r4, [r0, #20]
 800c812:	6103      	str	r3, [r0, #16]
 800c814:	bd10      	pop	{r4, pc}
 800c816:	bf00      	nop
 800c818:	080131b9 	.word	0x080131b9
 800c81c:	080132ac 	.word	0x080132ac

0800c820 <__multiply>:
 800c820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c824:	4614      	mov	r4, r2
 800c826:	690a      	ldr	r2, [r1, #16]
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	bfb8      	it	lt
 800c82e:	460b      	movlt	r3, r1
 800c830:	460d      	mov	r5, r1
 800c832:	bfbc      	itt	lt
 800c834:	4625      	movlt	r5, r4
 800c836:	461c      	movlt	r4, r3
 800c838:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c83c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c840:	68ab      	ldr	r3, [r5, #8]
 800c842:	6869      	ldr	r1, [r5, #4]
 800c844:	eb0a 0709 	add.w	r7, sl, r9
 800c848:	42bb      	cmp	r3, r7
 800c84a:	b085      	sub	sp, #20
 800c84c:	bfb8      	it	lt
 800c84e:	3101      	addlt	r1, #1
 800c850:	f7ff fe8a 	bl	800c568 <_Balloc>
 800c854:	b930      	cbnz	r0, 800c864 <__multiply+0x44>
 800c856:	4602      	mov	r2, r0
 800c858:	4b42      	ldr	r3, [pc, #264]	; (800c964 <__multiply+0x144>)
 800c85a:	4843      	ldr	r0, [pc, #268]	; (800c968 <__multiply+0x148>)
 800c85c:	f240 115d 	movw	r1, #349	; 0x15d
 800c860:	f7fe fa20 	bl	800aca4 <__assert_func>
 800c864:	f100 0614 	add.w	r6, r0, #20
 800c868:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c86c:	4633      	mov	r3, r6
 800c86e:	2200      	movs	r2, #0
 800c870:	4543      	cmp	r3, r8
 800c872:	d31e      	bcc.n	800c8b2 <__multiply+0x92>
 800c874:	f105 0c14 	add.w	ip, r5, #20
 800c878:	f104 0314 	add.w	r3, r4, #20
 800c87c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c880:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c884:	9202      	str	r2, [sp, #8]
 800c886:	ebac 0205 	sub.w	r2, ip, r5
 800c88a:	3a15      	subs	r2, #21
 800c88c:	f022 0203 	bic.w	r2, r2, #3
 800c890:	3204      	adds	r2, #4
 800c892:	f105 0115 	add.w	r1, r5, #21
 800c896:	458c      	cmp	ip, r1
 800c898:	bf38      	it	cc
 800c89a:	2204      	movcc	r2, #4
 800c89c:	9201      	str	r2, [sp, #4]
 800c89e:	9a02      	ldr	r2, [sp, #8]
 800c8a0:	9303      	str	r3, [sp, #12]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d808      	bhi.n	800c8b8 <__multiply+0x98>
 800c8a6:	2f00      	cmp	r7, #0
 800c8a8:	dc55      	bgt.n	800c956 <__multiply+0x136>
 800c8aa:	6107      	str	r7, [r0, #16]
 800c8ac:	b005      	add	sp, #20
 800c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b2:	f843 2b04 	str.w	r2, [r3], #4
 800c8b6:	e7db      	b.n	800c870 <__multiply+0x50>
 800c8b8:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8bc:	f1ba 0f00 	cmp.w	sl, #0
 800c8c0:	d020      	beq.n	800c904 <__multiply+0xe4>
 800c8c2:	f105 0e14 	add.w	lr, r5, #20
 800c8c6:	46b1      	mov	r9, r6
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c8ce:	f8d9 b000 	ldr.w	fp, [r9]
 800c8d2:	b2a1      	uxth	r1, r4
 800c8d4:	fa1f fb8b 	uxth.w	fp, fp
 800c8d8:	fb0a b101 	mla	r1, sl, r1, fp
 800c8dc:	4411      	add	r1, r2
 800c8de:	f8d9 2000 	ldr.w	r2, [r9]
 800c8e2:	0c24      	lsrs	r4, r4, #16
 800c8e4:	0c12      	lsrs	r2, r2, #16
 800c8e6:	fb0a 2404 	mla	r4, sl, r4, r2
 800c8ea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c8ee:	b289      	uxth	r1, r1
 800c8f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c8f4:	45f4      	cmp	ip, lr
 800c8f6:	f849 1b04 	str.w	r1, [r9], #4
 800c8fa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c8fe:	d8e4      	bhi.n	800c8ca <__multiply+0xaa>
 800c900:	9901      	ldr	r1, [sp, #4]
 800c902:	5072      	str	r2, [r6, r1]
 800c904:	9a03      	ldr	r2, [sp, #12]
 800c906:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c90a:	3304      	adds	r3, #4
 800c90c:	f1b9 0f00 	cmp.w	r9, #0
 800c910:	d01f      	beq.n	800c952 <__multiply+0x132>
 800c912:	6834      	ldr	r4, [r6, #0]
 800c914:	f105 0114 	add.w	r1, r5, #20
 800c918:	46b6      	mov	lr, r6
 800c91a:	f04f 0a00 	mov.w	sl, #0
 800c91e:	880a      	ldrh	r2, [r1, #0]
 800c920:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c924:	fb09 b202 	mla	r2, r9, r2, fp
 800c928:	4492      	add	sl, r2
 800c92a:	b2a4      	uxth	r4, r4
 800c92c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c930:	f84e 4b04 	str.w	r4, [lr], #4
 800c934:	f851 4b04 	ldr.w	r4, [r1], #4
 800c938:	f8be 2000 	ldrh.w	r2, [lr]
 800c93c:	0c24      	lsrs	r4, r4, #16
 800c93e:	fb09 2404 	mla	r4, r9, r4, r2
 800c942:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c946:	458c      	cmp	ip, r1
 800c948:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c94c:	d8e7      	bhi.n	800c91e <__multiply+0xfe>
 800c94e:	9a01      	ldr	r2, [sp, #4]
 800c950:	50b4      	str	r4, [r6, r2]
 800c952:	3604      	adds	r6, #4
 800c954:	e7a3      	b.n	800c89e <__multiply+0x7e>
 800c956:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1a5      	bne.n	800c8aa <__multiply+0x8a>
 800c95e:	3f01      	subs	r7, #1
 800c960:	e7a1      	b.n	800c8a6 <__multiply+0x86>
 800c962:	bf00      	nop
 800c964:	080131b9 	.word	0x080131b9
 800c968:	080132ac 	.word	0x080132ac

0800c96c <__pow5mult>:
 800c96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c970:	4615      	mov	r5, r2
 800c972:	f012 0203 	ands.w	r2, r2, #3
 800c976:	4606      	mov	r6, r0
 800c978:	460f      	mov	r7, r1
 800c97a:	d007      	beq.n	800c98c <__pow5mult+0x20>
 800c97c:	4c25      	ldr	r4, [pc, #148]	; (800ca14 <__pow5mult+0xa8>)
 800c97e:	3a01      	subs	r2, #1
 800c980:	2300      	movs	r3, #0
 800c982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c986:	f7ff fe51 	bl	800c62c <__multadd>
 800c98a:	4607      	mov	r7, r0
 800c98c:	10ad      	asrs	r5, r5, #2
 800c98e:	d03d      	beq.n	800ca0c <__pow5mult+0xa0>
 800c990:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c992:	b97c      	cbnz	r4, 800c9b4 <__pow5mult+0x48>
 800c994:	2010      	movs	r0, #16
 800c996:	f7ff fdbf 	bl	800c518 <malloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	6270      	str	r0, [r6, #36]	; 0x24
 800c99e:	b928      	cbnz	r0, 800c9ac <__pow5mult+0x40>
 800c9a0:	4b1d      	ldr	r3, [pc, #116]	; (800ca18 <__pow5mult+0xac>)
 800c9a2:	481e      	ldr	r0, [pc, #120]	; (800ca1c <__pow5mult+0xb0>)
 800c9a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9a8:	f7fe f97c 	bl	800aca4 <__assert_func>
 800c9ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9b0:	6004      	str	r4, [r0, #0]
 800c9b2:	60c4      	str	r4, [r0, #12]
 800c9b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9bc:	b94c      	cbnz	r4, 800c9d2 <__pow5mult+0x66>
 800c9be:	f240 2171 	movw	r1, #625	; 0x271
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	f7ff ff16 	bl	800c7f4 <__i2b>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	6003      	str	r3, [r0, #0]
 800c9d2:	f04f 0900 	mov.w	r9, #0
 800c9d6:	07eb      	lsls	r3, r5, #31
 800c9d8:	d50a      	bpl.n	800c9f0 <__pow5mult+0x84>
 800c9da:	4639      	mov	r1, r7
 800c9dc:	4622      	mov	r2, r4
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f7ff ff1e 	bl	800c820 <__multiply>
 800c9e4:	4639      	mov	r1, r7
 800c9e6:	4680      	mov	r8, r0
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f7ff fdfd 	bl	800c5e8 <_Bfree>
 800c9ee:	4647      	mov	r7, r8
 800c9f0:	106d      	asrs	r5, r5, #1
 800c9f2:	d00b      	beq.n	800ca0c <__pow5mult+0xa0>
 800c9f4:	6820      	ldr	r0, [r4, #0]
 800c9f6:	b938      	cbnz	r0, 800ca08 <__pow5mult+0x9c>
 800c9f8:	4622      	mov	r2, r4
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	f7ff ff0f 	bl	800c820 <__multiply>
 800ca02:	6020      	str	r0, [r4, #0]
 800ca04:	f8c0 9000 	str.w	r9, [r0]
 800ca08:	4604      	mov	r4, r0
 800ca0a:	e7e4      	b.n	800c9d6 <__pow5mult+0x6a>
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca12:	bf00      	nop
 800ca14:	08013400 	.word	0x08013400
 800ca18:	08012f98 	.word	0x08012f98
 800ca1c:	080132ac 	.word	0x080132ac

0800ca20 <__lshift>:
 800ca20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca24:	460c      	mov	r4, r1
 800ca26:	6849      	ldr	r1, [r1, #4]
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca2e:	68a3      	ldr	r3, [r4, #8]
 800ca30:	4607      	mov	r7, r0
 800ca32:	4691      	mov	r9, r2
 800ca34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca38:	f108 0601 	add.w	r6, r8, #1
 800ca3c:	42b3      	cmp	r3, r6
 800ca3e:	db0b      	blt.n	800ca58 <__lshift+0x38>
 800ca40:	4638      	mov	r0, r7
 800ca42:	f7ff fd91 	bl	800c568 <_Balloc>
 800ca46:	4605      	mov	r5, r0
 800ca48:	b948      	cbnz	r0, 800ca5e <__lshift+0x3e>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	4b28      	ldr	r3, [pc, #160]	; (800caf0 <__lshift+0xd0>)
 800ca4e:	4829      	ldr	r0, [pc, #164]	; (800caf4 <__lshift+0xd4>)
 800ca50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca54:	f7fe f926 	bl	800aca4 <__assert_func>
 800ca58:	3101      	adds	r1, #1
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	e7ee      	b.n	800ca3c <__lshift+0x1c>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f100 0114 	add.w	r1, r0, #20
 800ca64:	f100 0210 	add.w	r2, r0, #16
 800ca68:	4618      	mov	r0, r3
 800ca6a:	4553      	cmp	r3, sl
 800ca6c:	db33      	blt.n	800cad6 <__lshift+0xb6>
 800ca6e:	6920      	ldr	r0, [r4, #16]
 800ca70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca74:	f104 0314 	add.w	r3, r4, #20
 800ca78:	f019 091f 	ands.w	r9, r9, #31
 800ca7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca84:	d02b      	beq.n	800cade <__lshift+0xbe>
 800ca86:	f1c9 0e20 	rsb	lr, r9, #32
 800ca8a:	468a      	mov	sl, r1
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	fa00 f009 	lsl.w	r0, r0, r9
 800ca94:	4302      	orrs	r2, r0
 800ca96:	f84a 2b04 	str.w	r2, [sl], #4
 800ca9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca9e:	459c      	cmp	ip, r3
 800caa0:	fa22 f20e 	lsr.w	r2, r2, lr
 800caa4:	d8f3      	bhi.n	800ca8e <__lshift+0x6e>
 800caa6:	ebac 0304 	sub.w	r3, ip, r4
 800caaa:	3b15      	subs	r3, #21
 800caac:	f023 0303 	bic.w	r3, r3, #3
 800cab0:	3304      	adds	r3, #4
 800cab2:	f104 0015 	add.w	r0, r4, #21
 800cab6:	4584      	cmp	ip, r0
 800cab8:	bf38      	it	cc
 800caba:	2304      	movcc	r3, #4
 800cabc:	50ca      	str	r2, [r1, r3]
 800cabe:	b10a      	cbz	r2, 800cac4 <__lshift+0xa4>
 800cac0:	f108 0602 	add.w	r6, r8, #2
 800cac4:	3e01      	subs	r6, #1
 800cac6:	4638      	mov	r0, r7
 800cac8:	612e      	str	r6, [r5, #16]
 800caca:	4621      	mov	r1, r4
 800cacc:	f7ff fd8c 	bl	800c5e8 <_Bfree>
 800cad0:	4628      	mov	r0, r5
 800cad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cada:	3301      	adds	r3, #1
 800cadc:	e7c5      	b.n	800ca6a <__lshift+0x4a>
 800cade:	3904      	subs	r1, #4
 800cae0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cae4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cae8:	459c      	cmp	ip, r3
 800caea:	d8f9      	bhi.n	800cae0 <__lshift+0xc0>
 800caec:	e7ea      	b.n	800cac4 <__lshift+0xa4>
 800caee:	bf00      	nop
 800caf0:	080131b9 	.word	0x080131b9
 800caf4:	080132ac 	.word	0x080132ac

0800caf8 <__mcmp>:
 800caf8:	b530      	push	{r4, r5, lr}
 800cafa:	6902      	ldr	r2, [r0, #16]
 800cafc:	690c      	ldr	r4, [r1, #16]
 800cafe:	1b12      	subs	r2, r2, r4
 800cb00:	d10e      	bne.n	800cb20 <__mcmp+0x28>
 800cb02:	f100 0314 	add.w	r3, r0, #20
 800cb06:	3114      	adds	r1, #20
 800cb08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb18:	42a5      	cmp	r5, r4
 800cb1a:	d003      	beq.n	800cb24 <__mcmp+0x2c>
 800cb1c:	d305      	bcc.n	800cb2a <__mcmp+0x32>
 800cb1e:	2201      	movs	r2, #1
 800cb20:	4610      	mov	r0, r2
 800cb22:	bd30      	pop	{r4, r5, pc}
 800cb24:	4283      	cmp	r3, r0
 800cb26:	d3f3      	bcc.n	800cb10 <__mcmp+0x18>
 800cb28:	e7fa      	b.n	800cb20 <__mcmp+0x28>
 800cb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb2e:	e7f7      	b.n	800cb20 <__mcmp+0x28>

0800cb30 <__mdiff>:
 800cb30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	460c      	mov	r4, r1
 800cb36:	4606      	mov	r6, r0
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	4617      	mov	r7, r2
 800cb3e:	f7ff ffdb 	bl	800caf8 <__mcmp>
 800cb42:	1e05      	subs	r5, r0, #0
 800cb44:	d110      	bne.n	800cb68 <__mdiff+0x38>
 800cb46:	4629      	mov	r1, r5
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f7ff fd0d 	bl	800c568 <_Balloc>
 800cb4e:	b930      	cbnz	r0, 800cb5e <__mdiff+0x2e>
 800cb50:	4b39      	ldr	r3, [pc, #228]	; (800cc38 <__mdiff+0x108>)
 800cb52:	4602      	mov	r2, r0
 800cb54:	f240 2132 	movw	r1, #562	; 0x232
 800cb58:	4838      	ldr	r0, [pc, #224]	; (800cc3c <__mdiff+0x10c>)
 800cb5a:	f7fe f8a3 	bl	800aca4 <__assert_func>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb68:	bfa4      	itt	ge
 800cb6a:	463b      	movge	r3, r7
 800cb6c:	4627      	movge	r7, r4
 800cb6e:	4630      	mov	r0, r6
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	bfa6      	itte	ge
 800cb74:	461c      	movge	r4, r3
 800cb76:	2500      	movge	r5, #0
 800cb78:	2501      	movlt	r5, #1
 800cb7a:	f7ff fcf5 	bl	800c568 <_Balloc>
 800cb7e:	b920      	cbnz	r0, 800cb8a <__mdiff+0x5a>
 800cb80:	4b2d      	ldr	r3, [pc, #180]	; (800cc38 <__mdiff+0x108>)
 800cb82:	4602      	mov	r2, r0
 800cb84:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cb88:	e7e6      	b.n	800cb58 <__mdiff+0x28>
 800cb8a:	693e      	ldr	r6, [r7, #16]
 800cb8c:	60c5      	str	r5, [r0, #12]
 800cb8e:	6925      	ldr	r5, [r4, #16]
 800cb90:	f107 0114 	add.w	r1, r7, #20
 800cb94:	f104 0914 	add.w	r9, r4, #20
 800cb98:	f100 0e14 	add.w	lr, r0, #20
 800cb9c:	f107 0210 	add.w	r2, r7, #16
 800cba0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cba4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cba8:	46f2      	mov	sl, lr
 800cbaa:	2700      	movs	r7, #0
 800cbac:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbb4:	fa1f f883 	uxth.w	r8, r3
 800cbb8:	fa17 f78b 	uxtah	r7, r7, fp
 800cbbc:	0c1b      	lsrs	r3, r3, #16
 800cbbe:	eba7 0808 	sub.w	r8, r7, r8
 800cbc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cbc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cbca:	fa1f f888 	uxth.w	r8, r8
 800cbce:	141f      	asrs	r7, r3, #16
 800cbd0:	454d      	cmp	r5, r9
 800cbd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cbd6:	f84a 3b04 	str.w	r3, [sl], #4
 800cbda:	d8e7      	bhi.n	800cbac <__mdiff+0x7c>
 800cbdc:	1b2b      	subs	r3, r5, r4
 800cbde:	3b15      	subs	r3, #21
 800cbe0:	f023 0303 	bic.w	r3, r3, #3
 800cbe4:	3304      	adds	r3, #4
 800cbe6:	3415      	adds	r4, #21
 800cbe8:	42a5      	cmp	r5, r4
 800cbea:	bf38      	it	cc
 800cbec:	2304      	movcc	r3, #4
 800cbee:	4419      	add	r1, r3
 800cbf0:	4473      	add	r3, lr
 800cbf2:	469e      	mov	lr, r3
 800cbf4:	460d      	mov	r5, r1
 800cbf6:	4565      	cmp	r5, ip
 800cbf8:	d30e      	bcc.n	800cc18 <__mdiff+0xe8>
 800cbfa:	f10c 0203 	add.w	r2, ip, #3
 800cbfe:	1a52      	subs	r2, r2, r1
 800cc00:	f022 0203 	bic.w	r2, r2, #3
 800cc04:	3903      	subs	r1, #3
 800cc06:	458c      	cmp	ip, r1
 800cc08:	bf38      	it	cc
 800cc0a:	2200      	movcc	r2, #0
 800cc0c:	441a      	add	r2, r3
 800cc0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc12:	b17b      	cbz	r3, 800cc34 <__mdiff+0x104>
 800cc14:	6106      	str	r6, [r0, #16]
 800cc16:	e7a5      	b.n	800cb64 <__mdiff+0x34>
 800cc18:	f855 8b04 	ldr.w	r8, [r5], #4
 800cc1c:	fa17 f488 	uxtah	r4, r7, r8
 800cc20:	1422      	asrs	r2, r4, #16
 800cc22:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cc26:	b2a4      	uxth	r4, r4
 800cc28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cc2c:	f84e 4b04 	str.w	r4, [lr], #4
 800cc30:	1417      	asrs	r7, r2, #16
 800cc32:	e7e0      	b.n	800cbf6 <__mdiff+0xc6>
 800cc34:	3e01      	subs	r6, #1
 800cc36:	e7ea      	b.n	800cc0e <__mdiff+0xde>
 800cc38:	080131b9 	.word	0x080131b9
 800cc3c:	080132ac 	.word	0x080132ac

0800cc40 <__ulp>:
 800cc40:	b082      	sub	sp, #8
 800cc42:	ed8d 0b00 	vstr	d0, [sp]
 800cc46:	9b01      	ldr	r3, [sp, #4]
 800cc48:	4912      	ldr	r1, [pc, #72]	; (800cc94 <__ulp+0x54>)
 800cc4a:	4019      	ands	r1, r3
 800cc4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cc50:	2900      	cmp	r1, #0
 800cc52:	dd05      	ble.n	800cc60 <__ulp+0x20>
 800cc54:	2200      	movs	r2, #0
 800cc56:	460b      	mov	r3, r1
 800cc58:	ec43 2b10 	vmov	d0, r2, r3
 800cc5c:	b002      	add	sp, #8
 800cc5e:	4770      	bx	lr
 800cc60:	4249      	negs	r1, r1
 800cc62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cc66:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cc6a:	f04f 0200 	mov.w	r2, #0
 800cc6e:	f04f 0300 	mov.w	r3, #0
 800cc72:	da04      	bge.n	800cc7e <__ulp+0x3e>
 800cc74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cc78:	fa41 f300 	asr.w	r3, r1, r0
 800cc7c:	e7ec      	b.n	800cc58 <__ulp+0x18>
 800cc7e:	f1a0 0114 	sub.w	r1, r0, #20
 800cc82:	291e      	cmp	r1, #30
 800cc84:	bfda      	itte	le
 800cc86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cc8a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cc8e:	2101      	movgt	r1, #1
 800cc90:	460a      	mov	r2, r1
 800cc92:	e7e1      	b.n	800cc58 <__ulp+0x18>
 800cc94:	7ff00000 	.word	0x7ff00000

0800cc98 <__b2d>:
 800cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9a:	6905      	ldr	r5, [r0, #16]
 800cc9c:	f100 0714 	add.w	r7, r0, #20
 800cca0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cca4:	1f2e      	subs	r6, r5, #4
 800cca6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f7ff fd52 	bl	800c754 <__hi0bits>
 800ccb0:	f1c0 0320 	rsb	r3, r0, #32
 800ccb4:	280a      	cmp	r0, #10
 800ccb6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cd34 <__b2d+0x9c>
 800ccba:	600b      	str	r3, [r1, #0]
 800ccbc:	dc14      	bgt.n	800cce8 <__b2d+0x50>
 800ccbe:	f1c0 0e0b 	rsb	lr, r0, #11
 800ccc2:	fa24 f10e 	lsr.w	r1, r4, lr
 800ccc6:	42b7      	cmp	r7, r6
 800ccc8:	ea41 030c 	orr.w	r3, r1, ip
 800cccc:	bf34      	ite	cc
 800ccce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ccd2:	2100      	movcs	r1, #0
 800ccd4:	3015      	adds	r0, #21
 800ccd6:	fa04 f000 	lsl.w	r0, r4, r0
 800ccda:	fa21 f10e 	lsr.w	r1, r1, lr
 800ccde:	ea40 0201 	orr.w	r2, r0, r1
 800cce2:	ec43 2b10 	vmov	d0, r2, r3
 800cce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cce8:	42b7      	cmp	r7, r6
 800ccea:	bf3a      	itte	cc
 800ccec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ccf0:	f1a5 0608 	subcc.w	r6, r5, #8
 800ccf4:	2100      	movcs	r1, #0
 800ccf6:	380b      	subs	r0, #11
 800ccf8:	d017      	beq.n	800cd2a <__b2d+0x92>
 800ccfa:	f1c0 0c20 	rsb	ip, r0, #32
 800ccfe:	fa04 f500 	lsl.w	r5, r4, r0
 800cd02:	42be      	cmp	r6, r7
 800cd04:	fa21 f40c 	lsr.w	r4, r1, ip
 800cd08:	ea45 0504 	orr.w	r5, r5, r4
 800cd0c:	bf8c      	ite	hi
 800cd0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cd12:	2400      	movls	r4, #0
 800cd14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cd18:	fa01 f000 	lsl.w	r0, r1, r0
 800cd1c:	fa24 f40c 	lsr.w	r4, r4, ip
 800cd20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd24:	ea40 0204 	orr.w	r2, r0, r4
 800cd28:	e7db      	b.n	800cce2 <__b2d+0x4a>
 800cd2a:	ea44 030c 	orr.w	r3, r4, ip
 800cd2e:	460a      	mov	r2, r1
 800cd30:	e7d7      	b.n	800cce2 <__b2d+0x4a>
 800cd32:	bf00      	nop
 800cd34:	3ff00000 	.word	0x3ff00000

0800cd38 <__d2b>:
 800cd38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	4689      	mov	r9, r1
 800cd3e:	2101      	movs	r1, #1
 800cd40:	ec57 6b10 	vmov	r6, r7, d0
 800cd44:	4690      	mov	r8, r2
 800cd46:	f7ff fc0f 	bl	800c568 <_Balloc>
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	b930      	cbnz	r0, 800cd5c <__d2b+0x24>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	4b25      	ldr	r3, [pc, #148]	; (800cde8 <__d2b+0xb0>)
 800cd52:	4826      	ldr	r0, [pc, #152]	; (800cdec <__d2b+0xb4>)
 800cd54:	f240 310a 	movw	r1, #778	; 0x30a
 800cd58:	f7fd ffa4 	bl	800aca4 <__assert_func>
 800cd5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd64:	bb35      	cbnz	r5, 800cdb4 <__d2b+0x7c>
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	d028      	beq.n	800cdbe <__d2b+0x86>
 800cd6c:	4668      	mov	r0, sp
 800cd6e:	9600      	str	r6, [sp, #0]
 800cd70:	f7ff fd10 	bl	800c794 <__lo0bits>
 800cd74:	9900      	ldr	r1, [sp, #0]
 800cd76:	b300      	cbz	r0, 800cdba <__d2b+0x82>
 800cd78:	9a01      	ldr	r2, [sp, #4]
 800cd7a:	f1c0 0320 	rsb	r3, r0, #32
 800cd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd82:	430b      	orrs	r3, r1
 800cd84:	40c2      	lsrs	r2, r0
 800cd86:	6163      	str	r3, [r4, #20]
 800cd88:	9201      	str	r2, [sp, #4]
 800cd8a:	9b01      	ldr	r3, [sp, #4]
 800cd8c:	61a3      	str	r3, [r4, #24]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	bf14      	ite	ne
 800cd92:	2202      	movne	r2, #2
 800cd94:	2201      	moveq	r2, #1
 800cd96:	6122      	str	r2, [r4, #16]
 800cd98:	b1d5      	cbz	r5, 800cdd0 <__d2b+0x98>
 800cd9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd9e:	4405      	add	r5, r0
 800cda0:	f8c9 5000 	str.w	r5, [r9]
 800cda4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cda8:	f8c8 0000 	str.w	r0, [r8]
 800cdac:	4620      	mov	r0, r4
 800cdae:	b003      	add	sp, #12
 800cdb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdb8:	e7d5      	b.n	800cd66 <__d2b+0x2e>
 800cdba:	6161      	str	r1, [r4, #20]
 800cdbc:	e7e5      	b.n	800cd8a <__d2b+0x52>
 800cdbe:	a801      	add	r0, sp, #4
 800cdc0:	f7ff fce8 	bl	800c794 <__lo0bits>
 800cdc4:	9b01      	ldr	r3, [sp, #4]
 800cdc6:	6163      	str	r3, [r4, #20]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	6122      	str	r2, [r4, #16]
 800cdcc:	3020      	adds	r0, #32
 800cdce:	e7e3      	b.n	800cd98 <__d2b+0x60>
 800cdd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cdd8:	f8c9 0000 	str.w	r0, [r9]
 800cddc:	6918      	ldr	r0, [r3, #16]
 800cdde:	f7ff fcb9 	bl	800c754 <__hi0bits>
 800cde2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cde6:	e7df      	b.n	800cda8 <__d2b+0x70>
 800cde8:	080131b9 	.word	0x080131b9
 800cdec:	080132ac 	.word	0x080132ac

0800cdf0 <__ratio>:
 800cdf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf4:	4688      	mov	r8, r1
 800cdf6:	4669      	mov	r1, sp
 800cdf8:	4681      	mov	r9, r0
 800cdfa:	f7ff ff4d 	bl	800cc98 <__b2d>
 800cdfe:	a901      	add	r1, sp, #4
 800ce00:	4640      	mov	r0, r8
 800ce02:	ec55 4b10 	vmov	r4, r5, d0
 800ce06:	f7ff ff47 	bl	800cc98 <__b2d>
 800ce0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ce12:	eba3 0c02 	sub.w	ip, r3, r2
 800ce16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ce20:	ec51 0b10 	vmov	r0, r1, d0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	bfd6      	itet	le
 800ce28:	460a      	movle	r2, r1
 800ce2a:	462a      	movgt	r2, r5
 800ce2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce30:	468b      	mov	fp, r1
 800ce32:	462f      	mov	r7, r5
 800ce34:	bfd4      	ite	le
 800ce36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ce3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce3e:	4620      	mov	r0, r4
 800ce40:	ee10 2a10 	vmov	r2, s0
 800ce44:	465b      	mov	r3, fp
 800ce46:	4639      	mov	r1, r7
 800ce48:	f7f3 fd38 	bl	80008bc <__aeabi_ddiv>
 800ce4c:	ec41 0b10 	vmov	d0, r0, r1
 800ce50:	b003      	add	sp, #12
 800ce52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce56 <__copybits>:
 800ce56:	3901      	subs	r1, #1
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	1149      	asrs	r1, r1, #5
 800ce5c:	6914      	ldr	r4, [r2, #16]
 800ce5e:	3101      	adds	r1, #1
 800ce60:	f102 0314 	add.w	r3, r2, #20
 800ce64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce6c:	1f05      	subs	r5, r0, #4
 800ce6e:	42a3      	cmp	r3, r4
 800ce70:	d30c      	bcc.n	800ce8c <__copybits+0x36>
 800ce72:	1aa3      	subs	r3, r4, r2
 800ce74:	3b11      	subs	r3, #17
 800ce76:	f023 0303 	bic.w	r3, r3, #3
 800ce7a:	3211      	adds	r2, #17
 800ce7c:	42a2      	cmp	r2, r4
 800ce7e:	bf88      	it	hi
 800ce80:	2300      	movhi	r3, #0
 800ce82:	4418      	add	r0, r3
 800ce84:	2300      	movs	r3, #0
 800ce86:	4288      	cmp	r0, r1
 800ce88:	d305      	bcc.n	800ce96 <__copybits+0x40>
 800ce8a:	bd70      	pop	{r4, r5, r6, pc}
 800ce8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce90:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce94:	e7eb      	b.n	800ce6e <__copybits+0x18>
 800ce96:	f840 3b04 	str.w	r3, [r0], #4
 800ce9a:	e7f4      	b.n	800ce86 <__copybits+0x30>

0800ce9c <__any_on>:
 800ce9c:	f100 0214 	add.w	r2, r0, #20
 800cea0:	6900      	ldr	r0, [r0, #16]
 800cea2:	114b      	asrs	r3, r1, #5
 800cea4:	4298      	cmp	r0, r3
 800cea6:	b510      	push	{r4, lr}
 800cea8:	db11      	blt.n	800cece <__any_on+0x32>
 800ceaa:	dd0a      	ble.n	800cec2 <__any_on+0x26>
 800ceac:	f011 011f 	ands.w	r1, r1, #31
 800ceb0:	d007      	beq.n	800cec2 <__any_on+0x26>
 800ceb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ceb6:	fa24 f001 	lsr.w	r0, r4, r1
 800ceba:	fa00 f101 	lsl.w	r1, r0, r1
 800cebe:	428c      	cmp	r4, r1
 800cec0:	d10b      	bne.n	800ceda <__any_on+0x3e>
 800cec2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d803      	bhi.n	800ced2 <__any_on+0x36>
 800ceca:	2000      	movs	r0, #0
 800cecc:	bd10      	pop	{r4, pc}
 800cece:	4603      	mov	r3, r0
 800ced0:	e7f7      	b.n	800cec2 <__any_on+0x26>
 800ced2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d0f5      	beq.n	800cec6 <__any_on+0x2a>
 800ceda:	2001      	movs	r0, #1
 800cedc:	e7f6      	b.n	800cecc <__any_on+0x30>

0800cede <_calloc_r>:
 800cede:	b513      	push	{r0, r1, r4, lr}
 800cee0:	434a      	muls	r2, r1
 800cee2:	4611      	mov	r1, r2
 800cee4:	9201      	str	r2, [sp, #4]
 800cee6:	f000 f859 	bl	800cf9c <_malloc_r>
 800ceea:	4604      	mov	r4, r0
 800ceec:	b118      	cbz	r0, 800cef6 <_calloc_r+0x18>
 800ceee:	9a01      	ldr	r2, [sp, #4]
 800cef0:	2100      	movs	r1, #0
 800cef2:	f7fb ff8b 	bl	8008e0c <memset>
 800cef6:	4620      	mov	r0, r4
 800cef8:	b002      	add	sp, #8
 800cefa:	bd10      	pop	{r4, pc}

0800cefc <_free_r>:
 800cefc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cefe:	2900      	cmp	r1, #0
 800cf00:	d048      	beq.n	800cf94 <_free_r+0x98>
 800cf02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf06:	9001      	str	r0, [sp, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf0e:	bfb8      	it	lt
 800cf10:	18e4      	addlt	r4, r4, r3
 800cf12:	f000 fc8f 	bl	800d834 <__malloc_lock>
 800cf16:	4a20      	ldr	r2, [pc, #128]	; (800cf98 <_free_r+0x9c>)
 800cf18:	9801      	ldr	r0, [sp, #4]
 800cf1a:	6813      	ldr	r3, [r2, #0]
 800cf1c:	4615      	mov	r5, r2
 800cf1e:	b933      	cbnz	r3, 800cf2e <_free_r+0x32>
 800cf20:	6063      	str	r3, [r4, #4]
 800cf22:	6014      	str	r4, [r2, #0]
 800cf24:	b003      	add	sp, #12
 800cf26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf2a:	f000 bc89 	b.w	800d840 <__malloc_unlock>
 800cf2e:	42a3      	cmp	r3, r4
 800cf30:	d90b      	bls.n	800cf4a <_free_r+0x4e>
 800cf32:	6821      	ldr	r1, [r4, #0]
 800cf34:	1862      	adds	r2, r4, r1
 800cf36:	4293      	cmp	r3, r2
 800cf38:	bf04      	itt	eq
 800cf3a:	681a      	ldreq	r2, [r3, #0]
 800cf3c:	685b      	ldreq	r3, [r3, #4]
 800cf3e:	6063      	str	r3, [r4, #4]
 800cf40:	bf04      	itt	eq
 800cf42:	1852      	addeq	r2, r2, r1
 800cf44:	6022      	streq	r2, [r4, #0]
 800cf46:	602c      	str	r4, [r5, #0]
 800cf48:	e7ec      	b.n	800cf24 <_free_r+0x28>
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	b10b      	cbz	r3, 800cf54 <_free_r+0x58>
 800cf50:	42a3      	cmp	r3, r4
 800cf52:	d9fa      	bls.n	800cf4a <_free_r+0x4e>
 800cf54:	6811      	ldr	r1, [r2, #0]
 800cf56:	1855      	adds	r5, r2, r1
 800cf58:	42a5      	cmp	r5, r4
 800cf5a:	d10b      	bne.n	800cf74 <_free_r+0x78>
 800cf5c:	6824      	ldr	r4, [r4, #0]
 800cf5e:	4421      	add	r1, r4
 800cf60:	1854      	adds	r4, r2, r1
 800cf62:	42a3      	cmp	r3, r4
 800cf64:	6011      	str	r1, [r2, #0]
 800cf66:	d1dd      	bne.n	800cf24 <_free_r+0x28>
 800cf68:	681c      	ldr	r4, [r3, #0]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	6053      	str	r3, [r2, #4]
 800cf6e:	4421      	add	r1, r4
 800cf70:	6011      	str	r1, [r2, #0]
 800cf72:	e7d7      	b.n	800cf24 <_free_r+0x28>
 800cf74:	d902      	bls.n	800cf7c <_free_r+0x80>
 800cf76:	230c      	movs	r3, #12
 800cf78:	6003      	str	r3, [r0, #0]
 800cf7a:	e7d3      	b.n	800cf24 <_free_r+0x28>
 800cf7c:	6825      	ldr	r5, [r4, #0]
 800cf7e:	1961      	adds	r1, r4, r5
 800cf80:	428b      	cmp	r3, r1
 800cf82:	bf04      	itt	eq
 800cf84:	6819      	ldreq	r1, [r3, #0]
 800cf86:	685b      	ldreq	r3, [r3, #4]
 800cf88:	6063      	str	r3, [r4, #4]
 800cf8a:	bf04      	itt	eq
 800cf8c:	1949      	addeq	r1, r1, r5
 800cf8e:	6021      	streq	r1, [r4, #0]
 800cf90:	6054      	str	r4, [r2, #4]
 800cf92:	e7c7      	b.n	800cf24 <_free_r+0x28>
 800cf94:	b003      	add	sp, #12
 800cf96:	bd30      	pop	{r4, r5, pc}
 800cf98:	2000060c 	.word	0x2000060c

0800cf9c <_malloc_r>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	1ccd      	adds	r5, r1, #3
 800cfa0:	f025 0503 	bic.w	r5, r5, #3
 800cfa4:	3508      	adds	r5, #8
 800cfa6:	2d0c      	cmp	r5, #12
 800cfa8:	bf38      	it	cc
 800cfaa:	250c      	movcc	r5, #12
 800cfac:	2d00      	cmp	r5, #0
 800cfae:	4606      	mov	r6, r0
 800cfb0:	db01      	blt.n	800cfb6 <_malloc_r+0x1a>
 800cfb2:	42a9      	cmp	r1, r5
 800cfb4:	d903      	bls.n	800cfbe <_malloc_r+0x22>
 800cfb6:	230c      	movs	r3, #12
 800cfb8:	6033      	str	r3, [r6, #0]
 800cfba:	2000      	movs	r0, #0
 800cfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfbe:	f000 fc39 	bl	800d834 <__malloc_lock>
 800cfc2:	4921      	ldr	r1, [pc, #132]	; (800d048 <_malloc_r+0xac>)
 800cfc4:	680a      	ldr	r2, [r1, #0]
 800cfc6:	4614      	mov	r4, r2
 800cfc8:	b99c      	cbnz	r4, 800cff2 <_malloc_r+0x56>
 800cfca:	4f20      	ldr	r7, [pc, #128]	; (800d04c <_malloc_r+0xb0>)
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	b923      	cbnz	r3, 800cfda <_malloc_r+0x3e>
 800cfd0:	4621      	mov	r1, r4
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f000 fb44 	bl	800d660 <_sbrk_r>
 800cfd8:	6038      	str	r0, [r7, #0]
 800cfda:	4629      	mov	r1, r5
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f000 fb3f 	bl	800d660 <_sbrk_r>
 800cfe2:	1c43      	adds	r3, r0, #1
 800cfe4:	d123      	bne.n	800d02e <_malloc_r+0x92>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	4630      	mov	r0, r6
 800cfec:	f000 fc28 	bl	800d840 <__malloc_unlock>
 800cff0:	e7e3      	b.n	800cfba <_malloc_r+0x1e>
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	1b5b      	subs	r3, r3, r5
 800cff6:	d417      	bmi.n	800d028 <_malloc_r+0x8c>
 800cff8:	2b0b      	cmp	r3, #11
 800cffa:	d903      	bls.n	800d004 <_malloc_r+0x68>
 800cffc:	6023      	str	r3, [r4, #0]
 800cffe:	441c      	add	r4, r3
 800d000:	6025      	str	r5, [r4, #0]
 800d002:	e004      	b.n	800d00e <_malloc_r+0x72>
 800d004:	6863      	ldr	r3, [r4, #4]
 800d006:	42a2      	cmp	r2, r4
 800d008:	bf0c      	ite	eq
 800d00a:	600b      	streq	r3, [r1, #0]
 800d00c:	6053      	strne	r3, [r2, #4]
 800d00e:	4630      	mov	r0, r6
 800d010:	f000 fc16 	bl	800d840 <__malloc_unlock>
 800d014:	f104 000b 	add.w	r0, r4, #11
 800d018:	1d23      	adds	r3, r4, #4
 800d01a:	f020 0007 	bic.w	r0, r0, #7
 800d01e:	1ac2      	subs	r2, r0, r3
 800d020:	d0cc      	beq.n	800cfbc <_malloc_r+0x20>
 800d022:	1a1b      	subs	r3, r3, r0
 800d024:	50a3      	str	r3, [r4, r2]
 800d026:	e7c9      	b.n	800cfbc <_malloc_r+0x20>
 800d028:	4622      	mov	r2, r4
 800d02a:	6864      	ldr	r4, [r4, #4]
 800d02c:	e7cc      	b.n	800cfc8 <_malloc_r+0x2c>
 800d02e:	1cc4      	adds	r4, r0, #3
 800d030:	f024 0403 	bic.w	r4, r4, #3
 800d034:	42a0      	cmp	r0, r4
 800d036:	d0e3      	beq.n	800d000 <_malloc_r+0x64>
 800d038:	1a21      	subs	r1, r4, r0
 800d03a:	4630      	mov	r0, r6
 800d03c:	f000 fb10 	bl	800d660 <_sbrk_r>
 800d040:	3001      	adds	r0, #1
 800d042:	d1dd      	bne.n	800d000 <_malloc_r+0x64>
 800d044:	e7cf      	b.n	800cfe6 <_malloc_r+0x4a>
 800d046:	bf00      	nop
 800d048:	2000060c 	.word	0x2000060c
 800d04c:	20000610 	.word	0x20000610

0800d050 <__ssputs_r>:
 800d050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d054:	688e      	ldr	r6, [r1, #8]
 800d056:	429e      	cmp	r6, r3
 800d058:	4682      	mov	sl, r0
 800d05a:	460c      	mov	r4, r1
 800d05c:	4690      	mov	r8, r2
 800d05e:	461f      	mov	r7, r3
 800d060:	d838      	bhi.n	800d0d4 <__ssputs_r+0x84>
 800d062:	898a      	ldrh	r2, [r1, #12]
 800d064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d068:	d032      	beq.n	800d0d0 <__ssputs_r+0x80>
 800d06a:	6825      	ldr	r5, [r4, #0]
 800d06c:	6909      	ldr	r1, [r1, #16]
 800d06e:	eba5 0901 	sub.w	r9, r5, r1
 800d072:	6965      	ldr	r5, [r4, #20]
 800d074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d07c:	3301      	adds	r3, #1
 800d07e:	444b      	add	r3, r9
 800d080:	106d      	asrs	r5, r5, #1
 800d082:	429d      	cmp	r5, r3
 800d084:	bf38      	it	cc
 800d086:	461d      	movcc	r5, r3
 800d088:	0553      	lsls	r3, r2, #21
 800d08a:	d531      	bpl.n	800d0f0 <__ssputs_r+0xa0>
 800d08c:	4629      	mov	r1, r5
 800d08e:	f7ff ff85 	bl	800cf9c <_malloc_r>
 800d092:	4606      	mov	r6, r0
 800d094:	b950      	cbnz	r0, 800d0ac <__ssputs_r+0x5c>
 800d096:	230c      	movs	r3, #12
 800d098:	f8ca 3000 	str.w	r3, [sl]
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a2:	81a3      	strh	r3, [r4, #12]
 800d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ac:	6921      	ldr	r1, [r4, #16]
 800d0ae:	464a      	mov	r2, r9
 800d0b0:	f7ff fa4c 	bl	800c54c <memcpy>
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0be:	81a3      	strh	r3, [r4, #12]
 800d0c0:	6126      	str	r6, [r4, #16]
 800d0c2:	6165      	str	r5, [r4, #20]
 800d0c4:	444e      	add	r6, r9
 800d0c6:	eba5 0509 	sub.w	r5, r5, r9
 800d0ca:	6026      	str	r6, [r4, #0]
 800d0cc:	60a5      	str	r5, [r4, #8]
 800d0ce:	463e      	mov	r6, r7
 800d0d0:	42be      	cmp	r6, r7
 800d0d2:	d900      	bls.n	800d0d6 <__ssputs_r+0x86>
 800d0d4:	463e      	mov	r6, r7
 800d0d6:	4632      	mov	r2, r6
 800d0d8:	6820      	ldr	r0, [r4, #0]
 800d0da:	4641      	mov	r1, r8
 800d0dc:	f000 fb90 	bl	800d800 <memmove>
 800d0e0:	68a3      	ldr	r3, [r4, #8]
 800d0e2:	6822      	ldr	r2, [r4, #0]
 800d0e4:	1b9b      	subs	r3, r3, r6
 800d0e6:	4432      	add	r2, r6
 800d0e8:	60a3      	str	r3, [r4, #8]
 800d0ea:	6022      	str	r2, [r4, #0]
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	e7db      	b.n	800d0a8 <__ssputs_r+0x58>
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	f000 fbab 	bl	800d84c <_realloc_r>
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d1e1      	bne.n	800d0c0 <__ssputs_r+0x70>
 800d0fc:	6921      	ldr	r1, [r4, #16]
 800d0fe:	4650      	mov	r0, sl
 800d100:	f7ff fefc 	bl	800cefc <_free_r>
 800d104:	e7c7      	b.n	800d096 <__ssputs_r+0x46>
	...

0800d108 <_svfiprintf_r>:
 800d108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	4698      	mov	r8, r3
 800d10e:	898b      	ldrh	r3, [r1, #12]
 800d110:	061b      	lsls	r3, r3, #24
 800d112:	b09d      	sub	sp, #116	; 0x74
 800d114:	4607      	mov	r7, r0
 800d116:	460d      	mov	r5, r1
 800d118:	4614      	mov	r4, r2
 800d11a:	d50e      	bpl.n	800d13a <_svfiprintf_r+0x32>
 800d11c:	690b      	ldr	r3, [r1, #16]
 800d11e:	b963      	cbnz	r3, 800d13a <_svfiprintf_r+0x32>
 800d120:	2140      	movs	r1, #64	; 0x40
 800d122:	f7ff ff3b 	bl	800cf9c <_malloc_r>
 800d126:	6028      	str	r0, [r5, #0]
 800d128:	6128      	str	r0, [r5, #16]
 800d12a:	b920      	cbnz	r0, 800d136 <_svfiprintf_r+0x2e>
 800d12c:	230c      	movs	r3, #12
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	f04f 30ff 	mov.w	r0, #4294967295
 800d134:	e0d1      	b.n	800d2da <_svfiprintf_r+0x1d2>
 800d136:	2340      	movs	r3, #64	; 0x40
 800d138:	616b      	str	r3, [r5, #20]
 800d13a:	2300      	movs	r3, #0
 800d13c:	9309      	str	r3, [sp, #36]	; 0x24
 800d13e:	2320      	movs	r3, #32
 800d140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d144:	f8cd 800c 	str.w	r8, [sp, #12]
 800d148:	2330      	movs	r3, #48	; 0x30
 800d14a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d2f4 <_svfiprintf_r+0x1ec>
 800d14e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d152:	f04f 0901 	mov.w	r9, #1
 800d156:	4623      	mov	r3, r4
 800d158:	469a      	mov	sl, r3
 800d15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d15e:	b10a      	cbz	r2, 800d164 <_svfiprintf_r+0x5c>
 800d160:	2a25      	cmp	r2, #37	; 0x25
 800d162:	d1f9      	bne.n	800d158 <_svfiprintf_r+0x50>
 800d164:	ebba 0b04 	subs.w	fp, sl, r4
 800d168:	d00b      	beq.n	800d182 <_svfiprintf_r+0x7a>
 800d16a:	465b      	mov	r3, fp
 800d16c:	4622      	mov	r2, r4
 800d16e:	4629      	mov	r1, r5
 800d170:	4638      	mov	r0, r7
 800d172:	f7ff ff6d 	bl	800d050 <__ssputs_r>
 800d176:	3001      	adds	r0, #1
 800d178:	f000 80aa 	beq.w	800d2d0 <_svfiprintf_r+0x1c8>
 800d17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d17e:	445a      	add	r2, fp
 800d180:	9209      	str	r2, [sp, #36]	; 0x24
 800d182:	f89a 3000 	ldrb.w	r3, [sl]
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 80a2 	beq.w	800d2d0 <_svfiprintf_r+0x1c8>
 800d18c:	2300      	movs	r3, #0
 800d18e:	f04f 32ff 	mov.w	r2, #4294967295
 800d192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d196:	f10a 0a01 	add.w	sl, sl, #1
 800d19a:	9304      	str	r3, [sp, #16]
 800d19c:	9307      	str	r3, [sp, #28]
 800d19e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1a2:	931a      	str	r3, [sp, #104]	; 0x68
 800d1a4:	4654      	mov	r4, sl
 800d1a6:	2205      	movs	r2, #5
 800d1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ac:	4851      	ldr	r0, [pc, #324]	; (800d2f4 <_svfiprintf_r+0x1ec>)
 800d1ae:	f7f3 f84f 	bl	8000250 <memchr>
 800d1b2:	9a04      	ldr	r2, [sp, #16]
 800d1b4:	b9d8      	cbnz	r0, 800d1ee <_svfiprintf_r+0xe6>
 800d1b6:	06d0      	lsls	r0, r2, #27
 800d1b8:	bf44      	itt	mi
 800d1ba:	2320      	movmi	r3, #32
 800d1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c0:	0711      	lsls	r1, r2, #28
 800d1c2:	bf44      	itt	mi
 800d1c4:	232b      	movmi	r3, #43	; 0x2b
 800d1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d1d0:	d015      	beq.n	800d1fe <_svfiprintf_r+0xf6>
 800d1d2:	9a07      	ldr	r2, [sp, #28]
 800d1d4:	4654      	mov	r4, sl
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	f04f 0c0a 	mov.w	ip, #10
 800d1dc:	4621      	mov	r1, r4
 800d1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1e2:	3b30      	subs	r3, #48	; 0x30
 800d1e4:	2b09      	cmp	r3, #9
 800d1e6:	d94e      	bls.n	800d286 <_svfiprintf_r+0x17e>
 800d1e8:	b1b0      	cbz	r0, 800d218 <_svfiprintf_r+0x110>
 800d1ea:	9207      	str	r2, [sp, #28]
 800d1ec:	e014      	b.n	800d218 <_svfiprintf_r+0x110>
 800d1ee:	eba0 0308 	sub.w	r3, r0, r8
 800d1f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	9304      	str	r3, [sp, #16]
 800d1fa:	46a2      	mov	sl, r4
 800d1fc:	e7d2      	b.n	800d1a4 <_svfiprintf_r+0x9c>
 800d1fe:	9b03      	ldr	r3, [sp, #12]
 800d200:	1d19      	adds	r1, r3, #4
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	9103      	str	r1, [sp, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	bfbb      	ittet	lt
 800d20a:	425b      	neglt	r3, r3
 800d20c:	f042 0202 	orrlt.w	r2, r2, #2
 800d210:	9307      	strge	r3, [sp, #28]
 800d212:	9307      	strlt	r3, [sp, #28]
 800d214:	bfb8      	it	lt
 800d216:	9204      	strlt	r2, [sp, #16]
 800d218:	7823      	ldrb	r3, [r4, #0]
 800d21a:	2b2e      	cmp	r3, #46	; 0x2e
 800d21c:	d10c      	bne.n	800d238 <_svfiprintf_r+0x130>
 800d21e:	7863      	ldrb	r3, [r4, #1]
 800d220:	2b2a      	cmp	r3, #42	; 0x2a
 800d222:	d135      	bne.n	800d290 <_svfiprintf_r+0x188>
 800d224:	9b03      	ldr	r3, [sp, #12]
 800d226:	1d1a      	adds	r2, r3, #4
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	9203      	str	r2, [sp, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfb8      	it	lt
 800d230:	f04f 33ff 	movlt.w	r3, #4294967295
 800d234:	3402      	adds	r4, #2
 800d236:	9305      	str	r3, [sp, #20]
 800d238:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d304 <_svfiprintf_r+0x1fc>
 800d23c:	7821      	ldrb	r1, [r4, #0]
 800d23e:	2203      	movs	r2, #3
 800d240:	4650      	mov	r0, sl
 800d242:	f7f3 f805 	bl	8000250 <memchr>
 800d246:	b140      	cbz	r0, 800d25a <_svfiprintf_r+0x152>
 800d248:	2340      	movs	r3, #64	; 0x40
 800d24a:	eba0 000a 	sub.w	r0, r0, sl
 800d24e:	fa03 f000 	lsl.w	r0, r3, r0
 800d252:	9b04      	ldr	r3, [sp, #16]
 800d254:	4303      	orrs	r3, r0
 800d256:	3401      	adds	r4, #1
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25e:	4826      	ldr	r0, [pc, #152]	; (800d2f8 <_svfiprintf_r+0x1f0>)
 800d260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d264:	2206      	movs	r2, #6
 800d266:	f7f2 fff3 	bl	8000250 <memchr>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d038      	beq.n	800d2e0 <_svfiprintf_r+0x1d8>
 800d26e:	4b23      	ldr	r3, [pc, #140]	; (800d2fc <_svfiprintf_r+0x1f4>)
 800d270:	bb1b      	cbnz	r3, 800d2ba <_svfiprintf_r+0x1b2>
 800d272:	9b03      	ldr	r3, [sp, #12]
 800d274:	3307      	adds	r3, #7
 800d276:	f023 0307 	bic.w	r3, r3, #7
 800d27a:	3308      	adds	r3, #8
 800d27c:	9303      	str	r3, [sp, #12]
 800d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d280:	4433      	add	r3, r6
 800d282:	9309      	str	r3, [sp, #36]	; 0x24
 800d284:	e767      	b.n	800d156 <_svfiprintf_r+0x4e>
 800d286:	fb0c 3202 	mla	r2, ip, r2, r3
 800d28a:	460c      	mov	r4, r1
 800d28c:	2001      	movs	r0, #1
 800d28e:	e7a5      	b.n	800d1dc <_svfiprintf_r+0xd4>
 800d290:	2300      	movs	r3, #0
 800d292:	3401      	adds	r4, #1
 800d294:	9305      	str	r3, [sp, #20]
 800d296:	4619      	mov	r1, r3
 800d298:	f04f 0c0a 	mov.w	ip, #10
 800d29c:	4620      	mov	r0, r4
 800d29e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2a2:	3a30      	subs	r2, #48	; 0x30
 800d2a4:	2a09      	cmp	r2, #9
 800d2a6:	d903      	bls.n	800d2b0 <_svfiprintf_r+0x1a8>
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0c5      	beq.n	800d238 <_svfiprintf_r+0x130>
 800d2ac:	9105      	str	r1, [sp, #20]
 800d2ae:	e7c3      	b.n	800d238 <_svfiprintf_r+0x130>
 800d2b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e7f0      	b.n	800d29c <_svfiprintf_r+0x194>
 800d2ba:	ab03      	add	r3, sp, #12
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	462a      	mov	r2, r5
 800d2c0:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <_svfiprintf_r+0x1f8>)
 800d2c2:	a904      	add	r1, sp, #16
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	f7fb fe49 	bl	8008f5c <_printf_float>
 800d2ca:	1c42      	adds	r2, r0, #1
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	d1d6      	bne.n	800d27e <_svfiprintf_r+0x176>
 800d2d0:	89ab      	ldrh	r3, [r5, #12]
 800d2d2:	065b      	lsls	r3, r3, #25
 800d2d4:	f53f af2c 	bmi.w	800d130 <_svfiprintf_r+0x28>
 800d2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2da:	b01d      	add	sp, #116	; 0x74
 800d2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e0:	ab03      	add	r3, sp, #12
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	462a      	mov	r2, r5
 800d2e6:	4b06      	ldr	r3, [pc, #24]	; (800d300 <_svfiprintf_r+0x1f8>)
 800d2e8:	a904      	add	r1, sp, #16
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f7fc f8da 	bl	80094a4 <_printf_i>
 800d2f0:	e7eb      	b.n	800d2ca <_svfiprintf_r+0x1c2>
 800d2f2:	bf00      	nop
 800d2f4:	0801340c 	.word	0x0801340c
 800d2f8:	08013416 	.word	0x08013416
 800d2fc:	08008f5d 	.word	0x08008f5d
 800d300:	0800d051 	.word	0x0800d051
 800d304:	08013412 	.word	0x08013412

0800d308 <__sfputc_r>:
 800d308:	6893      	ldr	r3, [r2, #8]
 800d30a:	3b01      	subs	r3, #1
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	b410      	push	{r4}
 800d310:	6093      	str	r3, [r2, #8]
 800d312:	da08      	bge.n	800d326 <__sfputc_r+0x1e>
 800d314:	6994      	ldr	r4, [r2, #24]
 800d316:	42a3      	cmp	r3, r4
 800d318:	db01      	blt.n	800d31e <__sfputc_r+0x16>
 800d31a:	290a      	cmp	r1, #10
 800d31c:	d103      	bne.n	800d326 <__sfputc_r+0x1e>
 800d31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d322:	f7fd bbff 	b.w	800ab24 <__swbuf_r>
 800d326:	6813      	ldr	r3, [r2, #0]
 800d328:	1c58      	adds	r0, r3, #1
 800d32a:	6010      	str	r0, [r2, #0]
 800d32c:	7019      	strb	r1, [r3, #0]
 800d32e:	4608      	mov	r0, r1
 800d330:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <__sfputs_r>:
 800d336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d338:	4606      	mov	r6, r0
 800d33a:	460f      	mov	r7, r1
 800d33c:	4614      	mov	r4, r2
 800d33e:	18d5      	adds	r5, r2, r3
 800d340:	42ac      	cmp	r4, r5
 800d342:	d101      	bne.n	800d348 <__sfputs_r+0x12>
 800d344:	2000      	movs	r0, #0
 800d346:	e007      	b.n	800d358 <__sfputs_r+0x22>
 800d348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d34c:	463a      	mov	r2, r7
 800d34e:	4630      	mov	r0, r6
 800d350:	f7ff ffda 	bl	800d308 <__sfputc_r>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d1f3      	bne.n	800d340 <__sfputs_r+0xa>
 800d358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d35c <_vfiprintf_r>:
 800d35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d360:	460d      	mov	r5, r1
 800d362:	b09d      	sub	sp, #116	; 0x74
 800d364:	4614      	mov	r4, r2
 800d366:	4698      	mov	r8, r3
 800d368:	4606      	mov	r6, r0
 800d36a:	b118      	cbz	r0, 800d374 <_vfiprintf_r+0x18>
 800d36c:	6983      	ldr	r3, [r0, #24]
 800d36e:	b90b      	cbnz	r3, 800d374 <_vfiprintf_r+0x18>
 800d370:	f7fe fc48 	bl	800bc04 <__sinit>
 800d374:	4b89      	ldr	r3, [pc, #548]	; (800d59c <_vfiprintf_r+0x240>)
 800d376:	429d      	cmp	r5, r3
 800d378:	d11b      	bne.n	800d3b2 <_vfiprintf_r+0x56>
 800d37a:	6875      	ldr	r5, [r6, #4]
 800d37c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d37e:	07d9      	lsls	r1, r3, #31
 800d380:	d405      	bmi.n	800d38e <_vfiprintf_r+0x32>
 800d382:	89ab      	ldrh	r3, [r5, #12]
 800d384:	059a      	lsls	r2, r3, #22
 800d386:	d402      	bmi.n	800d38e <_vfiprintf_r+0x32>
 800d388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d38a:	f7ff f85e 	bl	800c44a <__retarget_lock_acquire_recursive>
 800d38e:	89ab      	ldrh	r3, [r5, #12]
 800d390:	071b      	lsls	r3, r3, #28
 800d392:	d501      	bpl.n	800d398 <_vfiprintf_r+0x3c>
 800d394:	692b      	ldr	r3, [r5, #16]
 800d396:	b9eb      	cbnz	r3, 800d3d4 <_vfiprintf_r+0x78>
 800d398:	4629      	mov	r1, r5
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7fd fc14 	bl	800abc8 <__swsetup_r>
 800d3a0:	b1c0      	cbz	r0, 800d3d4 <_vfiprintf_r+0x78>
 800d3a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3a4:	07dc      	lsls	r4, r3, #31
 800d3a6:	d50e      	bpl.n	800d3c6 <_vfiprintf_r+0x6a>
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ac:	b01d      	add	sp, #116	; 0x74
 800d3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b2:	4b7b      	ldr	r3, [pc, #492]	; (800d5a0 <_vfiprintf_r+0x244>)
 800d3b4:	429d      	cmp	r5, r3
 800d3b6:	d101      	bne.n	800d3bc <_vfiprintf_r+0x60>
 800d3b8:	68b5      	ldr	r5, [r6, #8]
 800d3ba:	e7df      	b.n	800d37c <_vfiprintf_r+0x20>
 800d3bc:	4b79      	ldr	r3, [pc, #484]	; (800d5a4 <_vfiprintf_r+0x248>)
 800d3be:	429d      	cmp	r5, r3
 800d3c0:	bf08      	it	eq
 800d3c2:	68f5      	ldreq	r5, [r6, #12]
 800d3c4:	e7da      	b.n	800d37c <_vfiprintf_r+0x20>
 800d3c6:	89ab      	ldrh	r3, [r5, #12]
 800d3c8:	0598      	lsls	r0, r3, #22
 800d3ca:	d4ed      	bmi.n	800d3a8 <_vfiprintf_r+0x4c>
 800d3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3ce:	f7ff f83d 	bl	800c44c <__retarget_lock_release_recursive>
 800d3d2:	e7e9      	b.n	800d3a8 <_vfiprintf_r+0x4c>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d8:	2320      	movs	r3, #32
 800d3da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3de:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3e2:	2330      	movs	r3, #48	; 0x30
 800d3e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d5a8 <_vfiprintf_r+0x24c>
 800d3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3ec:	f04f 0901 	mov.w	r9, #1
 800d3f0:	4623      	mov	r3, r4
 800d3f2:	469a      	mov	sl, r3
 800d3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3f8:	b10a      	cbz	r2, 800d3fe <_vfiprintf_r+0xa2>
 800d3fa:	2a25      	cmp	r2, #37	; 0x25
 800d3fc:	d1f9      	bne.n	800d3f2 <_vfiprintf_r+0x96>
 800d3fe:	ebba 0b04 	subs.w	fp, sl, r4
 800d402:	d00b      	beq.n	800d41c <_vfiprintf_r+0xc0>
 800d404:	465b      	mov	r3, fp
 800d406:	4622      	mov	r2, r4
 800d408:	4629      	mov	r1, r5
 800d40a:	4630      	mov	r0, r6
 800d40c:	f7ff ff93 	bl	800d336 <__sfputs_r>
 800d410:	3001      	adds	r0, #1
 800d412:	f000 80aa 	beq.w	800d56a <_vfiprintf_r+0x20e>
 800d416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d418:	445a      	add	r2, fp
 800d41a:	9209      	str	r2, [sp, #36]	; 0x24
 800d41c:	f89a 3000 	ldrb.w	r3, [sl]
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 80a2 	beq.w	800d56a <_vfiprintf_r+0x20e>
 800d426:	2300      	movs	r3, #0
 800d428:	f04f 32ff 	mov.w	r2, #4294967295
 800d42c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d430:	f10a 0a01 	add.w	sl, sl, #1
 800d434:	9304      	str	r3, [sp, #16]
 800d436:	9307      	str	r3, [sp, #28]
 800d438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d43c:	931a      	str	r3, [sp, #104]	; 0x68
 800d43e:	4654      	mov	r4, sl
 800d440:	2205      	movs	r2, #5
 800d442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d446:	4858      	ldr	r0, [pc, #352]	; (800d5a8 <_vfiprintf_r+0x24c>)
 800d448:	f7f2 ff02 	bl	8000250 <memchr>
 800d44c:	9a04      	ldr	r2, [sp, #16]
 800d44e:	b9d8      	cbnz	r0, 800d488 <_vfiprintf_r+0x12c>
 800d450:	06d1      	lsls	r1, r2, #27
 800d452:	bf44      	itt	mi
 800d454:	2320      	movmi	r3, #32
 800d456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d45a:	0713      	lsls	r3, r2, #28
 800d45c:	bf44      	itt	mi
 800d45e:	232b      	movmi	r3, #43	; 0x2b
 800d460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d464:	f89a 3000 	ldrb.w	r3, [sl]
 800d468:	2b2a      	cmp	r3, #42	; 0x2a
 800d46a:	d015      	beq.n	800d498 <_vfiprintf_r+0x13c>
 800d46c:	9a07      	ldr	r2, [sp, #28]
 800d46e:	4654      	mov	r4, sl
 800d470:	2000      	movs	r0, #0
 800d472:	f04f 0c0a 	mov.w	ip, #10
 800d476:	4621      	mov	r1, r4
 800d478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d47c:	3b30      	subs	r3, #48	; 0x30
 800d47e:	2b09      	cmp	r3, #9
 800d480:	d94e      	bls.n	800d520 <_vfiprintf_r+0x1c4>
 800d482:	b1b0      	cbz	r0, 800d4b2 <_vfiprintf_r+0x156>
 800d484:	9207      	str	r2, [sp, #28]
 800d486:	e014      	b.n	800d4b2 <_vfiprintf_r+0x156>
 800d488:	eba0 0308 	sub.w	r3, r0, r8
 800d48c:	fa09 f303 	lsl.w	r3, r9, r3
 800d490:	4313      	orrs	r3, r2
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	46a2      	mov	sl, r4
 800d496:	e7d2      	b.n	800d43e <_vfiprintf_r+0xe2>
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	1d19      	adds	r1, r3, #4
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	9103      	str	r1, [sp, #12]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	bfbb      	ittet	lt
 800d4a4:	425b      	neglt	r3, r3
 800d4a6:	f042 0202 	orrlt.w	r2, r2, #2
 800d4aa:	9307      	strge	r3, [sp, #28]
 800d4ac:	9307      	strlt	r3, [sp, #28]
 800d4ae:	bfb8      	it	lt
 800d4b0:	9204      	strlt	r2, [sp, #16]
 800d4b2:	7823      	ldrb	r3, [r4, #0]
 800d4b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4b6:	d10c      	bne.n	800d4d2 <_vfiprintf_r+0x176>
 800d4b8:	7863      	ldrb	r3, [r4, #1]
 800d4ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d4bc:	d135      	bne.n	800d52a <_vfiprintf_r+0x1ce>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	1d1a      	adds	r2, r3, #4
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	9203      	str	r2, [sp, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfb8      	it	lt
 800d4ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4ce:	3402      	adds	r4, #2
 800d4d0:	9305      	str	r3, [sp, #20]
 800d4d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d5b8 <_vfiprintf_r+0x25c>
 800d4d6:	7821      	ldrb	r1, [r4, #0]
 800d4d8:	2203      	movs	r2, #3
 800d4da:	4650      	mov	r0, sl
 800d4dc:	f7f2 feb8 	bl	8000250 <memchr>
 800d4e0:	b140      	cbz	r0, 800d4f4 <_vfiprintf_r+0x198>
 800d4e2:	2340      	movs	r3, #64	; 0x40
 800d4e4:	eba0 000a 	sub.w	r0, r0, sl
 800d4e8:	fa03 f000 	lsl.w	r0, r3, r0
 800d4ec:	9b04      	ldr	r3, [sp, #16]
 800d4ee:	4303      	orrs	r3, r0
 800d4f0:	3401      	adds	r4, #1
 800d4f2:	9304      	str	r3, [sp, #16]
 800d4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f8:	482c      	ldr	r0, [pc, #176]	; (800d5ac <_vfiprintf_r+0x250>)
 800d4fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4fe:	2206      	movs	r2, #6
 800d500:	f7f2 fea6 	bl	8000250 <memchr>
 800d504:	2800      	cmp	r0, #0
 800d506:	d03f      	beq.n	800d588 <_vfiprintf_r+0x22c>
 800d508:	4b29      	ldr	r3, [pc, #164]	; (800d5b0 <_vfiprintf_r+0x254>)
 800d50a:	bb1b      	cbnz	r3, 800d554 <_vfiprintf_r+0x1f8>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	3307      	adds	r3, #7
 800d510:	f023 0307 	bic.w	r3, r3, #7
 800d514:	3308      	adds	r3, #8
 800d516:	9303      	str	r3, [sp, #12]
 800d518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d51a:	443b      	add	r3, r7
 800d51c:	9309      	str	r3, [sp, #36]	; 0x24
 800d51e:	e767      	b.n	800d3f0 <_vfiprintf_r+0x94>
 800d520:	fb0c 3202 	mla	r2, ip, r2, r3
 800d524:	460c      	mov	r4, r1
 800d526:	2001      	movs	r0, #1
 800d528:	e7a5      	b.n	800d476 <_vfiprintf_r+0x11a>
 800d52a:	2300      	movs	r3, #0
 800d52c:	3401      	adds	r4, #1
 800d52e:	9305      	str	r3, [sp, #20]
 800d530:	4619      	mov	r1, r3
 800d532:	f04f 0c0a 	mov.w	ip, #10
 800d536:	4620      	mov	r0, r4
 800d538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d53c:	3a30      	subs	r2, #48	; 0x30
 800d53e:	2a09      	cmp	r2, #9
 800d540:	d903      	bls.n	800d54a <_vfiprintf_r+0x1ee>
 800d542:	2b00      	cmp	r3, #0
 800d544:	d0c5      	beq.n	800d4d2 <_vfiprintf_r+0x176>
 800d546:	9105      	str	r1, [sp, #20]
 800d548:	e7c3      	b.n	800d4d2 <_vfiprintf_r+0x176>
 800d54a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d54e:	4604      	mov	r4, r0
 800d550:	2301      	movs	r3, #1
 800d552:	e7f0      	b.n	800d536 <_vfiprintf_r+0x1da>
 800d554:	ab03      	add	r3, sp, #12
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	462a      	mov	r2, r5
 800d55a:	4b16      	ldr	r3, [pc, #88]	; (800d5b4 <_vfiprintf_r+0x258>)
 800d55c:	a904      	add	r1, sp, #16
 800d55e:	4630      	mov	r0, r6
 800d560:	f7fb fcfc 	bl	8008f5c <_printf_float>
 800d564:	4607      	mov	r7, r0
 800d566:	1c78      	adds	r0, r7, #1
 800d568:	d1d6      	bne.n	800d518 <_vfiprintf_r+0x1bc>
 800d56a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d56c:	07d9      	lsls	r1, r3, #31
 800d56e:	d405      	bmi.n	800d57c <_vfiprintf_r+0x220>
 800d570:	89ab      	ldrh	r3, [r5, #12]
 800d572:	059a      	lsls	r2, r3, #22
 800d574:	d402      	bmi.n	800d57c <_vfiprintf_r+0x220>
 800d576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d578:	f7fe ff68 	bl	800c44c <__retarget_lock_release_recursive>
 800d57c:	89ab      	ldrh	r3, [r5, #12]
 800d57e:	065b      	lsls	r3, r3, #25
 800d580:	f53f af12 	bmi.w	800d3a8 <_vfiprintf_r+0x4c>
 800d584:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d586:	e711      	b.n	800d3ac <_vfiprintf_r+0x50>
 800d588:	ab03      	add	r3, sp, #12
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	462a      	mov	r2, r5
 800d58e:	4b09      	ldr	r3, [pc, #36]	; (800d5b4 <_vfiprintf_r+0x258>)
 800d590:	a904      	add	r1, sp, #16
 800d592:	4630      	mov	r0, r6
 800d594:	f7fb ff86 	bl	80094a4 <_printf_i>
 800d598:	e7e4      	b.n	800d564 <_vfiprintf_r+0x208>
 800d59a:	bf00      	nop
 800d59c:	080131ec 	.word	0x080131ec
 800d5a0:	0801320c 	.word	0x0801320c
 800d5a4:	080131cc 	.word	0x080131cc
 800d5a8:	0801340c 	.word	0x0801340c
 800d5ac:	08013416 	.word	0x08013416
 800d5b0:	08008f5d 	.word	0x08008f5d
 800d5b4:	0800d337 	.word	0x0800d337
 800d5b8:	08013412 	.word	0x08013412

0800d5bc <_putc_r>:
 800d5bc:	b570      	push	{r4, r5, r6, lr}
 800d5be:	460d      	mov	r5, r1
 800d5c0:	4614      	mov	r4, r2
 800d5c2:	4606      	mov	r6, r0
 800d5c4:	b118      	cbz	r0, 800d5ce <_putc_r+0x12>
 800d5c6:	6983      	ldr	r3, [r0, #24]
 800d5c8:	b90b      	cbnz	r3, 800d5ce <_putc_r+0x12>
 800d5ca:	f7fe fb1b 	bl	800bc04 <__sinit>
 800d5ce:	4b1c      	ldr	r3, [pc, #112]	; (800d640 <_putc_r+0x84>)
 800d5d0:	429c      	cmp	r4, r3
 800d5d2:	d124      	bne.n	800d61e <_putc_r+0x62>
 800d5d4:	6874      	ldr	r4, [r6, #4]
 800d5d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5d8:	07d8      	lsls	r0, r3, #31
 800d5da:	d405      	bmi.n	800d5e8 <_putc_r+0x2c>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	0599      	lsls	r1, r3, #22
 800d5e0:	d402      	bmi.n	800d5e8 <_putc_r+0x2c>
 800d5e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5e4:	f7fe ff31 	bl	800c44a <__retarget_lock_acquire_recursive>
 800d5e8:	68a3      	ldr	r3, [r4, #8]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	60a3      	str	r3, [r4, #8]
 800d5f0:	da05      	bge.n	800d5fe <_putc_r+0x42>
 800d5f2:	69a2      	ldr	r2, [r4, #24]
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	db1c      	blt.n	800d632 <_putc_r+0x76>
 800d5f8:	b2eb      	uxtb	r3, r5
 800d5fa:	2b0a      	cmp	r3, #10
 800d5fc:	d019      	beq.n	800d632 <_putc_r+0x76>
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	6022      	str	r2, [r4, #0]
 800d604:	701d      	strb	r5, [r3, #0]
 800d606:	b2ed      	uxtb	r5, r5
 800d608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d60a:	07da      	lsls	r2, r3, #31
 800d60c:	d405      	bmi.n	800d61a <_putc_r+0x5e>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	059b      	lsls	r3, r3, #22
 800d612:	d402      	bmi.n	800d61a <_putc_r+0x5e>
 800d614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d616:	f7fe ff19 	bl	800c44c <__retarget_lock_release_recursive>
 800d61a:	4628      	mov	r0, r5
 800d61c:	bd70      	pop	{r4, r5, r6, pc}
 800d61e:	4b09      	ldr	r3, [pc, #36]	; (800d644 <_putc_r+0x88>)
 800d620:	429c      	cmp	r4, r3
 800d622:	d101      	bne.n	800d628 <_putc_r+0x6c>
 800d624:	68b4      	ldr	r4, [r6, #8]
 800d626:	e7d6      	b.n	800d5d6 <_putc_r+0x1a>
 800d628:	4b07      	ldr	r3, [pc, #28]	; (800d648 <_putc_r+0x8c>)
 800d62a:	429c      	cmp	r4, r3
 800d62c:	bf08      	it	eq
 800d62e:	68f4      	ldreq	r4, [r6, #12]
 800d630:	e7d1      	b.n	800d5d6 <_putc_r+0x1a>
 800d632:	4629      	mov	r1, r5
 800d634:	4622      	mov	r2, r4
 800d636:	4630      	mov	r0, r6
 800d638:	f7fd fa74 	bl	800ab24 <__swbuf_r>
 800d63c:	4605      	mov	r5, r0
 800d63e:	e7e3      	b.n	800d608 <_putc_r+0x4c>
 800d640:	080131ec 	.word	0x080131ec
 800d644:	0801320c 	.word	0x0801320c
 800d648:	080131cc 	.word	0x080131cc
 800d64c:	00000000 	.word	0x00000000

0800d650 <nan>:
 800d650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d658 <nan+0x8>
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	00000000 	.word	0x00000000
 800d65c:	7ff80000 	.word	0x7ff80000

0800d660 <_sbrk_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d06      	ldr	r5, [pc, #24]	; (800d67c <_sbrk_r+0x1c>)
 800d664:	2300      	movs	r3, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	f7f7 f944 	bl	80048f8 <_sbrk>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_sbrk_r+0x1a>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_sbrk_r+0x1a>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	200008a0 	.word	0x200008a0

0800d680 <__sread>:
 800d680:	b510      	push	{r4, lr}
 800d682:	460c      	mov	r4, r1
 800d684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d688:	f000 f906 	bl	800d898 <_read_r>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	bfab      	itete	ge
 800d690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d692:	89a3      	ldrhlt	r3, [r4, #12]
 800d694:	181b      	addge	r3, r3, r0
 800d696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d69a:	bfac      	ite	ge
 800d69c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d69e:	81a3      	strhlt	r3, [r4, #12]
 800d6a0:	bd10      	pop	{r4, pc}

0800d6a2 <__swrite>:
 800d6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a6:	461f      	mov	r7, r3
 800d6a8:	898b      	ldrh	r3, [r1, #12]
 800d6aa:	05db      	lsls	r3, r3, #23
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	460c      	mov	r4, r1
 800d6b0:	4616      	mov	r6, r2
 800d6b2:	d505      	bpl.n	800d6c0 <__swrite+0x1e>
 800d6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f000 f88e 	bl	800d7dc <_lseek_r>
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d6ca:	81a3      	strh	r3, [r4, #12]
 800d6cc:	4632      	mov	r2, r6
 800d6ce:	463b      	mov	r3, r7
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d6:	f000 b835 	b.w	800d744 <_write_r>

0800d6da <__sseek>:
 800d6da:	b510      	push	{r4, lr}
 800d6dc:	460c      	mov	r4, r1
 800d6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6e2:	f000 f87b 	bl	800d7dc <_lseek_r>
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	bf15      	itete	ne
 800d6ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6f6:	81a3      	strheq	r3, [r4, #12]
 800d6f8:	bf18      	it	ne
 800d6fa:	81a3      	strhne	r3, [r4, #12]
 800d6fc:	bd10      	pop	{r4, pc}

0800d6fe <__sclose>:
 800d6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d702:	f000 b839 	b.w	800d778 <_close_r>

0800d706 <strncmp>:
 800d706:	b510      	push	{r4, lr}
 800d708:	b16a      	cbz	r2, 800d726 <strncmp+0x20>
 800d70a:	3901      	subs	r1, #1
 800d70c:	1884      	adds	r4, r0, r2
 800d70e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d712:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d716:	4293      	cmp	r3, r2
 800d718:	d103      	bne.n	800d722 <strncmp+0x1c>
 800d71a:	42a0      	cmp	r0, r4
 800d71c:	d001      	beq.n	800d722 <strncmp+0x1c>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1f5      	bne.n	800d70e <strncmp+0x8>
 800d722:	1a98      	subs	r0, r3, r2
 800d724:	bd10      	pop	{r4, pc}
 800d726:	4610      	mov	r0, r2
 800d728:	e7fc      	b.n	800d724 <strncmp+0x1e>

0800d72a <__ascii_wctomb>:
 800d72a:	b149      	cbz	r1, 800d740 <__ascii_wctomb+0x16>
 800d72c:	2aff      	cmp	r2, #255	; 0xff
 800d72e:	bf85      	ittet	hi
 800d730:	238a      	movhi	r3, #138	; 0x8a
 800d732:	6003      	strhi	r3, [r0, #0]
 800d734:	700a      	strbls	r2, [r1, #0]
 800d736:	f04f 30ff 	movhi.w	r0, #4294967295
 800d73a:	bf98      	it	ls
 800d73c:	2001      	movls	r0, #1
 800d73e:	4770      	bx	lr
 800d740:	4608      	mov	r0, r1
 800d742:	4770      	bx	lr

0800d744 <_write_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4d07      	ldr	r5, [pc, #28]	; (800d764 <_write_r+0x20>)
 800d748:	4604      	mov	r4, r0
 800d74a:	4608      	mov	r0, r1
 800d74c:	4611      	mov	r1, r2
 800d74e:	2200      	movs	r2, #0
 800d750:	602a      	str	r2, [r5, #0]
 800d752:	461a      	mov	r2, r3
 800d754:	f7f6 feb2 	bl	80044bc <_write>
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d102      	bne.n	800d762 <_write_r+0x1e>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	b103      	cbz	r3, 800d762 <_write_r+0x1e>
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	200008a0 	.word	0x200008a0

0800d768 <abort>:
 800d768:	b508      	push	{r3, lr}
 800d76a:	2006      	movs	r0, #6
 800d76c:	f000 f8ce 	bl	800d90c <raise>
 800d770:	2001      	movs	r0, #1
 800d772:	f7f7 f865 	bl	8004840 <_exit>
	...

0800d778 <_close_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	4d06      	ldr	r5, [pc, #24]	; (800d794 <_close_r+0x1c>)
 800d77c:	2300      	movs	r3, #0
 800d77e:	4604      	mov	r4, r0
 800d780:	4608      	mov	r0, r1
 800d782:	602b      	str	r3, [r5, #0]
 800d784:	f7f7 f883 	bl	800488e <_close>
 800d788:	1c43      	adds	r3, r0, #1
 800d78a:	d102      	bne.n	800d792 <_close_r+0x1a>
 800d78c:	682b      	ldr	r3, [r5, #0]
 800d78e:	b103      	cbz	r3, 800d792 <_close_r+0x1a>
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	bd38      	pop	{r3, r4, r5, pc}
 800d794:	200008a0 	.word	0x200008a0

0800d798 <_fstat_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	4d07      	ldr	r5, [pc, #28]	; (800d7b8 <_fstat_r+0x20>)
 800d79c:	2300      	movs	r3, #0
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	602b      	str	r3, [r5, #0]
 800d7a6:	f7f7 f87e 	bl	80048a6 <_fstat>
 800d7aa:	1c43      	adds	r3, r0, #1
 800d7ac:	d102      	bne.n	800d7b4 <_fstat_r+0x1c>
 800d7ae:	682b      	ldr	r3, [r5, #0]
 800d7b0:	b103      	cbz	r3, 800d7b4 <_fstat_r+0x1c>
 800d7b2:	6023      	str	r3, [r4, #0]
 800d7b4:	bd38      	pop	{r3, r4, r5, pc}
 800d7b6:	bf00      	nop
 800d7b8:	200008a0 	.word	0x200008a0

0800d7bc <_isatty_r>:
 800d7bc:	b538      	push	{r3, r4, r5, lr}
 800d7be:	4d06      	ldr	r5, [pc, #24]	; (800d7d8 <_isatty_r+0x1c>)
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	4608      	mov	r0, r1
 800d7c6:	602b      	str	r3, [r5, #0]
 800d7c8:	f7f7 f87d 	bl	80048c6 <_isatty>
 800d7cc:	1c43      	adds	r3, r0, #1
 800d7ce:	d102      	bne.n	800d7d6 <_isatty_r+0x1a>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	b103      	cbz	r3, 800d7d6 <_isatty_r+0x1a>
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	bd38      	pop	{r3, r4, r5, pc}
 800d7d8:	200008a0 	.word	0x200008a0

0800d7dc <_lseek_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	; (800d7fc <_lseek_r+0x20>)
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	4608      	mov	r0, r1
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	602a      	str	r2, [r5, #0]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f7f7 f876 	bl	80048dc <_lseek>
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	d102      	bne.n	800d7fa <_lseek_r+0x1e>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	b103      	cbz	r3, 800d7fa <_lseek_r+0x1e>
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	200008a0 	.word	0x200008a0

0800d800 <memmove>:
 800d800:	4288      	cmp	r0, r1
 800d802:	b510      	push	{r4, lr}
 800d804:	eb01 0402 	add.w	r4, r1, r2
 800d808:	d902      	bls.n	800d810 <memmove+0x10>
 800d80a:	4284      	cmp	r4, r0
 800d80c:	4623      	mov	r3, r4
 800d80e:	d807      	bhi.n	800d820 <memmove+0x20>
 800d810:	1e43      	subs	r3, r0, #1
 800d812:	42a1      	cmp	r1, r4
 800d814:	d008      	beq.n	800d828 <memmove+0x28>
 800d816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d81e:	e7f8      	b.n	800d812 <memmove+0x12>
 800d820:	4402      	add	r2, r0
 800d822:	4601      	mov	r1, r0
 800d824:	428a      	cmp	r2, r1
 800d826:	d100      	bne.n	800d82a <memmove+0x2a>
 800d828:	bd10      	pop	{r4, pc}
 800d82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d832:	e7f7      	b.n	800d824 <memmove+0x24>

0800d834 <__malloc_lock>:
 800d834:	4801      	ldr	r0, [pc, #4]	; (800d83c <__malloc_lock+0x8>)
 800d836:	f7fe be08 	b.w	800c44a <__retarget_lock_acquire_recursive>
 800d83a:	bf00      	nop
 800d83c:	20000898 	.word	0x20000898

0800d840 <__malloc_unlock>:
 800d840:	4801      	ldr	r0, [pc, #4]	; (800d848 <__malloc_unlock+0x8>)
 800d842:	f7fe be03 	b.w	800c44c <__retarget_lock_release_recursive>
 800d846:	bf00      	nop
 800d848:	20000898 	.word	0x20000898

0800d84c <_realloc_r>:
 800d84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84e:	4607      	mov	r7, r0
 800d850:	4614      	mov	r4, r2
 800d852:	460e      	mov	r6, r1
 800d854:	b921      	cbnz	r1, 800d860 <_realloc_r+0x14>
 800d856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d85a:	4611      	mov	r1, r2
 800d85c:	f7ff bb9e 	b.w	800cf9c <_malloc_r>
 800d860:	b922      	cbnz	r2, 800d86c <_realloc_r+0x20>
 800d862:	f7ff fb4b 	bl	800cefc <_free_r>
 800d866:	4625      	mov	r5, r4
 800d868:	4628      	mov	r0, r5
 800d86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d86c:	f000 f86a 	bl	800d944 <_malloc_usable_size_r>
 800d870:	42a0      	cmp	r0, r4
 800d872:	d20f      	bcs.n	800d894 <_realloc_r+0x48>
 800d874:	4621      	mov	r1, r4
 800d876:	4638      	mov	r0, r7
 800d878:	f7ff fb90 	bl	800cf9c <_malloc_r>
 800d87c:	4605      	mov	r5, r0
 800d87e:	2800      	cmp	r0, #0
 800d880:	d0f2      	beq.n	800d868 <_realloc_r+0x1c>
 800d882:	4631      	mov	r1, r6
 800d884:	4622      	mov	r2, r4
 800d886:	f7fe fe61 	bl	800c54c <memcpy>
 800d88a:	4631      	mov	r1, r6
 800d88c:	4638      	mov	r0, r7
 800d88e:	f7ff fb35 	bl	800cefc <_free_r>
 800d892:	e7e9      	b.n	800d868 <_realloc_r+0x1c>
 800d894:	4635      	mov	r5, r6
 800d896:	e7e7      	b.n	800d868 <_realloc_r+0x1c>

0800d898 <_read_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4d07      	ldr	r5, [pc, #28]	; (800d8b8 <_read_r+0x20>)
 800d89c:	4604      	mov	r4, r0
 800d89e:	4608      	mov	r0, r1
 800d8a0:	4611      	mov	r1, r2
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	602a      	str	r2, [r5, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f7f6 ffd4 	bl	8004854 <_read>
 800d8ac:	1c43      	adds	r3, r0, #1
 800d8ae:	d102      	bne.n	800d8b6 <_read_r+0x1e>
 800d8b0:	682b      	ldr	r3, [r5, #0]
 800d8b2:	b103      	cbz	r3, 800d8b6 <_read_r+0x1e>
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	bd38      	pop	{r3, r4, r5, pc}
 800d8b8:	200008a0 	.word	0x200008a0

0800d8bc <_raise_r>:
 800d8bc:	291f      	cmp	r1, #31
 800d8be:	b538      	push	{r3, r4, r5, lr}
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	d904      	bls.n	800d8d0 <_raise_r+0x14>
 800d8c6:	2316      	movs	r3, #22
 800d8c8:	6003      	str	r3, [r0, #0]
 800d8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ce:	bd38      	pop	{r3, r4, r5, pc}
 800d8d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d8d2:	b112      	cbz	r2, 800d8da <_raise_r+0x1e>
 800d8d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8d8:	b94b      	cbnz	r3, 800d8ee <_raise_r+0x32>
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 f830 	bl	800d940 <_getpid_r>
 800d8e0:	462a      	mov	r2, r5
 800d8e2:	4601      	mov	r1, r0
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8ea:	f000 b817 	b.w	800d91c <_kill_r>
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d00a      	beq.n	800d908 <_raise_r+0x4c>
 800d8f2:	1c59      	adds	r1, r3, #1
 800d8f4:	d103      	bne.n	800d8fe <_raise_r+0x42>
 800d8f6:	2316      	movs	r3, #22
 800d8f8:	6003      	str	r3, [r0, #0]
 800d8fa:	2001      	movs	r0, #1
 800d8fc:	e7e7      	b.n	800d8ce <_raise_r+0x12>
 800d8fe:	2400      	movs	r4, #0
 800d900:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d904:	4628      	mov	r0, r5
 800d906:	4798      	blx	r3
 800d908:	2000      	movs	r0, #0
 800d90a:	e7e0      	b.n	800d8ce <_raise_r+0x12>

0800d90c <raise>:
 800d90c:	4b02      	ldr	r3, [pc, #8]	; (800d918 <raise+0xc>)
 800d90e:	4601      	mov	r1, r0
 800d910:	6818      	ldr	r0, [r3, #0]
 800d912:	f7ff bfd3 	b.w	800d8bc <_raise_r>
 800d916:	bf00      	nop
 800d918:	2000000c 	.word	0x2000000c

0800d91c <_kill_r>:
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4d07      	ldr	r5, [pc, #28]	; (800d93c <_kill_r+0x20>)
 800d920:	2300      	movs	r3, #0
 800d922:	4604      	mov	r4, r0
 800d924:	4608      	mov	r0, r1
 800d926:	4611      	mov	r1, r2
 800d928:	602b      	str	r3, [r5, #0]
 800d92a:	f7f6 ff79 	bl	8004820 <_kill>
 800d92e:	1c43      	adds	r3, r0, #1
 800d930:	d102      	bne.n	800d938 <_kill_r+0x1c>
 800d932:	682b      	ldr	r3, [r5, #0]
 800d934:	b103      	cbz	r3, 800d938 <_kill_r+0x1c>
 800d936:	6023      	str	r3, [r4, #0]
 800d938:	bd38      	pop	{r3, r4, r5, pc}
 800d93a:	bf00      	nop
 800d93c:	200008a0 	.word	0x200008a0

0800d940 <_getpid_r>:
 800d940:	f7f6 bf66 	b.w	8004810 <_getpid>

0800d944 <_malloc_usable_size_r>:
 800d944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d948:	1f18      	subs	r0, r3, #4
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	bfbc      	itt	lt
 800d94e:	580b      	ldrlt	r3, [r1, r0]
 800d950:	18c0      	addlt	r0, r0, r3
 800d952:	4770      	bx	lr
 800d954:	0000      	movs	r0, r0
	...

0800d958 <cos>:
 800d958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d95a:	ec53 2b10 	vmov	r2, r3, d0
 800d95e:	4824      	ldr	r0, [pc, #144]	; (800d9f0 <cos+0x98>)
 800d960:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d964:	4281      	cmp	r1, r0
 800d966:	dc06      	bgt.n	800d976 <cos+0x1e>
 800d968:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d9e8 <cos+0x90>
 800d96c:	f001 fc7c 	bl	800f268 <__kernel_cos>
 800d970:	ec51 0b10 	vmov	r0, r1, d0
 800d974:	e007      	b.n	800d986 <cos+0x2e>
 800d976:	481f      	ldr	r0, [pc, #124]	; (800d9f4 <cos+0x9c>)
 800d978:	4281      	cmp	r1, r0
 800d97a:	dd09      	ble.n	800d990 <cos+0x38>
 800d97c:	ee10 0a10 	vmov	r0, s0
 800d980:	4619      	mov	r1, r3
 800d982:	f7f2 fcb9 	bl	80002f8 <__aeabi_dsub>
 800d986:	ec41 0b10 	vmov	d0, r0, r1
 800d98a:	b005      	add	sp, #20
 800d98c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d990:	4668      	mov	r0, sp
 800d992:	f001 f86d 	bl	800ea70 <__ieee754_rem_pio2>
 800d996:	f000 0003 	and.w	r0, r0, #3
 800d99a:	2801      	cmp	r0, #1
 800d99c:	d007      	beq.n	800d9ae <cos+0x56>
 800d99e:	2802      	cmp	r0, #2
 800d9a0:	d012      	beq.n	800d9c8 <cos+0x70>
 800d9a2:	b9c0      	cbnz	r0, 800d9d6 <cos+0x7e>
 800d9a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9a8:	ed9d 0b00 	vldr	d0, [sp]
 800d9ac:	e7de      	b.n	800d96c <cos+0x14>
 800d9ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9b2:	ed9d 0b00 	vldr	d0, [sp]
 800d9b6:	f002 f85f 	bl	800fa78 <__kernel_sin>
 800d9ba:	ec53 2b10 	vmov	r2, r3, d0
 800d9be:	ee10 0a10 	vmov	r0, s0
 800d9c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d9c6:	e7de      	b.n	800d986 <cos+0x2e>
 800d9c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9cc:	ed9d 0b00 	vldr	d0, [sp]
 800d9d0:	f001 fc4a 	bl	800f268 <__kernel_cos>
 800d9d4:	e7f1      	b.n	800d9ba <cos+0x62>
 800d9d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d9da:	ed9d 0b00 	vldr	d0, [sp]
 800d9de:	2001      	movs	r0, #1
 800d9e0:	f002 f84a 	bl	800fa78 <__kernel_sin>
 800d9e4:	e7c4      	b.n	800d970 <cos+0x18>
 800d9e6:	bf00      	nop
	...
 800d9f0:	3fe921fb 	.word	0x3fe921fb
 800d9f4:	7fefffff 	.word	0x7fefffff

0800d9f8 <sin>:
 800d9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9fa:	ec53 2b10 	vmov	r2, r3, d0
 800d9fe:	4826      	ldr	r0, [pc, #152]	; (800da98 <sin+0xa0>)
 800da00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da04:	4281      	cmp	r1, r0
 800da06:	dc07      	bgt.n	800da18 <sin+0x20>
 800da08:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800da90 <sin+0x98>
 800da0c:	2000      	movs	r0, #0
 800da0e:	f002 f833 	bl	800fa78 <__kernel_sin>
 800da12:	ec51 0b10 	vmov	r0, r1, d0
 800da16:	e007      	b.n	800da28 <sin+0x30>
 800da18:	4820      	ldr	r0, [pc, #128]	; (800da9c <sin+0xa4>)
 800da1a:	4281      	cmp	r1, r0
 800da1c:	dd09      	ble.n	800da32 <sin+0x3a>
 800da1e:	ee10 0a10 	vmov	r0, s0
 800da22:	4619      	mov	r1, r3
 800da24:	f7f2 fc68 	bl	80002f8 <__aeabi_dsub>
 800da28:	ec41 0b10 	vmov	d0, r0, r1
 800da2c:	b005      	add	sp, #20
 800da2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800da32:	4668      	mov	r0, sp
 800da34:	f001 f81c 	bl	800ea70 <__ieee754_rem_pio2>
 800da38:	f000 0003 	and.w	r0, r0, #3
 800da3c:	2801      	cmp	r0, #1
 800da3e:	d008      	beq.n	800da52 <sin+0x5a>
 800da40:	2802      	cmp	r0, #2
 800da42:	d00d      	beq.n	800da60 <sin+0x68>
 800da44:	b9d0      	cbnz	r0, 800da7c <sin+0x84>
 800da46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da4a:	ed9d 0b00 	vldr	d0, [sp]
 800da4e:	2001      	movs	r0, #1
 800da50:	e7dd      	b.n	800da0e <sin+0x16>
 800da52:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da56:	ed9d 0b00 	vldr	d0, [sp]
 800da5a:	f001 fc05 	bl	800f268 <__kernel_cos>
 800da5e:	e7d8      	b.n	800da12 <sin+0x1a>
 800da60:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da64:	ed9d 0b00 	vldr	d0, [sp]
 800da68:	2001      	movs	r0, #1
 800da6a:	f002 f805 	bl	800fa78 <__kernel_sin>
 800da6e:	ec53 2b10 	vmov	r2, r3, d0
 800da72:	ee10 0a10 	vmov	r0, s0
 800da76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da7a:	e7d5      	b.n	800da28 <sin+0x30>
 800da7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da80:	ed9d 0b00 	vldr	d0, [sp]
 800da84:	f001 fbf0 	bl	800f268 <__kernel_cos>
 800da88:	e7f1      	b.n	800da6e <sin+0x76>
 800da8a:	bf00      	nop
 800da8c:	f3af 8000 	nop.w
	...
 800da98:	3fe921fb 	.word	0x3fe921fb
 800da9c:	7fefffff 	.word	0x7fefffff

0800daa0 <cosf>:
 800daa0:	ee10 3a10 	vmov	r3, s0
 800daa4:	b507      	push	{r0, r1, r2, lr}
 800daa6:	4a1c      	ldr	r2, [pc, #112]	; (800db18 <cosf+0x78>)
 800daa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800daac:	4293      	cmp	r3, r2
 800daae:	dc04      	bgt.n	800daba <cosf+0x1a>
 800dab0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800db1c <cosf+0x7c>
 800dab4:	f002 f89e 	bl	800fbf4 <__kernel_cosf>
 800dab8:	e004      	b.n	800dac4 <cosf+0x24>
 800daba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dabe:	db04      	blt.n	800daca <cosf+0x2a>
 800dac0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dac4:	b003      	add	sp, #12
 800dac6:	f85d fb04 	ldr.w	pc, [sp], #4
 800daca:	4668      	mov	r0, sp
 800dacc:	f001 fa8e 	bl	800efec <__ieee754_rem_pio2f>
 800dad0:	f000 0003 	and.w	r0, r0, #3
 800dad4:	2801      	cmp	r0, #1
 800dad6:	d007      	beq.n	800dae8 <cosf+0x48>
 800dad8:	2802      	cmp	r0, #2
 800dada:	d00e      	beq.n	800dafa <cosf+0x5a>
 800dadc:	b9a0      	cbnz	r0, 800db08 <cosf+0x68>
 800dade:	eddd 0a01 	vldr	s1, [sp, #4]
 800dae2:	ed9d 0a00 	vldr	s0, [sp]
 800dae6:	e7e5      	b.n	800dab4 <cosf+0x14>
 800dae8:	eddd 0a01 	vldr	s1, [sp, #4]
 800daec:	ed9d 0a00 	vldr	s0, [sp]
 800daf0:	f002 fb6a 	bl	80101c8 <__kernel_sinf>
 800daf4:	eeb1 0a40 	vneg.f32	s0, s0
 800daf8:	e7e4      	b.n	800dac4 <cosf+0x24>
 800dafa:	eddd 0a01 	vldr	s1, [sp, #4]
 800dafe:	ed9d 0a00 	vldr	s0, [sp]
 800db02:	f002 f877 	bl	800fbf4 <__kernel_cosf>
 800db06:	e7f5      	b.n	800daf4 <cosf+0x54>
 800db08:	eddd 0a01 	vldr	s1, [sp, #4]
 800db0c:	ed9d 0a00 	vldr	s0, [sp]
 800db10:	2001      	movs	r0, #1
 800db12:	f002 fb59 	bl	80101c8 <__kernel_sinf>
 800db16:	e7d5      	b.n	800dac4 <cosf+0x24>
 800db18:	3f490fd8 	.word	0x3f490fd8
 800db1c:	00000000 	.word	0x00000000

0800db20 <sinf>:
 800db20:	ee10 3a10 	vmov	r3, s0
 800db24:	b507      	push	{r0, r1, r2, lr}
 800db26:	4a1d      	ldr	r2, [pc, #116]	; (800db9c <sinf+0x7c>)
 800db28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db2c:	4293      	cmp	r3, r2
 800db2e:	dc05      	bgt.n	800db3c <sinf+0x1c>
 800db30:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800dba0 <sinf+0x80>
 800db34:	2000      	movs	r0, #0
 800db36:	f002 fb47 	bl	80101c8 <__kernel_sinf>
 800db3a:	e004      	b.n	800db46 <sinf+0x26>
 800db3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800db40:	db04      	blt.n	800db4c <sinf+0x2c>
 800db42:	ee30 0a40 	vsub.f32	s0, s0, s0
 800db46:	b003      	add	sp, #12
 800db48:	f85d fb04 	ldr.w	pc, [sp], #4
 800db4c:	4668      	mov	r0, sp
 800db4e:	f001 fa4d 	bl	800efec <__ieee754_rem_pio2f>
 800db52:	f000 0003 	and.w	r0, r0, #3
 800db56:	2801      	cmp	r0, #1
 800db58:	d008      	beq.n	800db6c <sinf+0x4c>
 800db5a:	2802      	cmp	r0, #2
 800db5c:	d00d      	beq.n	800db7a <sinf+0x5a>
 800db5e:	b9b0      	cbnz	r0, 800db8e <sinf+0x6e>
 800db60:	eddd 0a01 	vldr	s1, [sp, #4]
 800db64:	ed9d 0a00 	vldr	s0, [sp]
 800db68:	2001      	movs	r0, #1
 800db6a:	e7e4      	b.n	800db36 <sinf+0x16>
 800db6c:	eddd 0a01 	vldr	s1, [sp, #4]
 800db70:	ed9d 0a00 	vldr	s0, [sp]
 800db74:	f002 f83e 	bl	800fbf4 <__kernel_cosf>
 800db78:	e7e5      	b.n	800db46 <sinf+0x26>
 800db7a:	eddd 0a01 	vldr	s1, [sp, #4]
 800db7e:	ed9d 0a00 	vldr	s0, [sp]
 800db82:	2001      	movs	r0, #1
 800db84:	f002 fb20 	bl	80101c8 <__kernel_sinf>
 800db88:	eeb1 0a40 	vneg.f32	s0, s0
 800db8c:	e7db      	b.n	800db46 <sinf+0x26>
 800db8e:	eddd 0a01 	vldr	s1, [sp, #4]
 800db92:	ed9d 0a00 	vldr	s0, [sp]
 800db96:	f002 f82d 	bl	800fbf4 <__kernel_cosf>
 800db9a:	e7f5      	b.n	800db88 <sinf+0x68>
 800db9c:	3f490fd8 	.word	0x3f490fd8
	...

0800dba8 <hypot>:
 800dba8:	b508      	push	{r3, lr}
 800dbaa:	ed2d 8b06 	vpush	{d8-d10}
 800dbae:	eeb0 aa40 	vmov.f32	s20, s0
 800dbb2:	eef0 aa60 	vmov.f32	s21, s1
 800dbb6:	eeb0 9a41 	vmov.f32	s18, s2
 800dbba:	eef0 9a61 	vmov.f32	s19, s3
 800dbbe:	f000 f90f 	bl	800dde0 <__ieee754_hypot>
 800dbc2:	4b15      	ldr	r3, [pc, #84]	; (800dc18 <hypot+0x70>)
 800dbc4:	eeb0 8a40 	vmov.f32	s16, s0
 800dbc8:	eef0 8a60 	vmov.f32	s17, s1
 800dbcc:	f993 3000 	ldrsb.w	r3, [r3]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	d016      	beq.n	800dc02 <hypot+0x5a>
 800dbd4:	f002 fb49 	bl	801026a <finite>
 800dbd8:	b998      	cbnz	r0, 800dc02 <hypot+0x5a>
 800dbda:	eeb0 0a4a 	vmov.f32	s0, s20
 800dbde:	eef0 0a6a 	vmov.f32	s1, s21
 800dbe2:	f002 fb42 	bl	801026a <finite>
 800dbe6:	b160      	cbz	r0, 800dc02 <hypot+0x5a>
 800dbe8:	eeb0 0a49 	vmov.f32	s0, s18
 800dbec:	eef0 0a69 	vmov.f32	s1, s19
 800dbf0:	f002 fb3b 	bl	801026a <finite>
 800dbf4:	b128      	cbz	r0, 800dc02 <hypot+0x5a>
 800dbf6:	f7fb f8df 	bl	8008db8 <__errno>
 800dbfa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800dc10 <hypot+0x68>
 800dbfe:	2322      	movs	r3, #34	; 0x22
 800dc00:	6003      	str	r3, [r0, #0]
 800dc02:	eeb0 0a48 	vmov.f32	s0, s16
 800dc06:	eef0 0a68 	vmov.f32	s1, s17
 800dc0a:	ecbd 8b06 	vpop	{d8-d10}
 800dc0e:	bd08      	pop	{r3, pc}
 800dc10:	00000000 	.word	0x00000000
 800dc14:	7ff00000 	.word	0x7ff00000
 800dc18:	200001e0 	.word	0x200001e0

0800dc1c <pow>:
 800dc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc20:	ec59 8b10 	vmov	r8, r9, d0
 800dc24:	ec57 6b11 	vmov	r6, r7, d1
 800dc28:	f000 f9fe 	bl	800e028 <__ieee754_pow>
 800dc2c:	4b4e      	ldr	r3, [pc, #312]	; (800dd68 <pow+0x14c>)
 800dc2e:	f993 3000 	ldrsb.w	r3, [r3]
 800dc32:	3301      	adds	r3, #1
 800dc34:	ec55 4b10 	vmov	r4, r5, d0
 800dc38:	d015      	beq.n	800dc66 <pow+0x4a>
 800dc3a:	4632      	mov	r2, r6
 800dc3c:	463b      	mov	r3, r7
 800dc3e:	4630      	mov	r0, r6
 800dc40:	4639      	mov	r1, r7
 800dc42:	f7f2 ffab 	bl	8000b9c <__aeabi_dcmpun>
 800dc46:	b970      	cbnz	r0, 800dc66 <pow+0x4a>
 800dc48:	4642      	mov	r2, r8
 800dc4a:	464b      	mov	r3, r9
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	4649      	mov	r1, r9
 800dc50:	f7f2 ffa4 	bl	8000b9c <__aeabi_dcmpun>
 800dc54:	2200      	movs	r2, #0
 800dc56:	2300      	movs	r3, #0
 800dc58:	b148      	cbz	r0, 800dc6e <pow+0x52>
 800dc5a:	4630      	mov	r0, r6
 800dc5c:	4639      	mov	r1, r7
 800dc5e:	f7f2 ff6b 	bl	8000b38 <__aeabi_dcmpeq>
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d17d      	bne.n	800dd62 <pow+0x146>
 800dc66:	ec45 4b10 	vmov	d0, r4, r5
 800dc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4649      	mov	r1, r9
 800dc72:	f7f2 ff61 	bl	8000b38 <__aeabi_dcmpeq>
 800dc76:	b1e0      	cbz	r0, 800dcb2 <pow+0x96>
 800dc78:	2200      	movs	r2, #0
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	4639      	mov	r1, r7
 800dc80:	f7f2 ff5a 	bl	8000b38 <__aeabi_dcmpeq>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d16c      	bne.n	800dd62 <pow+0x146>
 800dc88:	ec47 6b10 	vmov	d0, r6, r7
 800dc8c:	f002 faed 	bl	801026a <finite>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d0e8      	beq.n	800dc66 <pow+0x4a>
 800dc94:	2200      	movs	r2, #0
 800dc96:	2300      	movs	r3, #0
 800dc98:	4630      	mov	r0, r6
 800dc9a:	4639      	mov	r1, r7
 800dc9c:	f7f2 ff56 	bl	8000b4c <__aeabi_dcmplt>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d0e0      	beq.n	800dc66 <pow+0x4a>
 800dca4:	f7fb f888 	bl	8008db8 <__errno>
 800dca8:	2321      	movs	r3, #33	; 0x21
 800dcaa:	6003      	str	r3, [r0, #0]
 800dcac:	2400      	movs	r4, #0
 800dcae:	4d2f      	ldr	r5, [pc, #188]	; (800dd6c <pow+0x150>)
 800dcb0:	e7d9      	b.n	800dc66 <pow+0x4a>
 800dcb2:	ec45 4b10 	vmov	d0, r4, r5
 800dcb6:	f002 fad8 	bl	801026a <finite>
 800dcba:	bbb8      	cbnz	r0, 800dd2c <pow+0x110>
 800dcbc:	ec49 8b10 	vmov	d0, r8, r9
 800dcc0:	f002 fad3 	bl	801026a <finite>
 800dcc4:	b390      	cbz	r0, 800dd2c <pow+0x110>
 800dcc6:	ec47 6b10 	vmov	d0, r6, r7
 800dcca:	f002 face 	bl	801026a <finite>
 800dcce:	b368      	cbz	r0, 800dd2c <pow+0x110>
 800dcd0:	4622      	mov	r2, r4
 800dcd2:	462b      	mov	r3, r5
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	f7f2 ff60 	bl	8000b9c <__aeabi_dcmpun>
 800dcdc:	b160      	cbz	r0, 800dcf8 <pow+0xdc>
 800dcde:	f7fb f86b 	bl	8008db8 <__errno>
 800dce2:	2321      	movs	r3, #33	; 0x21
 800dce4:	6003      	str	r3, [r0, #0]
 800dce6:	2200      	movs	r2, #0
 800dce8:	2300      	movs	r3, #0
 800dcea:	4610      	mov	r0, r2
 800dcec:	4619      	mov	r1, r3
 800dcee:	f7f2 fde5 	bl	80008bc <__aeabi_ddiv>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	460d      	mov	r5, r1
 800dcf6:	e7b6      	b.n	800dc66 <pow+0x4a>
 800dcf8:	f7fb f85e 	bl	8008db8 <__errno>
 800dcfc:	2322      	movs	r3, #34	; 0x22
 800dcfe:	6003      	str	r3, [r0, #0]
 800dd00:	2200      	movs	r2, #0
 800dd02:	2300      	movs	r3, #0
 800dd04:	4640      	mov	r0, r8
 800dd06:	4649      	mov	r1, r9
 800dd08:	f7f2 ff20 	bl	8000b4c <__aeabi_dcmplt>
 800dd0c:	2400      	movs	r4, #0
 800dd0e:	b158      	cbz	r0, 800dd28 <pow+0x10c>
 800dd10:	ec47 6b10 	vmov	d0, r6, r7
 800dd14:	f002 fb34 	bl	8010380 <rint>
 800dd18:	4632      	mov	r2, r6
 800dd1a:	ec51 0b10 	vmov	r0, r1, d0
 800dd1e:	463b      	mov	r3, r7
 800dd20:	f7f2 ff0a 	bl	8000b38 <__aeabi_dcmpeq>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d0c2      	beq.n	800dcae <pow+0x92>
 800dd28:	4d11      	ldr	r5, [pc, #68]	; (800dd70 <pow+0x154>)
 800dd2a:	e79c      	b.n	800dc66 <pow+0x4a>
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2300      	movs	r3, #0
 800dd30:	4620      	mov	r0, r4
 800dd32:	4629      	mov	r1, r5
 800dd34:	f7f2 ff00 	bl	8000b38 <__aeabi_dcmpeq>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d094      	beq.n	800dc66 <pow+0x4a>
 800dd3c:	ec49 8b10 	vmov	d0, r8, r9
 800dd40:	f002 fa93 	bl	801026a <finite>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d08e      	beq.n	800dc66 <pow+0x4a>
 800dd48:	ec47 6b10 	vmov	d0, r6, r7
 800dd4c:	f002 fa8d 	bl	801026a <finite>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d088      	beq.n	800dc66 <pow+0x4a>
 800dd54:	f7fb f830 	bl	8008db8 <__errno>
 800dd58:	2322      	movs	r3, #34	; 0x22
 800dd5a:	6003      	str	r3, [r0, #0]
 800dd5c:	2400      	movs	r4, #0
 800dd5e:	2500      	movs	r5, #0
 800dd60:	e781      	b.n	800dc66 <pow+0x4a>
 800dd62:	4d04      	ldr	r5, [pc, #16]	; (800dd74 <pow+0x158>)
 800dd64:	2400      	movs	r4, #0
 800dd66:	e77e      	b.n	800dc66 <pow+0x4a>
 800dd68:	200001e0 	.word	0x200001e0
 800dd6c:	fff00000 	.word	0xfff00000
 800dd70:	7ff00000 	.word	0x7ff00000
 800dd74:	3ff00000 	.word	0x3ff00000

0800dd78 <sqrt>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	ed2d 8b02 	vpush	{d8}
 800dd7e:	ec55 4b10 	vmov	r4, r5, d0
 800dd82:	f001 f87f 	bl	800ee84 <__ieee754_sqrt>
 800dd86:	4b15      	ldr	r3, [pc, #84]	; (800dddc <sqrt+0x64>)
 800dd88:	eeb0 8a40 	vmov.f32	s16, s0
 800dd8c:	eef0 8a60 	vmov.f32	s17, s1
 800dd90:	f993 3000 	ldrsb.w	r3, [r3]
 800dd94:	3301      	adds	r3, #1
 800dd96:	d019      	beq.n	800ddcc <sqrt+0x54>
 800dd98:	4622      	mov	r2, r4
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	4629      	mov	r1, r5
 800dda0:	f7f2 fefc 	bl	8000b9c <__aeabi_dcmpun>
 800dda4:	b990      	cbnz	r0, 800ddcc <sqrt+0x54>
 800dda6:	2200      	movs	r2, #0
 800dda8:	2300      	movs	r3, #0
 800ddaa:	4620      	mov	r0, r4
 800ddac:	4629      	mov	r1, r5
 800ddae:	f7f2 fecd 	bl	8000b4c <__aeabi_dcmplt>
 800ddb2:	b158      	cbz	r0, 800ddcc <sqrt+0x54>
 800ddb4:	f7fb f800 	bl	8008db8 <__errno>
 800ddb8:	2321      	movs	r3, #33	; 0x21
 800ddba:	6003      	str	r3, [r0, #0]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	4610      	mov	r0, r2
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	f7f2 fd7a 	bl	80008bc <__aeabi_ddiv>
 800ddc8:	ec41 0b18 	vmov	d8, r0, r1
 800ddcc:	eeb0 0a48 	vmov.f32	s0, s16
 800ddd0:	eef0 0a68 	vmov.f32	s1, s17
 800ddd4:	ecbd 8b02 	vpop	{d8}
 800ddd8:	bd38      	pop	{r3, r4, r5, pc}
 800ddda:	bf00      	nop
 800dddc:	200001e0 	.word	0x200001e0

0800dde0 <__ieee754_hypot>:
 800dde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde4:	ec51 0b10 	vmov	r0, r1, d0
 800dde8:	ec59 8b11 	vmov	r8, r9, d1
 800ddec:	ed2d 8b06 	vpush	{d8-d10}
 800ddf0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ddf4:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800ddf8:	42b7      	cmp	r7, r6
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	da06      	bge.n	800de0c <__ieee754_hypot+0x2c>
 800ddfe:	463b      	mov	r3, r7
 800de00:	ee11 0a10 	vmov	r0, s2
 800de04:	ee10 8a10 	vmov	r8, s0
 800de08:	4637      	mov	r7, r6
 800de0a:	461e      	mov	r6, r3
 800de0c:	1bbb      	subs	r3, r7, r6
 800de0e:	f1b3 7f70 	cmp.w	r3, #62914560	; 0x3c00000
 800de12:	4639      	mov	r1, r7
 800de14:	4682      	mov	sl, r0
 800de16:	46bb      	mov	fp, r7
 800de18:	46b1      	mov	r9, r6
 800de1a:	dd06      	ble.n	800de2a <__ieee754_hypot+0x4a>
 800de1c:	4642      	mov	r2, r8
 800de1e:	4633      	mov	r3, r6
 800de20:	f7f2 fa6c 	bl	80002fc <__adddf3>
 800de24:	4682      	mov	sl, r0
 800de26:	468b      	mov	fp, r1
 800de28:	e01a      	b.n	800de60 <__ieee754_hypot+0x80>
 800de2a:	4b7a      	ldr	r3, [pc, #488]	; (800e014 <__ieee754_hypot+0x234>)
 800de2c:	429f      	cmp	r7, r3
 800de2e:	f340 80a0 	ble.w	800df72 <__ieee754_hypot+0x192>
 800de32:	4b79      	ldr	r3, [pc, #484]	; (800e018 <__ieee754_hypot+0x238>)
 800de34:	429f      	cmp	r7, r3
 800de36:	dd1a      	ble.n	800de6e <__ieee754_hypot+0x8e>
 800de38:	f3c7 0713 	ubfx	r7, r7, #0, #20
 800de3c:	4603      	mov	r3, r0
 800de3e:	433b      	orrs	r3, r7
 800de40:	d005      	beq.n	800de4e <__ieee754_hypot+0x6e>
 800de42:	4642      	mov	r2, r8
 800de44:	4633      	mov	r3, r6
 800de46:	f7f2 fa59 	bl	80002fc <__adddf3>
 800de4a:	4682      	mov	sl, r0
 800de4c:	468b      	mov	fp, r1
 800de4e:	f086 46ff 	eor.w	r6, r6, #2139095040	; 0x7f800000
 800de52:	f486 06e0 	eor.w	r6, r6, #7340032	; 0x700000
 800de56:	4643      	mov	r3, r8
 800de58:	4333      	orrs	r3, r6
 800de5a:	d101      	bne.n	800de60 <__ieee754_hypot+0x80>
 800de5c:	46c2      	mov	sl, r8
 800de5e:	46cb      	mov	fp, r9
 800de60:	ec4b ab10 	vmov	d0, sl, fp
 800de64:	b003      	add	sp, #12
 800de66:	ecbd 8b06 	vpop	{d8-d10}
 800de6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6e:	f1a7 5716 	sub.w	r7, r7, #629145600	; 0x25800000
 800de72:	f1a6 5616 	sub.w	r6, r6, #629145600	; 0x25800000
 800de76:	46bb      	mov	fp, r7
 800de78:	46b1      	mov	r9, r6
 800de7a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	4b66      	ldr	r3, [pc, #408]	; (800e01c <__ieee754_hypot+0x23c>)
 800de82:	429e      	cmp	r6, r3
 800de84:	dc1b      	bgt.n	800debe <__ieee754_hypot+0xde>
 800de86:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 800de8a:	da74      	bge.n	800df76 <__ieee754_hypot+0x196>
 800de8c:	4643      	mov	r3, r8
 800de8e:	4333      	orrs	r3, r6
 800de90:	d0e6      	beq.n	800de60 <__ieee754_hypot+0x80>
 800de92:	4d63      	ldr	r5, [pc, #396]	; (800e020 <__ieee754_hypot+0x240>)
 800de94:	2400      	movs	r4, #0
 800de96:	4622      	mov	r2, r4
 800de98:	462b      	mov	r3, r5
 800de9a:	4640      	mov	r0, r8
 800de9c:	4649      	mov	r1, r9
 800de9e:	f7f2 fbe3 	bl	8000668 <__aeabi_dmul>
 800dea2:	462b      	mov	r3, r5
 800dea4:	4680      	mov	r8, r0
 800dea6:	4689      	mov	r9, r1
 800dea8:	4650      	mov	r0, sl
 800deaa:	4659      	mov	r1, fp
 800deac:	4622      	mov	r2, r4
 800deae:	f7f2 fbdb 	bl	8000668 <__aeabi_dmul>
 800deb2:	9b01      	ldr	r3, [sp, #4]
 800deb4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800deb8:	4682      	mov	sl, r0
 800deba:	468b      	mov	fp, r1
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	4642      	mov	r2, r8
 800dec0:	464b      	mov	r3, r9
 800dec2:	4650      	mov	r0, sl
 800dec4:	4659      	mov	r1, fp
 800dec6:	f7f2 fa17 	bl	80002f8 <__aeabi_dsub>
 800deca:	4604      	mov	r4, r0
 800decc:	460d      	mov	r5, r1
 800dece:	4602      	mov	r2, r0
 800ded0:	460b      	mov	r3, r1
 800ded2:	4640      	mov	r0, r8
 800ded4:	4649      	mov	r1, r9
 800ded6:	f7f2 fe39 	bl	8000b4c <__aeabi_dcmplt>
 800deda:	2800      	cmp	r0, #0
 800dedc:	d056      	beq.n	800df8c <__ieee754_hypot+0x1ac>
 800dede:	2400      	movs	r4, #0
 800dee0:	463b      	mov	r3, r7
 800dee2:	4622      	mov	r2, r4
 800dee4:	4639      	mov	r1, r7
 800dee6:	4620      	mov	r0, r4
 800dee8:	f7f2 fbbe 	bl	8000668 <__aeabi_dmul>
 800deec:	4642      	mov	r2, r8
 800deee:	ec41 0b18 	vmov	d8, r0, r1
 800def2:	464b      	mov	r3, r9
 800def4:	4640      	mov	r0, r8
 800def6:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
 800defa:	f7f2 fbb5 	bl	8000668 <__aeabi_dmul>
 800defe:	463d      	mov	r5, r7
 800df00:	4606      	mov	r6, r0
 800df02:	460f      	mov	r7, r1
 800df04:	4622      	mov	r2, r4
 800df06:	462b      	mov	r3, r5
 800df08:	4650      	mov	r0, sl
 800df0a:	4659      	mov	r1, fp
 800df0c:	f7f2 f9f6 	bl	80002fc <__adddf3>
 800df10:	4622      	mov	r2, r4
 800df12:	4680      	mov	r8, r0
 800df14:	4689      	mov	r9, r1
 800df16:	462b      	mov	r3, r5
 800df18:	4650      	mov	r0, sl
 800df1a:	4659      	mov	r1, fp
 800df1c:	f7f2 f9ec 	bl	80002f8 <__aeabi_dsub>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	4640      	mov	r0, r8
 800df26:	4649      	mov	r1, r9
 800df28:	f7f2 fb9e 	bl	8000668 <__aeabi_dmul>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4630      	mov	r0, r6
 800df32:	4639      	mov	r1, r7
 800df34:	f7f2 f9e0 	bl	80002f8 <__aeabi_dsub>
 800df38:	4602      	mov	r2, r0
 800df3a:	460b      	mov	r3, r1
 800df3c:	ec51 0b18 	vmov	r0, r1, d8
 800df40:	f7f2 f9da 	bl	80002f8 <__aeabi_dsub>
 800df44:	ec41 0b10 	vmov	d0, r0, r1
 800df48:	f000 ff9c 	bl	800ee84 <__ieee754_sqrt>
 800df4c:	9b01      	ldr	r3, [sp, #4]
 800df4e:	ec5b ab10 	vmov	sl, fp, d0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d084      	beq.n	800de60 <__ieee754_hypot+0x80>
 800df56:	051b      	lsls	r3, r3, #20
 800df58:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800df5c:	2000      	movs	r0, #0
 800df5e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800df62:	4602      	mov	r2, r0
 800df64:	460b      	mov	r3, r1
 800df66:	ee10 0a10 	vmov	r0, s0
 800df6a:	4659      	mov	r1, fp
 800df6c:	f7f2 fb7c 	bl	8000668 <__aeabi_dmul>
 800df70:	e758      	b.n	800de24 <__ieee754_hypot+0x44>
 800df72:	2300      	movs	r3, #0
 800df74:	e783      	b.n	800de7e <__ieee754_hypot+0x9e>
 800df76:	9b01      	ldr	r3, [sp, #4]
 800df78:	f107 5716 	add.w	r7, r7, #629145600	; 0x25800000
 800df7c:	f106 5616 	add.w	r6, r6, #629145600	; 0x25800000
 800df80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	46bb      	mov	fp, r7
 800df88:	46b1      	mov	r9, r6
 800df8a:	e798      	b.n	800debe <__ieee754_hypot+0xde>
 800df8c:	4633      	mov	r3, r6
 800df8e:	2200      	movs	r2, #0
 800df90:	ec43 2b18 	vmov	d8, r2, r3
 800df94:	2200      	movs	r2, #0
 800df96:	f507 1380 	add.w	r3, r7, #1048576	; 0x100000
 800df9a:	ec51 0b18 	vmov	r0, r1, d8
 800df9e:	4616      	mov	r6, r2
 800dfa0:	461f      	mov	r7, r3
 800dfa2:	f7f2 fb61 	bl	8000668 <__aeabi_dmul>
 800dfa6:	4622      	mov	r2, r4
 800dfa8:	ec41 0b19 	vmov	d9, r0, r1
 800dfac:	462b      	mov	r3, r5
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 800dfb4:	f7f2 fb58 	bl	8000668 <__aeabi_dmul>
 800dfb8:	4652      	mov	r2, sl
 800dfba:	ec41 0b1a 	vmov	d10, r0, r1
 800dfbe:	465b      	mov	r3, fp
 800dfc0:	4650      	mov	r0, sl
 800dfc2:	4659      	mov	r1, fp
 800dfc4:	f7f2 f99a 	bl	80002fc <__adddf3>
 800dfc8:	4632      	mov	r2, r6
 800dfca:	463b      	mov	r3, r7
 800dfcc:	f7f2 f994 	bl	80002f8 <__aeabi_dsub>
 800dfd0:	4642      	mov	r2, r8
 800dfd2:	464b      	mov	r3, r9
 800dfd4:	f7f2 fb48 	bl	8000668 <__aeabi_dmul>
 800dfd8:	ec53 2b18 	vmov	r2, r3, d8
 800dfdc:	4604      	mov	r4, r0
 800dfde:	460d      	mov	r5, r1
 800dfe0:	4640      	mov	r0, r8
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	f7f2 f988 	bl	80002f8 <__aeabi_dsub>
 800dfe8:	4632      	mov	r2, r6
 800dfea:	463b      	mov	r3, r7
 800dfec:	f7f2 fb3c 	bl	8000668 <__aeabi_dmul>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	4620      	mov	r0, r4
 800dff6:	4629      	mov	r1, r5
 800dff8:	f7f2 f980 	bl	80002fc <__adddf3>
 800dffc:	4602      	mov	r2, r0
 800dffe:	460b      	mov	r3, r1
 800e000:	ec51 0b1a 	vmov	r0, r1, d10
 800e004:	f7f2 f978 	bl	80002f8 <__aeabi_dsub>
 800e008:	4602      	mov	r2, r0
 800e00a:	460b      	mov	r3, r1
 800e00c:	ec51 0b19 	vmov	r0, r1, d9
 800e010:	e796      	b.n	800df40 <__ieee754_hypot+0x160>
 800e012:	bf00      	nop
 800e014:	5f300000 	.word	0x5f300000
 800e018:	7fefffff 	.word	0x7fefffff
 800e01c:	20afffff 	.word	0x20afffff
 800e020:	7fd00000 	.word	0x7fd00000
 800e024:	00000000 	.word	0x00000000

0800e028 <__ieee754_pow>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	ed2d 8b06 	vpush	{d8-d10}
 800e030:	b08d      	sub	sp, #52	; 0x34
 800e032:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e036:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800e03a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800e03e:	ea56 0100 	orrs.w	r1, r6, r0
 800e042:	ec53 2b10 	vmov	r2, r3, d0
 800e046:	f000 84d1 	beq.w	800e9ec <__ieee754_pow+0x9c4>
 800e04a:	497f      	ldr	r1, [pc, #508]	; (800e248 <__ieee754_pow+0x220>)
 800e04c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e050:	428c      	cmp	r4, r1
 800e052:	ee10 8a10 	vmov	r8, s0
 800e056:	4699      	mov	r9, r3
 800e058:	dc09      	bgt.n	800e06e <__ieee754_pow+0x46>
 800e05a:	d103      	bne.n	800e064 <__ieee754_pow+0x3c>
 800e05c:	b97a      	cbnz	r2, 800e07e <__ieee754_pow+0x56>
 800e05e:	42a6      	cmp	r6, r4
 800e060:	dd02      	ble.n	800e068 <__ieee754_pow+0x40>
 800e062:	e00c      	b.n	800e07e <__ieee754_pow+0x56>
 800e064:	428e      	cmp	r6, r1
 800e066:	dc02      	bgt.n	800e06e <__ieee754_pow+0x46>
 800e068:	428e      	cmp	r6, r1
 800e06a:	d110      	bne.n	800e08e <__ieee754_pow+0x66>
 800e06c:	b178      	cbz	r0, 800e08e <__ieee754_pow+0x66>
 800e06e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e072:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e076:	ea54 0308 	orrs.w	r3, r4, r8
 800e07a:	f000 84b7 	beq.w	800e9ec <__ieee754_pow+0x9c4>
 800e07e:	4873      	ldr	r0, [pc, #460]	; (800e24c <__ieee754_pow+0x224>)
 800e080:	b00d      	add	sp, #52	; 0x34
 800e082:	ecbd 8b06 	vpop	{d8-d10}
 800e086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08a:	f7ff bae1 	b.w	800d650 <nan>
 800e08e:	f1b9 0f00 	cmp.w	r9, #0
 800e092:	da36      	bge.n	800e102 <__ieee754_pow+0xda>
 800e094:	496e      	ldr	r1, [pc, #440]	; (800e250 <__ieee754_pow+0x228>)
 800e096:	428e      	cmp	r6, r1
 800e098:	dc51      	bgt.n	800e13e <__ieee754_pow+0x116>
 800e09a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800e09e:	428e      	cmp	r6, r1
 800e0a0:	f340 84af 	ble.w	800ea02 <__ieee754_pow+0x9da>
 800e0a4:	1531      	asrs	r1, r6, #20
 800e0a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e0aa:	2914      	cmp	r1, #20
 800e0ac:	dd0f      	ble.n	800e0ce <__ieee754_pow+0xa6>
 800e0ae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800e0b2:	fa20 fc01 	lsr.w	ip, r0, r1
 800e0b6:	fa0c f101 	lsl.w	r1, ip, r1
 800e0ba:	4281      	cmp	r1, r0
 800e0bc:	f040 84a1 	bne.w	800ea02 <__ieee754_pow+0x9da>
 800e0c0:	f00c 0c01 	and.w	ip, ip, #1
 800e0c4:	f1cc 0102 	rsb	r1, ip, #2
 800e0c8:	9100      	str	r1, [sp, #0]
 800e0ca:	b180      	cbz	r0, 800e0ee <__ieee754_pow+0xc6>
 800e0cc:	e059      	b.n	800e182 <__ieee754_pow+0x15a>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d155      	bne.n	800e17e <__ieee754_pow+0x156>
 800e0d2:	f1c1 0114 	rsb	r1, r1, #20
 800e0d6:	fa46 fc01 	asr.w	ip, r6, r1
 800e0da:	fa0c f101 	lsl.w	r1, ip, r1
 800e0de:	42b1      	cmp	r1, r6
 800e0e0:	f040 848c 	bne.w	800e9fc <__ieee754_pow+0x9d4>
 800e0e4:	f00c 0c01 	and.w	ip, ip, #1
 800e0e8:	f1cc 0102 	rsb	r1, ip, #2
 800e0ec:	9100      	str	r1, [sp, #0]
 800e0ee:	4959      	ldr	r1, [pc, #356]	; (800e254 <__ieee754_pow+0x22c>)
 800e0f0:	428e      	cmp	r6, r1
 800e0f2:	d12d      	bne.n	800e150 <__ieee754_pow+0x128>
 800e0f4:	2f00      	cmp	r7, #0
 800e0f6:	da79      	bge.n	800e1ec <__ieee754_pow+0x1c4>
 800e0f8:	4956      	ldr	r1, [pc, #344]	; (800e254 <__ieee754_pow+0x22c>)
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f7f2 fbde 	bl	80008bc <__aeabi_ddiv>
 800e100:	e016      	b.n	800e130 <__ieee754_pow+0x108>
 800e102:	2100      	movs	r1, #0
 800e104:	9100      	str	r1, [sp, #0]
 800e106:	2800      	cmp	r0, #0
 800e108:	d13b      	bne.n	800e182 <__ieee754_pow+0x15a>
 800e10a:	494f      	ldr	r1, [pc, #316]	; (800e248 <__ieee754_pow+0x220>)
 800e10c:	428e      	cmp	r6, r1
 800e10e:	d1ee      	bne.n	800e0ee <__ieee754_pow+0xc6>
 800e110:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e114:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e118:	ea53 0308 	orrs.w	r3, r3, r8
 800e11c:	f000 8466 	beq.w	800e9ec <__ieee754_pow+0x9c4>
 800e120:	4b4d      	ldr	r3, [pc, #308]	; (800e258 <__ieee754_pow+0x230>)
 800e122:	429c      	cmp	r4, r3
 800e124:	dd0d      	ble.n	800e142 <__ieee754_pow+0x11a>
 800e126:	2f00      	cmp	r7, #0
 800e128:	f280 8464 	bge.w	800e9f4 <__ieee754_pow+0x9cc>
 800e12c:	2000      	movs	r0, #0
 800e12e:	2100      	movs	r1, #0
 800e130:	ec41 0b10 	vmov	d0, r0, r1
 800e134:	b00d      	add	sp, #52	; 0x34
 800e136:	ecbd 8b06 	vpop	{d8-d10}
 800e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13e:	2102      	movs	r1, #2
 800e140:	e7e0      	b.n	800e104 <__ieee754_pow+0xdc>
 800e142:	2f00      	cmp	r7, #0
 800e144:	daf2      	bge.n	800e12c <__ieee754_pow+0x104>
 800e146:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800e14a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e14e:	e7ef      	b.n	800e130 <__ieee754_pow+0x108>
 800e150:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800e154:	d104      	bne.n	800e160 <__ieee754_pow+0x138>
 800e156:	4610      	mov	r0, r2
 800e158:	4619      	mov	r1, r3
 800e15a:	f7f2 fa85 	bl	8000668 <__aeabi_dmul>
 800e15e:	e7e7      	b.n	800e130 <__ieee754_pow+0x108>
 800e160:	493e      	ldr	r1, [pc, #248]	; (800e25c <__ieee754_pow+0x234>)
 800e162:	428f      	cmp	r7, r1
 800e164:	d10d      	bne.n	800e182 <__ieee754_pow+0x15a>
 800e166:	f1b9 0f00 	cmp.w	r9, #0
 800e16a:	db0a      	blt.n	800e182 <__ieee754_pow+0x15a>
 800e16c:	ec43 2b10 	vmov	d0, r2, r3
 800e170:	b00d      	add	sp, #52	; 0x34
 800e172:	ecbd 8b06 	vpop	{d8-d10}
 800e176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	f000 be83 	b.w	800ee84 <__ieee754_sqrt>
 800e17e:	2100      	movs	r1, #0
 800e180:	9100      	str	r1, [sp, #0]
 800e182:	ec43 2b10 	vmov	d0, r2, r3
 800e186:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e18a:	f002 f865 	bl	8010258 <fabs>
 800e18e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e192:	ec51 0b10 	vmov	r0, r1, d0
 800e196:	f1b8 0f00 	cmp.w	r8, #0
 800e19a:	d12a      	bne.n	800e1f2 <__ieee754_pow+0x1ca>
 800e19c:	b12c      	cbz	r4, 800e1aa <__ieee754_pow+0x182>
 800e19e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800e254 <__ieee754_pow+0x22c>
 800e1a2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800e1a6:	45e6      	cmp	lr, ip
 800e1a8:	d123      	bne.n	800e1f2 <__ieee754_pow+0x1ca>
 800e1aa:	2f00      	cmp	r7, #0
 800e1ac:	da05      	bge.n	800e1ba <__ieee754_pow+0x192>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	2000      	movs	r0, #0
 800e1b4:	4927      	ldr	r1, [pc, #156]	; (800e254 <__ieee754_pow+0x22c>)
 800e1b6:	f7f2 fb81 	bl	80008bc <__aeabi_ddiv>
 800e1ba:	f1b9 0f00 	cmp.w	r9, #0
 800e1be:	dab7      	bge.n	800e130 <__ieee754_pow+0x108>
 800e1c0:	9b00      	ldr	r3, [sp, #0]
 800e1c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e1c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e1ca:	4323      	orrs	r3, r4
 800e1cc:	d108      	bne.n	800e1e0 <__ieee754_pow+0x1b8>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	f7f2 f88f 	bl	80002f8 <__aeabi_dsub>
 800e1da:	4602      	mov	r2, r0
 800e1dc:	460b      	mov	r3, r1
 800e1de:	e78d      	b.n	800e0fc <__ieee754_pow+0xd4>
 800e1e0:	9b00      	ldr	r3, [sp, #0]
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d1a4      	bne.n	800e130 <__ieee754_pow+0x108>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	e79e      	b.n	800e130 <__ieee754_pow+0x108>
 800e1f2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800e1f6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800e1fa:	950a      	str	r5, [sp, #40]	; 0x28
 800e1fc:	9d00      	ldr	r5, [sp, #0]
 800e1fe:	46ac      	mov	ip, r5
 800e200:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e202:	ea5c 0505 	orrs.w	r5, ip, r5
 800e206:	d0e4      	beq.n	800e1d2 <__ieee754_pow+0x1aa>
 800e208:	4b15      	ldr	r3, [pc, #84]	; (800e260 <__ieee754_pow+0x238>)
 800e20a:	429e      	cmp	r6, r3
 800e20c:	f340 80fc 	ble.w	800e408 <__ieee754_pow+0x3e0>
 800e210:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e214:	429e      	cmp	r6, r3
 800e216:	4b10      	ldr	r3, [pc, #64]	; (800e258 <__ieee754_pow+0x230>)
 800e218:	dd07      	ble.n	800e22a <__ieee754_pow+0x202>
 800e21a:	429c      	cmp	r4, r3
 800e21c:	dc0a      	bgt.n	800e234 <__ieee754_pow+0x20c>
 800e21e:	2f00      	cmp	r7, #0
 800e220:	da84      	bge.n	800e12c <__ieee754_pow+0x104>
 800e222:	a307      	add	r3, pc, #28	; (adr r3, 800e240 <__ieee754_pow+0x218>)
 800e224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e228:	e795      	b.n	800e156 <__ieee754_pow+0x12e>
 800e22a:	429c      	cmp	r4, r3
 800e22c:	dbf7      	blt.n	800e21e <__ieee754_pow+0x1f6>
 800e22e:	4b09      	ldr	r3, [pc, #36]	; (800e254 <__ieee754_pow+0x22c>)
 800e230:	429c      	cmp	r4, r3
 800e232:	dd17      	ble.n	800e264 <__ieee754_pow+0x23c>
 800e234:	2f00      	cmp	r7, #0
 800e236:	dcf4      	bgt.n	800e222 <__ieee754_pow+0x1fa>
 800e238:	e778      	b.n	800e12c <__ieee754_pow+0x104>
 800e23a:	bf00      	nop
 800e23c:	f3af 8000 	nop.w
 800e240:	8800759c 	.word	0x8800759c
 800e244:	7e37e43c 	.word	0x7e37e43c
 800e248:	7ff00000 	.word	0x7ff00000
 800e24c:	0801304b 	.word	0x0801304b
 800e250:	433fffff 	.word	0x433fffff
 800e254:	3ff00000 	.word	0x3ff00000
 800e258:	3fefffff 	.word	0x3fefffff
 800e25c:	3fe00000 	.word	0x3fe00000
 800e260:	41e00000 	.word	0x41e00000
 800e264:	4b64      	ldr	r3, [pc, #400]	; (800e3f8 <__ieee754_pow+0x3d0>)
 800e266:	2200      	movs	r2, #0
 800e268:	f7f2 f846 	bl	80002f8 <__aeabi_dsub>
 800e26c:	a356      	add	r3, pc, #344	; (adr r3, 800e3c8 <__ieee754_pow+0x3a0>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	4604      	mov	r4, r0
 800e274:	460d      	mov	r5, r1
 800e276:	f7f2 f9f7 	bl	8000668 <__aeabi_dmul>
 800e27a:	a355      	add	r3, pc, #340	; (adr r3, 800e3d0 <__ieee754_pow+0x3a8>)
 800e27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e280:	4606      	mov	r6, r0
 800e282:	460f      	mov	r7, r1
 800e284:	4620      	mov	r0, r4
 800e286:	4629      	mov	r1, r5
 800e288:	f7f2 f9ee 	bl	8000668 <__aeabi_dmul>
 800e28c:	4b5b      	ldr	r3, [pc, #364]	; (800e3fc <__ieee754_pow+0x3d4>)
 800e28e:	4682      	mov	sl, r0
 800e290:	468b      	mov	fp, r1
 800e292:	2200      	movs	r2, #0
 800e294:	4620      	mov	r0, r4
 800e296:	4629      	mov	r1, r5
 800e298:	f7f2 f9e6 	bl	8000668 <__aeabi_dmul>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	a14d      	add	r1, pc, #308	; (adr r1, 800e3d8 <__ieee754_pow+0x3b0>)
 800e2a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2a6:	f7f2 f827 	bl	80002f8 <__aeabi_dsub>
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	f7f2 f9db 	bl	8000668 <__aeabi_dmul>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	4951      	ldr	r1, [pc, #324]	; (800e400 <__ieee754_pow+0x3d8>)
 800e2ba:	f7f2 f81d 	bl	80002f8 <__aeabi_dsub>
 800e2be:	4622      	mov	r2, r4
 800e2c0:	4680      	mov	r8, r0
 800e2c2:	4689      	mov	r9, r1
 800e2c4:	462b      	mov	r3, r5
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f7f2 f9cd 	bl	8000668 <__aeabi_dmul>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	f7f2 f9c7 	bl	8000668 <__aeabi_dmul>
 800e2da:	a341      	add	r3, pc, #260	; (adr r3, 800e3e0 <__ieee754_pow+0x3b8>)
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	f7f2 f9c2 	bl	8000668 <__aeabi_dmul>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	4650      	mov	r0, sl
 800e2ea:	4659      	mov	r1, fp
 800e2ec:	f7f2 f804 	bl	80002f8 <__aeabi_dsub>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	4689      	mov	r9, r1
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	f7f1 fffe 	bl	80002fc <__adddf3>
 800e300:	2400      	movs	r4, #0
 800e302:	4632      	mov	r2, r6
 800e304:	463b      	mov	r3, r7
 800e306:	4620      	mov	r0, r4
 800e308:	460d      	mov	r5, r1
 800e30a:	f7f1 fff5 	bl	80002f8 <__aeabi_dsub>
 800e30e:	4602      	mov	r2, r0
 800e310:	460b      	mov	r3, r1
 800e312:	4640      	mov	r0, r8
 800e314:	4649      	mov	r1, r9
 800e316:	f7f1 ffef 	bl	80002f8 <__aeabi_dsub>
 800e31a:	9b00      	ldr	r3, [sp, #0]
 800e31c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e31e:	3b01      	subs	r3, #1
 800e320:	4313      	orrs	r3, r2
 800e322:	4682      	mov	sl, r0
 800e324:	468b      	mov	fp, r1
 800e326:	f040 81f1 	bne.w	800e70c <__ieee754_pow+0x6e4>
 800e32a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800e3e8 <__ieee754_pow+0x3c0>
 800e32e:	eeb0 8a47 	vmov.f32	s16, s14
 800e332:	eef0 8a67 	vmov.f32	s17, s15
 800e336:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e33a:	2600      	movs	r6, #0
 800e33c:	4632      	mov	r2, r6
 800e33e:	463b      	mov	r3, r7
 800e340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e344:	f7f1 ffd8 	bl	80002f8 <__aeabi_dsub>
 800e348:	4622      	mov	r2, r4
 800e34a:	462b      	mov	r3, r5
 800e34c:	f7f2 f98c 	bl	8000668 <__aeabi_dmul>
 800e350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e354:	4680      	mov	r8, r0
 800e356:	4689      	mov	r9, r1
 800e358:	4650      	mov	r0, sl
 800e35a:	4659      	mov	r1, fp
 800e35c:	f7f2 f984 	bl	8000668 <__aeabi_dmul>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	4640      	mov	r0, r8
 800e366:	4649      	mov	r1, r9
 800e368:	f7f1 ffc8 	bl	80002fc <__adddf3>
 800e36c:	4632      	mov	r2, r6
 800e36e:	463b      	mov	r3, r7
 800e370:	4680      	mov	r8, r0
 800e372:	4689      	mov	r9, r1
 800e374:	4620      	mov	r0, r4
 800e376:	4629      	mov	r1, r5
 800e378:	f7f2 f976 	bl	8000668 <__aeabi_dmul>
 800e37c:	460b      	mov	r3, r1
 800e37e:	4604      	mov	r4, r0
 800e380:	460d      	mov	r5, r1
 800e382:	4602      	mov	r2, r0
 800e384:	4649      	mov	r1, r9
 800e386:	4640      	mov	r0, r8
 800e388:	f7f1 ffb8 	bl	80002fc <__adddf3>
 800e38c:	4b1d      	ldr	r3, [pc, #116]	; (800e404 <__ieee754_pow+0x3dc>)
 800e38e:	4299      	cmp	r1, r3
 800e390:	ec45 4b19 	vmov	d9, r4, r5
 800e394:	4606      	mov	r6, r0
 800e396:	460f      	mov	r7, r1
 800e398:	468b      	mov	fp, r1
 800e39a:	f340 82fe 	ble.w	800e99a <__ieee754_pow+0x972>
 800e39e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e3a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e3a6:	4303      	orrs	r3, r0
 800e3a8:	f000 81f0 	beq.w	800e78c <__ieee754_pow+0x764>
 800e3ac:	a310      	add	r3, pc, #64	; (adr r3, 800e3f0 <__ieee754_pow+0x3c8>)
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	ec51 0b18 	vmov	r0, r1, d8
 800e3b6:	f7f2 f957 	bl	8000668 <__aeabi_dmul>
 800e3ba:	a30d      	add	r3, pc, #52	; (adr r3, 800e3f0 <__ieee754_pow+0x3c8>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	e6cb      	b.n	800e15a <__ieee754_pow+0x132>
 800e3c2:	bf00      	nop
 800e3c4:	f3af 8000 	nop.w
 800e3c8:	60000000 	.word	0x60000000
 800e3cc:	3ff71547 	.word	0x3ff71547
 800e3d0:	f85ddf44 	.word	0xf85ddf44
 800e3d4:	3e54ae0b 	.word	0x3e54ae0b
 800e3d8:	55555555 	.word	0x55555555
 800e3dc:	3fd55555 	.word	0x3fd55555
 800e3e0:	652b82fe 	.word	0x652b82fe
 800e3e4:	3ff71547 	.word	0x3ff71547
 800e3e8:	00000000 	.word	0x00000000
 800e3ec:	bff00000 	.word	0xbff00000
 800e3f0:	8800759c 	.word	0x8800759c
 800e3f4:	7e37e43c 	.word	0x7e37e43c
 800e3f8:	3ff00000 	.word	0x3ff00000
 800e3fc:	3fd00000 	.word	0x3fd00000
 800e400:	3fe00000 	.word	0x3fe00000
 800e404:	408fffff 	.word	0x408fffff
 800e408:	4bd7      	ldr	r3, [pc, #860]	; (800e768 <__ieee754_pow+0x740>)
 800e40a:	ea03 0309 	and.w	r3, r3, r9
 800e40e:	2200      	movs	r2, #0
 800e410:	b92b      	cbnz	r3, 800e41e <__ieee754_pow+0x3f6>
 800e412:	4bd6      	ldr	r3, [pc, #856]	; (800e76c <__ieee754_pow+0x744>)
 800e414:	f7f2 f928 	bl	8000668 <__aeabi_dmul>
 800e418:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e41c:	460c      	mov	r4, r1
 800e41e:	1523      	asrs	r3, r4, #20
 800e420:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e424:	4413      	add	r3, r2
 800e426:	9309      	str	r3, [sp, #36]	; 0x24
 800e428:	4bd1      	ldr	r3, [pc, #836]	; (800e770 <__ieee754_pow+0x748>)
 800e42a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e42e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e432:	429c      	cmp	r4, r3
 800e434:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e438:	dd08      	ble.n	800e44c <__ieee754_pow+0x424>
 800e43a:	4bce      	ldr	r3, [pc, #824]	; (800e774 <__ieee754_pow+0x74c>)
 800e43c:	429c      	cmp	r4, r3
 800e43e:	f340 8163 	ble.w	800e708 <__ieee754_pow+0x6e0>
 800e442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e444:	3301      	adds	r3, #1
 800e446:	9309      	str	r3, [sp, #36]	; 0x24
 800e448:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e44c:	2400      	movs	r4, #0
 800e44e:	00e3      	lsls	r3, r4, #3
 800e450:	930b      	str	r3, [sp, #44]	; 0x2c
 800e452:	4bc9      	ldr	r3, [pc, #804]	; (800e778 <__ieee754_pow+0x750>)
 800e454:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e458:	ed93 7b00 	vldr	d7, [r3]
 800e45c:	4629      	mov	r1, r5
 800e45e:	ec53 2b17 	vmov	r2, r3, d7
 800e462:	eeb0 8a47 	vmov.f32	s16, s14
 800e466:	eef0 8a67 	vmov.f32	s17, s15
 800e46a:	4682      	mov	sl, r0
 800e46c:	f7f1 ff44 	bl	80002f8 <__aeabi_dsub>
 800e470:	4652      	mov	r2, sl
 800e472:	4606      	mov	r6, r0
 800e474:	460f      	mov	r7, r1
 800e476:	462b      	mov	r3, r5
 800e478:	ec51 0b18 	vmov	r0, r1, d8
 800e47c:	f7f1 ff3e 	bl	80002fc <__adddf3>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	2000      	movs	r0, #0
 800e486:	49bd      	ldr	r1, [pc, #756]	; (800e77c <__ieee754_pow+0x754>)
 800e488:	f7f2 fa18 	bl	80008bc <__aeabi_ddiv>
 800e48c:	ec41 0b19 	vmov	d9, r0, r1
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	4630      	mov	r0, r6
 800e496:	4639      	mov	r1, r7
 800e498:	f7f2 f8e6 	bl	8000668 <__aeabi_dmul>
 800e49c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e4a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	9304      	str	r3, [sp, #16]
 800e4ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e4b0:	46ab      	mov	fp, r5
 800e4b2:	106d      	asrs	r5, r5, #1
 800e4b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e4b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e4bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	4614      	mov	r4, r2
 800e4c8:	461d      	mov	r5, r3
 800e4ca:	f7f2 f8cd 	bl	8000668 <__aeabi_dmul>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	f7f1 ff0f 	bl	80002f8 <__aeabi_dsub>
 800e4da:	ec53 2b18 	vmov	r2, r3, d8
 800e4de:	4606      	mov	r6, r0
 800e4e0:	460f      	mov	r7, r1
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	f7f1 ff07 	bl	80002f8 <__aeabi_dsub>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	4650      	mov	r0, sl
 800e4f0:	4659      	mov	r1, fp
 800e4f2:	f7f1 ff01 	bl	80002f8 <__aeabi_dsub>
 800e4f6:	4642      	mov	r2, r8
 800e4f8:	464b      	mov	r3, r9
 800e4fa:	f7f2 f8b5 	bl	8000668 <__aeabi_dmul>
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	4630      	mov	r0, r6
 800e504:	4639      	mov	r1, r7
 800e506:	f7f1 fef7 	bl	80002f8 <__aeabi_dsub>
 800e50a:	ec53 2b19 	vmov	r2, r3, d9
 800e50e:	f7f2 f8ab 	bl	8000668 <__aeabi_dmul>
 800e512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e516:	ec41 0b18 	vmov	d8, r0, r1
 800e51a:	4610      	mov	r0, r2
 800e51c:	4619      	mov	r1, r3
 800e51e:	f7f2 f8a3 	bl	8000668 <__aeabi_dmul>
 800e522:	a37d      	add	r3, pc, #500	; (adr r3, 800e718 <__ieee754_pow+0x6f0>)
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	4604      	mov	r4, r0
 800e52a:	460d      	mov	r5, r1
 800e52c:	f7f2 f89c 	bl	8000668 <__aeabi_dmul>
 800e530:	a37b      	add	r3, pc, #492	; (adr r3, 800e720 <__ieee754_pow+0x6f8>)
 800e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e536:	f7f1 fee1 	bl	80002fc <__adddf3>
 800e53a:	4622      	mov	r2, r4
 800e53c:	462b      	mov	r3, r5
 800e53e:	f7f2 f893 	bl	8000668 <__aeabi_dmul>
 800e542:	a379      	add	r3, pc, #484	; (adr r3, 800e728 <__ieee754_pow+0x700>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f7f1 fed8 	bl	80002fc <__adddf3>
 800e54c:	4622      	mov	r2, r4
 800e54e:	462b      	mov	r3, r5
 800e550:	f7f2 f88a 	bl	8000668 <__aeabi_dmul>
 800e554:	a376      	add	r3, pc, #472	; (adr r3, 800e730 <__ieee754_pow+0x708>)
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	f7f1 fecf 	bl	80002fc <__adddf3>
 800e55e:	4622      	mov	r2, r4
 800e560:	462b      	mov	r3, r5
 800e562:	f7f2 f881 	bl	8000668 <__aeabi_dmul>
 800e566:	a374      	add	r3, pc, #464	; (adr r3, 800e738 <__ieee754_pow+0x710>)
 800e568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56c:	f7f1 fec6 	bl	80002fc <__adddf3>
 800e570:	4622      	mov	r2, r4
 800e572:	462b      	mov	r3, r5
 800e574:	f7f2 f878 	bl	8000668 <__aeabi_dmul>
 800e578:	a371      	add	r3, pc, #452	; (adr r3, 800e740 <__ieee754_pow+0x718>)
 800e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57e:	f7f1 febd 	bl	80002fc <__adddf3>
 800e582:	4622      	mov	r2, r4
 800e584:	4606      	mov	r6, r0
 800e586:	460f      	mov	r7, r1
 800e588:	462b      	mov	r3, r5
 800e58a:	4620      	mov	r0, r4
 800e58c:	4629      	mov	r1, r5
 800e58e:	f7f2 f86b 	bl	8000668 <__aeabi_dmul>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4630      	mov	r0, r6
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f2 f865 	bl	8000668 <__aeabi_dmul>
 800e59e:	4642      	mov	r2, r8
 800e5a0:	4604      	mov	r4, r0
 800e5a2:	460d      	mov	r5, r1
 800e5a4:	464b      	mov	r3, r9
 800e5a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5aa:	f7f1 fea7 	bl	80002fc <__adddf3>
 800e5ae:	ec53 2b18 	vmov	r2, r3, d8
 800e5b2:	f7f2 f859 	bl	8000668 <__aeabi_dmul>
 800e5b6:	4622      	mov	r2, r4
 800e5b8:	462b      	mov	r3, r5
 800e5ba:	f7f1 fe9f 	bl	80002fc <__adddf3>
 800e5be:	4642      	mov	r2, r8
 800e5c0:	4682      	mov	sl, r0
 800e5c2:	468b      	mov	fp, r1
 800e5c4:	464b      	mov	r3, r9
 800e5c6:	4640      	mov	r0, r8
 800e5c8:	4649      	mov	r1, r9
 800e5ca:	f7f2 f84d 	bl	8000668 <__aeabi_dmul>
 800e5ce:	4b6c      	ldr	r3, [pc, #432]	; (800e780 <__ieee754_pow+0x758>)
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	460f      	mov	r7, r1
 800e5d6:	f7f1 fe91 	bl	80002fc <__adddf3>
 800e5da:	4652      	mov	r2, sl
 800e5dc:	465b      	mov	r3, fp
 800e5de:	f7f1 fe8d 	bl	80002fc <__adddf3>
 800e5e2:	9c04      	ldr	r4, [sp, #16]
 800e5e4:	460d      	mov	r5, r1
 800e5e6:	4622      	mov	r2, r4
 800e5e8:	460b      	mov	r3, r1
 800e5ea:	4640      	mov	r0, r8
 800e5ec:	4649      	mov	r1, r9
 800e5ee:	f7f2 f83b 	bl	8000668 <__aeabi_dmul>
 800e5f2:	4b63      	ldr	r3, [pc, #396]	; (800e780 <__ieee754_pow+0x758>)
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	4689      	mov	r9, r1
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	4629      	mov	r1, r5
 800e5fe:	f7f1 fe7b 	bl	80002f8 <__aeabi_dsub>
 800e602:	4632      	mov	r2, r6
 800e604:	463b      	mov	r3, r7
 800e606:	f7f1 fe77 	bl	80002f8 <__aeabi_dsub>
 800e60a:	4602      	mov	r2, r0
 800e60c:	460b      	mov	r3, r1
 800e60e:	4650      	mov	r0, sl
 800e610:	4659      	mov	r1, fp
 800e612:	f7f1 fe71 	bl	80002f8 <__aeabi_dsub>
 800e616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e61a:	f7f2 f825 	bl	8000668 <__aeabi_dmul>
 800e61e:	4622      	mov	r2, r4
 800e620:	4606      	mov	r6, r0
 800e622:	460f      	mov	r7, r1
 800e624:	462b      	mov	r3, r5
 800e626:	ec51 0b18 	vmov	r0, r1, d8
 800e62a:	f7f2 f81d 	bl	8000668 <__aeabi_dmul>
 800e62e:	4602      	mov	r2, r0
 800e630:	460b      	mov	r3, r1
 800e632:	4630      	mov	r0, r6
 800e634:	4639      	mov	r1, r7
 800e636:	f7f1 fe61 	bl	80002fc <__adddf3>
 800e63a:	4606      	mov	r6, r0
 800e63c:	460f      	mov	r7, r1
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4640      	mov	r0, r8
 800e644:	4649      	mov	r1, r9
 800e646:	f7f1 fe59 	bl	80002fc <__adddf3>
 800e64a:	9c04      	ldr	r4, [sp, #16]
 800e64c:	a33e      	add	r3, pc, #248	; (adr r3, 800e748 <__ieee754_pow+0x720>)
 800e64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e652:	4620      	mov	r0, r4
 800e654:	460d      	mov	r5, r1
 800e656:	f7f2 f807 	bl	8000668 <__aeabi_dmul>
 800e65a:	4642      	mov	r2, r8
 800e65c:	ec41 0b18 	vmov	d8, r0, r1
 800e660:	464b      	mov	r3, r9
 800e662:	4620      	mov	r0, r4
 800e664:	4629      	mov	r1, r5
 800e666:	f7f1 fe47 	bl	80002f8 <__aeabi_dsub>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	4630      	mov	r0, r6
 800e670:	4639      	mov	r1, r7
 800e672:	f7f1 fe41 	bl	80002f8 <__aeabi_dsub>
 800e676:	a336      	add	r3, pc, #216	; (adr r3, 800e750 <__ieee754_pow+0x728>)
 800e678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67c:	f7f1 fff4 	bl	8000668 <__aeabi_dmul>
 800e680:	a335      	add	r3, pc, #212	; (adr r3, 800e758 <__ieee754_pow+0x730>)
 800e682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e686:	4606      	mov	r6, r0
 800e688:	460f      	mov	r7, r1
 800e68a:	4620      	mov	r0, r4
 800e68c:	4629      	mov	r1, r5
 800e68e:	f7f1 ffeb 	bl	8000668 <__aeabi_dmul>
 800e692:	4602      	mov	r2, r0
 800e694:	460b      	mov	r3, r1
 800e696:	4630      	mov	r0, r6
 800e698:	4639      	mov	r1, r7
 800e69a:	f7f1 fe2f 	bl	80002fc <__adddf3>
 800e69e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6a0:	4b38      	ldr	r3, [pc, #224]	; (800e784 <__ieee754_pow+0x75c>)
 800e6a2:	4413      	add	r3, r2
 800e6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a8:	f7f1 fe28 	bl	80002fc <__adddf3>
 800e6ac:	4682      	mov	sl, r0
 800e6ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e6b0:	468b      	mov	fp, r1
 800e6b2:	f7f1 ff6f 	bl	8000594 <__aeabi_i2d>
 800e6b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6b8:	4b33      	ldr	r3, [pc, #204]	; (800e788 <__ieee754_pow+0x760>)
 800e6ba:	4413      	add	r3, r2
 800e6bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	460f      	mov	r7, r1
 800e6c4:	4652      	mov	r2, sl
 800e6c6:	465b      	mov	r3, fp
 800e6c8:	ec51 0b18 	vmov	r0, r1, d8
 800e6cc:	f7f1 fe16 	bl	80002fc <__adddf3>
 800e6d0:	4642      	mov	r2, r8
 800e6d2:	464b      	mov	r3, r9
 800e6d4:	f7f1 fe12 	bl	80002fc <__adddf3>
 800e6d8:	4632      	mov	r2, r6
 800e6da:	463b      	mov	r3, r7
 800e6dc:	f7f1 fe0e 	bl	80002fc <__adddf3>
 800e6e0:	9c04      	ldr	r4, [sp, #16]
 800e6e2:	4632      	mov	r2, r6
 800e6e4:	463b      	mov	r3, r7
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	f7f1 fe05 	bl	80002f8 <__aeabi_dsub>
 800e6ee:	4642      	mov	r2, r8
 800e6f0:	464b      	mov	r3, r9
 800e6f2:	f7f1 fe01 	bl	80002f8 <__aeabi_dsub>
 800e6f6:	ec53 2b18 	vmov	r2, r3, d8
 800e6fa:	f7f1 fdfd 	bl	80002f8 <__aeabi_dsub>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	4650      	mov	r0, sl
 800e704:	4659      	mov	r1, fp
 800e706:	e606      	b.n	800e316 <__ieee754_pow+0x2ee>
 800e708:	2401      	movs	r4, #1
 800e70a:	e6a0      	b.n	800e44e <__ieee754_pow+0x426>
 800e70c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e760 <__ieee754_pow+0x738>
 800e710:	e60d      	b.n	800e32e <__ieee754_pow+0x306>
 800e712:	bf00      	nop
 800e714:	f3af 8000 	nop.w
 800e718:	4a454eef 	.word	0x4a454eef
 800e71c:	3fca7e28 	.word	0x3fca7e28
 800e720:	93c9db65 	.word	0x93c9db65
 800e724:	3fcd864a 	.word	0x3fcd864a
 800e728:	a91d4101 	.word	0xa91d4101
 800e72c:	3fd17460 	.word	0x3fd17460
 800e730:	518f264d 	.word	0x518f264d
 800e734:	3fd55555 	.word	0x3fd55555
 800e738:	db6fabff 	.word	0xdb6fabff
 800e73c:	3fdb6db6 	.word	0x3fdb6db6
 800e740:	33333303 	.word	0x33333303
 800e744:	3fe33333 	.word	0x3fe33333
 800e748:	e0000000 	.word	0xe0000000
 800e74c:	3feec709 	.word	0x3feec709
 800e750:	dc3a03fd 	.word	0xdc3a03fd
 800e754:	3feec709 	.word	0x3feec709
 800e758:	145b01f5 	.word	0x145b01f5
 800e75c:	be3e2fe0 	.word	0xbe3e2fe0
 800e760:	00000000 	.word	0x00000000
 800e764:	3ff00000 	.word	0x3ff00000
 800e768:	7ff00000 	.word	0x7ff00000
 800e76c:	43400000 	.word	0x43400000
 800e770:	0003988e 	.word	0x0003988e
 800e774:	000bb679 	.word	0x000bb679
 800e778:	08013420 	.word	0x08013420
 800e77c:	3ff00000 	.word	0x3ff00000
 800e780:	40080000 	.word	0x40080000
 800e784:	08013440 	.word	0x08013440
 800e788:	08013430 	.word	0x08013430
 800e78c:	a3b5      	add	r3, pc, #724	; (adr r3, 800ea64 <__ieee754_pow+0xa3c>)
 800e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e792:	4640      	mov	r0, r8
 800e794:	4649      	mov	r1, r9
 800e796:	f7f1 fdb1 	bl	80002fc <__adddf3>
 800e79a:	4622      	mov	r2, r4
 800e79c:	ec41 0b1a 	vmov	d10, r0, r1
 800e7a0:	462b      	mov	r3, r5
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	f7f1 fda7 	bl	80002f8 <__aeabi_dsub>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	ec51 0b1a 	vmov	r0, r1, d10
 800e7b2:	f7f2 f9e9 	bl	8000b88 <__aeabi_dcmpgt>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	f47f adf8 	bne.w	800e3ac <__ieee754_pow+0x384>
 800e7bc:	4aa4      	ldr	r2, [pc, #656]	; (800ea50 <__ieee754_pow+0xa28>)
 800e7be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	f340 810b 	ble.w	800e9de <__ieee754_pow+0x9b6>
 800e7c8:	151b      	asrs	r3, r3, #20
 800e7ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e7ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e7d2:	fa4a f303 	asr.w	r3, sl, r3
 800e7d6:	445b      	add	r3, fp
 800e7d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e7dc:	4e9d      	ldr	r6, [pc, #628]	; (800ea54 <__ieee754_pow+0xa2c>)
 800e7de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e7e2:	4116      	asrs	r6, r2
 800e7e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	ea23 0106 	bic.w	r1, r3, r6
 800e7ee:	f1c2 0214 	rsb	r2, r2, #20
 800e7f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e7f6:	fa4a fa02 	asr.w	sl, sl, r2
 800e7fa:	f1bb 0f00 	cmp.w	fp, #0
 800e7fe:	4602      	mov	r2, r0
 800e800:	460b      	mov	r3, r1
 800e802:	4620      	mov	r0, r4
 800e804:	4629      	mov	r1, r5
 800e806:	bfb8      	it	lt
 800e808:	f1ca 0a00 	rsblt	sl, sl, #0
 800e80c:	f7f1 fd74 	bl	80002f8 <__aeabi_dsub>
 800e810:	ec41 0b19 	vmov	d9, r0, r1
 800e814:	4642      	mov	r2, r8
 800e816:	464b      	mov	r3, r9
 800e818:	ec51 0b19 	vmov	r0, r1, d9
 800e81c:	f7f1 fd6e 	bl	80002fc <__adddf3>
 800e820:	2400      	movs	r4, #0
 800e822:	a379      	add	r3, pc, #484	; (adr r3, 800ea08 <__ieee754_pow+0x9e0>)
 800e824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e828:	4620      	mov	r0, r4
 800e82a:	460d      	mov	r5, r1
 800e82c:	f7f1 ff1c 	bl	8000668 <__aeabi_dmul>
 800e830:	ec53 2b19 	vmov	r2, r3, d9
 800e834:	4606      	mov	r6, r0
 800e836:	460f      	mov	r7, r1
 800e838:	4620      	mov	r0, r4
 800e83a:	4629      	mov	r1, r5
 800e83c:	f7f1 fd5c 	bl	80002f8 <__aeabi_dsub>
 800e840:	4602      	mov	r2, r0
 800e842:	460b      	mov	r3, r1
 800e844:	4640      	mov	r0, r8
 800e846:	4649      	mov	r1, r9
 800e848:	f7f1 fd56 	bl	80002f8 <__aeabi_dsub>
 800e84c:	a370      	add	r3, pc, #448	; (adr r3, 800ea10 <__ieee754_pow+0x9e8>)
 800e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e852:	f7f1 ff09 	bl	8000668 <__aeabi_dmul>
 800e856:	a370      	add	r3, pc, #448	; (adr r3, 800ea18 <__ieee754_pow+0x9f0>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	4680      	mov	r8, r0
 800e85e:	4689      	mov	r9, r1
 800e860:	4620      	mov	r0, r4
 800e862:	4629      	mov	r1, r5
 800e864:	f7f1 ff00 	bl	8000668 <__aeabi_dmul>
 800e868:	4602      	mov	r2, r0
 800e86a:	460b      	mov	r3, r1
 800e86c:	4640      	mov	r0, r8
 800e86e:	4649      	mov	r1, r9
 800e870:	f7f1 fd44 	bl	80002fc <__adddf3>
 800e874:	4604      	mov	r4, r0
 800e876:	460d      	mov	r5, r1
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4630      	mov	r0, r6
 800e87e:	4639      	mov	r1, r7
 800e880:	f7f1 fd3c 	bl	80002fc <__adddf3>
 800e884:	4632      	mov	r2, r6
 800e886:	463b      	mov	r3, r7
 800e888:	4680      	mov	r8, r0
 800e88a:	4689      	mov	r9, r1
 800e88c:	f7f1 fd34 	bl	80002f8 <__aeabi_dsub>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
 800e894:	4620      	mov	r0, r4
 800e896:	4629      	mov	r1, r5
 800e898:	f7f1 fd2e 	bl	80002f8 <__aeabi_dsub>
 800e89c:	4642      	mov	r2, r8
 800e89e:	4606      	mov	r6, r0
 800e8a0:	460f      	mov	r7, r1
 800e8a2:	464b      	mov	r3, r9
 800e8a4:	4640      	mov	r0, r8
 800e8a6:	4649      	mov	r1, r9
 800e8a8:	f7f1 fede 	bl	8000668 <__aeabi_dmul>
 800e8ac:	a35c      	add	r3, pc, #368	; (adr r3, 800ea20 <__ieee754_pow+0x9f8>)
 800e8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	460d      	mov	r5, r1
 800e8b6:	f7f1 fed7 	bl	8000668 <__aeabi_dmul>
 800e8ba:	a35b      	add	r3, pc, #364	; (adr r3, 800ea28 <__ieee754_pow+0xa00>)
 800e8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c0:	f7f1 fd1a 	bl	80002f8 <__aeabi_dsub>
 800e8c4:	4622      	mov	r2, r4
 800e8c6:	462b      	mov	r3, r5
 800e8c8:	f7f1 fece 	bl	8000668 <__aeabi_dmul>
 800e8cc:	a358      	add	r3, pc, #352	; (adr r3, 800ea30 <__ieee754_pow+0xa08>)
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	f7f1 fd13 	bl	80002fc <__adddf3>
 800e8d6:	4622      	mov	r2, r4
 800e8d8:	462b      	mov	r3, r5
 800e8da:	f7f1 fec5 	bl	8000668 <__aeabi_dmul>
 800e8de:	a356      	add	r3, pc, #344	; (adr r3, 800ea38 <__ieee754_pow+0xa10>)
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	f7f1 fd08 	bl	80002f8 <__aeabi_dsub>
 800e8e8:	4622      	mov	r2, r4
 800e8ea:	462b      	mov	r3, r5
 800e8ec:	f7f1 febc 	bl	8000668 <__aeabi_dmul>
 800e8f0:	a353      	add	r3, pc, #332	; (adr r3, 800ea40 <__ieee754_pow+0xa18>)
 800e8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f6:	f7f1 fd01 	bl	80002fc <__adddf3>
 800e8fa:	4622      	mov	r2, r4
 800e8fc:	462b      	mov	r3, r5
 800e8fe:	f7f1 feb3 	bl	8000668 <__aeabi_dmul>
 800e902:	4602      	mov	r2, r0
 800e904:	460b      	mov	r3, r1
 800e906:	4640      	mov	r0, r8
 800e908:	4649      	mov	r1, r9
 800e90a:	f7f1 fcf5 	bl	80002f8 <__aeabi_dsub>
 800e90e:	4604      	mov	r4, r0
 800e910:	460d      	mov	r5, r1
 800e912:	4602      	mov	r2, r0
 800e914:	460b      	mov	r3, r1
 800e916:	4640      	mov	r0, r8
 800e918:	4649      	mov	r1, r9
 800e91a:	f7f1 fea5 	bl	8000668 <__aeabi_dmul>
 800e91e:	2200      	movs	r2, #0
 800e920:	ec41 0b19 	vmov	d9, r0, r1
 800e924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e928:	4620      	mov	r0, r4
 800e92a:	4629      	mov	r1, r5
 800e92c:	f7f1 fce4 	bl	80002f8 <__aeabi_dsub>
 800e930:	4602      	mov	r2, r0
 800e932:	460b      	mov	r3, r1
 800e934:	ec51 0b19 	vmov	r0, r1, d9
 800e938:	f7f1 ffc0 	bl	80008bc <__aeabi_ddiv>
 800e93c:	4632      	mov	r2, r6
 800e93e:	4604      	mov	r4, r0
 800e940:	460d      	mov	r5, r1
 800e942:	463b      	mov	r3, r7
 800e944:	4640      	mov	r0, r8
 800e946:	4649      	mov	r1, r9
 800e948:	f7f1 fe8e 	bl	8000668 <__aeabi_dmul>
 800e94c:	4632      	mov	r2, r6
 800e94e:	463b      	mov	r3, r7
 800e950:	f7f1 fcd4 	bl	80002fc <__adddf3>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	4620      	mov	r0, r4
 800e95a:	4629      	mov	r1, r5
 800e95c:	f7f1 fccc 	bl	80002f8 <__aeabi_dsub>
 800e960:	4642      	mov	r2, r8
 800e962:	464b      	mov	r3, r9
 800e964:	f7f1 fcc8 	bl	80002f8 <__aeabi_dsub>
 800e968:	460b      	mov	r3, r1
 800e96a:	4602      	mov	r2, r0
 800e96c:	493a      	ldr	r1, [pc, #232]	; (800ea58 <__ieee754_pow+0xa30>)
 800e96e:	2000      	movs	r0, #0
 800e970:	f7f1 fcc2 	bl	80002f8 <__aeabi_dsub>
 800e974:	e9cd 0100 	strd	r0, r1, [sp]
 800e978:	9b01      	ldr	r3, [sp, #4]
 800e97a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e982:	da2f      	bge.n	800e9e4 <__ieee754_pow+0x9bc>
 800e984:	4650      	mov	r0, sl
 800e986:	ed9d 0b00 	vldr	d0, [sp]
 800e98a:	f001 fd85 	bl	8010498 <scalbn>
 800e98e:	ec51 0b10 	vmov	r0, r1, d0
 800e992:	ec53 2b18 	vmov	r2, r3, d8
 800e996:	f7ff bbe0 	b.w	800e15a <__ieee754_pow+0x132>
 800e99a:	4b30      	ldr	r3, [pc, #192]	; (800ea5c <__ieee754_pow+0xa34>)
 800e99c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e9a0:	429e      	cmp	r6, r3
 800e9a2:	f77f af0b 	ble.w	800e7bc <__ieee754_pow+0x794>
 800e9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <__ieee754_pow+0xa38>)
 800e9a8:	440b      	add	r3, r1
 800e9aa:	4303      	orrs	r3, r0
 800e9ac:	d00b      	beq.n	800e9c6 <__ieee754_pow+0x99e>
 800e9ae:	a326      	add	r3, pc, #152	; (adr r3, 800ea48 <__ieee754_pow+0xa20>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	ec51 0b18 	vmov	r0, r1, d8
 800e9b8:	f7f1 fe56 	bl	8000668 <__aeabi_dmul>
 800e9bc:	a322      	add	r3, pc, #136	; (adr r3, 800ea48 <__ieee754_pow+0xa20>)
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	f7ff bbca 	b.w	800e15a <__ieee754_pow+0x132>
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	462b      	mov	r3, r5
 800e9ca:	f7f1 fc95 	bl	80002f8 <__aeabi_dsub>
 800e9ce:	4642      	mov	r2, r8
 800e9d0:	464b      	mov	r3, r9
 800e9d2:	f7f2 f8cf 	bl	8000b74 <__aeabi_dcmpge>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	f43f aef0 	beq.w	800e7bc <__ieee754_pow+0x794>
 800e9dc:	e7e7      	b.n	800e9ae <__ieee754_pow+0x986>
 800e9de:	f04f 0a00 	mov.w	sl, #0
 800e9e2:	e717      	b.n	800e814 <__ieee754_pow+0x7ec>
 800e9e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	e7d2      	b.n	800e992 <__ieee754_pow+0x96a>
 800e9ec:	491a      	ldr	r1, [pc, #104]	; (800ea58 <__ieee754_pow+0xa30>)
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	f7ff bb9e 	b.w	800e130 <__ieee754_pow+0x108>
 800e9f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9f8:	f7ff bb9a 	b.w	800e130 <__ieee754_pow+0x108>
 800e9fc:	9000      	str	r0, [sp, #0]
 800e9fe:	f7ff bb76 	b.w	800e0ee <__ieee754_pow+0xc6>
 800ea02:	2100      	movs	r1, #0
 800ea04:	f7ff bb60 	b.w	800e0c8 <__ieee754_pow+0xa0>
 800ea08:	00000000 	.word	0x00000000
 800ea0c:	3fe62e43 	.word	0x3fe62e43
 800ea10:	fefa39ef 	.word	0xfefa39ef
 800ea14:	3fe62e42 	.word	0x3fe62e42
 800ea18:	0ca86c39 	.word	0x0ca86c39
 800ea1c:	be205c61 	.word	0xbe205c61
 800ea20:	72bea4d0 	.word	0x72bea4d0
 800ea24:	3e663769 	.word	0x3e663769
 800ea28:	c5d26bf1 	.word	0xc5d26bf1
 800ea2c:	3ebbbd41 	.word	0x3ebbbd41
 800ea30:	af25de2c 	.word	0xaf25de2c
 800ea34:	3f11566a 	.word	0x3f11566a
 800ea38:	16bebd93 	.word	0x16bebd93
 800ea3c:	3f66c16c 	.word	0x3f66c16c
 800ea40:	5555553e 	.word	0x5555553e
 800ea44:	3fc55555 	.word	0x3fc55555
 800ea48:	c2f8f359 	.word	0xc2f8f359
 800ea4c:	01a56e1f 	.word	0x01a56e1f
 800ea50:	3fe00000 	.word	0x3fe00000
 800ea54:	000fffff 	.word	0x000fffff
 800ea58:	3ff00000 	.word	0x3ff00000
 800ea5c:	4090cbff 	.word	0x4090cbff
 800ea60:	3f6f3400 	.word	0x3f6f3400
 800ea64:	652b82fe 	.word	0x652b82fe
 800ea68:	3c971547 	.word	0x3c971547
 800ea6c:	00000000 	.word	0x00000000

0800ea70 <__ieee754_rem_pio2>:
 800ea70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea74:	ed2d 8b02 	vpush	{d8}
 800ea78:	ec55 4b10 	vmov	r4, r5, d0
 800ea7c:	4bca      	ldr	r3, [pc, #808]	; (800eda8 <__ieee754_rem_pio2+0x338>)
 800ea7e:	b08b      	sub	sp, #44	; 0x2c
 800ea80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ea84:	4598      	cmp	r8, r3
 800ea86:	4682      	mov	sl, r0
 800ea88:	9502      	str	r5, [sp, #8]
 800ea8a:	dc08      	bgt.n	800ea9e <__ieee754_rem_pio2+0x2e>
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	2300      	movs	r3, #0
 800ea90:	ed80 0b00 	vstr	d0, [r0]
 800ea94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ea98:	f04f 0b00 	mov.w	fp, #0
 800ea9c:	e028      	b.n	800eaf0 <__ieee754_rem_pio2+0x80>
 800ea9e:	4bc3      	ldr	r3, [pc, #780]	; (800edac <__ieee754_rem_pio2+0x33c>)
 800eaa0:	4598      	cmp	r8, r3
 800eaa2:	dc78      	bgt.n	800eb96 <__ieee754_rem_pio2+0x126>
 800eaa4:	9b02      	ldr	r3, [sp, #8]
 800eaa6:	4ec2      	ldr	r6, [pc, #776]	; (800edb0 <__ieee754_rem_pio2+0x340>)
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	ee10 0a10 	vmov	r0, s0
 800eaae:	a3b0      	add	r3, pc, #704	; (adr r3, 800ed70 <__ieee754_rem_pio2+0x300>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	4629      	mov	r1, r5
 800eab6:	dd39      	ble.n	800eb2c <__ieee754_rem_pio2+0xbc>
 800eab8:	f7f1 fc1e 	bl	80002f8 <__aeabi_dsub>
 800eabc:	45b0      	cmp	r8, r6
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	d01b      	beq.n	800eafc <__ieee754_rem_pio2+0x8c>
 800eac4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ed78 <__ieee754_rem_pio2+0x308>)
 800eac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaca:	f7f1 fc15 	bl	80002f8 <__aeabi_dsub>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	e9ca 2300 	strd	r2, r3, [sl]
 800ead6:	4620      	mov	r0, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	f7f1 fc0d 	bl	80002f8 <__aeabi_dsub>
 800eade:	a3a6      	add	r3, pc, #664	; (adr r3, 800ed78 <__ieee754_rem_pio2+0x308>)
 800eae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae4:	f7f1 fc08 	bl	80002f8 <__aeabi_dsub>
 800eae8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eaec:	f04f 0b01 	mov.w	fp, #1
 800eaf0:	4658      	mov	r0, fp
 800eaf2:	b00b      	add	sp, #44	; 0x2c
 800eaf4:	ecbd 8b02 	vpop	{d8}
 800eaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x310>)
 800eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb02:	f7f1 fbf9 	bl	80002f8 <__aeabi_dsub>
 800eb06:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x318>)
 800eb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	460d      	mov	r5, r1
 800eb10:	f7f1 fbf2 	bl	80002f8 <__aeabi_dsub>
 800eb14:	4602      	mov	r2, r0
 800eb16:	460b      	mov	r3, r1
 800eb18:	e9ca 2300 	strd	r2, r3, [sl]
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	4629      	mov	r1, r5
 800eb20:	f7f1 fbea 	bl	80002f8 <__aeabi_dsub>
 800eb24:	a398      	add	r3, pc, #608	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x318>)
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	e7db      	b.n	800eae4 <__ieee754_rem_pio2+0x74>
 800eb2c:	f7f1 fbe6 	bl	80002fc <__adddf3>
 800eb30:	45b0      	cmp	r8, r6
 800eb32:	4604      	mov	r4, r0
 800eb34:	460d      	mov	r5, r1
 800eb36:	d016      	beq.n	800eb66 <__ieee754_rem_pio2+0xf6>
 800eb38:	a38f      	add	r3, pc, #572	; (adr r3, 800ed78 <__ieee754_rem_pio2+0x308>)
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f7f1 fbdd 	bl	80002fc <__adddf3>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	e9ca 2300 	strd	r2, r3, [sl]
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	f7f1 fbd3 	bl	80002f8 <__aeabi_dsub>
 800eb52:	a389      	add	r3, pc, #548	; (adr r3, 800ed78 <__ieee754_rem_pio2+0x308>)
 800eb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb58:	f7f1 fbd0 	bl	80002fc <__adddf3>
 800eb5c:	f04f 3bff 	mov.w	fp, #4294967295
 800eb60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb64:	e7c4      	b.n	800eaf0 <__ieee754_rem_pio2+0x80>
 800eb66:	a386      	add	r3, pc, #536	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x310>)
 800eb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6c:	f7f1 fbc6 	bl	80002fc <__adddf3>
 800eb70:	a385      	add	r3, pc, #532	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x318>)
 800eb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb76:	4604      	mov	r4, r0
 800eb78:	460d      	mov	r5, r1
 800eb7a:	f7f1 fbbf 	bl	80002fc <__adddf3>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	e9ca 2300 	strd	r2, r3, [sl]
 800eb86:	4620      	mov	r0, r4
 800eb88:	4629      	mov	r1, r5
 800eb8a:	f7f1 fbb5 	bl	80002f8 <__aeabi_dsub>
 800eb8e:	a37e      	add	r3, pc, #504	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x318>)
 800eb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb94:	e7e0      	b.n	800eb58 <__ieee754_rem_pio2+0xe8>
 800eb96:	4b87      	ldr	r3, [pc, #540]	; (800edb4 <__ieee754_rem_pio2+0x344>)
 800eb98:	4598      	cmp	r8, r3
 800eb9a:	f300 80d9 	bgt.w	800ed50 <__ieee754_rem_pio2+0x2e0>
 800eb9e:	f001 fb5b 	bl	8010258 <fabs>
 800eba2:	ec55 4b10 	vmov	r4, r5, d0
 800eba6:	ee10 0a10 	vmov	r0, s0
 800ebaa:	a379      	add	r3, pc, #484	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x320>)
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	f7f1 fd59 	bl	8000668 <__aeabi_dmul>
 800ebb6:	4b80      	ldr	r3, [pc, #512]	; (800edb8 <__ieee754_rem_pio2+0x348>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f7f1 fb9f 	bl	80002fc <__adddf3>
 800ebbe:	f7f2 f803 	bl	8000bc8 <__aeabi_d2iz>
 800ebc2:	4683      	mov	fp, r0
 800ebc4:	f7f1 fce6 	bl	8000594 <__aeabi_i2d>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	ec43 2b18 	vmov	d8, r2, r3
 800ebd0:	a367      	add	r3, pc, #412	; (adr r3, 800ed70 <__ieee754_rem_pio2+0x300>)
 800ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd6:	f7f1 fd47 	bl	8000668 <__aeabi_dmul>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	460b      	mov	r3, r1
 800ebde:	4620      	mov	r0, r4
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	f7f1 fb89 	bl	80002f8 <__aeabi_dsub>
 800ebe6:	a364      	add	r3, pc, #400	; (adr r3, 800ed78 <__ieee754_rem_pio2+0x308>)
 800ebe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebec:	4606      	mov	r6, r0
 800ebee:	460f      	mov	r7, r1
 800ebf0:	ec51 0b18 	vmov	r0, r1, d8
 800ebf4:	f7f1 fd38 	bl	8000668 <__aeabi_dmul>
 800ebf8:	f1bb 0f1f 	cmp.w	fp, #31
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	460d      	mov	r5, r1
 800ec00:	dc0d      	bgt.n	800ec1e <__ieee754_rem_pio2+0x1ae>
 800ec02:	4b6e      	ldr	r3, [pc, #440]	; (800edbc <__ieee754_rem_pio2+0x34c>)
 800ec04:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ec08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec0c:	4543      	cmp	r3, r8
 800ec0e:	d006      	beq.n	800ec1e <__ieee754_rem_pio2+0x1ae>
 800ec10:	4622      	mov	r2, r4
 800ec12:	462b      	mov	r3, r5
 800ec14:	4630      	mov	r0, r6
 800ec16:	4639      	mov	r1, r7
 800ec18:	f7f1 fb6e 	bl	80002f8 <__aeabi_dsub>
 800ec1c:	e00f      	b.n	800ec3e <__ieee754_rem_pio2+0x1ce>
 800ec1e:	462b      	mov	r3, r5
 800ec20:	4622      	mov	r2, r4
 800ec22:	4630      	mov	r0, r6
 800ec24:	4639      	mov	r1, r7
 800ec26:	f7f1 fb67 	bl	80002f8 <__aeabi_dsub>
 800ec2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ec2e:	9303      	str	r3, [sp, #12]
 800ec30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec34:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ec38:	f1b8 0f10 	cmp.w	r8, #16
 800ec3c:	dc02      	bgt.n	800ec44 <__ieee754_rem_pio2+0x1d4>
 800ec3e:	e9ca 0100 	strd	r0, r1, [sl]
 800ec42:	e039      	b.n	800ecb8 <__ieee754_rem_pio2+0x248>
 800ec44:	a34e      	add	r3, pc, #312	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x310>)
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	ec51 0b18 	vmov	r0, r1, d8
 800ec4e:	f7f1 fd0b 	bl	8000668 <__aeabi_dmul>
 800ec52:	4604      	mov	r4, r0
 800ec54:	460d      	mov	r5, r1
 800ec56:	4602      	mov	r2, r0
 800ec58:	460b      	mov	r3, r1
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	4639      	mov	r1, r7
 800ec5e:	f7f1 fb4b 	bl	80002f8 <__aeabi_dsub>
 800ec62:	4602      	mov	r2, r0
 800ec64:	460b      	mov	r3, r1
 800ec66:	4680      	mov	r8, r0
 800ec68:	4689      	mov	r9, r1
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	4639      	mov	r1, r7
 800ec6e:	f7f1 fb43 	bl	80002f8 <__aeabi_dsub>
 800ec72:	4622      	mov	r2, r4
 800ec74:	462b      	mov	r3, r5
 800ec76:	f7f1 fb3f 	bl	80002f8 <__aeabi_dsub>
 800ec7a:	a343      	add	r3, pc, #268	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x318>)
 800ec7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec80:	4604      	mov	r4, r0
 800ec82:	460d      	mov	r5, r1
 800ec84:	ec51 0b18 	vmov	r0, r1, d8
 800ec88:	f7f1 fcee 	bl	8000668 <__aeabi_dmul>
 800ec8c:	4622      	mov	r2, r4
 800ec8e:	462b      	mov	r3, r5
 800ec90:	f7f1 fb32 	bl	80002f8 <__aeabi_dsub>
 800ec94:	4602      	mov	r2, r0
 800ec96:	460b      	mov	r3, r1
 800ec98:	4604      	mov	r4, r0
 800ec9a:	460d      	mov	r5, r1
 800ec9c:	4640      	mov	r0, r8
 800ec9e:	4649      	mov	r1, r9
 800eca0:	f7f1 fb2a 	bl	80002f8 <__aeabi_dsub>
 800eca4:	9a03      	ldr	r2, [sp, #12]
 800eca6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	2b31      	cmp	r3, #49	; 0x31
 800ecae:	dc24      	bgt.n	800ecfa <__ieee754_rem_pio2+0x28a>
 800ecb0:	e9ca 0100 	strd	r0, r1, [sl]
 800ecb4:	4646      	mov	r6, r8
 800ecb6:	464f      	mov	r7, r9
 800ecb8:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	4642      	mov	r2, r8
 800ecc0:	464b      	mov	r3, r9
 800ecc2:	4639      	mov	r1, r7
 800ecc4:	f7f1 fb18 	bl	80002f8 <__aeabi_dsub>
 800ecc8:	462b      	mov	r3, r5
 800ecca:	4622      	mov	r2, r4
 800eccc:	f7f1 fb14 	bl	80002f8 <__aeabi_dsub>
 800ecd0:	9b02      	ldr	r3, [sp, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ecd8:	f6bf af0a 	bge.w	800eaf0 <__ieee754_rem_pio2+0x80>
 800ecdc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ece0:	f8ca 3004 	str.w	r3, [sl, #4]
 800ece4:	f8ca 8000 	str.w	r8, [sl]
 800ece8:	f8ca 0008 	str.w	r0, [sl, #8]
 800ecec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecf0:	f8ca 300c 	str.w	r3, [sl, #12]
 800ecf4:	f1cb 0b00 	rsb	fp, fp, #0
 800ecf8:	e6fa      	b.n	800eaf0 <__ieee754_rem_pio2+0x80>
 800ecfa:	a327      	add	r3, pc, #156	; (adr r3, 800ed98 <__ieee754_rem_pio2+0x328>)
 800ecfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed00:	ec51 0b18 	vmov	r0, r1, d8
 800ed04:	f7f1 fcb0 	bl	8000668 <__aeabi_dmul>
 800ed08:	4604      	mov	r4, r0
 800ed0a:	460d      	mov	r5, r1
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4640      	mov	r0, r8
 800ed12:	4649      	mov	r1, r9
 800ed14:	f7f1 faf0 	bl	80002f8 <__aeabi_dsub>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	460f      	mov	r7, r1
 800ed20:	4640      	mov	r0, r8
 800ed22:	4649      	mov	r1, r9
 800ed24:	f7f1 fae8 	bl	80002f8 <__aeabi_dsub>
 800ed28:	4622      	mov	r2, r4
 800ed2a:	462b      	mov	r3, r5
 800ed2c:	f7f1 fae4 	bl	80002f8 <__aeabi_dsub>
 800ed30:	a31b      	add	r3, pc, #108	; (adr r3, 800eda0 <__ieee754_rem_pio2+0x330>)
 800ed32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed36:	4604      	mov	r4, r0
 800ed38:	460d      	mov	r5, r1
 800ed3a:	ec51 0b18 	vmov	r0, r1, d8
 800ed3e:	f7f1 fc93 	bl	8000668 <__aeabi_dmul>
 800ed42:	4622      	mov	r2, r4
 800ed44:	462b      	mov	r3, r5
 800ed46:	f7f1 fad7 	bl	80002f8 <__aeabi_dsub>
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	460d      	mov	r5, r1
 800ed4e:	e75f      	b.n	800ec10 <__ieee754_rem_pio2+0x1a0>
 800ed50:	4b1b      	ldr	r3, [pc, #108]	; (800edc0 <__ieee754_rem_pio2+0x350>)
 800ed52:	4598      	cmp	r8, r3
 800ed54:	dd36      	ble.n	800edc4 <__ieee754_rem_pio2+0x354>
 800ed56:	ee10 2a10 	vmov	r2, s0
 800ed5a:	462b      	mov	r3, r5
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	4629      	mov	r1, r5
 800ed60:	f7f1 faca 	bl	80002f8 <__aeabi_dsub>
 800ed64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed68:	e9ca 0100 	strd	r0, r1, [sl]
 800ed6c:	e694      	b.n	800ea98 <__ieee754_rem_pio2+0x28>
 800ed6e:	bf00      	nop
 800ed70:	54400000 	.word	0x54400000
 800ed74:	3ff921fb 	.word	0x3ff921fb
 800ed78:	1a626331 	.word	0x1a626331
 800ed7c:	3dd0b461 	.word	0x3dd0b461
 800ed80:	1a600000 	.word	0x1a600000
 800ed84:	3dd0b461 	.word	0x3dd0b461
 800ed88:	2e037073 	.word	0x2e037073
 800ed8c:	3ba3198a 	.word	0x3ba3198a
 800ed90:	6dc9c883 	.word	0x6dc9c883
 800ed94:	3fe45f30 	.word	0x3fe45f30
 800ed98:	2e000000 	.word	0x2e000000
 800ed9c:	3ba3198a 	.word	0x3ba3198a
 800eda0:	252049c1 	.word	0x252049c1
 800eda4:	397b839a 	.word	0x397b839a
 800eda8:	3fe921fb 	.word	0x3fe921fb
 800edac:	4002d97b 	.word	0x4002d97b
 800edb0:	3ff921fb 	.word	0x3ff921fb
 800edb4:	413921fb 	.word	0x413921fb
 800edb8:	3fe00000 	.word	0x3fe00000
 800edbc:	08013450 	.word	0x08013450
 800edc0:	7fefffff 	.word	0x7fefffff
 800edc4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800edc8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800edcc:	ee10 0a10 	vmov	r0, s0
 800edd0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800edd4:	ee10 6a10 	vmov	r6, s0
 800edd8:	460f      	mov	r7, r1
 800edda:	f7f1 fef5 	bl	8000bc8 <__aeabi_d2iz>
 800edde:	f7f1 fbd9 	bl	8000594 <__aeabi_i2d>
 800ede2:	4602      	mov	r2, r0
 800ede4:	460b      	mov	r3, r1
 800ede6:	4630      	mov	r0, r6
 800ede8:	4639      	mov	r1, r7
 800edea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800edee:	f7f1 fa83 	bl	80002f8 <__aeabi_dsub>
 800edf2:	4b22      	ldr	r3, [pc, #136]	; (800ee7c <__ieee754_rem_pio2+0x40c>)
 800edf4:	2200      	movs	r2, #0
 800edf6:	f7f1 fc37 	bl	8000668 <__aeabi_dmul>
 800edfa:	460f      	mov	r7, r1
 800edfc:	4606      	mov	r6, r0
 800edfe:	f7f1 fee3 	bl	8000bc8 <__aeabi_d2iz>
 800ee02:	f7f1 fbc7 	bl	8000594 <__aeabi_i2d>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ee12:	f7f1 fa71 	bl	80002f8 <__aeabi_dsub>
 800ee16:	4b19      	ldr	r3, [pc, #100]	; (800ee7c <__ieee754_rem_pio2+0x40c>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f7f1 fc25 	bl	8000668 <__aeabi_dmul>
 800ee1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee22:	ad04      	add	r5, sp, #16
 800ee24:	f04f 0803 	mov.w	r8, #3
 800ee28:	46a9      	mov	r9, r5
 800ee2a:	2600      	movs	r6, #0
 800ee2c:	2700      	movs	r7, #0
 800ee2e:	4632      	mov	r2, r6
 800ee30:	463b      	mov	r3, r7
 800ee32:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ee36:	46c3      	mov	fp, r8
 800ee38:	3d08      	subs	r5, #8
 800ee3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee3e:	f7f1 fe7b 	bl	8000b38 <__aeabi_dcmpeq>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d1f3      	bne.n	800ee2e <__ieee754_rem_pio2+0x3be>
 800ee46:	4b0e      	ldr	r3, [pc, #56]	; (800ee80 <__ieee754_rem_pio2+0x410>)
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	2302      	movs	r3, #2
 800ee4c:	9300      	str	r3, [sp, #0]
 800ee4e:	4622      	mov	r2, r4
 800ee50:	465b      	mov	r3, fp
 800ee52:	4651      	mov	r1, sl
 800ee54:	4648      	mov	r0, r9
 800ee56:	f000 facf 	bl	800f3f8 <__kernel_rem_pio2>
 800ee5a:	9b02      	ldr	r3, [sp, #8]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	4683      	mov	fp, r0
 800ee60:	f6bf ae46 	bge.w	800eaf0 <__ieee754_rem_pio2+0x80>
 800ee64:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ee68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee6c:	f8ca 3004 	str.w	r3, [sl, #4]
 800ee70:	f8da 300c 	ldr.w	r3, [sl, #12]
 800ee74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee78:	e73a      	b.n	800ecf0 <__ieee754_rem_pio2+0x280>
 800ee7a:	bf00      	nop
 800ee7c:	41700000 	.word	0x41700000
 800ee80:	080134d0 	.word	0x080134d0

0800ee84 <__ieee754_sqrt>:
 800ee84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee88:	ec55 4b10 	vmov	r4, r5, d0
 800ee8c:	4e56      	ldr	r6, [pc, #344]	; (800efe8 <__ieee754_sqrt+0x164>)
 800ee8e:	43ae      	bics	r6, r5
 800ee90:	ee10 0a10 	vmov	r0, s0
 800ee94:	ee10 3a10 	vmov	r3, s0
 800ee98:	4629      	mov	r1, r5
 800ee9a:	462a      	mov	r2, r5
 800ee9c:	d110      	bne.n	800eec0 <__ieee754_sqrt+0x3c>
 800ee9e:	ee10 2a10 	vmov	r2, s0
 800eea2:	462b      	mov	r3, r5
 800eea4:	f7f1 fbe0 	bl	8000668 <__aeabi_dmul>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4620      	mov	r0, r4
 800eeae:	4629      	mov	r1, r5
 800eeb0:	f7f1 fa24 	bl	80002fc <__adddf3>
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	460d      	mov	r5, r1
 800eeb8:	ec45 4b10 	vmov	d0, r4, r5
 800eebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec0:	2d00      	cmp	r5, #0
 800eec2:	dc10      	bgt.n	800eee6 <__ieee754_sqrt+0x62>
 800eec4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eec8:	4330      	orrs	r0, r6
 800eeca:	d0f5      	beq.n	800eeb8 <__ieee754_sqrt+0x34>
 800eecc:	b15d      	cbz	r5, 800eee6 <__ieee754_sqrt+0x62>
 800eece:	ee10 2a10 	vmov	r2, s0
 800eed2:	462b      	mov	r3, r5
 800eed4:	ee10 0a10 	vmov	r0, s0
 800eed8:	f7f1 fa0e 	bl	80002f8 <__aeabi_dsub>
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	f7f1 fcec 	bl	80008bc <__aeabi_ddiv>
 800eee4:	e7e6      	b.n	800eeb4 <__ieee754_sqrt+0x30>
 800eee6:	1509      	asrs	r1, r1, #20
 800eee8:	d076      	beq.n	800efd8 <__ieee754_sqrt+0x154>
 800eeea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800eeee:	07ce      	lsls	r6, r1, #31
 800eef0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800eef4:	bf5e      	ittt	pl
 800eef6:	0fda      	lsrpl	r2, r3, #31
 800eef8:	005b      	lslpl	r3, r3, #1
 800eefa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800eefe:	0fda      	lsrs	r2, r3, #31
 800ef00:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ef04:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ef08:	2000      	movs	r0, #0
 800ef0a:	106d      	asrs	r5, r5, #1
 800ef0c:	005b      	lsls	r3, r3, #1
 800ef0e:	f04f 0e16 	mov.w	lr, #22
 800ef12:	4684      	mov	ip, r0
 800ef14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef18:	eb0c 0401 	add.w	r4, ip, r1
 800ef1c:	4294      	cmp	r4, r2
 800ef1e:	bfde      	ittt	le
 800ef20:	1b12      	suble	r2, r2, r4
 800ef22:	eb04 0c01 	addle.w	ip, r4, r1
 800ef26:	1840      	addle	r0, r0, r1
 800ef28:	0052      	lsls	r2, r2, #1
 800ef2a:	f1be 0e01 	subs.w	lr, lr, #1
 800ef2e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ef32:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ef36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef3a:	d1ed      	bne.n	800ef18 <__ieee754_sqrt+0x94>
 800ef3c:	4671      	mov	r1, lr
 800ef3e:	2720      	movs	r7, #32
 800ef40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ef44:	4562      	cmp	r2, ip
 800ef46:	eb04 060e 	add.w	r6, r4, lr
 800ef4a:	dc02      	bgt.n	800ef52 <__ieee754_sqrt+0xce>
 800ef4c:	d113      	bne.n	800ef76 <__ieee754_sqrt+0xf2>
 800ef4e:	429e      	cmp	r6, r3
 800ef50:	d811      	bhi.n	800ef76 <__ieee754_sqrt+0xf2>
 800ef52:	2e00      	cmp	r6, #0
 800ef54:	eb06 0e04 	add.w	lr, r6, r4
 800ef58:	da43      	bge.n	800efe2 <__ieee754_sqrt+0x15e>
 800ef5a:	f1be 0f00 	cmp.w	lr, #0
 800ef5e:	db40      	blt.n	800efe2 <__ieee754_sqrt+0x15e>
 800ef60:	f10c 0801 	add.w	r8, ip, #1
 800ef64:	eba2 020c 	sub.w	r2, r2, ip
 800ef68:	429e      	cmp	r6, r3
 800ef6a:	bf88      	it	hi
 800ef6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ef70:	1b9b      	subs	r3, r3, r6
 800ef72:	4421      	add	r1, r4
 800ef74:	46c4      	mov	ip, r8
 800ef76:	0052      	lsls	r2, r2, #1
 800ef78:	3f01      	subs	r7, #1
 800ef7a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ef7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ef82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ef86:	d1dd      	bne.n	800ef44 <__ieee754_sqrt+0xc0>
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	d006      	beq.n	800ef9a <__ieee754_sqrt+0x116>
 800ef8c:	1c4c      	adds	r4, r1, #1
 800ef8e:	bf13      	iteet	ne
 800ef90:	3101      	addne	r1, #1
 800ef92:	3001      	addeq	r0, #1
 800ef94:	4639      	moveq	r1, r7
 800ef96:	f021 0101 	bicne.w	r1, r1, #1
 800ef9a:	1043      	asrs	r3, r0, #1
 800ef9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800efa0:	0849      	lsrs	r1, r1, #1
 800efa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800efa6:	07c2      	lsls	r2, r0, #31
 800efa8:	bf48      	it	mi
 800efaa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800efae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800efb2:	460c      	mov	r4, r1
 800efb4:	463d      	mov	r5, r7
 800efb6:	e77f      	b.n	800eeb8 <__ieee754_sqrt+0x34>
 800efb8:	0ada      	lsrs	r2, r3, #11
 800efba:	3815      	subs	r0, #21
 800efbc:	055b      	lsls	r3, r3, #21
 800efbe:	2a00      	cmp	r2, #0
 800efc0:	d0fa      	beq.n	800efb8 <__ieee754_sqrt+0x134>
 800efc2:	02d7      	lsls	r7, r2, #11
 800efc4:	d50a      	bpl.n	800efdc <__ieee754_sqrt+0x158>
 800efc6:	f1c1 0420 	rsb	r4, r1, #32
 800efca:	fa23 f404 	lsr.w	r4, r3, r4
 800efce:	1e4d      	subs	r5, r1, #1
 800efd0:	408b      	lsls	r3, r1
 800efd2:	4322      	orrs	r2, r4
 800efd4:	1b41      	subs	r1, r0, r5
 800efd6:	e788      	b.n	800eeea <__ieee754_sqrt+0x66>
 800efd8:	4608      	mov	r0, r1
 800efda:	e7f0      	b.n	800efbe <__ieee754_sqrt+0x13a>
 800efdc:	0052      	lsls	r2, r2, #1
 800efde:	3101      	adds	r1, #1
 800efe0:	e7ef      	b.n	800efc2 <__ieee754_sqrt+0x13e>
 800efe2:	46e0      	mov	r8, ip
 800efe4:	e7be      	b.n	800ef64 <__ieee754_sqrt+0xe0>
 800efe6:	bf00      	nop
 800efe8:	7ff00000 	.word	0x7ff00000

0800efec <__ieee754_rem_pio2f>:
 800efec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efee:	ee10 6a10 	vmov	r6, s0
 800eff2:	4b8e      	ldr	r3, [pc, #568]	; (800f22c <__ieee754_rem_pio2f+0x240>)
 800eff4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800eff8:	429d      	cmp	r5, r3
 800effa:	b087      	sub	sp, #28
 800effc:	eef0 7a40 	vmov.f32	s15, s0
 800f000:	4604      	mov	r4, r0
 800f002:	dc05      	bgt.n	800f010 <__ieee754_rem_pio2f+0x24>
 800f004:	2300      	movs	r3, #0
 800f006:	ed80 0a00 	vstr	s0, [r0]
 800f00a:	6043      	str	r3, [r0, #4]
 800f00c:	2000      	movs	r0, #0
 800f00e:	e01a      	b.n	800f046 <__ieee754_rem_pio2f+0x5a>
 800f010:	4b87      	ldr	r3, [pc, #540]	; (800f230 <__ieee754_rem_pio2f+0x244>)
 800f012:	429d      	cmp	r5, r3
 800f014:	dc46      	bgt.n	800f0a4 <__ieee754_rem_pio2f+0xb8>
 800f016:	2e00      	cmp	r6, #0
 800f018:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800f234 <__ieee754_rem_pio2f+0x248>
 800f01c:	4b86      	ldr	r3, [pc, #536]	; (800f238 <__ieee754_rem_pio2f+0x24c>)
 800f01e:	f025 050f 	bic.w	r5, r5, #15
 800f022:	dd1f      	ble.n	800f064 <__ieee754_rem_pio2f+0x78>
 800f024:	429d      	cmp	r5, r3
 800f026:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f02a:	d00e      	beq.n	800f04a <__ieee754_rem_pio2f+0x5e>
 800f02c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800f23c <__ieee754_rem_pio2f+0x250>
 800f030:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f034:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f038:	ed80 0a00 	vstr	s0, [r0]
 800f03c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f040:	2001      	movs	r0, #1
 800f042:	edc4 7a01 	vstr	s15, [r4, #4]
 800f046:	b007      	add	sp, #28
 800f048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f04a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800f240 <__ieee754_rem_pio2f+0x254>
 800f04e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f244 <__ieee754_rem_pio2f+0x258>
 800f052:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f056:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f05a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f05e:	edc0 6a00 	vstr	s13, [r0]
 800f062:	e7eb      	b.n	800f03c <__ieee754_rem_pio2f+0x50>
 800f064:	429d      	cmp	r5, r3
 800f066:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f06a:	d00e      	beq.n	800f08a <__ieee754_rem_pio2f+0x9e>
 800f06c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f23c <__ieee754_rem_pio2f+0x250>
 800f070:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f074:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f078:	ed80 0a00 	vstr	s0, [r0]
 800f07c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f080:	f04f 30ff 	mov.w	r0, #4294967295
 800f084:	edc4 7a01 	vstr	s15, [r4, #4]
 800f088:	e7dd      	b.n	800f046 <__ieee754_rem_pio2f+0x5a>
 800f08a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800f240 <__ieee754_rem_pio2f+0x254>
 800f08e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800f244 <__ieee754_rem_pio2f+0x258>
 800f092:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f096:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f09a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f09e:	edc0 6a00 	vstr	s13, [r0]
 800f0a2:	e7eb      	b.n	800f07c <__ieee754_rem_pio2f+0x90>
 800f0a4:	4b68      	ldr	r3, [pc, #416]	; (800f248 <__ieee754_rem_pio2f+0x25c>)
 800f0a6:	429d      	cmp	r5, r3
 800f0a8:	dc72      	bgt.n	800f190 <__ieee754_rem_pio2f+0x1a4>
 800f0aa:	f001 fa7b 	bl	80105a4 <fabsf>
 800f0ae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f24c <__ieee754_rem_pio2f+0x260>
 800f0b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f0b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f0be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0c2:	ee17 0a90 	vmov	r0, s15
 800f0c6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f234 <__ieee754_rem_pio2f+0x248>
 800f0ca:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f0ce:	281f      	cmp	r0, #31
 800f0d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f23c <__ieee754_rem_pio2f+0x250>
 800f0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0d8:	eeb1 6a47 	vneg.f32	s12, s14
 800f0dc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f0e0:	ee16 2a90 	vmov	r2, s13
 800f0e4:	dc1c      	bgt.n	800f120 <__ieee754_rem_pio2f+0x134>
 800f0e6:	495a      	ldr	r1, [pc, #360]	; (800f250 <__ieee754_rem_pio2f+0x264>)
 800f0e8:	1e47      	subs	r7, r0, #1
 800f0ea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f0ee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f0f2:	428b      	cmp	r3, r1
 800f0f4:	d014      	beq.n	800f120 <__ieee754_rem_pio2f+0x134>
 800f0f6:	6022      	str	r2, [r4, #0]
 800f0f8:	ed94 7a00 	vldr	s14, [r4]
 800f0fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f100:	2e00      	cmp	r6, #0
 800f102:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f106:	ed84 0a01 	vstr	s0, [r4, #4]
 800f10a:	da9c      	bge.n	800f046 <__ieee754_rem_pio2f+0x5a>
 800f10c:	eeb1 7a47 	vneg.f32	s14, s14
 800f110:	eeb1 0a40 	vneg.f32	s0, s0
 800f114:	ed84 7a00 	vstr	s14, [r4]
 800f118:	ed84 0a01 	vstr	s0, [r4, #4]
 800f11c:	4240      	negs	r0, r0
 800f11e:	e792      	b.n	800f046 <__ieee754_rem_pio2f+0x5a>
 800f120:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f124:	15eb      	asrs	r3, r5, #23
 800f126:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f12a:	2d08      	cmp	r5, #8
 800f12c:	dde3      	ble.n	800f0f6 <__ieee754_rem_pio2f+0x10a>
 800f12e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800f240 <__ieee754_rem_pio2f+0x254>
 800f132:	eef0 6a40 	vmov.f32	s13, s0
 800f136:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f13a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f13e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f142:	eddf 7a40 	vldr	s15, [pc, #256]	; 800f244 <__ieee754_rem_pio2f+0x258>
 800f146:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800f14a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800f14e:	eef0 7a40 	vmov.f32	s15, s0
 800f152:	ee15 2a90 	vmov	r2, s11
 800f156:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f15a:	1a5b      	subs	r3, r3, r1
 800f15c:	2b19      	cmp	r3, #25
 800f15e:	dc04      	bgt.n	800f16a <__ieee754_rem_pio2f+0x17e>
 800f160:	edc4 5a00 	vstr	s11, [r4]
 800f164:	eeb0 0a66 	vmov.f32	s0, s13
 800f168:	e7c6      	b.n	800f0f8 <__ieee754_rem_pio2f+0x10c>
 800f16a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f254 <__ieee754_rem_pio2f+0x268>
 800f16e:	eeb0 0a66 	vmov.f32	s0, s13
 800f172:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f176:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f17a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f258 <__ieee754_rem_pio2f+0x26c>
 800f17e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f182:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f186:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f18a:	ed84 7a00 	vstr	s14, [r4]
 800f18e:	e7b3      	b.n	800f0f8 <__ieee754_rem_pio2f+0x10c>
 800f190:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f194:	db06      	blt.n	800f1a4 <__ieee754_rem_pio2f+0x1b8>
 800f196:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f19a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f19e:	edc0 7a00 	vstr	s15, [r0]
 800f1a2:	e733      	b.n	800f00c <__ieee754_rem_pio2f+0x20>
 800f1a4:	15ea      	asrs	r2, r5, #23
 800f1a6:	3a86      	subs	r2, #134	; 0x86
 800f1a8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f1ac:	ee07 3a90 	vmov	s15, r3
 800f1b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f1b4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f25c <__ieee754_rem_pio2f+0x270>
 800f1b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1c0:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f1c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f1c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f1cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f1d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f1d4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f1d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f1dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e4:	edcd 7a05 	vstr	s15, [sp, #20]
 800f1e8:	d11e      	bne.n	800f228 <__ieee754_rem_pio2f+0x23c>
 800f1ea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f2:	bf14      	ite	ne
 800f1f4:	2302      	movne	r3, #2
 800f1f6:	2301      	moveq	r3, #1
 800f1f8:	4919      	ldr	r1, [pc, #100]	; (800f260 <__ieee754_rem_pio2f+0x274>)
 800f1fa:	9101      	str	r1, [sp, #4]
 800f1fc:	2102      	movs	r1, #2
 800f1fe:	9100      	str	r1, [sp, #0]
 800f200:	a803      	add	r0, sp, #12
 800f202:	4621      	mov	r1, r4
 800f204:	f000 fd56 	bl	800fcb4 <__kernel_rem_pio2f>
 800f208:	2e00      	cmp	r6, #0
 800f20a:	f6bf af1c 	bge.w	800f046 <__ieee754_rem_pio2f+0x5a>
 800f20e:	edd4 7a00 	vldr	s15, [r4]
 800f212:	eef1 7a67 	vneg.f32	s15, s15
 800f216:	edc4 7a00 	vstr	s15, [r4]
 800f21a:	edd4 7a01 	vldr	s15, [r4, #4]
 800f21e:	eef1 7a67 	vneg.f32	s15, s15
 800f222:	edc4 7a01 	vstr	s15, [r4, #4]
 800f226:	e779      	b.n	800f11c <__ieee754_rem_pio2f+0x130>
 800f228:	2303      	movs	r3, #3
 800f22a:	e7e5      	b.n	800f1f8 <__ieee754_rem_pio2f+0x20c>
 800f22c:	3f490fd8 	.word	0x3f490fd8
 800f230:	4016cbe3 	.word	0x4016cbe3
 800f234:	3fc90f80 	.word	0x3fc90f80
 800f238:	3fc90fd0 	.word	0x3fc90fd0
 800f23c:	37354443 	.word	0x37354443
 800f240:	37354400 	.word	0x37354400
 800f244:	2e85a308 	.word	0x2e85a308
 800f248:	43490f80 	.word	0x43490f80
 800f24c:	3f22f984 	.word	0x3f22f984
 800f250:	080135d8 	.word	0x080135d8
 800f254:	2e85a300 	.word	0x2e85a300
 800f258:	248d3132 	.word	0x248d3132
 800f25c:	43800000 	.word	0x43800000
 800f260:	08013658 	.word	0x08013658
 800f264:	00000000 	.word	0x00000000

0800f268 <__kernel_cos>:
 800f268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f26c:	ec57 6b10 	vmov	r6, r7, d0
 800f270:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f274:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f278:	ed8d 1b00 	vstr	d1, [sp]
 800f27c:	da07      	bge.n	800f28e <__kernel_cos+0x26>
 800f27e:	ee10 0a10 	vmov	r0, s0
 800f282:	4639      	mov	r1, r7
 800f284:	f7f1 fca0 	bl	8000bc8 <__aeabi_d2iz>
 800f288:	2800      	cmp	r0, #0
 800f28a:	f000 8088 	beq.w	800f39e <__kernel_cos+0x136>
 800f28e:	4632      	mov	r2, r6
 800f290:	463b      	mov	r3, r7
 800f292:	4630      	mov	r0, r6
 800f294:	4639      	mov	r1, r7
 800f296:	f7f1 f9e7 	bl	8000668 <__aeabi_dmul>
 800f29a:	4b51      	ldr	r3, [pc, #324]	; (800f3e0 <__kernel_cos+0x178>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	4604      	mov	r4, r0
 800f2a0:	460d      	mov	r5, r1
 800f2a2:	f7f1 f9e1 	bl	8000668 <__aeabi_dmul>
 800f2a6:	a340      	add	r3, pc, #256	; (adr r3, 800f3a8 <__kernel_cos+0x140>)
 800f2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ac:	4682      	mov	sl, r0
 800f2ae:	468b      	mov	fp, r1
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	f7f1 f9d8 	bl	8000668 <__aeabi_dmul>
 800f2b8:	a33d      	add	r3, pc, #244	; (adr r3, 800f3b0 <__kernel_cos+0x148>)
 800f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2be:	f7f1 f81d 	bl	80002fc <__adddf3>
 800f2c2:	4622      	mov	r2, r4
 800f2c4:	462b      	mov	r3, r5
 800f2c6:	f7f1 f9cf 	bl	8000668 <__aeabi_dmul>
 800f2ca:	a33b      	add	r3, pc, #236	; (adr r3, 800f3b8 <__kernel_cos+0x150>)
 800f2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d0:	f7f1 f812 	bl	80002f8 <__aeabi_dsub>
 800f2d4:	4622      	mov	r2, r4
 800f2d6:	462b      	mov	r3, r5
 800f2d8:	f7f1 f9c6 	bl	8000668 <__aeabi_dmul>
 800f2dc:	a338      	add	r3, pc, #224	; (adr r3, 800f3c0 <__kernel_cos+0x158>)
 800f2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e2:	f7f1 f80b 	bl	80002fc <__adddf3>
 800f2e6:	4622      	mov	r2, r4
 800f2e8:	462b      	mov	r3, r5
 800f2ea:	f7f1 f9bd 	bl	8000668 <__aeabi_dmul>
 800f2ee:	a336      	add	r3, pc, #216	; (adr r3, 800f3c8 <__kernel_cos+0x160>)
 800f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f4:	f7f1 f800 	bl	80002f8 <__aeabi_dsub>
 800f2f8:	4622      	mov	r2, r4
 800f2fa:	462b      	mov	r3, r5
 800f2fc:	f7f1 f9b4 	bl	8000668 <__aeabi_dmul>
 800f300:	a333      	add	r3, pc, #204	; (adr r3, 800f3d0 <__kernel_cos+0x168>)
 800f302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f306:	f7f0 fff9 	bl	80002fc <__adddf3>
 800f30a:	4622      	mov	r2, r4
 800f30c:	462b      	mov	r3, r5
 800f30e:	f7f1 f9ab 	bl	8000668 <__aeabi_dmul>
 800f312:	4622      	mov	r2, r4
 800f314:	462b      	mov	r3, r5
 800f316:	f7f1 f9a7 	bl	8000668 <__aeabi_dmul>
 800f31a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f31e:	4604      	mov	r4, r0
 800f320:	460d      	mov	r5, r1
 800f322:	4630      	mov	r0, r6
 800f324:	4639      	mov	r1, r7
 800f326:	f7f1 f99f 	bl	8000668 <__aeabi_dmul>
 800f32a:	460b      	mov	r3, r1
 800f32c:	4602      	mov	r2, r0
 800f32e:	4629      	mov	r1, r5
 800f330:	4620      	mov	r0, r4
 800f332:	f7f0 ffe1 	bl	80002f8 <__aeabi_dsub>
 800f336:	4b2b      	ldr	r3, [pc, #172]	; (800f3e4 <__kernel_cos+0x17c>)
 800f338:	4598      	cmp	r8, r3
 800f33a:	4606      	mov	r6, r0
 800f33c:	460f      	mov	r7, r1
 800f33e:	dc10      	bgt.n	800f362 <__kernel_cos+0xfa>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	4650      	mov	r0, sl
 800f346:	4659      	mov	r1, fp
 800f348:	f7f0 ffd6 	bl	80002f8 <__aeabi_dsub>
 800f34c:	460b      	mov	r3, r1
 800f34e:	4926      	ldr	r1, [pc, #152]	; (800f3e8 <__kernel_cos+0x180>)
 800f350:	4602      	mov	r2, r0
 800f352:	2000      	movs	r0, #0
 800f354:	f7f0 ffd0 	bl	80002f8 <__aeabi_dsub>
 800f358:	ec41 0b10 	vmov	d0, r0, r1
 800f35c:	b003      	add	sp, #12
 800f35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f362:	4b22      	ldr	r3, [pc, #136]	; (800f3ec <__kernel_cos+0x184>)
 800f364:	4920      	ldr	r1, [pc, #128]	; (800f3e8 <__kernel_cos+0x180>)
 800f366:	4598      	cmp	r8, r3
 800f368:	bfcc      	ite	gt
 800f36a:	4d21      	ldrgt	r5, [pc, #132]	; (800f3f0 <__kernel_cos+0x188>)
 800f36c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f370:	2400      	movs	r4, #0
 800f372:	4622      	mov	r2, r4
 800f374:	462b      	mov	r3, r5
 800f376:	2000      	movs	r0, #0
 800f378:	f7f0 ffbe 	bl	80002f8 <__aeabi_dsub>
 800f37c:	4622      	mov	r2, r4
 800f37e:	4680      	mov	r8, r0
 800f380:	4689      	mov	r9, r1
 800f382:	462b      	mov	r3, r5
 800f384:	4650      	mov	r0, sl
 800f386:	4659      	mov	r1, fp
 800f388:	f7f0 ffb6 	bl	80002f8 <__aeabi_dsub>
 800f38c:	4632      	mov	r2, r6
 800f38e:	463b      	mov	r3, r7
 800f390:	f7f0 ffb2 	bl	80002f8 <__aeabi_dsub>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	4640      	mov	r0, r8
 800f39a:	4649      	mov	r1, r9
 800f39c:	e7da      	b.n	800f354 <__kernel_cos+0xec>
 800f39e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f3d8 <__kernel_cos+0x170>
 800f3a2:	e7db      	b.n	800f35c <__kernel_cos+0xf4>
 800f3a4:	f3af 8000 	nop.w
 800f3a8:	be8838d4 	.word	0xbe8838d4
 800f3ac:	bda8fae9 	.word	0xbda8fae9
 800f3b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f3b4:	3e21ee9e 	.word	0x3e21ee9e
 800f3b8:	809c52ad 	.word	0x809c52ad
 800f3bc:	3e927e4f 	.word	0x3e927e4f
 800f3c0:	19cb1590 	.word	0x19cb1590
 800f3c4:	3efa01a0 	.word	0x3efa01a0
 800f3c8:	16c15177 	.word	0x16c15177
 800f3cc:	3f56c16c 	.word	0x3f56c16c
 800f3d0:	5555554c 	.word	0x5555554c
 800f3d4:	3fa55555 	.word	0x3fa55555
 800f3d8:	00000000 	.word	0x00000000
 800f3dc:	3ff00000 	.word	0x3ff00000
 800f3e0:	3fe00000 	.word	0x3fe00000
 800f3e4:	3fd33332 	.word	0x3fd33332
 800f3e8:	3ff00000 	.word	0x3ff00000
 800f3ec:	3fe90000 	.word	0x3fe90000
 800f3f0:	3fd20000 	.word	0x3fd20000
 800f3f4:	00000000 	.word	0x00000000

0800f3f8 <__kernel_rem_pio2>:
 800f3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3fc:	ed2d 8b02 	vpush	{d8}
 800f400:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f404:	f112 0f14 	cmn.w	r2, #20
 800f408:	9308      	str	r3, [sp, #32]
 800f40a:	9101      	str	r1, [sp, #4]
 800f40c:	4bc6      	ldr	r3, [pc, #792]	; (800f728 <__kernel_rem_pio2+0x330>)
 800f40e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f410:	9009      	str	r0, [sp, #36]	; 0x24
 800f412:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f416:	9304      	str	r3, [sp, #16]
 800f418:	9b08      	ldr	r3, [sp, #32]
 800f41a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f41e:	bfa8      	it	ge
 800f420:	1ed4      	subge	r4, r2, #3
 800f422:	9306      	str	r3, [sp, #24]
 800f424:	bfb2      	itee	lt
 800f426:	2400      	movlt	r4, #0
 800f428:	2318      	movge	r3, #24
 800f42a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f42e:	f06f 0317 	mvn.w	r3, #23
 800f432:	fb04 3303 	mla	r3, r4, r3, r3
 800f436:	eb03 0a02 	add.w	sl, r3, r2
 800f43a:	9b04      	ldr	r3, [sp, #16]
 800f43c:	9a06      	ldr	r2, [sp, #24]
 800f43e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f718 <__kernel_rem_pio2+0x320>
 800f442:	eb03 0802 	add.w	r8, r3, r2
 800f446:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f448:	1aa7      	subs	r7, r4, r2
 800f44a:	ae20      	add	r6, sp, #128	; 0x80
 800f44c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f450:	2500      	movs	r5, #0
 800f452:	4545      	cmp	r5, r8
 800f454:	dd18      	ble.n	800f488 <__kernel_rem_pio2+0x90>
 800f456:	9b08      	ldr	r3, [sp, #32]
 800f458:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f45c:	aa20      	add	r2, sp, #128	; 0x80
 800f45e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800f718 <__kernel_rem_pio2+0x320>
 800f462:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f466:	f1c3 0301 	rsb	r3, r3, #1
 800f46a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f46e:	9307      	str	r3, [sp, #28]
 800f470:	9b07      	ldr	r3, [sp, #28]
 800f472:	9a04      	ldr	r2, [sp, #16]
 800f474:	4443      	add	r3, r8
 800f476:	429a      	cmp	r2, r3
 800f478:	db2f      	blt.n	800f4da <__kernel_rem_pio2+0xe2>
 800f47a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f47e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f482:	462f      	mov	r7, r5
 800f484:	2600      	movs	r6, #0
 800f486:	e01b      	b.n	800f4c0 <__kernel_rem_pio2+0xc8>
 800f488:	42ef      	cmn	r7, r5
 800f48a:	d407      	bmi.n	800f49c <__kernel_rem_pio2+0xa4>
 800f48c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f490:	f7f1 f880 	bl	8000594 <__aeabi_i2d>
 800f494:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f498:	3501      	adds	r5, #1
 800f49a:	e7da      	b.n	800f452 <__kernel_rem_pio2+0x5a>
 800f49c:	ec51 0b18 	vmov	r0, r1, d8
 800f4a0:	e7f8      	b.n	800f494 <__kernel_rem_pio2+0x9c>
 800f4a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4a6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f4aa:	f7f1 f8dd 	bl	8000668 <__aeabi_dmul>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4b6:	f7f0 ff21 	bl	80002fc <__adddf3>
 800f4ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4be:	3601      	adds	r6, #1
 800f4c0:	9b06      	ldr	r3, [sp, #24]
 800f4c2:	429e      	cmp	r6, r3
 800f4c4:	f1a7 0708 	sub.w	r7, r7, #8
 800f4c8:	ddeb      	ble.n	800f4a2 <__kernel_rem_pio2+0xaa>
 800f4ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4ce:	3508      	adds	r5, #8
 800f4d0:	ecab 7b02 	vstmia	fp!, {d7}
 800f4d4:	f108 0801 	add.w	r8, r8, #1
 800f4d8:	e7ca      	b.n	800f470 <__kernel_rem_pio2+0x78>
 800f4da:	9b04      	ldr	r3, [sp, #16]
 800f4dc:	aa0c      	add	r2, sp, #48	; 0x30
 800f4de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4e4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f4e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f4ea:	9c04      	ldr	r4, [sp, #16]
 800f4ec:	930a      	str	r3, [sp, #40]	; 0x28
 800f4ee:	ab98      	add	r3, sp, #608	; 0x260
 800f4f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f4f4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f4f8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800f4fc:	f8cd b008 	str.w	fp, [sp, #8]
 800f500:	4625      	mov	r5, r4
 800f502:	2d00      	cmp	r5, #0
 800f504:	dc78      	bgt.n	800f5f8 <__kernel_rem_pio2+0x200>
 800f506:	ec47 6b10 	vmov	d0, r6, r7
 800f50a:	4650      	mov	r0, sl
 800f50c:	f000 ffc4 	bl	8010498 <scalbn>
 800f510:	ec57 6b10 	vmov	r6, r7, d0
 800f514:	2200      	movs	r2, #0
 800f516:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f51a:	ee10 0a10 	vmov	r0, s0
 800f51e:	4639      	mov	r1, r7
 800f520:	f7f1 f8a2 	bl	8000668 <__aeabi_dmul>
 800f524:	ec41 0b10 	vmov	d0, r0, r1
 800f528:	f000 feaa 	bl	8010280 <floor>
 800f52c:	4b7f      	ldr	r3, [pc, #508]	; (800f72c <__kernel_rem_pio2+0x334>)
 800f52e:	ec51 0b10 	vmov	r0, r1, d0
 800f532:	2200      	movs	r2, #0
 800f534:	f7f1 f898 	bl	8000668 <__aeabi_dmul>
 800f538:	4602      	mov	r2, r0
 800f53a:	460b      	mov	r3, r1
 800f53c:	4630      	mov	r0, r6
 800f53e:	4639      	mov	r1, r7
 800f540:	f7f0 feda 	bl	80002f8 <__aeabi_dsub>
 800f544:	460f      	mov	r7, r1
 800f546:	4606      	mov	r6, r0
 800f548:	f7f1 fb3e 	bl	8000bc8 <__aeabi_d2iz>
 800f54c:	9007      	str	r0, [sp, #28]
 800f54e:	f7f1 f821 	bl	8000594 <__aeabi_i2d>
 800f552:	4602      	mov	r2, r0
 800f554:	460b      	mov	r3, r1
 800f556:	4630      	mov	r0, r6
 800f558:	4639      	mov	r1, r7
 800f55a:	f7f0 fecd 	bl	80002f8 <__aeabi_dsub>
 800f55e:	f1ba 0f00 	cmp.w	sl, #0
 800f562:	4606      	mov	r6, r0
 800f564:	460f      	mov	r7, r1
 800f566:	dd70      	ble.n	800f64a <__kernel_rem_pio2+0x252>
 800f568:	1e62      	subs	r2, r4, #1
 800f56a:	ab0c      	add	r3, sp, #48	; 0x30
 800f56c:	9d07      	ldr	r5, [sp, #28]
 800f56e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f572:	f1ca 0118 	rsb	r1, sl, #24
 800f576:	fa40 f301 	asr.w	r3, r0, r1
 800f57a:	441d      	add	r5, r3
 800f57c:	408b      	lsls	r3, r1
 800f57e:	1ac0      	subs	r0, r0, r3
 800f580:	ab0c      	add	r3, sp, #48	; 0x30
 800f582:	9507      	str	r5, [sp, #28]
 800f584:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f588:	f1ca 0317 	rsb	r3, sl, #23
 800f58c:	fa40 f303 	asr.w	r3, r0, r3
 800f590:	9302      	str	r3, [sp, #8]
 800f592:	9b02      	ldr	r3, [sp, #8]
 800f594:	2b00      	cmp	r3, #0
 800f596:	dd66      	ble.n	800f666 <__kernel_rem_pio2+0x26e>
 800f598:	9b07      	ldr	r3, [sp, #28]
 800f59a:	2200      	movs	r2, #0
 800f59c:	3301      	adds	r3, #1
 800f59e:	9307      	str	r3, [sp, #28]
 800f5a0:	4615      	mov	r5, r2
 800f5a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f5a6:	4294      	cmp	r4, r2
 800f5a8:	f300 8099 	bgt.w	800f6de <__kernel_rem_pio2+0x2e6>
 800f5ac:	f1ba 0f00 	cmp.w	sl, #0
 800f5b0:	dd07      	ble.n	800f5c2 <__kernel_rem_pio2+0x1ca>
 800f5b2:	f1ba 0f01 	cmp.w	sl, #1
 800f5b6:	f000 80a5 	beq.w	800f704 <__kernel_rem_pio2+0x30c>
 800f5ba:	f1ba 0f02 	cmp.w	sl, #2
 800f5be:	f000 80c1 	beq.w	800f744 <__kernel_rem_pio2+0x34c>
 800f5c2:	9b02      	ldr	r3, [sp, #8]
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	d14e      	bne.n	800f666 <__kernel_rem_pio2+0x26e>
 800f5c8:	4632      	mov	r2, r6
 800f5ca:	463b      	mov	r3, r7
 800f5cc:	4958      	ldr	r1, [pc, #352]	; (800f730 <__kernel_rem_pio2+0x338>)
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	f7f0 fe92 	bl	80002f8 <__aeabi_dsub>
 800f5d4:	4606      	mov	r6, r0
 800f5d6:	460f      	mov	r7, r1
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	d044      	beq.n	800f666 <__kernel_rem_pio2+0x26e>
 800f5dc:	4650      	mov	r0, sl
 800f5de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f720 <__kernel_rem_pio2+0x328>
 800f5e2:	f000 ff59 	bl	8010498 <scalbn>
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	4639      	mov	r1, r7
 800f5ea:	ec53 2b10 	vmov	r2, r3, d0
 800f5ee:	f7f0 fe83 	bl	80002f8 <__aeabi_dsub>
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	460f      	mov	r7, r1
 800f5f6:	e036      	b.n	800f666 <__kernel_rem_pio2+0x26e>
 800f5f8:	4b4e      	ldr	r3, [pc, #312]	; (800f734 <__kernel_rem_pio2+0x33c>)
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	4630      	mov	r0, r6
 800f5fe:	4639      	mov	r1, r7
 800f600:	f7f1 f832 	bl	8000668 <__aeabi_dmul>
 800f604:	f7f1 fae0 	bl	8000bc8 <__aeabi_d2iz>
 800f608:	f7f0 ffc4 	bl	8000594 <__aeabi_i2d>
 800f60c:	4b4a      	ldr	r3, [pc, #296]	; (800f738 <__kernel_rem_pio2+0x340>)
 800f60e:	2200      	movs	r2, #0
 800f610:	4680      	mov	r8, r0
 800f612:	4689      	mov	r9, r1
 800f614:	f7f1 f828 	bl	8000668 <__aeabi_dmul>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	4630      	mov	r0, r6
 800f61e:	4639      	mov	r1, r7
 800f620:	f7f0 fe6a 	bl	80002f8 <__aeabi_dsub>
 800f624:	f7f1 fad0 	bl	8000bc8 <__aeabi_d2iz>
 800f628:	9b02      	ldr	r3, [sp, #8]
 800f62a:	f843 0b04 	str.w	r0, [r3], #4
 800f62e:	3d01      	subs	r5, #1
 800f630:	9302      	str	r3, [sp, #8]
 800f632:	ab70      	add	r3, sp, #448	; 0x1c0
 800f634:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	4640      	mov	r0, r8
 800f63e:	4649      	mov	r1, r9
 800f640:	f7f0 fe5c 	bl	80002fc <__adddf3>
 800f644:	4606      	mov	r6, r0
 800f646:	460f      	mov	r7, r1
 800f648:	e75b      	b.n	800f502 <__kernel_rem_pio2+0x10a>
 800f64a:	d105      	bne.n	800f658 <__kernel_rem_pio2+0x260>
 800f64c:	1e63      	subs	r3, r4, #1
 800f64e:	aa0c      	add	r2, sp, #48	; 0x30
 800f650:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f654:	15c3      	asrs	r3, r0, #23
 800f656:	e79b      	b.n	800f590 <__kernel_rem_pio2+0x198>
 800f658:	4b38      	ldr	r3, [pc, #224]	; (800f73c <__kernel_rem_pio2+0x344>)
 800f65a:	2200      	movs	r2, #0
 800f65c:	f7f1 fa8a 	bl	8000b74 <__aeabi_dcmpge>
 800f660:	2800      	cmp	r0, #0
 800f662:	d139      	bne.n	800f6d8 <__kernel_rem_pio2+0x2e0>
 800f664:	9002      	str	r0, [sp, #8]
 800f666:	2200      	movs	r2, #0
 800f668:	2300      	movs	r3, #0
 800f66a:	4630      	mov	r0, r6
 800f66c:	4639      	mov	r1, r7
 800f66e:	f7f1 fa63 	bl	8000b38 <__aeabi_dcmpeq>
 800f672:	2800      	cmp	r0, #0
 800f674:	f000 80b4 	beq.w	800f7e0 <__kernel_rem_pio2+0x3e8>
 800f678:	f104 3bff 	add.w	fp, r4, #4294967295
 800f67c:	465b      	mov	r3, fp
 800f67e:	2200      	movs	r2, #0
 800f680:	9904      	ldr	r1, [sp, #16]
 800f682:	428b      	cmp	r3, r1
 800f684:	da65      	bge.n	800f752 <__kernel_rem_pio2+0x35a>
 800f686:	2a00      	cmp	r2, #0
 800f688:	d07b      	beq.n	800f782 <__kernel_rem_pio2+0x38a>
 800f68a:	ab0c      	add	r3, sp, #48	; 0x30
 800f68c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f690:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800f694:	2b00      	cmp	r3, #0
 800f696:	f000 80a0 	beq.w	800f7da <__kernel_rem_pio2+0x3e2>
 800f69a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800f720 <__kernel_rem_pio2+0x328>
 800f69e:	4650      	mov	r0, sl
 800f6a0:	f000 fefa 	bl	8010498 <scalbn>
 800f6a4:	4f23      	ldr	r7, [pc, #140]	; (800f734 <__kernel_rem_pio2+0x33c>)
 800f6a6:	ec55 4b10 	vmov	r4, r5, d0
 800f6aa:	46d8      	mov	r8, fp
 800f6ac:	2600      	movs	r6, #0
 800f6ae:	f1b8 0f00 	cmp.w	r8, #0
 800f6b2:	f280 80cf 	bge.w	800f854 <__kernel_rem_pio2+0x45c>
 800f6b6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800f718 <__kernel_rem_pio2+0x320>
 800f6ba:	465f      	mov	r7, fp
 800f6bc:	f04f 0800 	mov.w	r8, #0
 800f6c0:	2f00      	cmp	r7, #0
 800f6c2:	f2c0 80fd 	blt.w	800f8c0 <__kernel_rem_pio2+0x4c8>
 800f6c6:	ab70      	add	r3, sp, #448	; 0x1c0
 800f6c8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800f740 <__kernel_rem_pio2+0x348>
 800f6cc:	ec55 4b18 	vmov	r4, r5, d8
 800f6d0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800f6d4:	2600      	movs	r6, #0
 800f6d6:	e0e5      	b.n	800f8a4 <__kernel_rem_pio2+0x4ac>
 800f6d8:	2302      	movs	r3, #2
 800f6da:	9302      	str	r3, [sp, #8]
 800f6dc:	e75c      	b.n	800f598 <__kernel_rem_pio2+0x1a0>
 800f6de:	f8db 3000 	ldr.w	r3, [fp]
 800f6e2:	b955      	cbnz	r5, 800f6fa <__kernel_rem_pio2+0x302>
 800f6e4:	b123      	cbz	r3, 800f6f0 <__kernel_rem_pio2+0x2f8>
 800f6e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f6ea:	f8cb 3000 	str.w	r3, [fp]
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	3201      	adds	r2, #1
 800f6f2:	f10b 0b04 	add.w	fp, fp, #4
 800f6f6:	461d      	mov	r5, r3
 800f6f8:	e755      	b.n	800f5a6 <__kernel_rem_pio2+0x1ae>
 800f6fa:	1acb      	subs	r3, r1, r3
 800f6fc:	f8cb 3000 	str.w	r3, [fp]
 800f700:	462b      	mov	r3, r5
 800f702:	e7f5      	b.n	800f6f0 <__kernel_rem_pio2+0x2f8>
 800f704:	1e62      	subs	r2, r4, #1
 800f706:	ab0c      	add	r3, sp, #48	; 0x30
 800f708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f70c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f710:	a90c      	add	r1, sp, #48	; 0x30
 800f712:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f716:	e754      	b.n	800f5c2 <__kernel_rem_pio2+0x1ca>
	...
 800f724:	3ff00000 	.word	0x3ff00000
 800f728:	080139b0 	.word	0x080139b0
 800f72c:	40200000 	.word	0x40200000
 800f730:	3ff00000 	.word	0x3ff00000
 800f734:	3e700000 	.word	0x3e700000
 800f738:	41700000 	.word	0x41700000
 800f73c:	3fe00000 	.word	0x3fe00000
 800f740:	08013970 	.word	0x08013970
 800f744:	1e62      	subs	r2, r4, #1
 800f746:	ab0c      	add	r3, sp, #48	; 0x30
 800f748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f74c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f750:	e7de      	b.n	800f710 <__kernel_rem_pio2+0x318>
 800f752:	a90c      	add	r1, sp, #48	; 0x30
 800f754:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f758:	3b01      	subs	r3, #1
 800f75a:	430a      	orrs	r2, r1
 800f75c:	e790      	b.n	800f680 <__kernel_rem_pio2+0x288>
 800f75e:	3301      	adds	r3, #1
 800f760:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f764:	2900      	cmp	r1, #0
 800f766:	d0fa      	beq.n	800f75e <__kernel_rem_pio2+0x366>
 800f768:	9a08      	ldr	r2, [sp, #32]
 800f76a:	18e3      	adds	r3, r4, r3
 800f76c:	18a6      	adds	r6, r4, r2
 800f76e:	aa20      	add	r2, sp, #128	; 0x80
 800f770:	1c65      	adds	r5, r4, #1
 800f772:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800f776:	9302      	str	r3, [sp, #8]
 800f778:	9b02      	ldr	r3, [sp, #8]
 800f77a:	42ab      	cmp	r3, r5
 800f77c:	da04      	bge.n	800f788 <__kernel_rem_pio2+0x390>
 800f77e:	461c      	mov	r4, r3
 800f780:	e6b5      	b.n	800f4ee <__kernel_rem_pio2+0xf6>
 800f782:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f784:	2301      	movs	r3, #1
 800f786:	e7eb      	b.n	800f760 <__kernel_rem_pio2+0x368>
 800f788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f78e:	f7f0 ff01 	bl	8000594 <__aeabi_i2d>
 800f792:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f798:	46b3      	mov	fp, r6
 800f79a:	461c      	mov	r4, r3
 800f79c:	2700      	movs	r7, #0
 800f79e:	f04f 0800 	mov.w	r8, #0
 800f7a2:	f04f 0900 	mov.w	r9, #0
 800f7a6:	9b06      	ldr	r3, [sp, #24]
 800f7a8:	429f      	cmp	r7, r3
 800f7aa:	dd06      	ble.n	800f7ba <__kernel_rem_pio2+0x3c2>
 800f7ac:	ab70      	add	r3, sp, #448	; 0x1c0
 800f7ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f7b2:	e9c3 8900 	strd	r8, r9, [r3]
 800f7b6:	3501      	adds	r5, #1
 800f7b8:	e7de      	b.n	800f778 <__kernel_rem_pio2+0x380>
 800f7ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f7be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f7c2:	f7f0 ff51 	bl	8000668 <__aeabi_dmul>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	4640      	mov	r0, r8
 800f7cc:	4649      	mov	r1, r9
 800f7ce:	f7f0 fd95 	bl	80002fc <__adddf3>
 800f7d2:	3701      	adds	r7, #1
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	4689      	mov	r9, r1
 800f7d8:	e7e5      	b.n	800f7a6 <__kernel_rem_pio2+0x3ae>
 800f7da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f7de:	e754      	b.n	800f68a <__kernel_rem_pio2+0x292>
 800f7e0:	ec47 6b10 	vmov	d0, r6, r7
 800f7e4:	f1ca 0000 	rsb	r0, sl, #0
 800f7e8:	f000 fe56 	bl	8010498 <scalbn>
 800f7ec:	ec57 6b10 	vmov	r6, r7, d0
 800f7f0:	4b9f      	ldr	r3, [pc, #636]	; (800fa70 <__kernel_rem_pio2+0x678>)
 800f7f2:	ee10 0a10 	vmov	r0, s0
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	4639      	mov	r1, r7
 800f7fa:	f7f1 f9bb 	bl	8000b74 <__aeabi_dcmpge>
 800f7fe:	b300      	cbz	r0, 800f842 <__kernel_rem_pio2+0x44a>
 800f800:	4b9c      	ldr	r3, [pc, #624]	; (800fa74 <__kernel_rem_pio2+0x67c>)
 800f802:	2200      	movs	r2, #0
 800f804:	4630      	mov	r0, r6
 800f806:	4639      	mov	r1, r7
 800f808:	f7f0 ff2e 	bl	8000668 <__aeabi_dmul>
 800f80c:	f7f1 f9dc 	bl	8000bc8 <__aeabi_d2iz>
 800f810:	4605      	mov	r5, r0
 800f812:	f7f0 febf 	bl	8000594 <__aeabi_i2d>
 800f816:	4b96      	ldr	r3, [pc, #600]	; (800fa70 <__kernel_rem_pio2+0x678>)
 800f818:	2200      	movs	r2, #0
 800f81a:	f7f0 ff25 	bl	8000668 <__aeabi_dmul>
 800f81e:	460b      	mov	r3, r1
 800f820:	4602      	mov	r2, r0
 800f822:	4639      	mov	r1, r7
 800f824:	4630      	mov	r0, r6
 800f826:	f7f0 fd67 	bl	80002f8 <__aeabi_dsub>
 800f82a:	f7f1 f9cd 	bl	8000bc8 <__aeabi_d2iz>
 800f82e:	f104 0b01 	add.w	fp, r4, #1
 800f832:	ab0c      	add	r3, sp, #48	; 0x30
 800f834:	f10a 0a18 	add.w	sl, sl, #24
 800f838:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f83c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800f840:	e72b      	b.n	800f69a <__kernel_rem_pio2+0x2a2>
 800f842:	4630      	mov	r0, r6
 800f844:	4639      	mov	r1, r7
 800f846:	f7f1 f9bf 	bl	8000bc8 <__aeabi_d2iz>
 800f84a:	ab0c      	add	r3, sp, #48	; 0x30
 800f84c:	46a3      	mov	fp, r4
 800f84e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f852:	e722      	b.n	800f69a <__kernel_rem_pio2+0x2a2>
 800f854:	ab70      	add	r3, sp, #448	; 0x1c0
 800f856:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800f85a:	ab0c      	add	r3, sp, #48	; 0x30
 800f85c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f860:	f7f0 fe98 	bl	8000594 <__aeabi_i2d>
 800f864:	4622      	mov	r2, r4
 800f866:	462b      	mov	r3, r5
 800f868:	f7f0 fefe 	bl	8000668 <__aeabi_dmul>
 800f86c:	4632      	mov	r2, r6
 800f86e:	e9c9 0100 	strd	r0, r1, [r9]
 800f872:	463b      	mov	r3, r7
 800f874:	4620      	mov	r0, r4
 800f876:	4629      	mov	r1, r5
 800f878:	f7f0 fef6 	bl	8000668 <__aeabi_dmul>
 800f87c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f880:	4604      	mov	r4, r0
 800f882:	460d      	mov	r5, r1
 800f884:	e713      	b.n	800f6ae <__kernel_rem_pio2+0x2b6>
 800f886:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f88a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f88e:	f7f0 feeb 	bl	8000668 <__aeabi_dmul>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	4620      	mov	r0, r4
 800f898:	4629      	mov	r1, r5
 800f89a:	f7f0 fd2f 	bl	80002fc <__adddf3>
 800f89e:	3601      	adds	r6, #1
 800f8a0:	4604      	mov	r4, r0
 800f8a2:	460d      	mov	r5, r1
 800f8a4:	9b04      	ldr	r3, [sp, #16]
 800f8a6:	429e      	cmp	r6, r3
 800f8a8:	dc01      	bgt.n	800f8ae <__kernel_rem_pio2+0x4b6>
 800f8aa:	45b0      	cmp	r8, r6
 800f8ac:	daeb      	bge.n	800f886 <__kernel_rem_pio2+0x48e>
 800f8ae:	ab48      	add	r3, sp, #288	; 0x120
 800f8b0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f8b4:	e9c3 4500 	strd	r4, r5, [r3]
 800f8b8:	3f01      	subs	r7, #1
 800f8ba:	f108 0801 	add.w	r8, r8, #1
 800f8be:	e6ff      	b.n	800f6c0 <__kernel_rem_pio2+0x2c8>
 800f8c0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f8c2:	2b02      	cmp	r3, #2
 800f8c4:	dc0b      	bgt.n	800f8de <__kernel_rem_pio2+0x4e6>
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	dc6e      	bgt.n	800f9a8 <__kernel_rem_pio2+0x5b0>
 800f8ca:	d045      	beq.n	800f958 <__kernel_rem_pio2+0x560>
 800f8cc:	9b07      	ldr	r3, [sp, #28]
 800f8ce:	f003 0007 	and.w	r0, r3, #7
 800f8d2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f8d6:	ecbd 8b02 	vpop	{d8}
 800f8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8de:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f8e0:	2b03      	cmp	r3, #3
 800f8e2:	d1f3      	bne.n	800f8cc <__kernel_rem_pio2+0x4d4>
 800f8e4:	ab48      	add	r3, sp, #288	; 0x120
 800f8e6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800f8ea:	46d0      	mov	r8, sl
 800f8ec:	46d9      	mov	r9, fp
 800f8ee:	f1b9 0f00 	cmp.w	r9, #0
 800f8f2:	f1a8 0808 	sub.w	r8, r8, #8
 800f8f6:	dc64      	bgt.n	800f9c2 <__kernel_rem_pio2+0x5ca>
 800f8f8:	465c      	mov	r4, fp
 800f8fa:	2c01      	cmp	r4, #1
 800f8fc:	f1aa 0a08 	sub.w	sl, sl, #8
 800f900:	dc7e      	bgt.n	800fa00 <__kernel_rem_pio2+0x608>
 800f902:	2000      	movs	r0, #0
 800f904:	2100      	movs	r1, #0
 800f906:	f1bb 0f01 	cmp.w	fp, #1
 800f90a:	f300 8097 	bgt.w	800fa3c <__kernel_rem_pio2+0x644>
 800f90e:	9b02      	ldr	r3, [sp, #8]
 800f910:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800f914:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f040 8099 	bne.w	800fa50 <__kernel_rem_pio2+0x658>
 800f91e:	9b01      	ldr	r3, [sp, #4]
 800f920:	e9c3 5600 	strd	r5, r6, [r3]
 800f924:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f928:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f92c:	e7ce      	b.n	800f8cc <__kernel_rem_pio2+0x4d4>
 800f92e:	ab48      	add	r3, sp, #288	; 0x120
 800f930:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	f7f0 fce0 	bl	80002fc <__adddf3>
 800f93c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f940:	f1bb 0f00 	cmp.w	fp, #0
 800f944:	daf3      	bge.n	800f92e <__kernel_rem_pio2+0x536>
 800f946:	9b02      	ldr	r3, [sp, #8]
 800f948:	b113      	cbz	r3, 800f950 <__kernel_rem_pio2+0x558>
 800f94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f94e:	4619      	mov	r1, r3
 800f950:	9b01      	ldr	r3, [sp, #4]
 800f952:	e9c3 0100 	strd	r0, r1, [r3]
 800f956:	e7b9      	b.n	800f8cc <__kernel_rem_pio2+0x4d4>
 800f958:	2000      	movs	r0, #0
 800f95a:	2100      	movs	r1, #0
 800f95c:	e7f0      	b.n	800f940 <__kernel_rem_pio2+0x548>
 800f95e:	ab48      	add	r3, sp, #288	; 0x120
 800f960:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	f7f0 fcc8 	bl	80002fc <__adddf3>
 800f96c:	3c01      	subs	r4, #1
 800f96e:	2c00      	cmp	r4, #0
 800f970:	daf5      	bge.n	800f95e <__kernel_rem_pio2+0x566>
 800f972:	9b02      	ldr	r3, [sp, #8]
 800f974:	b1e3      	cbz	r3, 800f9b0 <__kernel_rem_pio2+0x5b8>
 800f976:	4602      	mov	r2, r0
 800f978:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f97c:	9c01      	ldr	r4, [sp, #4]
 800f97e:	e9c4 2300 	strd	r2, r3, [r4]
 800f982:	4602      	mov	r2, r0
 800f984:	460b      	mov	r3, r1
 800f986:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f98a:	f7f0 fcb5 	bl	80002f8 <__aeabi_dsub>
 800f98e:	ad4a      	add	r5, sp, #296	; 0x128
 800f990:	2401      	movs	r4, #1
 800f992:	45a3      	cmp	fp, r4
 800f994:	da0f      	bge.n	800f9b6 <__kernel_rem_pio2+0x5be>
 800f996:	9b02      	ldr	r3, [sp, #8]
 800f998:	b113      	cbz	r3, 800f9a0 <__kernel_rem_pio2+0x5a8>
 800f99a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f99e:	4619      	mov	r1, r3
 800f9a0:	9b01      	ldr	r3, [sp, #4]
 800f9a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f9a6:	e791      	b.n	800f8cc <__kernel_rem_pio2+0x4d4>
 800f9a8:	465c      	mov	r4, fp
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	e7de      	b.n	800f96e <__kernel_rem_pio2+0x576>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	e7e2      	b.n	800f97c <__kernel_rem_pio2+0x584>
 800f9b6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f9ba:	f7f0 fc9f 	bl	80002fc <__adddf3>
 800f9be:	3401      	adds	r4, #1
 800f9c0:	e7e7      	b.n	800f992 <__kernel_rem_pio2+0x59a>
 800f9c2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800f9c6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	4632      	mov	r2, r6
 800f9ce:	463b      	mov	r3, r7
 800f9d0:	4629      	mov	r1, r5
 800f9d2:	f7f0 fc93 	bl	80002fc <__adddf3>
 800f9d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f9da:	4602      	mov	r2, r0
 800f9dc:	460b      	mov	r3, r1
 800f9de:	4620      	mov	r0, r4
 800f9e0:	4629      	mov	r1, r5
 800f9e2:	f7f0 fc89 	bl	80002f8 <__aeabi_dsub>
 800f9e6:	4632      	mov	r2, r6
 800f9e8:	463b      	mov	r3, r7
 800f9ea:	f7f0 fc87 	bl	80002fc <__adddf3>
 800f9ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f9f2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800f9f6:	ed88 7b00 	vstr	d7, [r8]
 800f9fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800f9fe:	e776      	b.n	800f8ee <__kernel_rem_pio2+0x4f6>
 800fa00:	e9da 8900 	ldrd	r8, r9, [sl]
 800fa04:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800fa08:	4640      	mov	r0, r8
 800fa0a:	4632      	mov	r2, r6
 800fa0c:	463b      	mov	r3, r7
 800fa0e:	4649      	mov	r1, r9
 800fa10:	f7f0 fc74 	bl	80002fc <__adddf3>
 800fa14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa18:	4602      	mov	r2, r0
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	4640      	mov	r0, r8
 800fa1e:	4649      	mov	r1, r9
 800fa20:	f7f0 fc6a 	bl	80002f8 <__aeabi_dsub>
 800fa24:	4632      	mov	r2, r6
 800fa26:	463b      	mov	r3, r7
 800fa28:	f7f0 fc68 	bl	80002fc <__adddf3>
 800fa2c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fa30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fa34:	ed8a 7b00 	vstr	d7, [sl]
 800fa38:	3c01      	subs	r4, #1
 800fa3a:	e75e      	b.n	800f8fa <__kernel_rem_pio2+0x502>
 800fa3c:	ab48      	add	r3, sp, #288	; 0x120
 800fa3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f0 fc59 	bl	80002fc <__adddf3>
 800fa4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fa4e:	e75a      	b.n	800f906 <__kernel_rem_pio2+0x50e>
 800fa50:	9b01      	ldr	r3, [sp, #4]
 800fa52:	9a01      	ldr	r2, [sp, #4]
 800fa54:	601d      	str	r5, [r3, #0]
 800fa56:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800fa5a:	605c      	str	r4, [r3, #4]
 800fa5c:	609f      	str	r7, [r3, #8]
 800fa5e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800fa62:	60d3      	str	r3, [r2, #12]
 800fa64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa68:	6110      	str	r0, [r2, #16]
 800fa6a:	6153      	str	r3, [r2, #20]
 800fa6c:	e72e      	b.n	800f8cc <__kernel_rem_pio2+0x4d4>
 800fa6e:	bf00      	nop
 800fa70:	41700000 	.word	0x41700000
 800fa74:	3e700000 	.word	0x3e700000

0800fa78 <__kernel_sin>:
 800fa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7c:	ed2d 8b04 	vpush	{d8-d9}
 800fa80:	eeb0 8a41 	vmov.f32	s16, s2
 800fa84:	eef0 8a61 	vmov.f32	s17, s3
 800fa88:	ec55 4b10 	vmov	r4, r5, d0
 800fa8c:	b083      	sub	sp, #12
 800fa8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fa96:	9001      	str	r0, [sp, #4]
 800fa98:	da06      	bge.n	800faa8 <__kernel_sin+0x30>
 800fa9a:	ee10 0a10 	vmov	r0, s0
 800fa9e:	4629      	mov	r1, r5
 800faa0:	f7f1 f892 	bl	8000bc8 <__aeabi_d2iz>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d051      	beq.n	800fb4c <__kernel_sin+0xd4>
 800faa8:	4622      	mov	r2, r4
 800faaa:	462b      	mov	r3, r5
 800faac:	4620      	mov	r0, r4
 800faae:	4629      	mov	r1, r5
 800fab0:	f7f0 fdda 	bl	8000668 <__aeabi_dmul>
 800fab4:	4682      	mov	sl, r0
 800fab6:	468b      	mov	fp, r1
 800fab8:	4602      	mov	r2, r0
 800faba:	460b      	mov	r3, r1
 800fabc:	4620      	mov	r0, r4
 800fabe:	4629      	mov	r1, r5
 800fac0:	f7f0 fdd2 	bl	8000668 <__aeabi_dmul>
 800fac4:	a341      	add	r3, pc, #260	; (adr r3, 800fbcc <__kernel_sin+0x154>)
 800fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faca:	4680      	mov	r8, r0
 800facc:	4689      	mov	r9, r1
 800face:	4650      	mov	r0, sl
 800fad0:	4659      	mov	r1, fp
 800fad2:	f7f0 fdc9 	bl	8000668 <__aeabi_dmul>
 800fad6:	a33f      	add	r3, pc, #252	; (adr r3, 800fbd4 <__kernel_sin+0x15c>)
 800fad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fadc:	f7f0 fc0c 	bl	80002f8 <__aeabi_dsub>
 800fae0:	4652      	mov	r2, sl
 800fae2:	465b      	mov	r3, fp
 800fae4:	f7f0 fdc0 	bl	8000668 <__aeabi_dmul>
 800fae8:	a33c      	add	r3, pc, #240	; (adr r3, 800fbdc <__kernel_sin+0x164>)
 800faea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faee:	f7f0 fc05 	bl	80002fc <__adddf3>
 800faf2:	4652      	mov	r2, sl
 800faf4:	465b      	mov	r3, fp
 800faf6:	f7f0 fdb7 	bl	8000668 <__aeabi_dmul>
 800fafa:	a33a      	add	r3, pc, #232	; (adr r3, 800fbe4 <__kernel_sin+0x16c>)
 800fafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb00:	f7f0 fbfa 	bl	80002f8 <__aeabi_dsub>
 800fb04:	4652      	mov	r2, sl
 800fb06:	465b      	mov	r3, fp
 800fb08:	f7f0 fdae 	bl	8000668 <__aeabi_dmul>
 800fb0c:	a337      	add	r3, pc, #220	; (adr r3, 800fbec <__kernel_sin+0x174>)
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	f7f0 fbf3 	bl	80002fc <__adddf3>
 800fb16:	9b01      	ldr	r3, [sp, #4]
 800fb18:	4606      	mov	r6, r0
 800fb1a:	460f      	mov	r7, r1
 800fb1c:	b9eb      	cbnz	r3, 800fb5a <__kernel_sin+0xe2>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4650      	mov	r0, sl
 800fb24:	4659      	mov	r1, fp
 800fb26:	f7f0 fd9f 	bl	8000668 <__aeabi_dmul>
 800fb2a:	a325      	add	r3, pc, #148	; (adr r3, 800fbc0 <__kernel_sin+0x148>)
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	f7f0 fbe2 	bl	80002f8 <__aeabi_dsub>
 800fb34:	4642      	mov	r2, r8
 800fb36:	464b      	mov	r3, r9
 800fb38:	f7f0 fd96 	bl	8000668 <__aeabi_dmul>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	460b      	mov	r3, r1
 800fb40:	4620      	mov	r0, r4
 800fb42:	4629      	mov	r1, r5
 800fb44:	f7f0 fbda 	bl	80002fc <__adddf3>
 800fb48:	4604      	mov	r4, r0
 800fb4a:	460d      	mov	r5, r1
 800fb4c:	ec45 4b10 	vmov	d0, r4, r5
 800fb50:	b003      	add	sp, #12
 800fb52:	ecbd 8b04 	vpop	{d8-d9}
 800fb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb5a:	4b1b      	ldr	r3, [pc, #108]	; (800fbc8 <__kernel_sin+0x150>)
 800fb5c:	ec51 0b18 	vmov	r0, r1, d8
 800fb60:	2200      	movs	r2, #0
 800fb62:	f7f0 fd81 	bl	8000668 <__aeabi_dmul>
 800fb66:	4632      	mov	r2, r6
 800fb68:	ec41 0b19 	vmov	d9, r0, r1
 800fb6c:	463b      	mov	r3, r7
 800fb6e:	4640      	mov	r0, r8
 800fb70:	4649      	mov	r1, r9
 800fb72:	f7f0 fd79 	bl	8000668 <__aeabi_dmul>
 800fb76:	4602      	mov	r2, r0
 800fb78:	460b      	mov	r3, r1
 800fb7a:	ec51 0b19 	vmov	r0, r1, d9
 800fb7e:	f7f0 fbbb 	bl	80002f8 <__aeabi_dsub>
 800fb82:	4652      	mov	r2, sl
 800fb84:	465b      	mov	r3, fp
 800fb86:	f7f0 fd6f 	bl	8000668 <__aeabi_dmul>
 800fb8a:	ec53 2b18 	vmov	r2, r3, d8
 800fb8e:	f7f0 fbb3 	bl	80002f8 <__aeabi_dsub>
 800fb92:	a30b      	add	r3, pc, #44	; (adr r3, 800fbc0 <__kernel_sin+0x148>)
 800fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb98:	4606      	mov	r6, r0
 800fb9a:	460f      	mov	r7, r1
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	4649      	mov	r1, r9
 800fba0:	f7f0 fd62 	bl	8000668 <__aeabi_dmul>
 800fba4:	4602      	mov	r2, r0
 800fba6:	460b      	mov	r3, r1
 800fba8:	4630      	mov	r0, r6
 800fbaa:	4639      	mov	r1, r7
 800fbac:	f7f0 fba6 	bl	80002fc <__adddf3>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	460b      	mov	r3, r1
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	f7f0 fb9e 	bl	80002f8 <__aeabi_dsub>
 800fbbc:	e7c4      	b.n	800fb48 <__kernel_sin+0xd0>
 800fbbe:	bf00      	nop
 800fbc0:	55555549 	.word	0x55555549
 800fbc4:	3fc55555 	.word	0x3fc55555
 800fbc8:	3fe00000 	.word	0x3fe00000
 800fbcc:	5acfd57c 	.word	0x5acfd57c
 800fbd0:	3de5d93a 	.word	0x3de5d93a
 800fbd4:	8a2b9ceb 	.word	0x8a2b9ceb
 800fbd8:	3e5ae5e6 	.word	0x3e5ae5e6
 800fbdc:	57b1fe7d 	.word	0x57b1fe7d
 800fbe0:	3ec71de3 	.word	0x3ec71de3
 800fbe4:	19c161d5 	.word	0x19c161d5
 800fbe8:	3f2a01a0 	.word	0x3f2a01a0
 800fbec:	1110f8a6 	.word	0x1110f8a6
 800fbf0:	3f811111 	.word	0x3f811111

0800fbf4 <__kernel_cosf>:
 800fbf4:	ee10 3a10 	vmov	r3, s0
 800fbf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbfc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fc00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fc04:	da05      	bge.n	800fc12 <__kernel_cosf+0x1e>
 800fc06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fc0a:	ee17 2a90 	vmov	r2, s15
 800fc0e:	2a00      	cmp	r2, #0
 800fc10:	d03d      	beq.n	800fc8e <__kernel_cosf+0x9a>
 800fc12:	ee60 5a00 	vmul.f32	s11, s0, s0
 800fc16:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fc94 <__kernel_cosf+0xa0>
 800fc1a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800fc98 <__kernel_cosf+0xa4>
 800fc1e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800fc9c <__kernel_cosf+0xa8>
 800fc22:	4a1f      	ldr	r2, [pc, #124]	; (800fca0 <__kernel_cosf+0xac>)
 800fc24:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800fca4 <__kernel_cosf+0xb0>
 800fc2e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800fc32:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800fca8 <__kernel_cosf+0xb4>
 800fc36:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800fc3a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800fcac <__kernel_cosf+0xb8>
 800fc3e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800fc42:	eeb0 7a66 	vmov.f32	s14, s13
 800fc46:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800fc4a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800fc4e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800fc52:	ee67 6a25 	vmul.f32	s13, s14, s11
 800fc56:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800fc5a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fc5e:	dc04      	bgt.n	800fc6a <__kernel_cosf+0x76>
 800fc60:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800fc64:	ee36 0a47 	vsub.f32	s0, s12, s14
 800fc68:	4770      	bx	lr
 800fc6a:	4a11      	ldr	r2, [pc, #68]	; (800fcb0 <__kernel_cosf+0xbc>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	bfda      	itte	le
 800fc70:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800fc74:	ee06 3a90 	vmovle	s13, r3
 800fc78:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800fc7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc80:	ee36 0a66 	vsub.f32	s0, s12, s13
 800fc84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc88:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc8c:	4770      	bx	lr
 800fc8e:	eeb0 0a46 	vmov.f32	s0, s12
 800fc92:	4770      	bx	lr
 800fc94:	ad47d74e 	.word	0xad47d74e
 800fc98:	310f74f6 	.word	0x310f74f6
 800fc9c:	3d2aaaab 	.word	0x3d2aaaab
 800fca0:	3e999999 	.word	0x3e999999
 800fca4:	b493f27c 	.word	0xb493f27c
 800fca8:	37d00d01 	.word	0x37d00d01
 800fcac:	bab60b61 	.word	0xbab60b61
 800fcb0:	3f480000 	.word	0x3f480000

0800fcb4 <__kernel_rem_pio2f>:
 800fcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb8:	ed2d 8b04 	vpush	{d8-d9}
 800fcbc:	b0d7      	sub	sp, #348	; 0x15c
 800fcbe:	4616      	mov	r6, r2
 800fcc0:	4698      	mov	r8, r3
 800fcc2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800fcc4:	4bbb      	ldr	r3, [pc, #748]	; (800ffb4 <__kernel_rem_pio2f+0x300>)
 800fcc6:	9001      	str	r0, [sp, #4]
 800fcc8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800fccc:	1d33      	adds	r3, r6, #4
 800fcce:	460d      	mov	r5, r1
 800fcd0:	f108 39ff 	add.w	r9, r8, #4294967295
 800fcd4:	db29      	blt.n	800fd2a <__kernel_rem_pio2f+0x76>
 800fcd6:	1ef1      	subs	r1, r6, #3
 800fcd8:	bf48      	it	mi
 800fcda:	1d31      	addmi	r1, r6, #4
 800fcdc:	10c9      	asrs	r1, r1, #3
 800fcde:	1c4c      	adds	r4, r1, #1
 800fce0:	00e3      	lsls	r3, r4, #3
 800fce2:	9302      	str	r3, [sp, #8]
 800fce4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800fce6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800ffc4 <__kernel_rem_pio2f+0x310>
 800fcea:	eba1 0009 	sub.w	r0, r1, r9
 800fcee:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800fcf2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800fcf6:	eb07 0c09 	add.w	ip, r7, r9
 800fcfa:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800fcfe:	2300      	movs	r3, #0
 800fd00:	4563      	cmp	r3, ip
 800fd02:	dd14      	ble.n	800fd2e <__kernel_rem_pio2f+0x7a>
 800fd04:	ab1a      	add	r3, sp, #104	; 0x68
 800fd06:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800fd0a:	46cc      	mov	ip, r9
 800fd0c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800fd10:	f1c8 0b01 	rsb	fp, r8, #1
 800fd14:	eb0b 020c 	add.w	r2, fp, ip
 800fd18:	4297      	cmp	r7, r2
 800fd1a:	db27      	blt.n	800fd6c <__kernel_rem_pio2f+0xb8>
 800fd1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fd20:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800ffc4 <__kernel_rem_pio2f+0x310>
 800fd24:	4618      	mov	r0, r3
 800fd26:	2200      	movs	r2, #0
 800fd28:	e016      	b.n	800fd58 <__kernel_rem_pio2f+0xa4>
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	e7d7      	b.n	800fcde <__kernel_rem_pio2f+0x2a>
 800fd2e:	42d8      	cmn	r0, r3
 800fd30:	bf5d      	ittte	pl
 800fd32:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800fd36:	ee07 2a90 	vmovpl	s15, r2
 800fd3a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fd3e:	eef0 7a47 	vmovmi.f32	s15, s14
 800fd42:	ecea 7a01 	vstmia	sl!, {s15}
 800fd46:	3301      	adds	r3, #1
 800fd48:	e7da      	b.n	800fd00 <__kernel_rem_pio2f+0x4c>
 800fd4a:	ecfe 6a01 	vldmia	lr!, {s13}
 800fd4e:	ed90 7a00 	vldr	s14, [r0]
 800fd52:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd56:	3201      	adds	r2, #1
 800fd58:	454a      	cmp	r2, r9
 800fd5a:	f1a0 0004 	sub.w	r0, r0, #4
 800fd5e:	ddf4      	ble.n	800fd4a <__kernel_rem_pio2f+0x96>
 800fd60:	ecea 7a01 	vstmia	sl!, {s15}
 800fd64:	3304      	adds	r3, #4
 800fd66:	f10c 0c01 	add.w	ip, ip, #1
 800fd6a:	e7d3      	b.n	800fd14 <__kernel_rem_pio2f+0x60>
 800fd6c:	ab06      	add	r3, sp, #24
 800fd6e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800fd72:	9304      	str	r3, [sp, #16]
 800fd74:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800fd76:	eddf 8a92 	vldr	s17, [pc, #584]	; 800ffc0 <__kernel_rem_pio2f+0x30c>
 800fd7a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800ffbc <__kernel_rem_pio2f+0x308>
 800fd7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fd82:	9303      	str	r3, [sp, #12]
 800fd84:	46ba      	mov	sl, r7
 800fd86:	ab56      	add	r3, sp, #344	; 0x158
 800fd88:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800fd8c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800fd90:	ab06      	add	r3, sp, #24
 800fd92:	4618      	mov	r0, r3
 800fd94:	4652      	mov	r2, sl
 800fd96:	2a00      	cmp	r2, #0
 800fd98:	dc51      	bgt.n	800fe3e <__kernel_rem_pio2f+0x18a>
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	9305      	str	r3, [sp, #20]
 800fd9e:	f000 fc4b 	bl	8010638 <scalbnf>
 800fda2:	eeb0 8a40 	vmov.f32	s16, s0
 800fda6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800fdaa:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fdae:	f000 fc01 	bl	80105b4 <floorf>
 800fdb2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800fdb6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fdba:	2c00      	cmp	r4, #0
 800fdbc:	9b05      	ldr	r3, [sp, #20]
 800fdbe:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fdc2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800fdc6:	edcd 7a00 	vstr	s15, [sp]
 800fdca:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fdce:	dd4b      	ble.n	800fe68 <__kernel_rem_pio2f+0x1b4>
 800fdd0:	f10a 3cff 	add.w	ip, sl, #4294967295
 800fdd4:	aa06      	add	r2, sp, #24
 800fdd6:	f1c4 0e08 	rsb	lr, r4, #8
 800fdda:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fdde:	ee17 1a90 	vmov	r1, s15
 800fde2:	fa42 f00e 	asr.w	r0, r2, lr
 800fde6:	4401      	add	r1, r0
 800fde8:	9100      	str	r1, [sp, #0]
 800fdea:	fa00 f00e 	lsl.w	r0, r0, lr
 800fdee:	a906      	add	r1, sp, #24
 800fdf0:	1a12      	subs	r2, r2, r0
 800fdf2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fdf6:	f1c4 0007 	rsb	r0, r4, #7
 800fdfa:	fa42 fb00 	asr.w	fp, r2, r0
 800fdfe:	f1bb 0f00 	cmp.w	fp, #0
 800fe02:	dd43      	ble.n	800fe8c <__kernel_rem_pio2f+0x1d8>
 800fe04:	9a00      	ldr	r2, [sp, #0]
 800fe06:	f04f 0e00 	mov.w	lr, #0
 800fe0a:	3201      	adds	r2, #1
 800fe0c:	9200      	str	r2, [sp, #0]
 800fe0e:	4670      	mov	r0, lr
 800fe10:	45f2      	cmp	sl, lr
 800fe12:	dc6c      	bgt.n	800feee <__kernel_rem_pio2f+0x23a>
 800fe14:	2c00      	cmp	r4, #0
 800fe16:	dd04      	ble.n	800fe22 <__kernel_rem_pio2f+0x16e>
 800fe18:	2c01      	cmp	r4, #1
 800fe1a:	d079      	beq.n	800ff10 <__kernel_rem_pio2f+0x25c>
 800fe1c:	2c02      	cmp	r4, #2
 800fe1e:	f000 8082 	beq.w	800ff26 <__kernel_rem_pio2f+0x272>
 800fe22:	f1bb 0f02 	cmp.w	fp, #2
 800fe26:	d131      	bne.n	800fe8c <__kernel_rem_pio2f+0x1d8>
 800fe28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fe2c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fe30:	b360      	cbz	r0, 800fe8c <__kernel_rem_pio2f+0x1d8>
 800fe32:	4620      	mov	r0, r4
 800fe34:	f000 fc00 	bl	8010638 <scalbnf>
 800fe38:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fe3c:	e026      	b.n	800fe8c <__kernel_rem_pio2f+0x1d8>
 800fe3e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fe42:	3a01      	subs	r2, #1
 800fe44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe48:	a942      	add	r1, sp, #264	; 0x108
 800fe4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe4e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800fe52:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fe56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fe5a:	eca0 0a01 	vstmia	r0!, {s0}
 800fe5e:	ed9c 0a00 	vldr	s0, [ip]
 800fe62:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fe66:	e796      	b.n	800fd96 <__kernel_rem_pio2f+0xe2>
 800fe68:	d107      	bne.n	800fe7a <__kernel_rem_pio2f+0x1c6>
 800fe6a:	f10a 32ff 	add.w	r2, sl, #4294967295
 800fe6e:	a906      	add	r1, sp, #24
 800fe70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800fe74:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800fe78:	e7c1      	b.n	800fdfe <__kernel_rem_pio2f+0x14a>
 800fe7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fe7e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fe82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe86:	da2f      	bge.n	800fee8 <__kernel_rem_pio2f+0x234>
 800fe88:	f04f 0b00 	mov.w	fp, #0
 800fe8c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fe90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe94:	f040 8098 	bne.w	800ffc8 <__kernel_rem_pio2f+0x314>
 800fe98:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fe9c:	469c      	mov	ip, r3
 800fe9e:	2200      	movs	r2, #0
 800fea0:	45bc      	cmp	ip, r7
 800fea2:	da48      	bge.n	800ff36 <__kernel_rem_pio2f+0x282>
 800fea4:	2a00      	cmp	r2, #0
 800fea6:	d05f      	beq.n	800ff68 <__kernel_rem_pio2f+0x2b4>
 800fea8:	aa06      	add	r2, sp, #24
 800feaa:	3c08      	subs	r4, #8
 800feac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800feb0:	2900      	cmp	r1, #0
 800feb2:	d07d      	beq.n	800ffb0 <__kernel_rem_pio2f+0x2fc>
 800feb4:	4620      	mov	r0, r4
 800feb6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800feba:	9301      	str	r3, [sp, #4]
 800febc:	f000 fbbc 	bl	8010638 <scalbnf>
 800fec0:	9b01      	ldr	r3, [sp, #4]
 800fec2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800ffc0 <__kernel_rem_pio2f+0x30c>
 800fec6:	4619      	mov	r1, r3
 800fec8:	2900      	cmp	r1, #0
 800feca:	f280 80af 	bge.w	801002c <__kernel_rem_pio2f+0x378>
 800fece:	4618      	mov	r0, r3
 800fed0:	2400      	movs	r4, #0
 800fed2:	2800      	cmp	r0, #0
 800fed4:	f2c0 80d0 	blt.w	8010078 <__kernel_rem_pio2f+0x3c4>
 800fed8:	a942      	add	r1, sp, #264	; 0x108
 800feda:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800fede:	4a36      	ldr	r2, [pc, #216]	; (800ffb8 <__kernel_rem_pio2f+0x304>)
 800fee0:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ffc4 <__kernel_rem_pio2f+0x310>
 800fee4:	2100      	movs	r1, #0
 800fee6:	e0bb      	b.n	8010060 <__kernel_rem_pio2f+0x3ac>
 800fee8:	f04f 0b02 	mov.w	fp, #2
 800feec:	e78a      	b.n	800fe04 <__kernel_rem_pio2f+0x150>
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	b948      	cbnz	r0, 800ff06 <__kernel_rem_pio2f+0x252>
 800fef2:	b11a      	cbz	r2, 800fefc <__kernel_rem_pio2f+0x248>
 800fef4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	2201      	movs	r2, #1
 800fefc:	f10e 0e01 	add.w	lr, lr, #1
 800ff00:	3304      	adds	r3, #4
 800ff02:	4610      	mov	r0, r2
 800ff04:	e784      	b.n	800fe10 <__kernel_rem_pio2f+0x15c>
 800ff06:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	e7f5      	b.n	800fefc <__kernel_rem_pio2f+0x248>
 800ff10:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ff14:	ab06      	add	r3, sp, #24
 800ff16:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ff1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff1e:	aa06      	add	r2, sp, #24
 800ff20:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800ff24:	e77d      	b.n	800fe22 <__kernel_rem_pio2f+0x16e>
 800ff26:	f10a 3cff 	add.w	ip, sl, #4294967295
 800ff2a:	ab06      	add	r3, sp, #24
 800ff2c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ff30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff34:	e7f3      	b.n	800ff1e <__kernel_rem_pio2f+0x26a>
 800ff36:	a906      	add	r1, sp, #24
 800ff38:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800ff3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ff40:	4302      	orrs	r2, r0
 800ff42:	e7ad      	b.n	800fea0 <__kernel_rem_pio2f+0x1ec>
 800ff44:	3001      	adds	r0, #1
 800ff46:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ff4a:	2a00      	cmp	r2, #0
 800ff4c:	d0fa      	beq.n	800ff44 <__kernel_rem_pio2f+0x290>
 800ff4e:	a91a      	add	r1, sp, #104	; 0x68
 800ff50:	eb0a 0208 	add.w	r2, sl, r8
 800ff54:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ff58:	f10a 0301 	add.w	r3, sl, #1
 800ff5c:	eb0a 0100 	add.w	r1, sl, r0
 800ff60:	4299      	cmp	r1, r3
 800ff62:	da04      	bge.n	800ff6e <__kernel_rem_pio2f+0x2ba>
 800ff64:	468a      	mov	sl, r1
 800ff66:	e70e      	b.n	800fd86 <__kernel_rem_pio2f+0xd2>
 800ff68:	9b04      	ldr	r3, [sp, #16]
 800ff6a:	2001      	movs	r0, #1
 800ff6c:	e7eb      	b.n	800ff46 <__kernel_rem_pio2f+0x292>
 800ff6e:	9803      	ldr	r0, [sp, #12]
 800ff70:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ff74:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ff78:	9000      	str	r0, [sp, #0]
 800ff7a:	ee07 0a90 	vmov	s15, r0
 800ff7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff82:	2000      	movs	r0, #0
 800ff84:	ece2 7a01 	vstmia	r2!, {s15}
 800ff88:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ffc4 <__kernel_rem_pio2f+0x310>
 800ff8c:	4696      	mov	lr, r2
 800ff8e:	4548      	cmp	r0, r9
 800ff90:	dd06      	ble.n	800ffa0 <__kernel_rem_pio2f+0x2ec>
 800ff92:	a842      	add	r0, sp, #264	; 0x108
 800ff94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ff98:	edc0 7a00 	vstr	s15, [r0]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	e7df      	b.n	800ff60 <__kernel_rem_pio2f+0x2ac>
 800ffa0:	ecfc 6a01 	vldmia	ip!, {s13}
 800ffa4:	ed3e 7a01 	vldmdb	lr!, {s14}
 800ffa8:	3001      	adds	r0, #1
 800ffaa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ffae:	e7ee      	b.n	800ff8e <__kernel_rem_pio2f+0x2da>
 800ffb0:	3b01      	subs	r3, #1
 800ffb2:	e779      	b.n	800fea8 <__kernel_rem_pio2f+0x1f4>
 800ffb4:	080139ec 	.word	0x080139ec
 800ffb8:	080139c0 	.word	0x080139c0
 800ffbc:	43800000 	.word	0x43800000
 800ffc0:	3b800000 	.word	0x3b800000
 800ffc4:	00000000 	.word	0x00000000
 800ffc8:	9b02      	ldr	r3, [sp, #8]
 800ffca:	eeb0 0a48 	vmov.f32	s0, s16
 800ffce:	1b98      	subs	r0, r3, r6
 800ffd0:	f000 fb32 	bl	8010638 <scalbnf>
 800ffd4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ffbc <__kernel_rem_pio2f+0x308>
 800ffd8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ffdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe0:	db1b      	blt.n	801001a <__kernel_rem_pio2f+0x366>
 800ffe2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ffc0 <__kernel_rem_pio2f+0x30c>
 800ffe6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ffea:	aa06      	add	r2, sp, #24
 800ffec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fff0:	a906      	add	r1, sp, #24
 800fff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fff6:	3408      	adds	r4, #8
 800fff8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010000:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010004:	ee10 3a10 	vmov	r3, s0
 8010008:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801000c:	ee17 2a90 	vmov	r2, s15
 8010010:	f10a 0301 	add.w	r3, sl, #1
 8010014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010018:	e74c      	b.n	800feb4 <__kernel_rem_pio2f+0x200>
 801001a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801001e:	aa06      	add	r2, sp, #24
 8010020:	ee10 3a10 	vmov	r3, s0
 8010024:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8010028:	4653      	mov	r3, sl
 801002a:	e743      	b.n	800feb4 <__kernel_rem_pio2f+0x200>
 801002c:	aa42      	add	r2, sp, #264	; 0x108
 801002e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8010032:	aa06      	add	r2, sp, #24
 8010034:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8010038:	9201      	str	r2, [sp, #4]
 801003a:	ee07 2a90 	vmov	s15, r2
 801003e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010042:	3901      	subs	r1, #1
 8010044:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010048:	ee20 0a07 	vmul.f32	s0, s0, s14
 801004c:	edc0 7a00 	vstr	s15, [r0]
 8010050:	e73a      	b.n	800fec8 <__kernel_rem_pio2f+0x214>
 8010052:	ecf2 6a01 	vldmia	r2!, {s13}
 8010056:	ecb6 7a01 	vldmia	r6!, {s14}
 801005a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801005e:	3101      	adds	r1, #1
 8010060:	42b9      	cmp	r1, r7
 8010062:	dc01      	bgt.n	8010068 <__kernel_rem_pio2f+0x3b4>
 8010064:	428c      	cmp	r4, r1
 8010066:	daf4      	bge.n	8010052 <__kernel_rem_pio2f+0x39e>
 8010068:	aa56      	add	r2, sp, #344	; 0x158
 801006a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801006e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8010072:	3801      	subs	r0, #1
 8010074:	3401      	adds	r4, #1
 8010076:	e72c      	b.n	800fed2 <__kernel_rem_pio2f+0x21e>
 8010078:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801007a:	2a02      	cmp	r2, #2
 801007c:	dc0a      	bgt.n	8010094 <__kernel_rem_pio2f+0x3e0>
 801007e:	2a00      	cmp	r2, #0
 8010080:	dc61      	bgt.n	8010146 <__kernel_rem_pio2f+0x492>
 8010082:	d03c      	beq.n	80100fe <__kernel_rem_pio2f+0x44a>
 8010084:	9b00      	ldr	r3, [sp, #0]
 8010086:	f003 0007 	and.w	r0, r3, #7
 801008a:	b057      	add	sp, #348	; 0x15c
 801008c:	ecbd 8b04 	vpop	{d8-d9}
 8010090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010094:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010096:	2a03      	cmp	r2, #3
 8010098:	d1f4      	bne.n	8010084 <__kernel_rem_pio2f+0x3d0>
 801009a:	aa2e      	add	r2, sp, #184	; 0xb8
 801009c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80100a0:	4608      	mov	r0, r1
 80100a2:	461c      	mov	r4, r3
 80100a4:	2c00      	cmp	r4, #0
 80100a6:	f1a0 0004 	sub.w	r0, r0, #4
 80100aa:	dc59      	bgt.n	8010160 <__kernel_rem_pio2f+0x4ac>
 80100ac:	4618      	mov	r0, r3
 80100ae:	2801      	cmp	r0, #1
 80100b0:	f1a1 0104 	sub.w	r1, r1, #4
 80100b4:	dc64      	bgt.n	8010180 <__kernel_rem_pio2f+0x4cc>
 80100b6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800ffc4 <__kernel_rem_pio2f+0x310>
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	dc70      	bgt.n	80101a0 <__kernel_rem_pio2f+0x4ec>
 80100be:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80100c2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80100c6:	f1bb 0f00 	cmp.w	fp, #0
 80100ca:	d172      	bne.n	80101b2 <__kernel_rem_pio2f+0x4fe>
 80100cc:	edc5 6a00 	vstr	s13, [r5]
 80100d0:	ed85 7a01 	vstr	s14, [r5, #4]
 80100d4:	edc5 7a02 	vstr	s15, [r5, #8]
 80100d8:	e7d4      	b.n	8010084 <__kernel_rem_pio2f+0x3d0>
 80100da:	aa2e      	add	r2, sp, #184	; 0xb8
 80100dc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80100e0:	ed91 7a00 	vldr	s14, [r1]
 80100e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100e8:	3b01      	subs	r3, #1
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	daf5      	bge.n	80100da <__kernel_rem_pio2f+0x426>
 80100ee:	f1bb 0f00 	cmp.w	fp, #0
 80100f2:	d001      	beq.n	80100f8 <__kernel_rem_pio2f+0x444>
 80100f4:	eef1 7a67 	vneg.f32	s15, s15
 80100f8:	edc5 7a00 	vstr	s15, [r5]
 80100fc:	e7c2      	b.n	8010084 <__kernel_rem_pio2f+0x3d0>
 80100fe:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ffc4 <__kernel_rem_pio2f+0x310>
 8010102:	e7f2      	b.n	80100ea <__kernel_rem_pio2f+0x436>
 8010104:	aa2e      	add	r2, sp, #184	; 0xb8
 8010106:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801010a:	edd0 7a00 	vldr	s15, [r0]
 801010e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010112:	3901      	subs	r1, #1
 8010114:	2900      	cmp	r1, #0
 8010116:	daf5      	bge.n	8010104 <__kernel_rem_pio2f+0x450>
 8010118:	f1bb 0f00 	cmp.w	fp, #0
 801011c:	d017      	beq.n	801014e <__kernel_rem_pio2f+0x49a>
 801011e:	eef1 7a47 	vneg.f32	s15, s14
 8010122:	edc5 7a00 	vstr	s15, [r5]
 8010126:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801012a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801012e:	a82f      	add	r0, sp, #188	; 0xbc
 8010130:	2101      	movs	r1, #1
 8010132:	428b      	cmp	r3, r1
 8010134:	da0e      	bge.n	8010154 <__kernel_rem_pio2f+0x4a0>
 8010136:	f1bb 0f00 	cmp.w	fp, #0
 801013a:	d001      	beq.n	8010140 <__kernel_rem_pio2f+0x48c>
 801013c:	eef1 7a67 	vneg.f32	s15, s15
 8010140:	edc5 7a01 	vstr	s15, [r5, #4]
 8010144:	e79e      	b.n	8010084 <__kernel_rem_pio2f+0x3d0>
 8010146:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800ffc4 <__kernel_rem_pio2f+0x310>
 801014a:	4619      	mov	r1, r3
 801014c:	e7e2      	b.n	8010114 <__kernel_rem_pio2f+0x460>
 801014e:	eef0 7a47 	vmov.f32	s15, s14
 8010152:	e7e6      	b.n	8010122 <__kernel_rem_pio2f+0x46e>
 8010154:	ecb0 7a01 	vldmia	r0!, {s14}
 8010158:	3101      	adds	r1, #1
 801015a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801015e:	e7e8      	b.n	8010132 <__kernel_rem_pio2f+0x47e>
 8010160:	edd0 7a00 	vldr	s15, [r0]
 8010164:	edd0 6a01 	vldr	s13, [r0, #4]
 8010168:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801016c:	3c01      	subs	r4, #1
 801016e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010172:	ed80 7a00 	vstr	s14, [r0]
 8010176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801017a:	edc0 7a01 	vstr	s15, [r0, #4]
 801017e:	e791      	b.n	80100a4 <__kernel_rem_pio2f+0x3f0>
 8010180:	edd1 7a00 	vldr	s15, [r1]
 8010184:	edd1 6a01 	vldr	s13, [r1, #4]
 8010188:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801018c:	3801      	subs	r0, #1
 801018e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010192:	ed81 7a00 	vstr	s14, [r1]
 8010196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801019a:	edc1 7a01 	vstr	s15, [r1, #4]
 801019e:	e786      	b.n	80100ae <__kernel_rem_pio2f+0x3fa>
 80101a0:	aa2e      	add	r2, sp, #184	; 0xb8
 80101a2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80101a6:	ed91 7a00 	vldr	s14, [r1]
 80101aa:	3b01      	subs	r3, #1
 80101ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80101b0:	e783      	b.n	80100ba <__kernel_rem_pio2f+0x406>
 80101b2:	eef1 6a66 	vneg.f32	s13, s13
 80101b6:	eeb1 7a47 	vneg.f32	s14, s14
 80101ba:	edc5 6a00 	vstr	s13, [r5]
 80101be:	ed85 7a01 	vstr	s14, [r5, #4]
 80101c2:	eef1 7a67 	vneg.f32	s15, s15
 80101c6:	e785      	b.n	80100d4 <__kernel_rem_pio2f+0x420>

080101c8 <__kernel_sinf>:
 80101c8:	ee10 3a10 	vmov	r3, s0
 80101cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80101d4:	da04      	bge.n	80101e0 <__kernel_sinf+0x18>
 80101d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80101da:	ee17 3a90 	vmov	r3, s15
 80101de:	b35b      	cbz	r3, 8010238 <__kernel_sinf+0x70>
 80101e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80101e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801023c <__kernel_sinf+0x74>
 80101e8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8010240 <__kernel_sinf+0x78>
 80101ec:	eea7 6a27 	vfma.f32	s12, s14, s15
 80101f0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010244 <__kernel_sinf+0x7c>
 80101f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80101f8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8010248 <__kernel_sinf+0x80>
 80101fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010200:	eddf 7a12 	vldr	s15, [pc, #72]	; 801024c <__kernel_sinf+0x84>
 8010204:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010208:	eee6 7a07 	vfma.f32	s15, s12, s14
 801020c:	b930      	cbnz	r0, 801021c <__kernel_sinf+0x54>
 801020e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8010250 <__kernel_sinf+0x88>
 8010212:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010216:	eea6 0a26 	vfma.f32	s0, s12, s13
 801021a:	4770      	bx	lr
 801021c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010220:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010224:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010228:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801022c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010254 <__kernel_sinf+0x8c>
 8010230:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010234:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	2f2ec9d3 	.word	0x2f2ec9d3
 8010240:	b2d72f34 	.word	0xb2d72f34
 8010244:	3638ef1b 	.word	0x3638ef1b
 8010248:	b9500d01 	.word	0xb9500d01
 801024c:	3c088889 	.word	0x3c088889
 8010250:	be2aaaab 	.word	0xbe2aaaab
 8010254:	3e2aaaab 	.word	0x3e2aaaab

08010258 <fabs>:
 8010258:	ec51 0b10 	vmov	r0, r1, d0
 801025c:	ee10 2a10 	vmov	r2, s0
 8010260:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010264:	ec43 2b10 	vmov	d0, r2, r3
 8010268:	4770      	bx	lr

0801026a <finite>:
 801026a:	b082      	sub	sp, #8
 801026c:	ed8d 0b00 	vstr	d0, [sp]
 8010270:	9801      	ldr	r0, [sp, #4]
 8010272:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010276:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801027a:	0fc0      	lsrs	r0, r0, #31
 801027c:	b002      	add	sp, #8
 801027e:	4770      	bx	lr

08010280 <floor>:
 8010280:	ec51 0b10 	vmov	r0, r1, d0
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801028c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010290:	2e13      	cmp	r6, #19
 8010292:	ee10 5a10 	vmov	r5, s0
 8010296:	ee10 8a10 	vmov	r8, s0
 801029a:	460c      	mov	r4, r1
 801029c:	dc32      	bgt.n	8010304 <floor+0x84>
 801029e:	2e00      	cmp	r6, #0
 80102a0:	da14      	bge.n	80102cc <floor+0x4c>
 80102a2:	a333      	add	r3, pc, #204	; (adr r3, 8010370 <floor+0xf0>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	f7f0 f828 	bl	80002fc <__adddf3>
 80102ac:	2200      	movs	r2, #0
 80102ae:	2300      	movs	r3, #0
 80102b0:	f7f0 fc6a 	bl	8000b88 <__aeabi_dcmpgt>
 80102b4:	b138      	cbz	r0, 80102c6 <floor+0x46>
 80102b6:	2c00      	cmp	r4, #0
 80102b8:	da57      	bge.n	801036a <floor+0xea>
 80102ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80102be:	431d      	orrs	r5, r3
 80102c0:	d001      	beq.n	80102c6 <floor+0x46>
 80102c2:	4c2d      	ldr	r4, [pc, #180]	; (8010378 <floor+0xf8>)
 80102c4:	2500      	movs	r5, #0
 80102c6:	4621      	mov	r1, r4
 80102c8:	4628      	mov	r0, r5
 80102ca:	e025      	b.n	8010318 <floor+0x98>
 80102cc:	4f2b      	ldr	r7, [pc, #172]	; (801037c <floor+0xfc>)
 80102ce:	4137      	asrs	r7, r6
 80102d0:	ea01 0307 	and.w	r3, r1, r7
 80102d4:	4303      	orrs	r3, r0
 80102d6:	d01f      	beq.n	8010318 <floor+0x98>
 80102d8:	a325      	add	r3, pc, #148	; (adr r3, 8010370 <floor+0xf0>)
 80102da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102de:	f7f0 f80d 	bl	80002fc <__adddf3>
 80102e2:	2200      	movs	r2, #0
 80102e4:	2300      	movs	r3, #0
 80102e6:	f7f0 fc4f 	bl	8000b88 <__aeabi_dcmpgt>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d0eb      	beq.n	80102c6 <floor+0x46>
 80102ee:	2c00      	cmp	r4, #0
 80102f0:	bfbe      	ittt	lt
 80102f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80102f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80102fa:	19a4      	addlt	r4, r4, r6
 80102fc:	ea24 0407 	bic.w	r4, r4, r7
 8010300:	2500      	movs	r5, #0
 8010302:	e7e0      	b.n	80102c6 <floor+0x46>
 8010304:	2e33      	cmp	r6, #51	; 0x33
 8010306:	dd0b      	ble.n	8010320 <floor+0xa0>
 8010308:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801030c:	d104      	bne.n	8010318 <floor+0x98>
 801030e:	ee10 2a10 	vmov	r2, s0
 8010312:	460b      	mov	r3, r1
 8010314:	f7ef fff2 	bl	80002fc <__adddf3>
 8010318:	ec41 0b10 	vmov	d0, r0, r1
 801031c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010320:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010324:	f04f 33ff 	mov.w	r3, #4294967295
 8010328:	fa23 f707 	lsr.w	r7, r3, r7
 801032c:	4207      	tst	r7, r0
 801032e:	d0f3      	beq.n	8010318 <floor+0x98>
 8010330:	a30f      	add	r3, pc, #60	; (adr r3, 8010370 <floor+0xf0>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	f7ef ffe1 	bl	80002fc <__adddf3>
 801033a:	2200      	movs	r2, #0
 801033c:	2300      	movs	r3, #0
 801033e:	f7f0 fc23 	bl	8000b88 <__aeabi_dcmpgt>
 8010342:	2800      	cmp	r0, #0
 8010344:	d0bf      	beq.n	80102c6 <floor+0x46>
 8010346:	2c00      	cmp	r4, #0
 8010348:	da02      	bge.n	8010350 <floor+0xd0>
 801034a:	2e14      	cmp	r6, #20
 801034c:	d103      	bne.n	8010356 <floor+0xd6>
 801034e:	3401      	adds	r4, #1
 8010350:	ea25 0507 	bic.w	r5, r5, r7
 8010354:	e7b7      	b.n	80102c6 <floor+0x46>
 8010356:	2301      	movs	r3, #1
 8010358:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801035c:	fa03 f606 	lsl.w	r6, r3, r6
 8010360:	4435      	add	r5, r6
 8010362:	4545      	cmp	r5, r8
 8010364:	bf38      	it	cc
 8010366:	18e4      	addcc	r4, r4, r3
 8010368:	e7f2      	b.n	8010350 <floor+0xd0>
 801036a:	2500      	movs	r5, #0
 801036c:	462c      	mov	r4, r5
 801036e:	e7aa      	b.n	80102c6 <floor+0x46>
 8010370:	8800759c 	.word	0x8800759c
 8010374:	7e37e43c 	.word	0x7e37e43c
 8010378:	bff00000 	.word	0xbff00000
 801037c:	000fffff 	.word	0x000fffff

08010380 <rint>:
 8010380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010382:	ec51 0b10 	vmov	r0, r1, d0
 8010386:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801038a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801038e:	2e13      	cmp	r6, #19
 8010390:	ee10 4a10 	vmov	r4, s0
 8010394:	460b      	mov	r3, r1
 8010396:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801039a:	dc58      	bgt.n	801044e <rint+0xce>
 801039c:	2e00      	cmp	r6, #0
 801039e:	da2b      	bge.n	80103f8 <rint+0x78>
 80103a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80103a4:	4302      	orrs	r2, r0
 80103a6:	d023      	beq.n	80103f0 <rint+0x70>
 80103a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80103ac:	4302      	orrs	r2, r0
 80103ae:	4254      	negs	r4, r2
 80103b0:	4314      	orrs	r4, r2
 80103b2:	0c4b      	lsrs	r3, r1, #17
 80103b4:	0b24      	lsrs	r4, r4, #12
 80103b6:	045b      	lsls	r3, r3, #17
 80103b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80103bc:	ea44 0103 	orr.w	r1, r4, r3
 80103c0:	4b32      	ldr	r3, [pc, #200]	; (801048c <rint+0x10c>)
 80103c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80103c6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80103ca:	4602      	mov	r2, r0
 80103cc:	460b      	mov	r3, r1
 80103ce:	4630      	mov	r0, r6
 80103d0:	4639      	mov	r1, r7
 80103d2:	f7ef ff93 	bl	80002fc <__adddf3>
 80103d6:	e9cd 0100 	strd	r0, r1, [sp]
 80103da:	463b      	mov	r3, r7
 80103dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103e0:	4632      	mov	r2, r6
 80103e2:	f7ef ff89 	bl	80002f8 <__aeabi_dsub>
 80103e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80103ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80103ee:	4639      	mov	r1, r7
 80103f0:	ec41 0b10 	vmov	d0, r0, r1
 80103f4:	b003      	add	sp, #12
 80103f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103f8:	4a25      	ldr	r2, [pc, #148]	; (8010490 <rint+0x110>)
 80103fa:	4132      	asrs	r2, r6
 80103fc:	ea01 0702 	and.w	r7, r1, r2
 8010400:	4307      	orrs	r7, r0
 8010402:	d0f5      	beq.n	80103f0 <rint+0x70>
 8010404:	0851      	lsrs	r1, r2, #1
 8010406:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801040a:	4314      	orrs	r4, r2
 801040c:	d00c      	beq.n	8010428 <rint+0xa8>
 801040e:	ea23 0201 	bic.w	r2, r3, r1
 8010412:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010416:	2e13      	cmp	r6, #19
 8010418:	fa43 f606 	asr.w	r6, r3, r6
 801041c:	bf0c      	ite	eq
 801041e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8010422:	2400      	movne	r4, #0
 8010424:	ea42 0306 	orr.w	r3, r2, r6
 8010428:	4918      	ldr	r1, [pc, #96]	; (801048c <rint+0x10c>)
 801042a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801042e:	4622      	mov	r2, r4
 8010430:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010434:	4620      	mov	r0, r4
 8010436:	4629      	mov	r1, r5
 8010438:	f7ef ff60 	bl	80002fc <__adddf3>
 801043c:	e9cd 0100 	strd	r0, r1, [sp]
 8010440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010444:	4622      	mov	r2, r4
 8010446:	462b      	mov	r3, r5
 8010448:	f7ef ff56 	bl	80002f8 <__aeabi_dsub>
 801044c:	e7d0      	b.n	80103f0 <rint+0x70>
 801044e:	2e33      	cmp	r6, #51	; 0x33
 8010450:	dd07      	ble.n	8010462 <rint+0xe2>
 8010452:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010456:	d1cb      	bne.n	80103f0 <rint+0x70>
 8010458:	ee10 2a10 	vmov	r2, s0
 801045c:	f7ef ff4e 	bl	80002fc <__adddf3>
 8010460:	e7c6      	b.n	80103f0 <rint+0x70>
 8010462:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8010466:	f04f 36ff 	mov.w	r6, #4294967295
 801046a:	40d6      	lsrs	r6, r2
 801046c:	4230      	tst	r0, r6
 801046e:	d0bf      	beq.n	80103f0 <rint+0x70>
 8010470:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8010474:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8010478:	bf1f      	itttt	ne
 801047a:	ea24 0101 	bicne.w	r1, r4, r1
 801047e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8010482:	fa44 f202 	asrne.w	r2, r4, r2
 8010486:	ea41 0402 	orrne.w	r4, r1, r2
 801048a:	e7cd      	b.n	8010428 <rint+0xa8>
 801048c:	080139f8 	.word	0x080139f8
 8010490:	000fffff 	.word	0x000fffff
 8010494:	00000000 	.word	0x00000000

08010498 <scalbn>:
 8010498:	b570      	push	{r4, r5, r6, lr}
 801049a:	ec55 4b10 	vmov	r4, r5, d0
 801049e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80104a2:	4606      	mov	r6, r0
 80104a4:	462b      	mov	r3, r5
 80104a6:	b99a      	cbnz	r2, 80104d0 <scalbn+0x38>
 80104a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104ac:	4323      	orrs	r3, r4
 80104ae:	d036      	beq.n	801051e <scalbn+0x86>
 80104b0:	4b39      	ldr	r3, [pc, #228]	; (8010598 <scalbn+0x100>)
 80104b2:	4629      	mov	r1, r5
 80104b4:	ee10 0a10 	vmov	r0, s0
 80104b8:	2200      	movs	r2, #0
 80104ba:	f7f0 f8d5 	bl	8000668 <__aeabi_dmul>
 80104be:	4b37      	ldr	r3, [pc, #220]	; (801059c <scalbn+0x104>)
 80104c0:	429e      	cmp	r6, r3
 80104c2:	4604      	mov	r4, r0
 80104c4:	460d      	mov	r5, r1
 80104c6:	da10      	bge.n	80104ea <scalbn+0x52>
 80104c8:	a32b      	add	r3, pc, #172	; (adr r3, 8010578 <scalbn+0xe0>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	e03a      	b.n	8010546 <scalbn+0xae>
 80104d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80104d4:	428a      	cmp	r2, r1
 80104d6:	d10c      	bne.n	80104f2 <scalbn+0x5a>
 80104d8:	ee10 2a10 	vmov	r2, s0
 80104dc:	4620      	mov	r0, r4
 80104de:	4629      	mov	r1, r5
 80104e0:	f7ef ff0c 	bl	80002fc <__adddf3>
 80104e4:	4604      	mov	r4, r0
 80104e6:	460d      	mov	r5, r1
 80104e8:	e019      	b.n	801051e <scalbn+0x86>
 80104ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80104ee:	460b      	mov	r3, r1
 80104f0:	3a36      	subs	r2, #54	; 0x36
 80104f2:	4432      	add	r2, r6
 80104f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80104f8:	428a      	cmp	r2, r1
 80104fa:	dd08      	ble.n	801050e <scalbn+0x76>
 80104fc:	2d00      	cmp	r5, #0
 80104fe:	a120      	add	r1, pc, #128	; (adr r1, 8010580 <scalbn+0xe8>)
 8010500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010504:	da1c      	bge.n	8010540 <scalbn+0xa8>
 8010506:	a120      	add	r1, pc, #128	; (adr r1, 8010588 <scalbn+0xf0>)
 8010508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801050c:	e018      	b.n	8010540 <scalbn+0xa8>
 801050e:	2a00      	cmp	r2, #0
 8010510:	dd08      	ble.n	8010524 <scalbn+0x8c>
 8010512:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010516:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801051a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801051e:	ec45 4b10 	vmov	d0, r4, r5
 8010522:	bd70      	pop	{r4, r5, r6, pc}
 8010524:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010528:	da19      	bge.n	801055e <scalbn+0xc6>
 801052a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801052e:	429e      	cmp	r6, r3
 8010530:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010534:	dd0a      	ble.n	801054c <scalbn+0xb4>
 8010536:	a112      	add	r1, pc, #72	; (adr r1, 8010580 <scalbn+0xe8>)
 8010538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d1e2      	bne.n	8010506 <scalbn+0x6e>
 8010540:	a30f      	add	r3, pc, #60	; (adr r3, 8010580 <scalbn+0xe8>)
 8010542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010546:	f7f0 f88f 	bl	8000668 <__aeabi_dmul>
 801054a:	e7cb      	b.n	80104e4 <scalbn+0x4c>
 801054c:	a10a      	add	r1, pc, #40	; (adr r1, 8010578 <scalbn+0xe0>)
 801054e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d0b8      	beq.n	80104c8 <scalbn+0x30>
 8010556:	a10e      	add	r1, pc, #56	; (adr r1, 8010590 <scalbn+0xf8>)
 8010558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801055c:	e7b4      	b.n	80104c8 <scalbn+0x30>
 801055e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010562:	3236      	adds	r2, #54	; 0x36
 8010564:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010568:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801056c:	4620      	mov	r0, r4
 801056e:	4b0c      	ldr	r3, [pc, #48]	; (80105a0 <scalbn+0x108>)
 8010570:	2200      	movs	r2, #0
 8010572:	e7e8      	b.n	8010546 <scalbn+0xae>
 8010574:	f3af 8000 	nop.w
 8010578:	c2f8f359 	.word	0xc2f8f359
 801057c:	01a56e1f 	.word	0x01a56e1f
 8010580:	8800759c 	.word	0x8800759c
 8010584:	7e37e43c 	.word	0x7e37e43c
 8010588:	8800759c 	.word	0x8800759c
 801058c:	fe37e43c 	.word	0xfe37e43c
 8010590:	c2f8f359 	.word	0xc2f8f359
 8010594:	81a56e1f 	.word	0x81a56e1f
 8010598:	43500000 	.word	0x43500000
 801059c:	ffff3cb0 	.word	0xffff3cb0
 80105a0:	3c900000 	.word	0x3c900000

080105a4 <fabsf>:
 80105a4:	ee10 3a10 	vmov	r3, s0
 80105a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80105ac:	ee00 3a10 	vmov	s0, r3
 80105b0:	4770      	bx	lr
	...

080105b4 <floorf>:
 80105b4:	ee10 3a10 	vmov	r3, s0
 80105b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80105bc:	3a7f      	subs	r2, #127	; 0x7f
 80105be:	2a16      	cmp	r2, #22
 80105c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80105c4:	dc2a      	bgt.n	801061c <floorf+0x68>
 80105c6:	2a00      	cmp	r2, #0
 80105c8:	da11      	bge.n	80105ee <floorf+0x3a>
 80105ca:	eddf 7a18 	vldr	s15, [pc, #96]	; 801062c <floorf+0x78>
 80105ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80105d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80105d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105da:	dd05      	ble.n	80105e8 <floorf+0x34>
 80105dc:	2b00      	cmp	r3, #0
 80105de:	da23      	bge.n	8010628 <floorf+0x74>
 80105e0:	4a13      	ldr	r2, [pc, #76]	; (8010630 <floorf+0x7c>)
 80105e2:	2900      	cmp	r1, #0
 80105e4:	bf18      	it	ne
 80105e6:	4613      	movne	r3, r2
 80105e8:	ee00 3a10 	vmov	s0, r3
 80105ec:	4770      	bx	lr
 80105ee:	4911      	ldr	r1, [pc, #68]	; (8010634 <floorf+0x80>)
 80105f0:	4111      	asrs	r1, r2
 80105f2:	420b      	tst	r3, r1
 80105f4:	d0fa      	beq.n	80105ec <floorf+0x38>
 80105f6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801062c <floorf+0x78>
 80105fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80105fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010606:	ddef      	ble.n	80105e8 <floorf+0x34>
 8010608:	2b00      	cmp	r3, #0
 801060a:	bfbe      	ittt	lt
 801060c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010610:	fa40 f202 	asrlt.w	r2, r0, r2
 8010614:	189b      	addlt	r3, r3, r2
 8010616:	ea23 0301 	bic.w	r3, r3, r1
 801061a:	e7e5      	b.n	80105e8 <floorf+0x34>
 801061c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010620:	d3e4      	bcc.n	80105ec <floorf+0x38>
 8010622:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010626:	4770      	bx	lr
 8010628:	2300      	movs	r3, #0
 801062a:	e7dd      	b.n	80105e8 <floorf+0x34>
 801062c:	7149f2ca 	.word	0x7149f2ca
 8010630:	bf800000 	.word	0xbf800000
 8010634:	007fffff 	.word	0x007fffff

08010638 <scalbnf>:
 8010638:	ee10 3a10 	vmov	r3, s0
 801063c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010640:	d025      	beq.n	801068e <scalbnf+0x56>
 8010642:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010646:	d302      	bcc.n	801064e <scalbnf+0x16>
 8010648:	ee30 0a00 	vadd.f32	s0, s0, s0
 801064c:	4770      	bx	lr
 801064e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010652:	d122      	bne.n	801069a <scalbnf+0x62>
 8010654:	4b2a      	ldr	r3, [pc, #168]	; (8010700 <scalbnf+0xc8>)
 8010656:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010704 <scalbnf+0xcc>
 801065a:	4298      	cmp	r0, r3
 801065c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010660:	db16      	blt.n	8010690 <scalbnf+0x58>
 8010662:	ee10 3a10 	vmov	r3, s0
 8010666:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801066a:	3a19      	subs	r2, #25
 801066c:	4402      	add	r2, r0
 801066e:	2afe      	cmp	r2, #254	; 0xfe
 8010670:	dd15      	ble.n	801069e <scalbnf+0x66>
 8010672:	ee10 3a10 	vmov	r3, s0
 8010676:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010708 <scalbnf+0xd0>
 801067a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801070c <scalbnf+0xd4>
 801067e:	2b00      	cmp	r3, #0
 8010680:	eeb0 7a67 	vmov.f32	s14, s15
 8010684:	bfb8      	it	lt
 8010686:	eef0 7a66 	vmovlt.f32	s15, s13
 801068a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801068e:	4770      	bx	lr
 8010690:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010710 <scalbnf+0xd8>
 8010694:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010698:	4770      	bx	lr
 801069a:	0dd2      	lsrs	r2, r2, #23
 801069c:	e7e6      	b.n	801066c <scalbnf+0x34>
 801069e:	2a00      	cmp	r2, #0
 80106a0:	dd06      	ble.n	80106b0 <scalbnf+0x78>
 80106a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80106a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80106aa:	ee00 3a10 	vmov	s0, r3
 80106ae:	4770      	bx	lr
 80106b0:	f112 0f16 	cmn.w	r2, #22
 80106b4:	da1a      	bge.n	80106ec <scalbnf+0xb4>
 80106b6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80106ba:	4298      	cmp	r0, r3
 80106bc:	ee10 3a10 	vmov	r3, s0
 80106c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80106c4:	dd0a      	ble.n	80106dc <scalbnf+0xa4>
 80106c6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010708 <scalbnf+0xd0>
 80106ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801070c <scalbnf+0xd4>
 80106ce:	eef0 7a40 	vmov.f32	s15, s0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bf18      	it	ne
 80106d6:	eeb0 0a47 	vmovne.f32	s0, s14
 80106da:	e7db      	b.n	8010694 <scalbnf+0x5c>
 80106dc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010710 <scalbnf+0xd8>
 80106e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010714 <scalbnf+0xdc>
 80106e4:	eef0 7a40 	vmov.f32	s15, s0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	e7f3      	b.n	80106d4 <scalbnf+0x9c>
 80106ec:	3219      	adds	r2, #25
 80106ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80106f2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80106f6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010718 <scalbnf+0xe0>
 80106fa:	ee07 3a10 	vmov	s14, r3
 80106fe:	e7c4      	b.n	801068a <scalbnf+0x52>
 8010700:	ffff3cb0 	.word	0xffff3cb0
 8010704:	4c000000 	.word	0x4c000000
 8010708:	7149f2ca 	.word	0x7149f2ca
 801070c:	f149f2ca 	.word	0xf149f2ca
 8010710:	0da24260 	.word	0x0da24260
 8010714:	8da24260 	.word	0x8da24260
 8010718:	33000000 	.word	0x33000000

0801071c <_init>:
 801071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071e:	bf00      	nop
 8010720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010722:	bc08      	pop	{r3}
 8010724:	469e      	mov	lr, r3
 8010726:	4770      	bx	lr

08010728 <_fini>:
 8010728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072a:	bf00      	nop
 801072c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801072e:	bc08      	pop	{r3}
 8010730:	469e      	mov	lr, r3
 8010732:	4770      	bx	lr
