
GOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a10  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b710  0800b710  00020a48  2**0
                  CONTENTS
  4 .ARM          00000008  0800b710  0800b710  0001b710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b718  0800b718  00020a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b718  0800b718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b71c  0800b71c  0001b71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a48  20000000  0800b720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000a48  0800c168  00020a48  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  0800c168  00020c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c128  00000000  00000000  00020a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381c  00000000  00000000  0003cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00041408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002064d  00000000  00000000  000422e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dc8  00000000  00000000  00062935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd82d  00000000  00000000  000786fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135f2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d20  00000000  00000000  00135f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a48 	.word	0x20000a48
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ce8 	.word	0x08008ce8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a4c 	.word	0x20000a4c
 800021c:	08008ce8 	.word	0x08008ce8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9b9 	b.w	8000654 <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96e 	b.w	8000654 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	4604      	mov	r4, r0
 8000398:	468c      	mov	ip, r1
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8083 	bne.w	80004a6 <__udivmoddi4+0x116>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d947      	bls.n	8000436 <__udivmoddi4+0xa6>
 80003a6:	fab2 f282 	clz	r2, r2
 80003aa:	b142      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003ac:	f1c2 0020 	rsb	r0, r2, #32
 80003b0:	fa24 f000 	lsr.w	r0, r4, r0
 80003b4:	4091      	lsls	r1, r2
 80003b6:	4097      	lsls	r7, r2
 80003b8:	ea40 0c01 	orr.w	ip, r0, r1
 80003bc:	4094      	lsls	r4, r2
 80003be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fbbc f6f8 	udiv	r6, ip, r8
 80003c8:	fa1f fe87 	uxth.w	lr, r7
 80003cc:	fb08 c116 	mls	r1, r8, r6, ip
 80003d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d4:	fb06 f10e 	mul.w	r1, r6, lr
 80003d8:	4299      	cmp	r1, r3
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x60>
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	f106 30ff 	add.w	r0, r6, #4294967295
 80003e2:	f080 8119 	bcs.w	8000618 <__udivmoddi4+0x288>
 80003e6:	4299      	cmp	r1, r3
 80003e8:	f240 8116 	bls.w	8000618 <__udivmoddi4+0x288>
 80003ec:	3e02      	subs	r6, #2
 80003ee:	443b      	add	r3, r7
 80003f0:	1a5b      	subs	r3, r3, r1
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d909      	bls.n	800041c <__udivmoddi4+0x8c>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f100 33ff 	add.w	r3, r0, #4294967295
 800040e:	f080 8105 	bcs.w	800061c <__udivmoddi4+0x28c>
 8000412:	45a6      	cmp	lr, r4
 8000414:	f240 8102 	bls.w	800061c <__udivmoddi4+0x28c>
 8000418:	3802      	subs	r0, #2
 800041a:	443c      	add	r4, r7
 800041c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000420:	eba4 040e 	sub.w	r4, r4, lr
 8000424:	2600      	movs	r6, #0
 8000426:	b11d      	cbz	r5, 8000430 <__udivmoddi4+0xa0>
 8000428:	40d4      	lsrs	r4, r2
 800042a:	2300      	movs	r3, #0
 800042c:	e9c5 4300 	strd	r4, r3, [r5]
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	b902      	cbnz	r2, 800043a <__udivmoddi4+0xaa>
 8000438:	deff      	udf	#255	; 0xff
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	2a00      	cmp	r2, #0
 8000440:	d150      	bne.n	80004e4 <__udivmoddi4+0x154>
 8000442:	1bcb      	subs	r3, r1, r7
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fa1f f887 	uxth.w	r8, r7
 800044c:	2601      	movs	r6, #1
 800044e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000452:	0c21      	lsrs	r1, r4, #16
 8000454:	fb0e 331c 	mls	r3, lr, ip, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb08 f30c 	mul.w	r3, r8, ip
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0xe4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0xe2>
 800046c:	428b      	cmp	r3, r1
 800046e:	f200 80e9 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 8000472:	4684      	mov	ip, r0
 8000474:	1ac9      	subs	r1, r1, r3
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000480:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x10c>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x10a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80d9 	bhi.w	800064c <__udivmoddi4+0x2bc>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e7bf      	b.n	8000426 <__udivmoddi4+0x96>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d909      	bls.n	80004be <__udivmoddi4+0x12e>
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	f000 80b1 	beq.w	8000612 <__udivmoddi4+0x282>
 80004b0:	2600      	movs	r6, #0
 80004b2:	e9c5 0100 	strd	r0, r1, [r5]
 80004b6:	4630      	mov	r0, r6
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	fab3 f683 	clz	r6, r3
 80004c2:	2e00      	cmp	r6, #0
 80004c4:	d14a      	bne.n	800055c <__udivmoddi4+0x1cc>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d302      	bcc.n	80004d0 <__udivmoddi4+0x140>
 80004ca:	4282      	cmp	r2, r0
 80004cc:	f200 80b8 	bhi.w	8000640 <__udivmoddi4+0x2b0>
 80004d0:	1a84      	subs	r4, r0, r2
 80004d2:	eb61 0103 	sbc.w	r1, r1, r3
 80004d6:	2001      	movs	r0, #1
 80004d8:	468c      	mov	ip, r1
 80004da:	2d00      	cmp	r5, #0
 80004dc:	d0a8      	beq.n	8000430 <__udivmoddi4+0xa0>
 80004de:	e9c5 4c00 	strd	r4, ip, [r5]
 80004e2:	e7a5      	b.n	8000430 <__udivmoddi4+0xa0>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ec:	4097      	lsls	r7, r2
 80004ee:	fa01 f002 	lsl.w	r0, r1, r2
 80004f2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f6:	40d9      	lsrs	r1, r3
 80004f8:	4330      	orrs	r0, r6
 80004fa:	0c03      	lsrs	r3, r0, #16
 80004fc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000500:	fa1f f887 	uxth.w	r8, r7
 8000504:	fb0e 1116 	mls	r1, lr, r6, r1
 8000508:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800050c:	fb06 f108 	mul.w	r1, r6, r8
 8000510:	4299      	cmp	r1, r3
 8000512:	fa04 f402 	lsl.w	r4, r4, r2
 8000516:	d909      	bls.n	800052c <__udivmoddi4+0x19c>
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	f106 3cff 	add.w	ip, r6, #4294967295
 800051e:	f080 808d 	bcs.w	800063c <__udivmoddi4+0x2ac>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 808a 	bls.w	800063c <__udivmoddi4+0x2ac>
 8000528:	3e02      	subs	r6, #2
 800052a:	443b      	add	r3, r7
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b281      	uxth	r1, r0
 8000530:	fbb3 f0fe 	udiv	r0, r3, lr
 8000534:	fb0e 3310 	mls	r3, lr, r0, r3
 8000538:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053c:	fb00 f308 	mul.w	r3, r0, r8
 8000540:	428b      	cmp	r3, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x1c4>
 8000544:	1879      	adds	r1, r7, r1
 8000546:	f100 3cff 	add.w	ip, r0, #4294967295
 800054a:	d273      	bcs.n	8000634 <__udivmoddi4+0x2a4>
 800054c:	428b      	cmp	r3, r1
 800054e:	d971      	bls.n	8000634 <__udivmoddi4+0x2a4>
 8000550:	3802      	subs	r0, #2
 8000552:	4439      	add	r1, r7
 8000554:	1acb      	subs	r3, r1, r3
 8000556:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800055a:	e778      	b.n	800044e <__udivmoddi4+0xbe>
 800055c:	f1c6 0c20 	rsb	ip, r6, #32
 8000560:	fa03 f406 	lsl.w	r4, r3, r6
 8000564:	fa22 f30c 	lsr.w	r3, r2, ip
 8000568:	431c      	orrs	r4, r3
 800056a:	fa20 f70c 	lsr.w	r7, r0, ip
 800056e:	fa01 f306 	lsl.w	r3, r1, r6
 8000572:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000576:	fa21 f10c 	lsr.w	r1, r1, ip
 800057a:	431f      	orrs	r7, r3
 800057c:	0c3b      	lsrs	r3, r7, #16
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fa1f f884 	uxth.w	r8, r4
 8000586:	fb0e 1119 	mls	r1, lr, r9, r1
 800058a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800058e:	fb09 fa08 	mul.w	sl, r9, r8
 8000592:	458a      	cmp	sl, r1
 8000594:	fa02 f206 	lsl.w	r2, r2, r6
 8000598:	fa00 f306 	lsl.w	r3, r0, r6
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x220>
 800059e:	1861      	adds	r1, r4, r1
 80005a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005a4:	d248      	bcs.n	8000638 <__udivmoddi4+0x2a8>
 80005a6:	458a      	cmp	sl, r1
 80005a8:	d946      	bls.n	8000638 <__udivmoddi4+0x2a8>
 80005aa:	f1a9 0902 	sub.w	r9, r9, #2
 80005ae:	4421      	add	r1, r4
 80005b0:	eba1 010a 	sub.w	r1, r1, sl
 80005b4:	b2bf      	uxth	r7, r7
 80005b6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ba:	fb0e 1110 	mls	r1, lr, r0, r1
 80005be:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005c2:	fb00 f808 	mul.w	r8, r0, r8
 80005c6:	45b8      	cmp	r8, r7
 80005c8:	d907      	bls.n	80005da <__udivmoddi4+0x24a>
 80005ca:	19e7      	adds	r7, r4, r7
 80005cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005d0:	d22e      	bcs.n	8000630 <__udivmoddi4+0x2a0>
 80005d2:	45b8      	cmp	r8, r7
 80005d4:	d92c      	bls.n	8000630 <__udivmoddi4+0x2a0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	4427      	add	r7, r4
 80005da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005de:	eba7 0708 	sub.w	r7, r7, r8
 80005e2:	fba0 8902 	umull	r8, r9, r0, r2
 80005e6:	454f      	cmp	r7, r9
 80005e8:	46c6      	mov	lr, r8
 80005ea:	4649      	mov	r1, r9
 80005ec:	d31a      	bcc.n	8000624 <__udivmoddi4+0x294>
 80005ee:	d017      	beq.n	8000620 <__udivmoddi4+0x290>
 80005f0:	b15d      	cbz	r5, 800060a <__udivmoddi4+0x27a>
 80005f2:	ebb3 020e 	subs.w	r2, r3, lr
 80005f6:	eb67 0701 	sbc.w	r7, r7, r1
 80005fa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005fe:	40f2      	lsrs	r2, r6
 8000600:	ea4c 0202 	orr.w	r2, ip, r2
 8000604:	40f7      	lsrs	r7, r6
 8000606:	e9c5 2700 	strd	r2, r7, [r5]
 800060a:	2600      	movs	r6, #0
 800060c:	4631      	mov	r1, r6
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000612:	462e      	mov	r6, r5
 8000614:	4628      	mov	r0, r5
 8000616:	e70b      	b.n	8000430 <__udivmoddi4+0xa0>
 8000618:	4606      	mov	r6, r0
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0x60>
 800061c:	4618      	mov	r0, r3
 800061e:	e6fd      	b.n	800041c <__udivmoddi4+0x8c>
 8000620:	4543      	cmp	r3, r8
 8000622:	d2e5      	bcs.n	80005f0 <__udivmoddi4+0x260>
 8000624:	ebb8 0e02 	subs.w	lr, r8, r2
 8000628:	eb69 0104 	sbc.w	r1, r9, r4
 800062c:	3801      	subs	r0, #1
 800062e:	e7df      	b.n	80005f0 <__udivmoddi4+0x260>
 8000630:	4608      	mov	r0, r1
 8000632:	e7d2      	b.n	80005da <__udivmoddi4+0x24a>
 8000634:	4660      	mov	r0, ip
 8000636:	e78d      	b.n	8000554 <__udivmoddi4+0x1c4>
 8000638:	4681      	mov	r9, r0
 800063a:	e7b9      	b.n	80005b0 <__udivmoddi4+0x220>
 800063c:	4666      	mov	r6, ip
 800063e:	e775      	b.n	800052c <__udivmoddi4+0x19c>
 8000640:	4630      	mov	r0, r6
 8000642:	e74a      	b.n	80004da <__udivmoddi4+0x14a>
 8000644:	f1ac 0c02 	sub.w	ip, ip, #2
 8000648:	4439      	add	r1, r7
 800064a:	e713      	b.n	8000474 <__udivmoddi4+0xe4>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	e724      	b.n	800049c <__udivmoddi4+0x10c>
 8000652:	bf00      	nop

08000654 <__aeabi_idiv0>:
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <Rational>:
    } while (1);

    return (uint32_t)(approx);
}

int32_t Rational(int a, int b) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	return(FIX16_DIV(convert(a), convert(b)));
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f838 	bl	80006d8 <convert>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000670:	1415      	asrs	r5, r2, #16
 8000672:	0414      	lsls	r4, r2, #16
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	f000 f82f 	bl	80006d8 <convert>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000682:	4620      	mov	r0, r4
 8000684:	4629      	mov	r1, r5
 8000686:	f7ff fe1b 	bl	80002c0 <__aeabi_ldivmod>
 800068a:	4602      	mov	r2, r0
 800068c:	460b      	mov	r3, r1
 800068e:	4613      	mov	r3, r2
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bdb0      	pop	{r4, r5, r7, pc}

08000698 <printFix>:

void printFix(int32_t i) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A signed 16.16 integer to be printed.
	 */

        if ((i & 0x80000000) != 0) { // Handle negative numbers
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da05      	bge.n	80006b2 <printFix+0x1a>
            printf("-");
 80006a6:	202d      	movs	r0, #45	; 0x2d
 80006a8:	f007 f948 	bl	800793c <putchar>
            i = ~i + 1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	425b      	negs	r3, r3
 80006b0:	607b      	str	r3, [r7, #4]
        }
        printf("%ld.%04ld", i >> 16, (10000 * (uint32_t)(i & 0xFFFF)) >> 16);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	1419      	asrs	r1, r3, #16
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	0c1b      	lsrs	r3, r3, #16
 80006c4:	461a      	mov	r2, r3
 80006c6:	4803      	ldr	r0, [pc, #12]	; (80006d4 <printFix+0x3c>)
 80006c8:	f007 f920 	bl	800790c <iprintf>
        // Print a maximum of 4 decimal digits to avoid overflow
    }
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08008d00 	.word	0x08008d00

080006d8 <convert>:
	 */

       return i << 2;
   }

int32_t convert(int32_t i) {
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A number to be bitshifted by <<16, e.g. 32.0.
	 * Output: Number bitshifted 16 to the left, e.g. 16.16.
	 */
	return(i << FIX16_SHIFT);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	041b      	lsls	r3, r3, #16
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <inconvert>:

int32_t inconvert(int32_t i) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	/*
	 * Input: A 16.16 number.
	 * Returns: A 32.0 number, rounded to the nearest integer.
	 */
	return((i + ((1 << (FIX16_SHIFT - 1)))) >> FIX16_SHIFT);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006fe:	141b      	asrs	r3, r3, #16
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <I2C_Scan>:

//
// code for testing I2C
//

void I2C_Scan(I2C_HandleTypeDef *hi2c) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result;
    uint8_t i;

    printf("Scanning I2C bus...\r\n");
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <I2C_Scan+0x58>)
 8000716:	f007 f995 	bl	8007a44 <puts>

    for (i = 1; i < 128; i++) {
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e015      	b.n	800074c <I2C_Scan+0x40>
        // Left-shift by 1 to form 8-bit address
        result = HAL_I2C_IsDeviceReady(hi2c, (i << 1), 1, 10);
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	b29b      	uxth	r3, r3
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b299      	uxth	r1, r3
 8000728:	230a      	movs	r3, #10
 800072a:	2201      	movs	r2, #1
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f004 fa6f 	bl	8004c10 <HAL_I2C_IsDeviceReady>
 8000732:	4603      	mov	r3, r0
 8000734:	73bb      	strb	r3, [r7, #14]

        if (result == HAL_OK) {
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d104      	bne.n	8000746 <I2C_Scan+0x3a>
            printf("I2C device found at address 0x%02X\r\n", i);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4619      	mov	r1, r3
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <I2C_Scan+0x5c>)
 8000742:	f007 f8e3 	bl	800790c <iprintf>
    for (i = 1; i < 128; i++) {
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	3301      	adds	r3, #1
 800074a:	73fb      	strb	r3, [r7, #15]
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	2b00      	cmp	r3, #0
 8000752:	dae5      	bge.n	8000720 <I2C_Scan+0x14>
        }
    }

    printf("Scan complete.\r\n");
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <I2C_Scan+0x60>)
 8000756:	f007 f975 	bl	8007a44 <puts>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08008d0c 	.word	0x08008d0c
 8000768:	08008d24 	.word	0x08008d24
 800076c:	08008d4c 	.word	0x08008d4c

08000770 <LCD_EnablePulse>:
#define D6_PORT GPIOA
#define D6_PIN  GPIO_PIN_6
#define D7_PORT GPIOB
#define D7_PIN  GPIO_PIN_3

static void LCD_EnablePulse(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f003 ff86 	bl	800468c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000780:	2001      	movs	r0, #1
 8000782:	f003 fc0f 	bl	8003fa4 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f003 ff7d 	bl	800468c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000792:	2001      	movs	r0, #1
 8000794:	f003 fc06 	bl	8003fa4 <HAL_Delay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <LCD_Send4Bits>:

static void LCD_Send4Bits(uint8_t data) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_PORT, D4_PIN, (data >> 0) & 0x01);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	2110      	movs	r1, #16
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f003 ff69 	bl	800468c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_PORT, D5_PIN, (data >> 1) & 0x01);
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	2120      	movs	r1, #32
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f003 ff5d 	bl	800468c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_PORT, D6_PIN, (data >> 2) & 0x01);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	2140      	movs	r1, #64	; 0x40
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f003 ff51 	bl	800468c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_PORT, D7_PIN, (data >> 3) & 0x01);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	08db      	lsrs	r3, r3, #3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	2108      	movs	r1, #8
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <LCD_Send4Bits+0x70>)
 80007fc:	f003 ff46 	bl	800468c <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8000800:	f7ff ffb6 	bl	8000770 <LCD_EnablePulse>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	48000400 	.word	0x48000400

08000810 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f003 ff33 	bl	800468c <HAL_GPIO_WritePin>
    LCD_Send4Bits(cmd >> 4);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	091b      	lsrs	r3, r3, #4
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ffb5 	bl	800079c <LCD_Send4Bits>
    LCD_Send4Bits(cmd & 0x0F);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f003 030f 	and.w	r3, r3, #15
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ffae 	bl	800079c <LCD_Send4Bits>
    HAL_Delay(2);
 8000840:	2002      	movs	r0, #2
 8000842:	f003 fbaf 	bl	8003fa4 <HAL_Delay>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <LCD_SendChar>:

void LCD_SendChar(char c) {
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f003 ff14 	bl	800468c <HAL_GPIO_WritePin>
    LCD_Send4Bits(c >> 4);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	b2db      	uxtb	r3, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff96 	bl	800079c <LCD_Send4Bits>
    LCD_Send4Bits(c & 0x0F);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff8f 	bl	800079c <LCD_Send4Bits>
    HAL_Delay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f003 fb90 	bl	8003fa4 <HAL_Delay>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <LCD_SendString>:

void LCD_SendString(char* str) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000894:	e006      	b.n	80008a4 <LCD_SendString+0x18>
        LCD_SendChar(*str++);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	1c5a      	adds	r2, r3, #1
 800089a:	607a      	str	r2, [r7, #4]
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ffd5 	bl	800084e <LCD_SendChar>
    while (*str) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f4      	bne.n	8000896 <LCD_SendString+0xa>
    }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b084      	sub	sp, #16
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4603      	mov	r3, r0
 80008be:	460a      	mov	r2, r1
 80008c0:	71fb      	strb	r3, [r7, #7]
 80008c2:	4613      	mov	r3, r2
 80008c4:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <LCD_SetCursor+0x1a>
 80008cc:	2200      	movs	r2, #0
 80008ce:	e000      	b.n	80008d2 <LCD_SetCursor+0x1c>
 80008d0:	2240      	movs	r2, #64	; 0x40
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	4413      	add	r3, r2
 80008d6:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | addr);
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff95 	bl	8000810 <LCD_SendCommand>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <LCD_Init>:

void LCD_Init(void) {
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
    HAL_Delay(40);
 80008f2:	2028      	movs	r0, #40	; 0x28
 80008f4:	f003 fb56 	bl	8003fa4 <HAL_Delay>

    LCD_Send4Bits(0x03); HAL_Delay(5);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f7ff ff4f 	bl	800079c <LCD_Send4Bits>
 80008fe:	2005      	movs	r0, #5
 8000900:	f003 fb50 	bl	8003fa4 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000904:	2003      	movs	r0, #3
 8000906:	f7ff ff49 	bl	800079c <LCD_Send4Bits>
 800090a:	2001      	movs	r0, #1
 800090c:	f003 fb4a 	bl	8003fa4 <HAL_Delay>
    LCD_Send4Bits(0x03); HAL_Delay(1);
 8000910:	2003      	movs	r0, #3
 8000912:	f7ff ff43 	bl	800079c <LCD_Send4Bits>
 8000916:	2001      	movs	r0, #1
 8000918:	f003 fb44 	bl	8003fa4 <HAL_Delay>
    LCD_Send4Bits(0x02); // Set to 4-bit mode
 800091c:	2002      	movs	r0, #2
 800091e:	f7ff ff3d 	bl	800079c <LCD_Send4Bits>

    LCD_SendCommand(0x28); // Function set: 4-bit, 2 line, 5x8 dots
 8000922:	2028      	movs	r0, #40	; 0x28
 8000924:	f7ff ff74 	bl	8000810 <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display ON, Cursor OFF
 8000928:	200c      	movs	r0, #12
 800092a:	f7ff ff71 	bl	8000810 <LCD_SendCommand>
    LCD_SendCommand(0x06); // Entry mode: Move cursor right
 800092e:	2006      	movs	r0, #6
 8000930:	f7ff ff6e 	bl	8000810 <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff ff6b 	bl	8000810 <LCD_SendCommand>
    HAL_Delay(2);
 800093a:	2002      	movs	r0, #2
 800093c:	f003 fb32 	bl	8003fa4 <HAL_Delay>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <LCD_PrintInt>:

void LCD_PrintInt(int32_t value) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
    if (value == 0) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <LCD_PrintInt+0x16>
        LCD_SendString("0    ");
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <LCD_PrintInt+0x34>)
 8000954:	f7ff ff9a 	bl	800088c <LCD_SendString>
 8000958:	e00b      	b.n	8000972 <LCD_PrintInt+0x2e>
        return;
    }
    char buffer[12];
    sprintf(buffer, "%ld  ", (long)value);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4906      	ldr	r1, [pc, #24]	; (800097c <LCD_PrintInt+0x38>)
 8000962:	4618      	mov	r0, r3
 8000964:	f007 f876 	bl	8007a54 <siprintf>
    LCD_SendString(buffer);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff8d 	bl	800088c <LCD_SendString>
}
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	08008d5c 	.word	0x08008d5c
 800097c:	08008d64 	.word	0x08008d64

08000980 <LCD_PrintAngle>:

void LCD_PrintAngle(int32_t angle) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    //angle = inconvert(angle);  // Convert to integer degrees

    if (angle < 0) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	da05      	bge.n	800099a <LCD_PrintAngle+0x1a>
        LCD_SendChar('-');
 800098e:	202d      	movs	r0, #45	; 0x2d
 8000990:	f7ff ff5d 	bl	800084e <LCD_SendChar>
        angle = -angle;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	425b      	negs	r3, r3
 8000998:	607b      	str	r3, [r7, #4]
    }
    LCD_PrintInt(angle);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffd2 	bl	8000944 <LCD_PrintInt>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <lsmCtrlReg>:
#include "lsm9ds1.h"
#include "fixp.h"
#include "main.h"
#include "vector.h"

void lsmCtrlReg(I2C_HandleTypeDef*handle) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	6078      	str	r0, [r7, #4]
	// Enable accelerometer: ODR = 119 Hz, ±2g, BW = 50 Hz

	  uint8_t acc_ctrl_reg8[2] = {0x22, 0x05}; // reboot + soft reset
 80009b0:	f240 5322 	movw	r3, #1314	; 0x522
 80009b4:	83bb      	strh	r3, [r7, #28]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg8, 2, HAL_MAX_DELAY);
 80009b6:	f107 021c 	add.w	r2, r7, #28
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2302      	movs	r3, #2
 80009c2:	21d6      	movs	r1, #214	; 0xd6
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f003 ff15 	bl	80047f4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(100);
 80009ca:	2064      	movs	r0, #100	; 0x64
 80009cc:	f003 faea 	bl	8003fa4 <HAL_Delay>

	  uint8_t acc_ctrl_reg6[2] = {0x20, 0x60}; // 0x60 = 0b01100000 → ODR = 119Hz, ±2g
 80009d0:	f246 0320 	movw	r3, #24608	; 0x6020
 80009d4:	833b      	strh	r3, [r7, #24]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, acc_ctrl_reg6, 2, HAL_MAX_DELAY);
 80009d6:	f107 0218 	add.w	r2, r7, #24
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2302      	movs	r3, #2
 80009e2:	21d6      	movs	r1, #214	; 0xd6
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f003 ff05 	bl	80047f4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 80009ea:	200a      	movs	r0, #10
 80009ec:	f003 fada 	bl	8003fa4 <HAL_Delay>

	  uint8_t mag_ctrl_reg1[2] = {0x20, 0b01110000}; //
 80009f0:	f247 0320 	movw	r3, #28704	; 0x7020
 80009f4:	82bb      	strh	r3, [r7, #20]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg1, 2, HAL_MAX_DELAY);
 80009f6:	f107 0214 	add.w	r2, r7, #20
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2302      	movs	r3, #2
 8000a02:	213c      	movs	r1, #60	; 0x3c
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f003 fef5 	bl	80047f4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f003 faca 	bl	8003fa4 <HAL_Delay>

	  uint8_t mag_ctrl_reg3[2] = {0x22, 0b00000000}; //
 8000a10:	2322      	movs	r3, #34	; 0x22
 8000a12:	823b      	strh	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg3, 2, HAL_MAX_DELAY);
 8000a14:	f107 0210 	add.w	r2, r7, #16
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2302      	movs	r3, #2
 8000a20:	213c      	movs	r1, #60	; 0x3c
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f003 fee6 	bl	80047f4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a28:	200a      	movs	r0, #10
 8000a2a:	f003 fabb 	bl	8003fa4 <HAL_Delay>

	  uint8_t mag_ctrl_reg4[2] = {0x23, 0b00001100}; //
 8000a2e:	f640 4323 	movw	r3, #3107	; 0xc23
 8000a32:	81bb      	strh	r3, [r7, #12]
	  HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, mag_ctrl_reg4, 2, HAL_MAX_DELAY);
 8000a34:	f107 020c 	add.w	r2, r7, #12
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	213c      	movs	r1, #60	; 0x3c
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f003 fed6 	bl	80047f4 <HAL_I2C_Master_Transmit>
	  HAL_Delay(10);
 8000a48:	200a      	movs	r0, #10
 8000a4a:	f003 faab 	bl	8003fa4 <HAL_Delay>
}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <lsmAccRead>:
	};

	return out;
}

Vector3D lsmAccRead(I2C_HandleTypeDef*handle) {
 8000a56:	b590      	push	{r4, r7, lr}
 8000a58:	b08d      	sub	sp, #52	; 0x34
 8000a5a:	af02      	add	r7, sp, #8
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
	HAL_I2C_Master_Transmit(&hi2c3, LSM9DS1_MAG_ADDRESS << 1, OUT_X_L_M, 1, HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(&hi2c3, LSM9DS1_MAG_ADDRESS << 1 | 0x01, buffer, sizeof(buffer), HAL_MAX_DELAY);
	printf("%d\n", buffer);
	*/

	uint8_t reg1 = OUT_X_XL | 0x80; // Enable auto-increment
 8000a60:	23a8      	movs	r3, #168	; 0xa8
 8000a62:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data1[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_ACC_ADDRESS << 1, &reg1, 1, HAL_MAX_DELAY);
 8000a66:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	21d6      	movs	r1, #214	; 0xd6
 8000a74:	6838      	ldr	r0, [r7, #0]
 8000a76:	f003 febd 	bl	80047f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_ACC_ADDRESS << 1) | 0x01, data1, 6, HAL_MAX_DELAY);
 8000a7a:	f107 0218 	add.w	r2, r7, #24
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2306      	movs	r3, #6
 8000a86:	21d7      	movs	r1, #215	; 0xd7
 8000a88:	6838      	ldr	r0, [r7, #0]
 8000a8a:	f003 ffcb 	bl	8004a24 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t acc_x = (int16_t)(data1[1] << 8 | data1[0]);
 8000a8e:	7e7b      	ldrb	r3, [r7, #25]
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	7e3b      	ldrb	r3, [r7, #24]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t acc_y = (int16_t)(data1[3] << 8 | data1[2]);
 8000a9c:	7efb      	ldrb	r3, [r7, #27]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	7ebb      	ldrb	r3, [r7, #26]
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t acc_z = (int16_t)(data1[5] << 8 | data1[4]);
 8000aaa:	7f7b      	ldrb	r3, [r7, #29]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	7f3b      	ldrb	r3, [r7, #28]
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {acc_x, acc_y, acc_z};
 8000ab8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ac8:	617b      	str	r3, [r7, #20]
	return output;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	461c      	mov	r4, r3
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	372c      	adds	r7, #44	; 0x2c
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}

08000ae2 <lsmMagRead>:

Vector3D lsmMagRead(I2C_HandleTypeDef*handle) {
 8000ae2:	b590      	push	{r4, r7, lr}
 8000ae4:	b08d      	sub	sp, #52	; 0x34
 8000ae6:	af02      	add	r7, sp, #8
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	6039      	str	r1, [r7, #0]
	uint8_t reg2 = OUT_X_L_M | 0x80; // Enable auto-increment
 8000aec:	23a8      	movs	r3, #168	; 0xa8
 8000aee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t data2[6];

	// Request starting from OUT_X_XL with auto-increment
	HAL_I2C_Master_Transmit(handle, LSM9DS1_MAG_ADDRESS << 1, &reg2, 1, HAL_MAX_DELAY);
 8000af2:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	213c      	movs	r1, #60	; 0x3c
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f003 fe77 	bl	80047f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(handle, (LSM9DS1_MAG_ADDRESS << 1) | 0x01, data2, 6, HAL_MAX_DELAY);
 8000b06:	f107 0218 	add.w	r2, r7, #24
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2306      	movs	r3, #6
 8000b12:	213d      	movs	r1, #61	; 0x3d
 8000b14:	6838      	ldr	r0, [r7, #0]
 8000b16:	f003 ff85 	bl	8004a24 <HAL_I2C_Master_Receive>

	// Combine bytes into signed 16-bit integers
	int16_t mag_x = (int16_t)(data2[1] << 8 | data2[0]);
 8000b1a:	7e7b      	ldrb	r3, [r7, #25]
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	7e3b      	ldrb	r3, [r7, #24]
 8000b22:	b21b      	sxth	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t mag_y = (int16_t)(data2[3] << 8 | data2[2]);
 8000b28:	7efb      	ldrb	r3, [r7, #27]
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	7ebb      	ldrb	r3, [r7, #26]
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t mag_z = (int16_t)(data2[5] << 8 | data2[4]);
 8000b36:	7f7b      	ldrb	r3, [r7, #29]
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	b21a      	sxth	r2, r3
 8000b3c:	7f3b      	ldrb	r3, [r7, #28]
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	847b      	strh	r3, [r7, #34]	; 0x22

	Vector3D output = {mag_x, mag_y, mag_z};
 8000b44:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000b54:	617b      	str	r3, [r7, #20]
	return output;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	461c      	mov	r4, r3
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	372c      	adds	r7, #44	; 0x2c
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd90      	pop	{r4, r7, pc}
	...

08000b70 <readSensorsAndAverage>:

static int64_t  acc_sum_x = 0, acc_sum_y = 0, acc_sum_z = 0;
static int64_t  mag_sum_x = 0, mag_sum_y = 0, mag_sum_z = 0;

void readSensorsAndAverage(Vector3D* acc_avg, Vector3D* mag_avg, I2C_HandleTypeDef hi2c3)
{
 8000b70:	b082      	sub	sp, #8
 8000b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b76:	b0bb      	sub	sp, #236	; 0xec
 8000b78:	af0a      	add	r7, sp, #40	; 0x28
 8000b7a:	6578      	str	r0, [r7, #84]	; 0x54
 8000b7c:	6539      	str	r1, [r7, #80]	; 0x50
 8000b7e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000b82:	e881 000c 	stmia.w	r1, {r2, r3}
	Matrix3x3 softIron = create_matrix(
 8000b86:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8000b8a:	4bc7      	ldr	r3, [pc, #796]	; (8000ea8 <readSensorsAndAverage+0x338>)
 8000b8c:	9305      	str	r3, [sp, #20]
 8000b8e:	f240 332d 	movw	r3, #813	; 0x32d
 8000b92:	9304      	str	r3, [sp, #16]
 8000b94:	4bc5      	ldr	r3, [pc, #788]	; (8000eac <readSensorsAndAverage+0x33c>)
 8000b96:	9303      	str	r3, [sp, #12]
 8000b98:	f240 332d 	movw	r3, #813	; 0x32d
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	4bc4      	ldr	r3, [pc, #784]	; (8000eb0 <readSensorsAndAverage+0x340>)
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	f641 0373 	movw	r3, #6259	; 0x1873
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	4bc0      	ldr	r3, [pc, #768]	; (8000eac <readSensorsAndAverage+0x33c>)
 8000baa:	f641 0273 	movw	r2, #6259	; 0x1873
 8000bae:	f24e 11ff 	movw	r1, #57855	; 0xe1ff
 8000bb2:	f002 fe9f 	bl	80038f4 <create_matrix>
			57855,   6259, -1016,     /* row 0 */
			6259,    73662, 813,     /* row 1 */
			-1016,   813, 66696      /* row 2 */
	);
    /* 1. fresh raw sensor counts --------------------------------------- */
    Vector3D acc_raw = lsmAccRead(&hi2c3);     /* ±16 384 cnt ≈ 1 g   */
 8000bb6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bba:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff49 	bl	8000a56 <lsmAccRead>
    Vector3D mraw    = lsmMagRead(&hi2c3);     /* ±32 768 cnt        */
 8000bc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bc8:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff88 	bl	8000ae2 <lsmMagRead>
    mag_raw.x =  mraw.y + 2637; //+ 2897;    +Ymag → +Xbody
    mag_raw.y = -mraw.x + 3352;//2486.0; //+ 3352;   /* –Xmag → +Ybody
    mag_raw.z =  mraw.z + 3376; //+ 3200;    Zmag →  Zbody
    */

	mag_raw.x =  convert(mraw.x) - convert(2832 + 54); //+ 2897;   /* +Ymag → +Xbody */
 8000bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fd7e 	bl	80006d8 <convert>
 8000bdc:	4604      	mov	r4, r0
 8000bde:	f640 3046 	movw	r0, #2886	; 0xb46
 8000be2:	f7ff fd79 	bl	80006d8 <convert>
 8000be6:	4603      	mov	r3, r0
 8000be8:	1ae3      	subs	r3, r4, r3
 8000bea:	677b      	str	r3, [r7, #116]	; 0x74
    mag_raw.y =  convert(mraw.y) + convert(3259 - 192); //2486.0; //+ 3352;   /* –Xmag → +Ybody */
 8000bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd71 	bl	80006d8 <convert>
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	f640 30fb 	movw	r0, #3067	; 0xbfb
 8000bfc:	f7ff fd6c 	bl	80006d8 <convert>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4423      	add	r3, r4
 8000c04:	67bb      	str	r3, [r7, #120]	; 0x78
	mag_raw.z =  convert(mraw.z) + convert(4243 - 80); //+ 3200;   /*  Zmag →  Zbody */
 8000c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fd64 	bl	80006d8 <convert>
 8000c10:	4604      	mov	r4, r0
 8000c12:	f241 0043 	movw	r0, #4163	; 0x1043
 8000c16:	f7ff fd5f 	bl	80006d8 <convert>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4423      	add	r3, r4
 8000c1e:	67fb      	str	r3, [r7, #124]	; 0x7c

	mag_raw = MVMult(softIron, mag_raw);
 8000c20:	f107 0674 	add.w	r6, r7, #116	; 0x74
 8000c24:	ac06      	add	r4, sp, #24
 8000c26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000c2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c32:	466d      	mov	r5, sp
 8000c34:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c40:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c44:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f002 ffc2 	bl	8003bd4 <MVMult>

	/* 5. push *m_soft* into the FIFO instead of the raw reading ----------- */

    acc_raw.x = acc_raw.x + 376;
 8000c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c54:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    acc_raw.y = acc_raw.y + 282 + 133;
 8000c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000c60:	f203 139f 	addw	r3, r3, #415	; 0x19f
 8000c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    acc_raw.z = acc_raw.z - 738;
 8000c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c6c:	f2a3 23e2 	subw	r3, r3, #738	; 0x2e2
 8000c70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* 3. promote to Q16.16  (raw × 4  ==  << 2) ------------------------ */
    Vector3D acc_q16 = { acc_raw.x,
 8000c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c78:	66bb      	str	r3, [r7, #104]	; 0x68
                         acc_raw.y,
 8000c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    Vector3D acc_q16 = { acc_raw.x,
 8000c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
                         acc_raw.z};
 8000c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    Vector3D acc_q16 = { acc_raw.x,
 8000c84:	673b      	str	r3, [r7, #112]	; 0x70

    Vector3D mag_q16 = { mag_raw.x>>16,
 8000c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c88:	141b      	asrs	r3, r3, #16
 8000c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
                         mag_raw.y>>16,
 8000c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c8e:	141b      	asrs	r3, r3, #16
    Vector3D mag_q16 = { mag_raw.x>>16,
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
                         mag_raw.z>>16};
 8000c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c94:	141b      	asrs	r3, r3, #16
    Vector3D mag_q16 = { mag_raw.x>>16,
 8000c96:	667b      	str	r3, [r7, #100]	; 0x64

    /* 4. drop oldest sample if FIFO full ------------------------------ */
    if (buf_filled == AVG_LEN) {
 8000c98:	4b86      	ldr	r3, [pc, #536]	; (8000eb4 <readSensorsAndAverage+0x344>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	f040 809a 	bne.w	8000dd6 <readSensorsAndAverage+0x266>
        acc_sum_x -= acc_buf[buf_pos].x;
 8000ca2:	4b85      	ldr	r3, [pc, #532]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca8:	4b84      	ldr	r3, [pc, #528]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4c84      	ldr	r4, [pc, #528]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4423      	add	r3, r4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cc2:	ebb0 0802 	subs.w	r8, r0, r2
 8000cc6:	eb61 0903 	sbc.w	r9, r1, r3
 8000cca:	4b7b      	ldr	r3, [pc, #492]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000ccc:	e9c3 8900 	strd	r8, r9, [r3]
        acc_sum_y -= acc_buf[buf_pos].y;
 8000cd0:	4b7c      	ldr	r3, [pc, #496]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd6:	4b79      	ldr	r3, [pc, #484]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4c78      	ldr	r4, [pc, #480]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4423      	add	r3, r4
 8000ce8:	3304      	adds	r3, #4
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000cf2:	ebb0 0a02 	subs.w	sl, r0, r2
 8000cf6:	eb61 0b03 	sbc.w	fp, r1, r3
 8000cfa:	4b72      	ldr	r3, [pc, #456]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000cfc:	e9c3 ab00 	strd	sl, fp, [r3]
        acc_sum_z -= acc_buf[buf_pos].z;
 8000d00:	4b71      	ldr	r3, [pc, #452]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d06:	4b6d      	ldr	r3, [pc, #436]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4c6c      	ldr	r4, [pc, #432]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4423      	add	r3, r4
 8000d18:	3308      	adds	r3, #8
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d22:	1a84      	subs	r4, r0, r2
 8000d24:	64bc      	str	r4, [r7, #72]	; 0x48
 8000d26:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d2c:	4b66      	ldr	r3, [pc, #408]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000d2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8000d32:	e9c3 1200 	strd	r1, r2, [r3]

        mag_sum_x -= mag_buf[buf_pos].x;
 8000d36:	4b65      	ldr	r3, [pc, #404]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000d38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3c:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4c63      	ldr	r4, [pc, #396]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4423      	add	r3, r4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	643c      	str	r4, [r7, #64]	; 0x40
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8000d60:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000d62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000d66:	e9c3 1200 	strd	r1, r2, [r3]
        mag_sum_y -= mag_buf[buf_pos].y;
 8000d6a:	4b5a      	ldr	r3, [pc, #360]	; (8000ed4 <readSensorsAndAverage+0x364>)
 8000d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d70:	4b52      	ldr	r3, [pc, #328]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4c56      	ldr	r4, [pc, #344]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4423      	add	r3, r4
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	63bc      	str	r4, [r7, #56]	; 0x38
 8000d90:	eb61 0303 	sbc.w	r3, r1, r3
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d96:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <readSensorsAndAverage+0x364>)
 8000d98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000d9c:	e9c3 1200 	strd	r1, r2, [r3]
        mag_sum_z -= mag_buf[buf_pos].z;
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <readSensorsAndAverage+0x368>)
 8000da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000da6:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4c48      	ldr	r4, [pc, #288]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4423      	add	r3, r4
 8000db8:	3308      	adds	r3, #8
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000dc2:	1a84      	subs	r4, r0, r2
 8000dc4:	633c      	str	r4, [r7, #48]	; 0x30
 8000dc6:	eb61 0303 	sbc.w	r3, r1, r3
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
 8000dcc:	4b42      	ldr	r3, [pc, #264]	; (8000ed8 <readSensorsAndAverage+0x368>)
 8000dce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8000dd2:	e9c3 1200 	strd	r1, r2, [r3]
    }

    /* 5. store new sample & update sums -------------------------------- */
    acc_buf[buf_pos] = acc_q16;
 8000dd6:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4938      	ldr	r1, [pc, #224]	; (8000ec0 <readSensorsAndAverage+0x350>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	440b      	add	r3, r1
 8000de8:	461c      	mov	r4, r3
 8000dea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000df2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    mag_buf[buf_pos] = mag_q16;
 8000df6:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <readSensorsAndAverage+0x34c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4934      	ldr	r1, [pc, #208]	; (8000ed0 <readSensorsAndAverage+0x360>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	461c      	mov	r4, r3
 8000e0a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    acc_sum_x += acc_q16.x;  acc_sum_y += acc_q16.y;  acc_sum_z += acc_q16.z;
 8000e16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e18:	4618      	mov	r0, r3
 8000e1a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	1884      	adds	r4, r0, r2
 8000e26:	62bc      	str	r4, [r7, #40]	; 0x28
 8000e28:	eb41 0303 	adc.w	r3, r1, r3
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <readSensorsAndAverage+0x348>)
 8000e30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8000e34:	e9c3 1200 	strd	r1, r2, [r3]
 8000e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e40:	4b20      	ldr	r3, [pc, #128]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	1884      	adds	r4, r0, r2
 8000e48:	623c      	str	r4, [r7, #32]
 8000e4a:	eb41 0303 	adc.w	r3, r1, r3
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <readSensorsAndAverage+0x354>)
 8000e52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000e56:	e9c3 1200 	strd	r1, r2, [r3]
 8000e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	1884      	adds	r4, r0, r2
 8000e6a:	61bc      	str	r4, [r7, #24]
 8000e6c:	eb41 0303 	adc.w	r3, r1, r3
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <readSensorsAndAverage+0x358>)
 8000e74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000e78:	e9c3 1200 	strd	r1, r2, [r3]
    mag_sum_x += mag_q16.x;  mag_sum_y += mag_q16.y;  mag_sum_z += mag_q16.z;
 8000e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e7e:	4618      	mov	r0, r3
 8000e80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	1884      	adds	r4, r0, r2
 8000e8c:	613c      	str	r4, [r7, #16]
 8000e8e:	eb41 0303 	adc.w	r3, r1, r3
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <readSensorsAndAverage+0x35c>)
 8000e96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000e9a:	e9c3 1200 	strd	r1, r2, [r3]
 8000e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000ea6:	e019      	b.n	8000edc <readSensorsAndAverage+0x36c>
 8000ea8:	00010488 	.word	0x00010488
 8000eac:	fffffc08 	.word	0xfffffc08
 8000eb0:	00011fbe 	.word	0x00011fbe
 8000eb4:	20000aad 	.word	0x20000aad
 8000eb8:	20000ab0 	.word	0x20000ab0
 8000ebc:	20000aac 	.word	0x20000aac
 8000ec0:	20000a64 	.word	0x20000a64
 8000ec4:	20000ab8 	.word	0x20000ab8
 8000ec8:	20000ac0 	.word	0x20000ac0
 8000ecc:	20000ac8 	.word	0x20000ac8
 8000ed0:	20000a88 	.word	0x20000a88
 8000ed4:	20000ad0 	.word	0x20000ad0
 8000ed8:	20000ad8 	.word	0x20000ad8
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <readSensorsAndAverage+0x498>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	1884      	adds	r4, r0, r2
 8000ee4:	60bc      	str	r4, [r7, #8]
 8000ee6:	eb41 0303 	adc.w	r3, r1, r3
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <readSensorsAndAverage+0x498>)
 8000eee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000ef2:	e9c3 1200 	strd	r1, r2, [r3]
 8000ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ef8:	4618      	mov	r0, r3
 8000efa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <readSensorsAndAverage+0x49c>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	1884      	adds	r4, r0, r2
 8000f06:	603c      	str	r4, [r7, #0]
 8000f08:	eb41 0303 	adc.w	r3, r1, r3
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <readSensorsAndAverage+0x49c>)
 8000f10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f14:	e9c3 1200 	strd	r1, r2, [r3]

    /* 6. advance circular index --------------------------------------- */
    buf_pos = (buf_pos + 1) % AVG_LEN;
 8000f18:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <readSensorsAndAverage+0x4a0>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <readSensorsAndAverage+0x4a4>)
 8000f20:	fb83 3102 	smull	r3, r1, r3, r2
 8000f24:	17d3      	asrs	r3, r2, #31
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	460b      	mov	r3, r1
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	440b      	add	r3, r1
 8000f2e:	1ad1      	subs	r1, r2, r3
 8000f30:	b2ca      	uxtb	r2, r1
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <readSensorsAndAverage+0x4a0>)
 8000f34:	701a      	strb	r2, [r3, #0]
    if (buf_filled < AVG_LEN) buf_filled++;
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d805      	bhi.n	8000f4a <readSensorsAndAverage+0x3da>
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b34      	ldr	r3, [pc, #208]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f48:	701a      	strb	r2, [r3, #0]

    /* 7. return running mean ------------------------------------------ */
    int32_t div = buf_filled;           /* 1 … 5 */
 8000f4a:	4b33      	ldr	r3, [pc, #204]	; (8001018 <readSensorsAndAverage+0x4a8>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    acc_avg->x = (int32_t)(acc_sum_x / div);
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <readSensorsAndAverage+0x4ac>)
 8000f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f62:	f7ff f9ad 	bl	80002c0 <__aeabi_ldivmod>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f6c:	601a      	str	r2, [r3, #0]
    acc_avg->y = (int32_t)(acc_sum_y / div);
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <readSensorsAndAverage+0x4b0>)
 8000f70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f78:	461a      	mov	r2, r3
 8000f7a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f7e:	f7ff f99f 	bl	80002c0 <__aeabi_ldivmod>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f88:	605a      	str	r2, [r3, #4]
    acc_avg->z = (int32_t)(acc_sum_z / div);
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <readSensorsAndAverage+0x4b4>)
 8000f8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000f94:	461a      	mov	r2, r3
 8000f96:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f9a:	f7ff f991 	bl	80002c0 <__aeabi_ldivmod>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa4:	609a      	str	r2, [r3, #8]

    mag_avg->x = (int32_t)(mag_sum_x / div);
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <readSensorsAndAverage+0x4b8>)
 8000fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fb6:	f7ff f983 	bl	80002c0 <__aeabi_ldivmod>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fc0:	601a      	str	r2, [r3, #0]
    mag_avg->y = (int32_t)(mag_sum_y / div);
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <readSensorsAndAverage+0x498>)
 8000fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fcc:	461a      	mov	r2, r3
 8000fce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fd2:	f7ff f975 	bl	80002c0 <__aeabi_ldivmod>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fdc:	605a      	str	r2, [r3, #4]
    mag_avg->z = (int32_t)(mag_sum_z / div);
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <readSensorsAndAverage+0x49c>)
 8000fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fe8:	461a      	mov	r2, r3
 8000fea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fee:	f7ff f967 	bl	80002c0 <__aeabi_ldivmod>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ff8:	609a      	str	r2, [r3, #8]
}
 8000ffa:	bf00      	nop
 8000ffc:	37c4      	adds	r7, #196	; 0xc4
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b002      	add	sp, #8
 8001006:	4770      	bx	lr
 8001008:	20000ad0 	.word	0x20000ad0
 800100c:	20000ad8 	.word	0x20000ad8
 8001010:	20000aac 	.word	0x20000aac
 8001014:	55555556 	.word	0x55555556
 8001018:	20000aad 	.word	0x20000aad
 800101c:	20000ab0 	.word	0x20000ab0
 8001020:	20000ab8 	.word	0x20000ab8
 8001024:	20000ac0 	.word	0x20000ac0
 8001028:	20000ac8 	.word	0x20000ac8

0800102c <sinus>:

static inline int32_t expand_q15(int16_t x) {
    return ((int32_t)x) << 1;            // Convert Q1.15 → Q16.16
}

int32_t sinus(int t) {
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    while (t < 0) t += SIN_FULL_CYCLE;
 8001034:	e003      	b.n	800103e <sinus+0x12>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dbf8      	blt.n	8001036 <sinus+0xa>
    t %= SIN_FULL_CYCLE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	425a      	negs	r2, r3
 8001048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001050:	bf58      	it	pl
 8001052:	4253      	negpl	r3, r2
 8001054:	607b      	str	r3, [r7, #4]

    int quarter_len = LUTCOUNT;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	613b      	str	r3, [r7, #16]
    int quarter = t / quarter_len;       // 0 to 3
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fb92 f3f3 	sdiv	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
    int idx     = t % quarter_len;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	fb93 f2f2 	sdiv	r2, r3, r2
 800106e:	6939      	ldr	r1, [r7, #16]
 8001070:	fb01 f202 	mul.w	r2, r1, r2
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d82a      	bhi.n	80010d4 <sinus+0xa8>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <sinus+0x58>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	08001095 	.word	0x08001095
 8001088:	080010a1 	.word	0x080010a1
 800108c:	080010b3 	.word	0x080010b3
 8001090:	080010c1 	.word	0x080010c1

    int32_t val;
    switch (quarter) {
        case 0: val =  sin_lut[idx]; break;                       // [0, π/2]
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <sinus+0xc0>)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e01c      	b.n	80010da <sinus+0xae>
        case 1: val =  sin_lut[quarter_len - 1 - idx]; break;     // [π/2, π]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1e5a      	subs	r2, r3, #1
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <sinus+0xc0>)
 80010aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e013      	b.n	80010da <sinus+0xae>
        case 2: val = -sin_lut[idx]; break;                       // [π, 3π/2]
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <sinus+0xc0>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ba:	425b      	negs	r3, r3
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e00c      	b.n	80010da <sinus+0xae>
        case 3: val = -sin_lut[quarter_len - 1 - idx]; break;     // [3π/2, 2π]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1e5a      	subs	r2, r3, #1
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <sinus+0xc0>)
 80010ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ce:	425b      	negs	r3, r3
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e002      	b.n	80010da <sinus+0xae>
        default: val = 0; break;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	bf00      	nop
    }

    return (val<<1);  // Now returns 16.16 fixed-point
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	371c      	adds	r7, #28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	08008e28 	.word	0x08008e28

080010f0 <cosinus>:



int32_t cosinus(int t) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    return sinus((t + LUTCOUNT / 4) % LUTCOUNT); // phase shift by 90°
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80010fe:	425a      	negs	r2, r3
 8001100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001104:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001108:	bf58      	it	pl
 800110a:	4253      	negpl	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff8d 	bl	800102c <sinus>
 8001112:	4603      	mov	r3, r0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <sinrad>:
                       // :contentReference[oaicite:0]{index=0}

int32_t sinrad(int32_t t) {
 800111c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
    // Map t ∈ [0, 2π) to [0, LUTCOUNT)
    int32_t factor = FIX16_DIV(convert(LUTCOUNT), FIX16_MULT(convert(2), PI16));  // LUTCOUNT / (2π)
 8001126:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800112a:	f7ff fad5 	bl	80006d8 <convert>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001136:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800113a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 800113e:	2002      	movs	r0, #2
 8001140:	f7ff faca 	bl	80006d8 <convert>
 8001144:	4603      	mov	r3, r0
 8001146:	461c      	mov	r4, r3
 8001148:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800114c:	4622      	mov	r2, r4
 800114e:	462b      	mov	r3, r5
 8001150:	1891      	adds	r1, r2, r2
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	415b      	adcs	r3, r3
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800115c:	1912      	adds	r2, r2, r4
 800115e:	eb45 0303 	adc.w	r3, r5, r3
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	0199      	lsls	r1, r3, #6
 800116c:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001170:	0190      	lsls	r0, r2, #6
 8001172:	1812      	adds	r2, r2, r0
 8001174:	eb41 0303 	adc.w	r3, r1, r3
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	0159      	lsls	r1, r3, #5
 8001182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001186:	0150      	lsls	r0, r2, #5
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	1b12      	subs	r2, r2, r4
 800118e:	eb63 0305 	sbc.w	r3, r3, r5
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	f04f 0100 	mov.w	r1, #0
 800119a:	0159      	lsls	r1, r3, #5
 800119c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011a0:	0150      	lsls	r0, r2, #5
 80011a2:	eb12 0800 	adds.w	r8, r2, r0
 80011a6:	eb43 0901 	adc.w	r9, r3, r1
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80011b6:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80011ba:	ea4f 4329 	mov.w	r3, r9, asr #16
 80011be:	4613      	mov	r3, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011c6:	4650      	mov	r0, sl
 80011c8:	4659      	mov	r1, fp
 80011ca:	f7ff f879 	bl	80002c0 <__aeabi_ldivmod>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4613      	mov	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]
    int integer = (int)(inconvert(FIX16_MULT(t, factor)));  // Convert to 32.0 index
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4618      	mov	r0, r3
 80011da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	461a      	mov	r2, r3
 80011e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80011e6:	fb02 f501 	mul.w	r5, r2, r1
 80011ea:	fb00 f403 	mul.w	r4, r0, r3
 80011ee:	442c      	add	r4, r5
 80011f0:	fba0 2302 	umull	r2, r3, r0, r2
 80011f4:	18e1      	adds	r1, r4, r3
 80011f6:	460b      	mov	r3, r1
 80011f8:	f04f 0000 	mov.w	r0, #0
 80011fc:	f04f 0100 	mov.w	r1, #0
 8001200:	0c10      	lsrs	r0, r2, #16
 8001202:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001206:	1419      	asrs	r1, r3, #16
 8001208:	4603      	mov	r3, r0
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fa70 	bl	80006f0 <inconvert>
 8001210:	6138      	str	r0, [r7, #16]
    return sinus(integer);
 8001212:	6938      	ldr	r0, [r7, #16]
 8001214:	f7ff ff0a 	bl	800102c <sinus>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001224 <cosrad>:

int32_t cosrad(int32_t t) {
 8001224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
    int32_t factor = FIX16_DIV(convert(LUTCOUNT), FIX16_MULT(convert(2), PI16));
 800122e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001232:	f7ff fa51 	bl	80006d8 <convert>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800123e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001242:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001246:	2002      	movs	r0, #2
 8001248:	f7ff fa46 	bl	80006d8 <convert>
 800124c:	4603      	mov	r3, r0
 800124e:	461c      	mov	r4, r3
 8001250:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001254:	4622      	mov	r2, r4
 8001256:	462b      	mov	r3, r5
 8001258:	1891      	adds	r1, r2, r2
 800125a:	6039      	str	r1, [r7, #0]
 800125c:	415b      	adcs	r3, r3
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001264:	1912      	adds	r2, r2, r4
 8001266:	eb45 0303 	adc.w	r3, r5, r3
 800126a:	f04f 0000 	mov.w	r0, #0
 800126e:	f04f 0100 	mov.w	r1, #0
 8001272:	0199      	lsls	r1, r3, #6
 8001274:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001278:	0190      	lsls	r0, r2, #6
 800127a:	1812      	adds	r2, r2, r0
 800127c:	eb41 0303 	adc.w	r3, r1, r3
 8001280:	f04f 0000 	mov.w	r0, #0
 8001284:	f04f 0100 	mov.w	r1, #0
 8001288:	0159      	lsls	r1, r3, #5
 800128a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800128e:	0150      	lsls	r0, r2, #5
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	1b12      	subs	r2, r2, r4
 8001296:	eb63 0305 	sbc.w	r3, r3, r5
 800129a:	f04f 0000 	mov.w	r0, #0
 800129e:	f04f 0100 	mov.w	r1, #0
 80012a2:	0159      	lsls	r1, r3, #5
 80012a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012a8:	0150      	lsls	r0, r2, #5
 80012aa:	eb12 0800 	adds.w	r8, r2, r0
 80012ae:	eb43 0901 	adc.w	r9, r3, r1
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	ea4f 4218 	mov.w	r2, r8, lsr #16
 80012be:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80012c2:	ea4f 4329 	mov.w	r3, r9, asr #16
 80012c6:	4613      	mov	r3, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ce:	4650      	mov	r0, sl
 80012d0:	4659      	mov	r1, fp
 80012d2:	f7fe fff5 	bl	80002c0 <__aeabi_ldivmod>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4613      	mov	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
    int integer = (int)(inconvert(FIX16_MULT(t, factor)));
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4618      	mov	r0, r3
 80012e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	461a      	mov	r2, r3
 80012ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80012ee:	fb02 f501 	mul.w	r5, r2, r1
 80012f2:	fb00 f403 	mul.w	r4, r0, r3
 80012f6:	442c      	add	r4, r5
 80012f8:	fba0 2302 	umull	r2, r3, r0, r2
 80012fc:	18e1      	adds	r1, r4, r3
 80012fe:	460b      	mov	r3, r1
 8001300:	f04f 0000 	mov.w	r0, #0
 8001304:	f04f 0100 	mov.w	r1, #0
 8001308:	0c10      	lsrs	r0, r2, #16
 800130a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800130e:	1419      	asrs	r1, r3, #16
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f9ec 	bl	80006f0 <inconvert>
 8001318:	6138      	str	r0, [r7, #16]
    return cosinus(integer);
 800131a:	6938      	ldr	r0, [r7, #16]
 800131c:	f7ff fee8 	bl	80010f0 <cosinus>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800132c <fix_asin>:
    return (int)(((int64_t)ratio * 512) >> 16);
}

extern const int32_t asin_lut[1024];

int32_t fix_asin(int32_t x) {
 800132c:	b5b0      	push	{r4, r5, r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    if (x < -convert(1)) x = -convert(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff f9cf 	bl	80006d8 <convert>
 800133a:	4603      	mov	r3, r0
 800133c:	425b      	negs	r3, r3
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	da05      	bge.n	8001350 <fix_asin+0x24>
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff f9c7 	bl	80006d8 <convert>
 800134a:	4603      	mov	r3, r0
 800134c:	425b      	negs	r3, r3
 800134e:	607b      	str	r3, [r7, #4]
    if (x >  convert(1)) x =  convert(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff f9c1 	bl	80006d8 <convert>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4293      	cmp	r3, r2
 800135c:	dd03      	ble.n	8001366 <fix_asin+0x3a>
 800135e:	2001      	movs	r0, #1
 8001360:	f7ff f9ba 	bl	80006d8 <convert>
 8001364:	6078      	str	r0, [r7, #4]

    int32_t abs_x = (x < 0) ? -x : x;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	bfb8      	it	lt
 800136c:	425b      	neglt	r3, r3
 800136e:	623b      	str	r3, [r7, #32]

    // Scale to index in LUT
    int32_t scaled = abs_x * (LUTCOUNT - 1);      // 1024 steps
 8001370:	6a3a      	ldr	r2, [r7, #32]
 8001372:	4613      	mov	r3, r2
 8001374:	029b      	lsls	r3, r3, #10
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	61fb      	str	r3, [r7, #28]
    int index = scaled >> 16;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	141b      	asrs	r3, r3, #16
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t frac = scaled & 0xFFFF;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	b29b      	uxth	r3, r3
 8001384:	61bb      	str	r3, [r7, #24]

    if (index >= (LUTCOUNT-1)) index = (LUTCOUNT-2); // to safely access [i] and [i+1]
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800138c:	4293      	cmp	r3, r2
 800138e:	dd02      	ble.n	8001396 <fix_asin+0x6a>
 8001390:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001394:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t y0 = asin_lut[index];
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <fix_asin+0xd8>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	617b      	str	r3, [r7, #20]
    int32_t y1 = asin_lut[index + 1];
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <fix_asin+0xd8>)
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	613b      	str	r3, [r7, #16]
    int32_t dy = y1 - y0;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	60fb      	str	r3, [r7, #12]
    int32_t interp = y0 + FIX16_MULT(dy, frac);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4618      	mov	r0, r3
 80013b8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	461a      	mov	r2, r3
 80013c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80013c4:	fb02 f501 	mul.w	r5, r2, r1
 80013c8:	fb00 f403 	mul.w	r4, r0, r3
 80013cc:	442c      	add	r4, r5
 80013ce:	fba0 2302 	umull	r2, r3, r0, r2
 80013d2:	18e1      	adds	r1, r4, r3
 80013d4:	460b      	mov	r3, r1
 80013d6:	f04f 0000 	mov.w	r0, #0
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	0c10      	lsrs	r0, r2, #16
 80013e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013e4:	1419      	asrs	r1, r3, #16
 80013e6:	4602      	mov	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]

    return (x >= 0) ? interp : -interp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da02      	bge.n	80013fa <fix_asin+0xce>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	425b      	negs	r3, r3
 80013f8:	e000      	b.n	80013fc <fix_asin+0xd0>
 80013fa:	68bb      	ldr	r3, [r7, #8]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}
 8001404:	0800a628 	.word	0x0800a628

08001408 <fix_atan_lut>:




static inline int32_t fix_atan_lut(int32_t r) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    if (r < 0) r = -r;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	da02      	bge.n	800141c <fix_atan_lut+0x14>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	425b      	negs	r3, r3
 800141a:	607b      	str	r3, [r7, #4]
    if (r > convert(1)) r = convert(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f7ff f95b 	bl	80006d8 <convert>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4293      	cmp	r3, r2
 8001428:	dd03      	ble.n	8001432 <fix_atan_lut+0x2a>
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff f954 	bl	80006d8 <convert>
 8001430:	6078      	str	r0, [r7, #4]

    int32_t scaled = r * (LUTCOUNT - 1); // [0, 1] → [0, 1023]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
    int index = scaled >> 16;
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	141b      	asrs	r3, r3, #16
 8001440:	61fb      	str	r3, [r7, #28]
    int32_t frac = scaled & 0xFFFF;
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	b29b      	uxth	r3, r3
 8001446:	617b      	str	r3, [r7, #20]

    if (index >= (LUTCOUNT - 1)) index = (LUTCOUNT - 2);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800144e:	4293      	cmp	r3, r2
 8001450:	dd02      	ble.n	8001458 <fix_atan_lut+0x50>
 8001452:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001456:	61fb      	str	r3, [r7, #28]

    int32_t y0 = atan_lut[index];
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <fix_atan_lut+0xb0>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001460:	613b      	str	r3, [r7, #16]
    int32_t y1 = atan_lut[index + 1];
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <fix_atan_lut+0xb0>)
 8001468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
    int32_t dy = y1 - y0;
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	60bb      	str	r3, [r7, #8]
    return y0 + FIX16_MULT(dy, frac);
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4618      	mov	r0, r3
 800147a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	461a      	mov	r2, r3
 8001482:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001486:	fb02 f501 	mul.w	r5, r2, r1
 800148a:	fb00 f403 	mul.w	r4, r0, r3
 800148e:	442c      	add	r4, r5
 8001490:	fba0 2302 	umull	r2, r3, r0, r2
 8001494:	18e1      	adds	r1, r4, r3
 8001496:	460b      	mov	r3, r1
 8001498:	f04f 0000 	mov.w	r0, #0
 800149c:	f04f 0100 	mov.w	r1, #0
 80014a0:	0c10      	lsrs	r0, r2, #16
 80014a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014a6:	1419      	asrs	r1, r3, #16
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4413      	add	r3, r2
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bdb0      	pop	{r4, r5, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08009628 	.word	0x08009628

080014bc <fix_atan2>:

int32_t fix_atan2(int32_t y, int32_t x) {
 80014bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
    if (x == 0) {
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10b      	bne.n	80014e6 <fix_atan2+0x2a>
        if (y > 0) return PI16 / 2;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dd01      	ble.n	80014d8 <fix_atan2+0x1c>
 80014d4:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <fix_atan2+0xe8>)
 80014d6:	e05f      	b.n	8001598 <fix_atan2+0xdc>
        if (y < 0) return -PI16 / 2;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da01      	bge.n	80014e2 <fix_atan2+0x26>
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <fix_atan2+0xec>)
 80014e0:	e05a      	b.n	8001598 <fix_atan2+0xdc>
        return 0; // undefined
 80014e2:	2300      	movs	r3, #0
 80014e4:	e058      	b.n	8001598 <fix_atan2+0xdc>
    }

    int32_t r = (int32_t)(((int64_t)y << 16) / x);  // r = y / x in 16.16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	461a      	mov	r2, r3
 80014ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014ee:	ea4f 4922 	mov.w	r9, r2, asr #16
 80014f2:	ea4f 4802 	mov.w	r8, r2, lsl #16
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80014fe:	4640      	mov	r0, r8
 8001500:	4649      	mov	r1, r9
 8001502:	f7fe fedd 	bl	80002c0 <__aeabi_ldivmod>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4613      	mov	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
    int32_t abs_r = (r < 0) ? -r : r;
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	bfb8      	it	lt
 8001514:	425b      	neglt	r3, r3
 8001516:	60fb      	str	r3, [r7, #12]

    int32_t angle;
    if (abs_r > convert(1)) {
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff f8dd 	bl	80006d8 <convert>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4293      	cmp	r3, r2
 8001524:	dd1d      	ble.n	8001562 <fix_atan2+0xa6>
        // r > 1 → angle = π/2 - atan(1/r)
        int32_t recip = (int32_t)(((int64_t)convert(1) << 16) / abs_r); // 16.16
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff f8d6 	bl	80006d8 <convert>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001534:	1415      	asrs	r5, r2, #16
 8001536:	0414      	lsls	r4, r2, #16
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	461a      	mov	r2, r3
 800153c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001540:	4620      	mov	r0, r4
 8001542:	4629      	mov	r1, r5
 8001544:	f7fe febc 	bl	80002c0 <__aeabi_ldivmod>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4613      	mov	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
        angle = PI16 / 2 - fix_atan_lut(recip);
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f7ff ff59 	bl	8001408 <fix_atan_lut>
 8001556:	4603      	mov	r3, r0
 8001558:	f5c3 33c9 	rsb	r3, r3, #102912	; 0x19200
 800155c:	331f      	adds	r3, #31
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e003      	b.n	800156a <fix_atan2+0xae>
    } else {
        angle = fix_atan_lut(abs_r);
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff ff50 	bl	8001408 <fix_atan_lut>
 8001568:	6178      	str	r0, [r7, #20]
    }

    if (r < 0) angle = -angle;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b00      	cmp	r3, #0
 800156e:	da02      	bge.n	8001576 <fix_atan2+0xba>
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	425b      	negs	r3, r3
 8001574:	617b      	str	r3, [r7, #20]

    // Quadrant correction based on signs
    if (x > 0) return angle;                    // Q1, Q4
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd01      	ble.n	8001580 <fix_atan2+0xc4>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	e00b      	b.n	8001598 <fix_atan2+0xdc>
    if (y >= 0) return angle + PI16;            // Q2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db04      	blt.n	8001590 <fix_atan2+0xd4>
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f503 3349 	add.w	r3, r3, #205824	; 0x32400
 800158c:	333f      	adds	r3, #63	; 0x3f
 800158e:	e003      	b.n	8001598 <fix_atan2+0xdc>
    return angle - PI16;                        // Q3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f5a3 3349 	sub.w	r3, r3, #205824	; 0x32400
 8001596:	3b3f      	subs	r3, #63	; 0x3f
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a2:	bf00      	nop
 80015a4:	0001921f 	.word	0x0001921f
 80015a8:	fffe6de1 	.word	0xfffe6de1

080015ac <normalizeTheta>:

int32_t HVs[104] = {
0x00000000, 0xFFEACCCD, 0x00000000, 0xFFD8AE14, 0xFFF663D7, 0x00000000, 0x00112666, 0xFFF74A3D, 0xFFF9AE14, 0x00000000, 0x00096B85, 0x0003E8F6, 0x000AAB85, 0xFFFFC7AE, 0x00000000, 0xFFFCF333, 0x000B87AE, 0x000968F6, 0x00086E14, 0xFFFFA666, 0x00000000, 0xFFF2C51F, 0xFFE5199A, 0xFFFE028F, 0xFFFDD1EC, 0xFFFF87AE, 0x0001028F, 0x00000000, 0x0018D47B, 0x0008B0A4, 0x00020CCD, 0x0003B333, 0xFFFB0F5C, 0xFFFFC28F, 0x00002148, 0x00000000, 0xFFF2970A, 0x00059C29, 0x000C6E14, 0x000AB0A4, 0x00017AE1, 0xFFFDF0A4, 0x00010000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
};

int32_t normalizeTheta(int32_t theta) {
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    int32_t result;
    if ((theta > -1) && (theta<1)) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db05      	blt.n	80015c6 <normalizeTheta+0x1a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dc02      	bgt.n	80015c6 <normalizeTheta+0x1a>
        result = 1;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	e00c      	b.n	80015e0 <normalizeTheta+0x34>
    }
    else {
    	if ((theta < ((180 << 16) + 1)) && (theta > ((179 << 16) + 65535))) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80015cc:	dc06      	bgt.n	80015dc <normalizeTheta+0x30>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 80015d4:	db02      	blt.n	80015dc <normalizeTheta+0x30>
            result = (179<<16)+65535;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <normalizeTheta+0x44>)
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e001      	b.n	80015e0 <normalizeTheta+0x34>
        }
        else {
            result = theta;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	60fb      	str	r3, [r7, #12]
        }
    }
    return result;
 80015e0:	68fb      	ldr	r3, [r7, #12]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	00b3ffff 	.word	0x00b3ffff

080015f4 <toRad>:

int32_t toRad(int32_t angledeg) {
 80015f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
    return DIV(MULT(angledeg,PI),180<<16);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	461c      	mov	r4, r3
 8001602:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001606:	4622      	mov	r2, r4
 8001608:	462b      	mov	r3, r5
 800160a:	1891      	adds	r1, r2, r2
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	415b      	adcs	r3, r3
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001616:	1912      	adds	r2, r2, r4
 8001618:	eb45 0303 	adc.w	r3, r5, r3
 800161c:	f04f 0000 	mov.w	r0, #0
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	0199      	lsls	r1, r3, #6
 8001626:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800162a:	0190      	lsls	r0, r2, #6
 800162c:	1812      	adds	r2, r2, r0
 800162e:	eb41 0303 	adc.w	r3, r1, r3
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	0159      	lsls	r1, r3, #5
 800163c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001640:	0150      	lsls	r0, r2, #5
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	1b12      	subs	r2, r2, r4
 8001648:	eb63 0305 	sbc.w	r3, r3, r5
 800164c:	f04f 0000 	mov.w	r0, #0
 8001650:	f04f 0100 	mov.w	r1, #0
 8001654:	0159      	lsls	r1, r3, #5
 8001656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800165a:	0150      	lsls	r0, r2, #5
 800165c:	eb12 0800 	adds.w	r8, r2, r0
 8001660:	eb43 0901 	adc.w	r9, r3, r1
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001670:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8001674:	ea4f 4329 	mov.w	r3, r9, asr #16
 8001678:	4613      	mov	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001680:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8001684:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8001688:	f44f 0234 	mov.w	r2, #11796480	; 0xb40000
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	4650      	mov	r0, sl
 8001692:	4659      	mov	r1, fp
 8001694:	f7fe fe14 	bl	80002c0 <__aeabi_ldivmod>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4613      	mov	r3, r2
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080016a8 <magnet>:

void magnet(int32_t r, int32_t theta, int32_t phi, int32_t days, int32_t buffer[3]) {
 80016a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ac:	b0b9      	sub	sp, #228	; 0xe4
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80016b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80016b4:	637a      	str	r2, [r7, #52]	; 0x34
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
 80016b8:	466b      	mov	r3, sp
 80016ba:	60bb      	str	r3, [r7, #8]
	 * Input2: 16.16 latitude in degrees, where 0 is equator, 90 is north pole and -90 is south pole
	 * Input3: 16.16 longitude in degrees, ranging from -180 to 180, where 0 is the prime meridian
	 * Input4: 16.16 decimal days since 2000
	 * Input5: 3-array of int32_t to be changed to Br, Bt and Bp respectively, in Rasmus units
	 */
	printf("Theta input: ");
 80016bc:	4892      	ldr	r0, [pc, #584]	; (8001908 <magnet+0x260>)
 80016be:	f006 f925 	bl	800790c <iprintf>
	printFix(theta);
 80016c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016c4:	f7fe ffe8 	bl	8000698 <printFix>
	printf("\r\n");
 80016c8:	4890      	ldr	r0, [pc, #576]	; (800190c <magnet+0x264>)
 80016ca:	f006 f9bb 	bl	8007a44 <puts>

	printf("Phi input: ");
 80016ce:	4890      	ldr	r0, [pc, #576]	; (8001910 <magnet+0x268>)
 80016d0:	f006 f91c 	bl	800790c <iprintf>
	printFix(phi);
 80016d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016d6:	f7fe ffdf 	bl	8000698 <printFix>
	printf("\r\n");
 80016da:	488c      	ldr	r0, [pc, #560]	; (800190c <magnet+0x264>)
 80016dc:	f006 f9b2 	bl	8007a44 <puts>

	printf("Normalized theta: ");
 80016e0:	488c      	ldr	r0, [pc, #560]	; (8001914 <magnet+0x26c>)
 80016e2:	f006 f913 	bl	800790c <iprintf>
    theta = normalizeTheta(theta);
 80016e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016e8:	f7ff ff60 	bl	80015ac <normalizeTheta>
 80016ec:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 80016ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016f0:	f7fe ffd2 	bl	8000698 <printFix>
    printf("\r\n");
 80016f4:	4885      	ldr	r0, [pc, #532]	; (800190c <magnet+0x264>)
 80016f6:	f006 f9a5 	bl	8007a44 <puts>

    printf("Theta radians: ");
 80016fa:	4887      	ldr	r0, [pc, #540]	; (8001918 <magnet+0x270>)
 80016fc:	f006 f906 	bl	800790c <iprintf>
    theta = toRad(5898240-theta);
 8001700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001702:	f5c3 03b4 	rsb	r3, r3, #5898240	; 0x5a0000
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff74 	bl	80015f4 <toRad>
 800170c:	63b8      	str	r0, [r7, #56]	; 0x38
    printFix(theta);
 800170e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001710:	f7fe ffc2 	bl	8000698 <printFix>
    printf("\r\n");
 8001714:	487d      	ldr	r0, [pc, #500]	; (800190c <magnet+0x264>)
 8001716:	f006 f995 	bl	8007a44 <puts>

    printf("Phi radians: ");
 800171a:	4880      	ldr	r0, [pc, #512]	; (800191c <magnet+0x274>)
 800171c:	f006 f8f6 	bl	800790c <iprintf>
    phi = toRad(phi);
 8001720:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001722:	f7ff ff67 	bl	80015f4 <toRad>
 8001726:	6378      	str	r0, [r7, #52]	; 0x34
    printFix(phi);
 8001728:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800172a:	f7fe ffb5 	bl	8000698 <printFix>
    printf("\r\n");
 800172e:	4877      	ldr	r0, [pc, #476]	; (800190c <magnet+0x264>)
 8001730:	f006 f988 	bl	8007a44 <puts>
    int32_t a = 417542963;
 8001734:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <magnet+0x278>)
 8001736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    int Nmodel = 13; // hard code
 800173a:	230d      	movs	r3, #13
 800173c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int Nmax = Nmodel * (Nmodel + 3 ) / 2;
 8001740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001744:	3303      	adds	r3, #3
 8001746:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	0fda      	lsrs	r2, r3, #31
 8001750:	4413      	add	r3, r2
 8001752:	105b      	asrs	r3, r3, #1
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    int32_t g[Nmodel][Nmodel+1];
 8001758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800175c:	f103 0c01 	add.w	ip, r3, #1
 8001760:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8001764:	f10c 33ff 	add.w	r3, ip, #4294967295
 8001768:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800176c:	4663      	mov	r3, ip
 800176e:	461a      	mov	r2, r3
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	0159      	lsls	r1, r3, #5
 800177e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001782:	0150      	lsls	r0, r2, #5
 8001784:	4663      	mov	r3, ip
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	4633      	mov	r3, r6
 800178c:	3b01      	subs	r3, #1
 800178e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001792:	4663      	mov	r3, ip
 8001794:	4618      	mov	r0, r3
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	4633      	mov	r3, r6
 800179c:	461a      	mov	r2, r3
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	fb02 f501 	mul.w	r5, r2, r1
 80017a6:	fb00 f403 	mul.w	r4, r0, r3
 80017aa:	442c      	add	r4, r5
 80017ac:	fba0 0102 	umull	r0, r1, r0, r2
 80017b0:	1863      	adds	r3, r4, r1
 80017b2:	4619      	mov	r1, r3
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	014b      	lsls	r3, r1, #5
 80017be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017c2:	0142      	lsls	r2, r0, #5
 80017c4:	4663      	mov	r3, ip
 80017c6:	4618      	mov	r0, r3
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	4633      	mov	r3, r6
 80017ce:	461a      	mov	r2, r3
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	fb02 f501 	mul.w	r5, r2, r1
 80017d8:	fb00 f403 	mul.w	r4, r0, r3
 80017dc:	442c      	add	r4, r5
 80017de:	fba0 0102 	umull	r0, r1, r0, r2
 80017e2:	1863      	adds	r3, r4, r1
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	014b      	lsls	r3, r1, #5
 80017f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017f4:	0142      	lsls	r2, r0, #5
 80017f6:	4662      	mov	r2, ip
 80017f8:	607e      	str	r6, [r7, #4]
 80017fa:	4633      	mov	r3, r6
 80017fc:	fb03 f302 	mul.w	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	3307      	adds	r3, #7
 8001804:	08db      	lsrs	r3, r3, #3
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	ebad 0d03 	sub.w	sp, sp, r3
 800180c:	466b      	mov	r3, sp
 800180e:	3303      	adds	r3, #3
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    int32_t h[Nmodel][Nmodel+1];
 8001818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800181c:	1c5e      	adds	r6, r3, #1
 800181e:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8001822:	1e73      	subs	r3, r6, #1
 8001824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001828:	4633      	mov	r3, r6
 800182a:	461a      	mov	r2, r3
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	f04f 0100 	mov.w	r1, #0
 8001838:	0159      	lsls	r1, r3, #5
 800183a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183e:	0150      	lsls	r0, r2, #5
 8001840:	4633      	mov	r3, r6
 8001842:	009a      	lsls	r2, r3, #2
 8001844:	60fa      	str	r2, [r7, #12]
 8001846:	4622      	mov	r2, r4
 8001848:	1e53      	subs	r3, r2, #1
 800184a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800184e:	4633      	mov	r3, r6
 8001850:	4618      	mov	r0, r3
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	613c      	str	r4, [r7, #16]
 8001858:	4623      	mov	r3, r4
 800185a:	461a      	mov	r2, r3
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	fb02 f501 	mul.w	r5, r2, r1
 8001864:	fb00 f403 	mul.w	r4, r0, r3
 8001868:	442c      	add	r4, r5
 800186a:	fba0 0102 	umull	r0, r1, r0, r2
 800186e:	1863      	adds	r3, r4, r1
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	014b      	lsls	r3, r1, #5
 800187c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001880:	0142      	lsls	r2, r0, #5
 8001882:	4633      	mov	r3, r6
 8001884:	4618      	mov	r0, r3
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	461a      	mov	r2, r3
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	fb02 f501 	mul.w	r5, r2, r1
 8001896:	fb00 f403 	mul.w	r4, r0, r3
 800189a:	442c      	add	r4, r5
 800189c:	fba0 0102 	umull	r0, r1, r0, r2
 80018a0:	1863      	adds	r3, r4, r1
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	014b      	lsls	r3, r1, #5
 80018ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018b2:	0142      	lsls	r2, r0, #5
 80018b4:	4632      	mov	r2, r6
 80018b6:	693c      	ldr	r4, [r7, #16]
 80018b8:	4623      	mov	r3, r4
 80018ba:	fb03 f302 	mul.w	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	3307      	adds	r3, #7
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	ebad 0d03 	sub.w	sp, sp, r3
 80018ca:	466b      	mov	r3, sp
 80018cc:	3303      	adds	r3, #3
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(g, 0, sizeof(g));
 80018d4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80018d8:	4662      	mov	r2, ip
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	fb03 f302 	mul.w	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	461a      	mov	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f006 f809 	bl	80078fc <memset>
    memset(h, 0, sizeof(h));
 80018ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80018ec:	4632      	mov	r2, r6
 80018ee:	4623      	mov	r3, r4
 80018f0:	fb03 f302 	mul.w	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	461a      	mov	r2, r3
 80018f8:	2100      	movs	r1, #0
 80018fa:	f005 ffff 	bl	80078fc <memset>


    int i;
    for (i = 0; i < Nmax; i++) { // 0 to 103
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001904:	e0a8      	b.n	8001a58 <magnet+0x3b0>
 8001906:	bf00      	nop
 8001908:	08008d6c 	.word	0x08008d6c
 800190c:	08008d7c 	.word	0x08008d7c
 8001910:	08008d80 	.word	0x08008d80
 8001914:	08008d8c 	.word	0x08008d8c
 8001918:	08008da0 	.word	0x08008da0
 800191c:	08008db0 	.word	0x08008db0
 8001920:	18e33333 	.word	0x18e33333
        g[Ns[i]-1][Ms[i]] = (Gs[i] + MULT(GVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2; // 360 til 16.16
 8001924:	4adc      	ldr	r2, [pc, #880]	; (8001c98 <magnet+0x5f0>)
 8001926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800192a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 800192e:	4adb      	ldr	r2, [pc, #876]	; (8001c9c <magnet+0x5f4>)
 8001930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	461c      	mov	r4, r3
 800193a:	ea4f 75e4 	mov.w	r5, r4, asr #31
 800193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001940:	461a      	mov	r2, r3
 8001942:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001946:	ea4f 4922 	mov.w	r9, r2, asr #16
 800194a:	ea4f 4802 	mov.w	r8, r2, lsl #16
 800194e:	4ad4      	ldr	r2, [pc, #848]	; (8001ca0 <magnet+0x5f8>)
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	4640      	mov	r0, r8
 8001956:	4649      	mov	r1, r9
 8001958:	f7fe fcb2 	bl	80002c0 <__aeabi_ldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	461a      	mov	r2, r3
 8001964:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001968:	fb02 f005 	mul.w	r0, r2, r5
 800196c:	fb04 f103 	mul.w	r1, r4, r3
 8001970:	4401      	add	r1, r0
 8001972:	fba4 2302 	umull	r2, r3, r4, r2
 8001976:	4419      	add	r1, r3
 8001978:	460b      	mov	r3, r1
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	0c10      	lsrs	r0, r2, #16
 8001984:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001988:	1419      	asrs	r1, r3, #16
 800198a:	4603      	mov	r3, r0
 800198c:	4433      	add	r3, r6
 800198e:	1c99      	adds	r1, r3, #2
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	089d      	lsrs	r5, r3, #2
 8001994:	4ac3      	ldr	r2, [pc, #780]	; (8001ca4 <magnet+0x5fc>)
 8001996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	1e5c      	subs	r4, r3, #1
 80019a0:	4ac1      	ldr	r2, [pc, #772]	; (8001ca8 <magnet+0x600>)
 80019a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019aa:	1089      	asrs	r1, r1, #2
 80019ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80019b0:	fb04 f305 	mul.w	r3, r4, r5
 80019b4:	4403      	add	r3, r0
 80019b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        h[Ns[i]-1][Ms[i]] = (Hs[i] + MULT(HVs[i], DIV(days, 23920640)) + 2 /* 1 << 1 */ ) >> 2;
 80019ba:	4abc      	ldr	r2, [pc, #752]	; (8001cac <magnet+0x604>)
 80019bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019c0:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80019c4:	4aba      	ldr	r2, [pc, #744]	; (8001cb0 <magnet+0x608>)
 80019c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	461c      	mov	r4, r3
 80019d0:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	461a      	mov	r2, r3
 80019d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80019e0:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80019e4:	4aae      	ldr	r2, [pc, #696]	; (8001ca0 <magnet+0x5f8>)
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	4650      	mov	r0, sl
 80019ec:	4659      	mov	r1, fp
 80019ee:	f7fe fc67 	bl	80002c0 <__aeabi_ldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4613      	mov	r3, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80019fe:	fb02 f005 	mul.w	r0, r2, r5
 8001a02:	fb04 f103 	mul.w	r1, r4, r3
 8001a06:	4401      	add	r1, r0
 8001a08:	fba4 2302 	umull	r2, r3, r4, r2
 8001a0c:	4419      	add	r1, r3
 8001a0e:	460b      	mov	r3, r1
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	0c10      	lsrs	r0, r2, #16
 8001a1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001a1e:	1419      	asrs	r1, r3, #16
 8001a20:	4603      	mov	r3, r0
 8001a22:	4433      	add	r3, r6
 8001a24:	1c99      	adds	r1, r3, #2
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	089d      	lsrs	r5, r3, #2
 8001a2a:	4a9e      	ldr	r2, [pc, #632]	; (8001ca4 <magnet+0x5fc>)
 8001a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	1e5c      	subs	r4, r3, #1
 8001a36:	4a9c      	ldr	r2, [pc, #624]	; (8001ca8 <magnet+0x600>)
 8001a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a40:	1089      	asrs	r1, r1, #2
 8001a42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a44:	fb04 f305 	mul.w	r3, r4, r5
 8001a48:	4403      	add	r3, r0
 8001a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < Nmax; i++) { // 0 to 103
 8001a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a52:	3301      	adds	r3, #1
 8001a54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001a58:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f6ff af5f 	blt.w	8001924 <magnet+0x27c>
    }

    int32_t Bt = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    int32_t Br = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int32_t Bp = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    int32_t P11 = 1<<16;
 8001a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    int32_t P10 = 1<<16;
 8001a80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    int32_t dP11 = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t dP10 = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    int32_t K;

    int16_t m;
    int16_t n;

    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8001a9a:	f000 bc99 	b.w	80023d0 <magnet+0xd28>
        for (n = 1; n <= Nmodel; n++) {
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8001aa4:	f000 bc86 	b.w	80023b4 <magnet+0xd0c>
            if ( m <= n ) {
 8001aa8:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001aac:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f300 8478 	bgt.w	80023a6 <magnet+0xcfe>
                if (m == n) {
 8001ab6:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001aba:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d175      	bne.n	8001bae <magnet+0x506>
                    P2 = MULT(sinrad(theta), P11);
 8001ac2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ac4:	f7ff fb2a 	bl	800111c <sinrad>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ada:	fb02 f501 	mul.w	r5, r2, r1
 8001ade:	fb00 f403 	mul.w	r4, r0, r3
 8001ae2:	442c      	add	r4, r5
 8001ae4:	fba0 2302 	umull	r2, r3, r0, r2
 8001ae8:	18e1      	adds	r1, r4, r3
 8001aea:	460b      	mov	r3, r1
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0c10      	lsrs	r0, r2, #16
 8001af6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001afa:	1419      	asrs	r1, r3, #16
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                    dP2 = MULT(sinrad(theta), dP11) + MULT(cosrad(theta), P11);
 8001b02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b04:	f7ff fb0a 	bl	800111c <sinrad>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b14:	461a      	mov	r2, r3
 8001b16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b1a:	fb02 f501 	mul.w	r5, r2, r1
 8001b1e:	fb00 f403 	mul.w	r4, r0, r3
 8001b22:	442c      	add	r4, r5
 8001b24:	fba0 2302 	umull	r2, r3, r0, r2
 8001b28:	18e1      	adds	r1, r4, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	0c10      	lsrs	r0, r2, #16
 8001b36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b3a:	1419      	asrs	r1, r3, #16
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b40:	f7ff fb70 	bl	8001224 <cosrad>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001b4c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001b50:	4608      	mov	r0, r1
 8001b52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001b56:	fb00 f503 	mul.w	r5, r0, r3
 8001b5a:	fb02 f401 	mul.w	r4, r2, r1
 8001b5e:	442c      	add	r4, r5
 8001b60:	fba2 2300 	umull	r2, r3, r2, r0
 8001b64:	18e1      	adds	r1, r4, r3
 8001b66:	460b      	mov	r3, r1
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	0c10      	lsrs	r0, r2, #16
 8001b72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001b76:	1419      	asrs	r1, r3, #16
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4433      	add	r3, r6
 8001b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                    P11 = P2;
 8001b80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    P10 = P11;
 8001b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    P20 = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                    dP11 = dP2;
 8001b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                    dP10 = dP11;
 8001b9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    dP20 = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001bac:	e1b1      	b.n	8001f12 <magnet+0x86a>
                } else {
                    if (n == 1) {
 8001bae:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d17e      	bne.n	8001cb4 <magnet+0x60c>
                        P2 = MULT(cosrad(theta), P10);
 8001bb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bb8:	f7ff fb34 	bl	8001224 <cosrad>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001bc8:	461a      	mov	r2, r3
 8001bca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001bce:	fb02 f501 	mul.w	r5, r2, r1
 8001bd2:	fb00 f403 	mul.w	r4, r0, r3
 8001bd6:	442c      	add	r4, r5
 8001bd8:	fba0 2302 	umull	r2, r3, r0, r2
 8001bdc:	18e1      	adds	r1, r4, r3
 8001bde:	460b      	mov	r3, r1
 8001be0:	f04f 0000 	mov.w	r0, #0
 8001be4:	f04f 0100 	mov.w	r1, #0
 8001be8:	0c10      	lsrs	r0, r2, #16
 8001bea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001bee:	1419      	asrs	r1, r3, #16
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10);
 8001bf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bf8:	f7ff fb14 	bl	8001224 <cosrad>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c0e:	fb02 f501 	mul.w	r5, r2, r1
 8001c12:	fb00 f403 	mul.w	r4, r0, r3
 8001c16:	442c      	add	r4, r5
 8001c18:	fba0 2302 	umull	r2, r3, r0, r2
 8001c1c:	18e1      	adds	r1, r4, r3
 8001c1e:	460b      	mov	r3, r1
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0c10      	lsrs	r0, r2, #16
 8001c2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c2e:	1419      	asrs	r1, r3, #16
 8001c30:	4606      	mov	r6, r0
 8001c32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001c34:	f7ff fa72 	bl	800111c <sinrad>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c40:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001c44:	4608      	mov	r0, r1
 8001c46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001c4a:	fb00 f503 	mul.w	r5, r0, r3
 8001c4e:	fb02 f401 	mul.w	r4, r2, r1
 8001c52:	442c      	add	r4, r5
 8001c54:	fba2 2300 	umull	r2, r3, r2, r0
 8001c58:	18e1      	adds	r1, r4, r3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	f04f 0000 	mov.w	r0, #0
 8001c60:	f04f 0100 	mov.w	r1, #0
 8001c64:	0c10      	lsrs	r0, r2, #16
 8001c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001c6a:	1419      	asrs	r1, r3, #16
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	1af3      	subs	r3, r6, r3
 8001c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001c7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c94:	e13d      	b.n	8001f12 <magnet+0x86a>
 8001c96:	bf00      	nop
 8001c98:	20000340 	.word	0x20000340
 8001c9c:	200004e0 	.word	0x200004e0
 8001ca0:	016d0000 	.word	0x016d0000
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	200001a0 	.word	0x200001a0
 8001cac:	20000680 	.word	0x20000680
 8001cb0:	20000820 	.word	0x20000820
                    } else {
                    	int32_t nm1 = convert(n-1);           // 16.16
 8001cb4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fd0c 	bl	80006d8 <convert>
 8001cc0:	67b8      	str	r0, [r7, #120]	; 0x78
                    	int32_t mfix = convert(m);
 8001cc2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fd06 	bl	80006d8 <convert>
 8001ccc:	6778      	str	r0, [r7, #116]	; 0x74
                    	int32_t num  = FIX16_MULT(nm1,nm1) - FIX16_MULT(mfix,mfix);
 8001cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd8:	461a      	mov	r2, r3
 8001cda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cde:	fb02 f501 	mul.w	r5, r2, r1
 8001ce2:	fb00 f403 	mul.w	r4, r0, r3
 8001ce6:	442c      	add	r4, r5
 8001ce8:	fba0 2302 	umull	r2, r3, r0, r2
 8001cec:	18e1      	adds	r1, r4, r3
 8001cee:	460b      	mov	r3, r1
 8001cf0:	f04f 0000 	mov.w	r0, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	0c10      	lsrs	r0, r2, #16
 8001cfa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001cfe:	1419      	asrs	r1, r3, #16
 8001d00:	4606      	mov	r6, r0
 8001d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d04:	461a      	mov	r2, r3
 8001d06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001d12:	fb00 f503 	mul.w	r5, r0, r3
 8001d16:	fb02 f401 	mul.w	r4, r2, r1
 8001d1a:	442c      	add	r4, r5
 8001d1c:	fba2 2300 	umull	r2, r3, r2, r0
 8001d20:	18e1      	adds	r1, r4, r3
 8001d22:	460b      	mov	r3, r1
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0c10      	lsrs	r0, r2, #16
 8001d2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d32:	1419      	asrs	r1, r3, #16
 8001d34:	4603      	mov	r3, r0
 8001d36:	1af3      	subs	r3, r6, r3
 8001d38:	673b      	str	r3, [r7, #112]	; 0x70
                    	int32_t den  = FIX16_MULT(convert(2*n)-convert(1),
 8001d3a:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fcc9 	bl	80006d8 <convert>
 8001d46:	4604      	mov	r4, r0
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7fe fcc5 	bl	80006d8 <convert>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	1ae3      	subs	r3, r4, r3
 8001d52:	461c      	mov	r4, r3
 8001d54:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001d58:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fcba 	bl	80006d8 <convert>
 8001d64:	4606      	mov	r6, r0
 8001d66:	2003      	movs	r0, #3
 8001d68:	f7fe fcb6 	bl	80006d8 <convert>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	1af3      	subs	r3, r6, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d76:	fb02 f005 	mul.w	r0, r2, r5
 8001d7a:	fb04 f103 	mul.w	r1, r4, r3
 8001d7e:	4401      	add	r1, r0
 8001d80:	fba4 2302 	umull	r2, r3, r4, r2
 8001d84:	4419      	add	r1, r3
 8001d86:	460b      	mov	r3, r1
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	0c10      	lsrs	r0, r2, #16
 8001d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001d96:	1419      	asrs	r1, r3, #16
 8001d98:	4603      	mov	r3, r0
 8001d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
                    	                          convert(2*n)-convert(3));
                    	K = FIX16_DIV(num, den);
 8001d9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d9e:	461a      	mov	r2, r3
 8001da0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001da4:	1411      	asrs	r1, r2, #16
 8001da6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001da8:	0413      	lsls	r3, r2, #16
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dae:	461a      	mov	r2, r3
 8001db0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001db4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001db8:	f7fe fa82 	bl	80002c0 <__aeabi_ldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	66bb      	str	r3, [r7, #104]	; 0x68
                    	P2 = MULT(cosrad(theta), P10) - MULT(K, P20);
 8001dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001dc6:	f7ff fa2d 	bl	8001224 <cosrad>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ddc:	fb02 f501 	mul.w	r5, r2, r1
 8001de0:	fb00 f403 	mul.w	r4, r0, r3
 8001de4:	442c      	add	r4, r5
 8001de6:	fba0 2302 	umull	r2, r3, r0, r2
 8001dea:	18e1      	adds	r1, r4, r3
 8001dec:	460b      	mov	r3, r1
 8001dee:	f04f 0000 	mov.w	r0, #0
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	0c10      	lsrs	r0, r2, #16
 8001df8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001dfc:	1419      	asrs	r1, r3, #16
 8001dfe:	4606      	mov	r6, r0
 8001e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e02:	461a      	mov	r2, r3
 8001e04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e08:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e12:	fb00 f503 	mul.w	r5, r0, r3
 8001e16:	fb02 f401 	mul.w	r4, r2, r1
 8001e1a:	442c      	add	r4, r5
 8001e1c:	fba2 2300 	umull	r2, r3, r2, r0
 8001e20:	18e1      	adds	r1, r4, r3
 8001e22:	460b      	mov	r3, r1
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	0c10      	lsrs	r0, r2, #16
 8001e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e32:	1419      	asrs	r1, r3, #16
 8001e34:	4603      	mov	r3, r0
 8001e36:	1af3      	subs	r3, r6, r3
 8001e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                        dP2 = MULT(cosrad(theta), dP10) - MULT(sinrad(theta), P10) - MULT(K, dP20);
 8001e3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e3e:	f7ff f9f1 	bl	8001224 <cosrad>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4618      	mov	r0, r3
 8001e46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e4e:	461a      	mov	r2, r3
 8001e50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e54:	fb02 f501 	mul.w	r5, r2, r1
 8001e58:	fb00 f403 	mul.w	r4, r0, r3
 8001e5c:	442c      	add	r4, r5
 8001e5e:	fba0 2302 	umull	r2, r3, r0, r2
 8001e62:	18e1      	adds	r1, r4, r3
 8001e64:	460b      	mov	r3, r1
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0c10      	lsrs	r0, r2, #16
 8001e70:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001e74:	1419      	asrs	r1, r3, #16
 8001e76:	4606      	mov	r6, r0
 8001e78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e7a:	f7ff f94f 	bl	800111c <sinrad>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001e86:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001e8a:	4608      	mov	r0, r1
 8001e8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e90:	fb00 f503 	mul.w	r5, r0, r3
 8001e94:	fb02 f401 	mul.w	r4, r2, r1
 8001e98:	442c      	add	r4, r5
 8001e9a:	fba2 2300 	umull	r2, r3, r2, r0
 8001e9e:	18e1      	adds	r1, r4, r3
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0c10      	lsrs	r0, r2, #16
 8001eac:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001eb0:	1419      	asrs	r1, r3, #16
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	1af6      	subs	r6, r6, r3
 8001eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb8:	461a      	mov	r2, r3
 8001eba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ebe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001ec8:	fb00 f503 	mul.w	r5, r0, r3
 8001ecc:	fb02 f401 	mul.w	r4, r2, r1
 8001ed0:	442c      	add	r4, r5
 8001ed2:	fba2 2300 	umull	r2, r3, r2, r0
 8001ed6:	18e1      	adds	r1, r4, r3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	f04f 0000 	mov.w	r0, #0
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	0c10      	lsrs	r0, r2, #16
 8001ee4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001ee8:	1419      	asrs	r1, r3, #16
 8001eea:	4603      	mov	r3, r0
 8001eec:	1af3      	subs	r3, r6, r3
 8001eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
                        P20 = P10;
 8001ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                        P10 = P2;
 8001efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                        dP20 = dP10;
 8001f02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                        dP10 = dP2;
 8001f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
                    }
                }
                // Precompute repeated terms
                int32_t ar_pow = POW(DIV(a, r), (n + 2)<<16);
 8001f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f16:	461a      	mov	r2, r3
 8001f18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f1c:	1411      	asrs	r1, r2, #16
 8001f1e:	6279      	str	r1, [r7, #36]	; 0x24
 8001f20:	0413      	lsls	r3, r2, #16
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f26:	461a      	mov	r2, r3
 8001f28:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f30:	f7fe f9c6 	bl	80002c0 <__aeabi_ldivmod>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f46:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	041b      	lsls	r3, r3, #16
 8001f4e:	141b      	asrs	r3, r3, #16
 8001f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	da5c      	bge.n	8002016 <magnet+0x96e>
 8001f5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f60:	425b      	negs	r3, r3
 8001f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001f70:	f04f 0000 	mov.w	r0, #0
 8001f74:	f04f 0101 	mov.w	r1, #1
 8001f78:	f7fe f9a2 	bl	80002c0 <__aeabi_ldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f86:	e046      	b.n	8002016 <magnet+0x96e>
 8001f88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01d      	beq.n	8001fd0 <magnet+0x928>
 8001f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f98:	4618      	mov	r0, r3
 8001f9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fa8:	fb02 f501 	mul.w	r5, r2, r1
 8001fac:	fb00 f403 	mul.w	r4, r0, r3
 8001fb0:	442c      	add	r4, r5
 8001fb2:	fba0 2302 	umull	r2, r3, r0, r2
 8001fb6:	18e1      	adds	r1, r4, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	f04f 0000 	mov.w	r0, #0
 8001fbe:	f04f 0100 	mov.w	r1, #0
 8001fc2:	0c10      	lsrs	r0, r2, #16
 8001fc4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001fc8:	1419      	asrs	r1, r3, #16
 8001fca:	4603      	mov	r3, r0
 8001fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fde:	461a      	mov	r2, r3
 8001fe0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001fe4:	fb02 f501 	mul.w	r5, r2, r1
 8001fe8:	fb00 f403 	mul.w	r4, r0, r3
 8001fec:	442c      	add	r4, r5
 8001fee:	fba0 2302 	umull	r2, r3, r0, r2
 8001ff2:	18e1      	adds	r1, r4, r3
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	f04f 0000 	mov.w	r0, #0
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	0c10      	lsrs	r0, r2, #16
 8002000:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002004:	1419      	asrs	r1, r3, #16
 8002006:	4603      	mov	r3, r0
 8002008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800200c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002010:	105b      	asrs	r3, r3, #1
 8002012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1b4      	bne.n	8001f88 <magnet+0x8e0>
 800201e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002022:	667b      	str	r3, [r7, #100]	; 0x64
                int32_t mphi = MULT(m<<16, phi);
 8002024:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4618      	mov	r0, r3
 800202c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	461a      	mov	r2, r3
 8002034:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002038:	fb02 f501 	mul.w	r5, r2, r1
 800203c:	fb00 f403 	mul.w	r4, r0, r3
 8002040:	442c      	add	r4, r5
 8002042:	fba0 2302 	umull	r2, r3, r0, r2
 8002046:	18e1      	adds	r1, r4, r3
 8002048:	460b      	mov	r3, r1
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	0c10      	lsrs	r0, r2, #16
 8002054:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002058:	1419      	asrs	r1, r3, #16
 800205a:	4603      	mov	r3, r0
 800205c:	663b      	str	r3, [r7, #96]	; 0x60
                int32_t cos_mphi = cosrad(mphi);
 800205e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002060:	f7ff f8e0 	bl	8001224 <cosrad>
 8002064:	65f8      	str	r0, [r7, #92]	; 0x5c
                int32_t sin_mphi = sinrad(mphi);
 8002066:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002068:	f7ff f858 	bl	800111c <sinrad>
 800206c:	65b8      	str	r0, [r7, #88]	; 0x58

                int32_t gnm = g[n - 1][m];
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	0899      	lsrs	r1, r3, #2
 8002072:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800207c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002080:	fb00 f101 	mul.w	r1, r0, r1
 8002084:	440a      	add	r2, r1
 8002086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208a:	657b      	str	r3, [r7, #84]	; 0x54
                int32_t hnm = h[n - 1][m];
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	0899      	lsrs	r1, r3, #2
 8002090:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8002094:	1e58      	subs	r0, r3, #1
 8002096:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 800209a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800209c:	fb00 f101 	mul.w	r1, r0, r1
 80020a0:	440a      	add	r2, r1
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	653b      	str	r3, [r7, #80]	; 0x50

                int32_t gcos = MULT(gnm, cos_mphi);
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020aa:	4618      	mov	r0, r3
 80020ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b2:	461a      	mov	r2, r3
 80020b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020b8:	fb02 f501 	mul.w	r5, r2, r1
 80020bc:	fb00 f403 	mul.w	r4, r0, r3
 80020c0:	442c      	add	r4, r5
 80020c2:	fba0 2302 	umull	r2, r3, r0, r2
 80020c6:	18e1      	adds	r1, r4, r3
 80020c8:	460b      	mov	r3, r1
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	0c10      	lsrs	r0, r2, #16
 80020d4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80020d8:	1419      	asrs	r1, r3, #16
 80020da:	4603      	mov	r3, r0
 80020dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                int32_t hsin = MULT(hnm, sin_mphi);
 80020de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e0:	4618      	mov	r0, r3
 80020e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80020e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e8:	461a      	mov	r2, r3
 80020ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80020ee:	fb02 f501 	mul.w	r5, r2, r1
 80020f2:	fb00 f403 	mul.w	r4, r0, r3
 80020f6:	442c      	add	r4, r5
 80020f8:	fba0 2302 	umull	r2, r3, r0, r2
 80020fc:	18e1      	adds	r1, r4, r3
 80020fe:	460b      	mov	r3, r1
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0c10      	lsrs	r0, r2, #16
 800210a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800210e:	1419      	asrs	r1, r3, #16
 8002110:	4603      	mov	r3, r0
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
                int32_t gsin = MULT(gnm, sin_mphi);
 8002114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002116:	4618      	mov	r0, r3
 8002118:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800211c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800211e:	461a      	mov	r2, r3
 8002120:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002124:	fb02 f501 	mul.w	r5, r2, r1
 8002128:	fb00 f403 	mul.w	r4, r0, r3
 800212c:	442c      	add	r4, r5
 800212e:	fba0 2302 	umull	r2, r3, r0, r2
 8002132:	18e1      	adds	r1, r4, r3
 8002134:	460b      	mov	r3, r1
 8002136:	f04f 0000 	mov.w	r0, #0
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	0c10      	lsrs	r0, r2, #16
 8002140:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002144:	1419      	asrs	r1, r3, #16
 8002146:	4603      	mov	r3, r0
 8002148:	647b      	str	r3, [r7, #68]	; 0x44
                int32_t hcos = MULT(hnm, cos_mphi);
 800214a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800214c:	4618      	mov	r0, r3
 800214e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002154:	461a      	mov	r2, r3
 8002156:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800215a:	fb02 f501 	mul.w	r5, r2, r1
 800215e:	fb00 f403 	mul.w	r4, r0, r3
 8002162:	442c      	add	r4, r5
 8002164:	fba0 2302 	umull	r2, r3, r0, r2
 8002168:	18e1      	adds	r1, r4, r3
 800216a:	460b      	mov	r3, r1
 800216c:	f04f 0000 	mov.w	r0, #0
 8002170:	f04f 0100 	mov.w	r1, #0
 8002174:	0c10      	lsrs	r0, r2, #16
 8002176:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800217a:	1419      	asrs	r1, r3, #16
 800217c:	4603      	mov	r3, r0
 800217e:	643b      	str	r3, [r7, #64]	; 0x40

                // Magnetic field component updates
                Br = Br + MULT(MULT(ar_pow, (n + 1)<<16), MULT((gcos + hsin), P2));
 8002180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002182:	4618      	mov	r0, r3
 8002184:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002188:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 800218c:	3301      	adds	r3, #1
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	461a      	mov	r2, r3
 8002192:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002196:	fb02 f501 	mul.w	r5, r2, r1
 800219a:	fb00 f403 	mul.w	r4, r0, r3
 800219e:	442c      	add	r4, r5
 80021a0:	fba0 2302 	umull	r2, r3, r0, r2
 80021a4:	18e1      	adds	r1, r4, r3
 80021a6:	460b      	mov	r3, r1
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	f04f 0100 	mov.w	r1, #0
 80021b0:	0c10      	lsrs	r0, r2, #16
 80021b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80021b6:	1419      	asrs	r1, r3, #16
 80021b8:	4603      	mov	r3, r0
 80021ba:	4698      	mov	r8, r3
 80021bc:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80021c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c4:	4413      	add	r3, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80021cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021d0:	461a      	mov	r2, r3
 80021d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80021d6:	fb02 f501 	mul.w	r5, r2, r1
 80021da:	fb00 f403 	mul.w	r4, r0, r3
 80021de:	442c      	add	r4, r5
 80021e0:	fba0 0102 	umull	r0, r1, r0, r2
 80021e4:	1863      	adds	r3, r4, r1
 80021e6:	4619      	mov	r1, r3
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	0c02      	lsrs	r2, r0, #16
 80021f2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021f6:	140b      	asrs	r3, r1, #16
 80021f8:	4613      	mov	r3, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002200:	fb02 f009 	mul.w	r0, r2, r9
 8002204:	fb08 f103 	mul.w	r1, r8, r3
 8002208:	4401      	add	r1, r0
 800220a:	fba8 2302 	umull	r2, r3, r8, r2
 800220e:	4419      	add	r1, r3
 8002210:	460b      	mov	r3, r1
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f04f 0100 	mov.w	r1, #0
 800221a:	0c10      	lsrs	r0, r2, #16
 800221c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002220:	1419      	asrs	r1, r3, #16
 8002222:	4602      	mov	r2, r0
 8002224:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002228:	4413      	add	r3, r2
 800222a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                Bt = Bt + MULT(MULT(ar_pow, 1<<16), MULT((gcos + hsin), dP2));
 800222e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002230:	4618      	mov	r0, r3
 8002232:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	040b      	lsls	r3, r1, #16
 8002240:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002244:	0402      	lsls	r2, r0, #16
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0c10      	lsrs	r0, r2, #16
 8002250:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002254:	1419      	asrs	r1, r3, #16
 8002256:	4603      	mov	r3, r0
 8002258:	4698      	mov	r8, r3
 800225a:	ea4f 79e8 	mov.w	r9, r8, asr #31
 800225e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002262:	4413      	add	r3, r2
 8002264:	4618      	mov	r0, r3
 8002266:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800226a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800226e:	461a      	mov	r2, r3
 8002270:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002274:	fb02 f501 	mul.w	r5, r2, r1
 8002278:	fb00 f403 	mul.w	r4, r0, r3
 800227c:	442c      	add	r4, r5
 800227e:	fba0 0102 	umull	r0, r1, r0, r2
 8002282:	1863      	adds	r3, r4, r1
 8002284:	4619      	mov	r1, r3
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	0c02      	lsrs	r2, r0, #16
 8002290:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002294:	140b      	asrs	r3, r1, #16
 8002296:	4613      	mov	r3, r2
 8002298:	461a      	mov	r2, r3
 800229a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800229e:	fb02 f009 	mul.w	r0, r2, r9
 80022a2:	fb08 f103 	mul.w	r1, r8, r3
 80022a6:	4401      	add	r1, r0
 80022a8:	fba8 2302 	umull	r2, r3, r8, r2
 80022ac:	4419      	add	r1, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	0c10      	lsrs	r0, r2, #16
 80022ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80022be:	1419      	asrs	r1, r3, #16
 80022c0:	4602      	mov	r2, r0
 80022c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022c6:	4413      	add	r3, r2
 80022c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                Bp = Bp + MULT(MULT(ar_pow, 1<<16), MULT(MULT(convert(m), (-gsin + hcos)), P2));
 80022cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ce:	4618      	mov	r0, r3
 80022d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	040b      	lsls	r3, r1, #16
 80022de:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80022e2:	0402      	lsls	r2, r0, #16
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0c10      	lsrs	r0, r2, #16
 80022ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80022f2:	1419      	asrs	r1, r3, #16
 80022f4:	4603      	mov	r3, r0
 80022f6:	4698      	mov	r8, r3
 80022f8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 80022fc:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f9e9 	bl	80006d8 <convert>
 8002306:	4603      	mov	r3, r0
 8002308:	4618      	mov	r0, r3
 800230a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800230e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	461a      	mov	r2, r3
 8002316:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800231a:	fb02 f501 	mul.w	r5, r2, r1
 800231e:	fb00 f403 	mul.w	r4, r0, r3
 8002322:	442c      	add	r4, r5
 8002324:	fba0 0102 	umull	r0, r1, r0, r2
 8002328:	1863      	adds	r3, r4, r1
 800232a:	4619      	mov	r1, r3
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	0c02      	lsrs	r2, r0, #16
 8002336:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800233a:	140b      	asrs	r3, r1, #16
 800233c:	4613      	mov	r3, r2
 800233e:	4618      	mov	r0, r3
 8002340:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002348:	461a      	mov	r2, r3
 800234a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800234e:	fb02 f501 	mul.w	r5, r2, r1
 8002352:	fb00 f403 	mul.w	r4, r0, r3
 8002356:	442c      	add	r4, r5
 8002358:	fba0 0102 	umull	r0, r1, r0, r2
 800235c:	1863      	adds	r3, r4, r1
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	0c02      	lsrs	r2, r0, #16
 800236a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800236e:	140b      	asrs	r3, r1, #16
 8002370:	4613      	mov	r3, r2
 8002372:	461a      	mov	r2, r3
 8002374:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002378:	fb02 f009 	mul.w	r0, r2, r9
 800237c:	fb08 f103 	mul.w	r1, r8, r3
 8002380:	4401      	add	r1, r0
 8002382:	fba8 2302 	umull	r2, r3, r8, r2
 8002386:	4419      	add	r1, r3
 8002388:	460b      	mov	r3, r1
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	0c10      	lsrs	r0, r2, #16
 8002394:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002398:	1419      	asrs	r1, r3, #16
 800239a:	4602      	mov	r2, r0
 800239c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023a0:	4413      	add	r3, r2
 80023a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        for (n = 1; n <= Nmodel; n++) {
 80023a6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80023b4:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 80023b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80023bc:	429a      	cmp	r2, r3
 80023be:	f6bf ab73 	bge.w	8001aa8 <magnet+0x400>
    for (m = 0; m <= Nmodel; m++) { // m fra 0 til og med 13
 80023c2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80023d0:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80023d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80023d8:	429a      	cmp	r2, r3
 80023da:	f6bf ab60 	bge.w	8001a9e <magnet+0x3f6>
            }
        }
    }
    Bt = -Bt;
 80023de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023e2:	425b      	negs	r3, r3
 80023e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    Bp = -DIV(Bp, sinrad(theta));
 80023e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023ec:	461a      	mov	r2, r3
 80023ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80023f2:	1411      	asrs	r1, r2, #16
 80023f4:	61f9      	str	r1, [r7, #28]
 80023f6:	0413      	lsls	r3, r2, #16
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023fc:	f7fe fe8e 	bl	800111c <sinrad>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002408:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800240c:	f7fd ff58 	bl	80002c0 <__aeabi_ldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4613      	mov	r3, r2
 8002416:	425b      	negs	r3, r3
 8002418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    buffer[0] = Bt;
 800241c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002420:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002424:	601a      	str	r2, [r3, #0]
    buffer[1] = Bp;
 8002426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800242a:	3304      	adds	r3, #4
 800242c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002430:	601a      	str	r2, [r3, #0]
    buffer[2] = Br;
 8002432:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002436:	3308      	adds	r3, #8
 8002438:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8002442:	bf00      	nop
 8002444:	37e4      	adds	r7, #228	; 0xe4
 8002446:	46bd      	mov	sp, r7
 8002448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800244c <main>:




int main(void)
{
 800244c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244e:	b0d3      	sub	sp, #332	; 0x14c
 8002450:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002452:	f001 fd36 	bl	8003ec2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002456:	f000 f9f5 	bl	8002844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800245a:	f000 fb0b 	bl	8002a74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800245e:	f000 fabd 	bl	80029dc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002462:	f000 fa6f 	bl	8002944 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8002466:	f000 fa2d 	bl	80028c4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lsmCtrlReg(&hi2c3);
 800246a:	4851      	ldr	r0, [pc, #324]	; (80025b0 <main+0x164>)
 800246c:	f7fe fa9c 	bl	80009a8 <lsmCtrlReg>
  GPSRead_t GPS = {0,0,0,0};
 8002470:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
  HAL_Delay(5);
 800247e:	2005      	movs	r0, #5
 8002480:	f001 fd90 	bl	8003fa4 <HAL_Delay>
  //HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
  LCD_Init();
 8002484:	f7fe fa33 	bl	80008ee <LCD_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  I2C_Scan(&hi2c3);
 8002488:	4849      	ldr	r0, [pc, #292]	; (80025b0 <main+0x164>)
 800248a:	f7fe f93f 	bl	800070c <I2C_Scan>

int32_t r = REarth16km + Rational(2,10); // Earth's radius in fixed point 16.16 format
 800248e:	210a      	movs	r1, #10
 8002490:	2002      	movs	r0, #2
 8002492:	f7fe f8e1 	bl	8000658 <Rational>
 8002496:	4602      	mov	r2, r0
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <main+0x168>)
 800249a:	4413      	add	r3, r2
 800249c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
printf("r : ");
 80024a0:	4845      	ldr	r0, [pc, #276]	; (80025b8 <main+0x16c>)
 80024a2:	f005 fa33 	bl	800790c <iprintf>
printFix(r);
 80024a6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80024aa:	f7fe f8f5 	bl	8000698 <printFix>
printf("\r\n");
 80024ae:	4843      	ldr	r0, [pc, #268]	; (80025bc <main+0x170>)
 80024b0:	f005 fac8 	bl	8007a44 <puts>
int32_t phi = convert(56);
 80024b4:	2038      	movs	r0, #56	; 0x38
 80024b6:	f7fe f90f 	bl	80006d8 <convert>
 80024ba:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
int32_t theta = convert(12);
 80024be:	200c      	movs	r0, #12
 80024c0:	f7fe f90a 	bl	80006d8 <convert>
 80024c4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
int32_t days = 24510000;
 80024c8:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <main+0x174>)
 80024ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
int32_t vector[3];
magnet(r, theta, phi, days, vector);
 80024ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024dc:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80024e0:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80024e4:	f7ff f8e0 	bl	80016a8 <magnet>
int i;
for (i=0; i<3; i++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80024ee:	e017      	b.n	8002520 <main+0xd4>
	printf("Res %i: ", i);
 80024f0:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80024f4:	4833      	ldr	r0, [pc, #204]	; (80025c4 <main+0x178>)
 80024f6:	f005 fa09 	bl	800790c <iprintf>
	printFix(vector[i]);
 80024fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8002504:	4413      	add	r3, r2
 8002506:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f8c4 	bl	8000698 <printFix>
	printf("\r\n");
 8002510:	482a      	ldr	r0, [pc, #168]	; (80025bc <main+0x170>)
 8002512:	f005 fa97 	bl	8007a44 <puts>
for (i=0; i<3; i++) {
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251a:	3301      	adds	r3, #1
 800251c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	2b02      	cmp	r3, #2
 8002526:	dde3      	ble.n	80024f0 <main+0xa4>
	    			-(convert(3)>>5),    // East
					-(convert(166)>>5)}; //down
*/

//rigtig igrf fra NOAA, gør at lortet virker, 1/4 nT er enheden
Vector3D M2 = {     (17056<<14),  // North
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <main+0x17c>)
 800252a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800252e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002530:	e883 0007 	stmia.w	r3, {r0, r1, r2}
/*
Vector3D M2 = {     (vector[0]>>8),  // North
					(vector[1]>>8),    // East
  					-(vector[2]>>8)}; //down
*/
Vector3D g2 = { 0, 0, 17000};
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002540:	f244 2368 	movw	r3, #17000	; 0x4268
 8002544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

//her kan man rotere en matrix, dvs input forskel fra geografisk nord
//M2 = rotateZ14(&M2, convert(90));
//g2 = rotateZ14(&g2, convert(90));

	LCD_SetCursor(0, 0);
 8002548:	2100      	movs	r1, #0
 800254a:	2000      	movs	r0, #0
 800254c:	f7fe f9b3 	bl	80008b6 <LCD_SetCursor>
    LCD_SendString("Roll");
 8002550:	481e      	ldr	r0, [pc, #120]	; (80025cc <main+0x180>)
 8002552:	f7fe f99b 	bl	800088c <LCD_SendString>
    LCD_SetCursor(0, 6);
 8002556:	2106      	movs	r1, #6
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe f9ac 	bl	80008b6 <LCD_SetCursor>
    LCD_SendString("Pitch");
 800255e:	481c      	ldr	r0, [pc, #112]	; (80025d0 <main+0x184>)
 8002560:	f7fe f994 	bl	800088c <LCD_SendString>
    LCD_SetCursor(0, 12);
 8002564:	210c      	movs	r1, #12
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe f9a5 	bl	80008b6 <LCD_SetCursor>
    LCD_SendString("Yaw");
 800256c:	4819      	ldr	r0, [pc, #100]	; (80025d4 <main+0x188>)
 800256e:	f7fe f98d 	bl	800088c <LCD_SendString>

i = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
Vector3D degrot;
Matrix3x3 rot;
Matrix3x3 Rnb;
Vector3D acc_avg = {0, 0, convert(1)};
 8002578:	2300      	movs	r3, #0
 800257a:	647b      	str	r3, [r7, #68]	; 0x44
 800257c:	2300      	movs	r3, #0
 800257e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002580:	2001      	movs	r0, #1
 8002582:	f7fe f8a9 	bl	80006d8 <convert>
 8002586:	4603      	mov	r3, r0
 8002588:	64fb      	str	r3, [r7, #76]	; 0x4c
Vector3D mag_avg = {convert(1), 0, 0};
 800258a:	2001      	movs	r0, #1
 800258c:	f7fe f8a4 	bl	80006d8 <convert>
 8002590:	4603      	mov	r3, r0
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
 8002594:	2300      	movs	r3, #0
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	2300      	movs	r3, #0
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
Vector3D accdata = {0,0,0};
 800259c:	2300      	movs	r3, #0
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a0:	2300      	movs	r3, #0
 80025a2:	633b      	str	r3, [r7, #48]	; 0x30
 80025a4:	2300      	movs	r3, #0
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34

//til at teste om sinus lut virker
for (int t = 0; t < 1024 * 4; t += 8*4) {
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80025ae:	e02a      	b.n	8002606 <main+0x1ba>
 80025b0:	20000aec 	.word	0x20000aec
 80025b4:	18e33333 	.word	0x18e33333
 80025b8:	08008dc0 	.word	0x08008dc0
 80025bc:	08008dc8 	.word	0x08008dc8
 80025c0:	0175fe30 	.word	0x0175fe30
 80025c4:	08008dcc 	.word	0x08008dcc
 80025c8:	08008e0c 	.word	0x08008e0c
 80025cc:	08008dd8 	.word	0x08008dd8
 80025d0:	08008de0 	.word	0x08008de0
 80025d4:	08008de8 	.word	0x08008de8
        int32_t sinval = sinus(t);
 80025d8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80025dc:	f7fe fd26 	bl	800102c <sinus>
 80025e0:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        printf("%4d: ", t);
 80025e4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80025e8:	488c      	ldr	r0, [pc, #560]	; (800281c <main+0x3d0>)
 80025ea:	f005 f98f 	bl	800790c <iprintf>
        printFix(sinval);
 80025ee:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80025f2:	f7fe f851 	bl	8000698 <printFix>
        printf("\n");
 80025f6:	200a      	movs	r0, #10
 80025f8:	f005 f9a0 	bl	800793c <putchar>
for (int t = 0; t < 1024 * 4; t += 8*4) {
 80025fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002600:	3320      	adds	r3, #32
 8002602:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002606:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260e:	dbe3      	blt.n	80025d8 <main+0x18c>
    }

  while (1)
  {
	  accdata = lsmAccRead(&hi2c3);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4982      	ldr	r1, [pc, #520]	; (8002820 <main+0x3d4>)
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fa1d 	bl	8000a56 <lsmAccRead>

	  //printf("\n acc: %ld, %ld, %ld \n",accdata.x,accdata.y, accdata.z);
	  //printf("mag: %ld, %ld, %ld \n",magdata.x,magdata.y, magdata.z);


	  readSensorsAndAverage(&acc_avg, &mag_avg, hi2c3);
 800261c:	4c80      	ldr	r4, [pc, #512]	; (8002820 <main+0x3d4>)
 800261e:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8002622:	f107 0544 	add.w	r5, r7, #68	; 0x44
 8002626:	4668      	mov	r0, sp
 8002628:	f104 0308 	add.w	r3, r4, #8
 800262c:	224c      	movs	r2, #76	; 0x4c
 800262e:	4619      	mov	r1, r3
 8002630:	f005 f956 	bl	80078e0 <memcpy>
 8002634:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002638:	4631      	mov	r1, r6
 800263a:	4628      	mov	r0, r5
 800263c:	f7fe fa98 	bl	8000b70 <readSensorsAndAverage>
	  triad(mag_avg,acc_avg,M2,g2, &rot);
 8002640:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002644:	9308      	str	r3, [sp, #32]
 8002646:	ac05      	add	r4, sp, #20
 8002648:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800264c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002654:	ac02      	add	r4, sp, #8
 8002656:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800265a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800265e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002662:	466a      	mov	r2, sp
 8002664:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002668:	e893 0003 	ldmia.w	r3, {r0, r1}
 800266c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002672:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002676:	ca07      	ldmia	r2, {r0, r1, r2}
 8002678:	f000 fc76 	bl	8002f68 <triad>
	  Rnb = transpose(rot);
 800267c:	463e      	mov	r6, r7
 800267e:	466d      	mov	r5, sp
 8002680:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800268c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002690:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002694:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002696:	4630      	mov	r0, r6
 8002698:	f001 f97e 	bl	8003998 <transpose>
 800269c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80026a0:	463d      	mov	r5, r7
 80026a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	6023      	str	r3, [r4, #0]
	  rot2eulerZYX(&Rnb,&degrot);
 80026ae:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80026b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fee7 	bl	800348c <rot2eulerZYX>
	  //printf("%ld,%ld,%ld\n", acc_avg.x, acc_avg.y, acc_avg.z);

	  //HAL_Delay(5);

	  //////////////////////////////////LCD deg print//////////////////
	  LCD_SetCursor(1, 0);
 80026be:	2100      	movs	r1, #0
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7fe f8f8 	bl	80008b6 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.x));
 80026c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe f810 	bl	80006f0 <inconvert>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe f954 	bl	8000980 <LCD_PrintAngle>
	  HAL_Delay(5); //vigtigt der skal være delay ellers virker det ikke at rykke cursor
 80026d8:	2005      	movs	r0, #5
 80026da:	f001 fc63 	bl	8003fa4 <HAL_Delay>

	  LCD_SetCursor(1, 6);
 80026de:	2106      	movs	r1, #6
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7fe f8e8 	bl	80008b6 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.y));
 80026e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe f800 	bl	80006f0 <inconvert>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe f944 	bl	8000980 <LCD_PrintAngle>
	  HAL_Delay(5);
 80026f8:	2005      	movs	r0, #5
 80026fa:	f001 fc53 	bl	8003fa4 <HAL_Delay>

	  LCD_SetCursor(1, 12);
 80026fe:	210c      	movs	r1, #12
 8002700:	2001      	movs	r0, #1
 8002702:	f7fe f8d8 	bl	80008b6 <LCD_SetCursor>
	  LCD_PrintAngle(inconvert(degrot.z));
 8002706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd fff0 	bl	80006f0 <inconvert>
 8002710:	4603      	mov	r3, r0
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe f934 	bl	8000980 <LCD_PrintAngle>
	  HAL_Delay(5);
 8002718:	2005      	movs	r0, #5
 800271a:	f001 fc43 	bl	8003fa4 <HAL_Delay>
	  //////////////////////////////////LCD deg print end//////////////
	  static int32_t max_x = INT32_MIN, max_y = INT32_MIN, max_z = INT32_MIN;
	  static int32_t min_x = INT32_MAX, min_y = INT32_MAX, min_z = INT32_MAX;

	  /* bit1 = new-max, bit0 = new-min  -> 00 / 01 / 10 / 11 */
	  uint8_t fx = 0, fy = 0, fz = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8002724:	2300      	movs	r3, #0
 8002726:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
 800272a:	2300      	movs	r3, #0
 800272c:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed

	  if (mag_avg.x > max_x) { max_x = mag_avg.x; fx |= 0b10; }
 8002730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <main+0x3d8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	dd08      	ble.n	800274c <main+0x300>
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	4a39      	ldr	r2, [pc, #228]	; (8002824 <main+0x3d8>)
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  if (mag_avg.x < min_x) { min_x = mag_avg.x; fx |= 0b01; }
 800274c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800274e:	4b36      	ldr	r3, [pc, #216]	; (8002828 <main+0x3dc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	da08      	bge.n	8002768 <main+0x31c>
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	4a33      	ldr	r2, [pc, #204]	; (8002828 <main+0x3dc>)
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

	  if (mag_avg.y > max_y) { max_y = mag_avg.y; fy |= 0b10; }
 8002768:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <main+0x3e0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	dd08      	ble.n	8002784 <main+0x338>
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	4a2d      	ldr	r2, [pc, #180]	; (800282c <main+0x3e0>)
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	  if (mag_avg.y < min_y) { min_y = mag_avg.y; fy |= 0b01; }
 8002784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <main+0x3e4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	da08      	bge.n	80027a0 <main+0x354>
 800278e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002790:	4a27      	ldr	r2, [pc, #156]	; (8002830 <main+0x3e4>)
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee

	  if (mag_avg.z > max_z) { max_z = mag_avg.z; fz |= 0b10; }
 80027a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <main+0x3e8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	dd08      	ble.n	80027bc <main+0x370>
 80027aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <main+0x3e8>)
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
	  if (mag_avg.z < min_z) { min_z = mag_avg.z; fz |= 0b01; }
 80027bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <main+0x3ec>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	da08      	bge.n	80027d8 <main+0x38c>
 80027c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <main+0x3ec>)
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
	  /* printable strings for each 2-bit flag value */
	  static const char* const flag_txt[4] = {"00","01","10","11"};

	  /* -------------- CSV log line ----------------------------------------- */
	  printf("%ld,%ld,%ld,%s,%s,%s\r\n",
	         (long)mag_avg.x, (long)mag_avg.y, (long)mag_avg.z,
 80027d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027da:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80027dc:	6c3d      	ldr	r5, [r7, #64]	; 0x40
	  printf("%ld,%ld,%ld,%s,%s,%s\r\n",
 80027de:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <main+0x3f0>)
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	f897 20ee 	ldrb.w	r2, [r7, #238]	; 0xee
 80027ec:	4913      	ldr	r1, [pc, #76]	; (800283c <main+0x3f0>)
 80027ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027f2:	f897 10ed 	ldrb.w	r1, [r7, #237]	; 0xed
 80027f6:	4e11      	ldr	r6, [pc, #68]	; (800283c <main+0x3f0>)
 80027f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80027fc:	9102      	str	r1, [sp, #8]
 80027fe:	9201      	str	r2, [sp, #4]
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	462b      	mov	r3, r5
 8002804:	4622      	mov	r2, r4
 8002806:	4601      	mov	r1, r0
 8002808:	480d      	ldr	r0, [pc, #52]	; (8002840 <main+0x3f4>)
 800280a:	f005 f87f 	bl	800790c <iprintf>
	         flag_txt[fx], flag_txt[fy], flag_txt[fz]);

	  //process_uart_data(&uart_rx_buf, &GPS);
	  //HAL_Delay(5);
	  i++;
 800280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002812:	3301      	adds	r3, #1
 8002814:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  {
 8002818:	e6fa      	b.n	8002610 <main+0x1c4>
 800281a:	bf00      	nop
 800281c:	08008dec 	.word	0x08008dec
 8002820:	20000aec 	.word	0x20000aec
 8002824:	200009c0 	.word	0x200009c0
 8002828:	200009c4 	.word	0x200009c4
 800282c:	200009c8 	.word	0x200009c8
 8002830:	200009cc 	.word	0x200009cc
 8002834:	200009d0 	.word	0x200009d0
 8002838:	200009d4 	.word	0x200009d4
 800283c:	0800b628 	.word	0x0800b628
 8002840:	08008df4 	.word	0x08008df4

08002844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b094      	sub	sp, #80	; 0x50
 8002848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284a:	f107 0318 	add.w	r3, r7, #24
 800284e:	2238      	movs	r2, #56	; 0x38
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f005 f852 	bl	80078fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002866:	f44f 7000 	mov.w	r0, #512	; 0x200
 800286a:	f002 fdfb 	bl	8005464 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800286e:	2302      	movs	r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002878:	2340      	movs	r3, #64	; 0x40
 800287a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800287c:	2300      	movs	r3, #0
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002880:	f107 0318 	add.w	r3, r7, #24
 8002884:	4618      	mov	r0, r3
 8002886:	f002 fea1 	bl	80055cc <HAL_RCC_OscConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002890:	f000 f95a 	bl	8002b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002894:	230f      	movs	r3, #15
 8002896:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002898:	2301      	movs	r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f003 f9a1 	bl	8005bf4 <HAL_RCC_ClockConfig>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80028b8:	f000 f946 	bl	8002b48 <Error_Handler>
  }
}
 80028bc:	bf00      	nop
 80028be:	3750      	adds	r7, #80	; 0x50
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <MX_I2C3_Init+0x74>)
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <MX_I2C3_Init+0x78>)
 80028cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0010061A;
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <MX_I2C3_Init+0x74>)
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <MX_I2C3_Init+0x7c>)
 80028d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80028d4:	4b18      	ldr	r3, [pc, #96]	; (8002938 <MX_I2C3_Init+0x74>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <MX_I2C3_Init+0x74>)
 80028dc:	2201      	movs	r2, #1
 80028de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <MX_I2C3_Init+0x74>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <MX_I2C3_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_I2C3_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_I2C3_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <MX_I2C3_Init+0x74>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028fe:	480e      	ldr	r0, [pc, #56]	; (8002938 <MX_I2C3_Init+0x74>)
 8002900:	f001 fedc 	bl	80046bc <HAL_I2C_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800290a:	f000 f91d 	bl	8002b48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290e:	2100      	movs	r1, #0
 8002910:	4809      	ldr	r0, [pc, #36]	; (8002938 <MX_I2C3_Init+0x74>)
 8002912:	f002 fd0f 	bl	8005334 <HAL_I2CEx_ConfigAnalogFilter>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800291c:	f000 f914 	bl	8002b48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002920:	2100      	movs	r1, #0
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_I2C3_Init+0x74>)
 8002924:	f002 fd51 	bl	80053ca <HAL_I2CEx_ConfigDigitalFilter>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800292e:	f000 f90b 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000aec 	.word	0x20000aec
 800293c:	40007800 	.word	0x40007800
 8002940:	0010061a 	.word	0x0010061a

08002944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002948:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 800294a:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <MX_USART1_UART_Init+0x94>)
 800294c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 8002950:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 800297c:	2200      	movs	r2, #0
 800297e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 8002982:	2200      	movs	r2, #0
 8002984:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 8002988:	2200      	movs	r2, #0
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800298c:	4811      	ldr	r0, [pc, #68]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 800298e:	f003 fd3d 	bl	800640c <HAL_UART_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002998:	f000 f8d6 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800299c:	2100      	movs	r1, #0
 800299e:	480d      	ldr	r0, [pc, #52]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 80029a0:	f004 fea9 	bl	80076f6 <HAL_UARTEx_SetTxFifoThreshold>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029aa:	f000 f8cd 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ae:	2100      	movs	r1, #0
 80029b0:	4808      	ldr	r0, [pc, #32]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 80029b2:	f004 fede 	bl	8007772 <HAL_UARTEx_SetRxFifoThreshold>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029bc:	f000 f8c4 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <MX_USART1_UART_Init+0x90>)
 80029c2:	f004 fe5f 	bl	8007684 <HAL_UARTEx_DisableFifoMode>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029cc:	f000 f8bc 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000b44 	.word	0x20000b44
 80029d8:	40013800 	.word	0x40013800

080029dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 80029e2:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <MX_USART2_UART_Init+0x94>)
 80029e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80029e6:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 80029e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a02:	220c      	movs	r2, #12
 8002a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a24:	4811      	ldr	r0, [pc, #68]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a26:	f003 fcf1 	bl	800640c <HAL_UART_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002a30:	f000 f88a 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a34:	2100      	movs	r1, #0
 8002a36:	480d      	ldr	r0, [pc, #52]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a38:	f004 fe5d 	bl	80076f6 <HAL_UARTEx_SetTxFifoThreshold>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002a42:	f000 f881 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a46:	2100      	movs	r1, #0
 8002a48:	4808      	ldr	r0, [pc, #32]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a4a:	f004 fe92 	bl	8007772 <HAL_UARTEx_SetRxFifoThreshold>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002a54:	f000 f878 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002a58:	4804      	ldr	r0, [pc, #16]	; (8002a6c <MX_USART2_UART_Init+0x90>)
 8002a5a:	f004 fe13 	bl	8007684 <HAL_UARTEx_DisableFifoMode>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002a64:	f000 f870 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000bd8 	.word	0x20000bd8
 8002a70:	40004400 	.word	0x40004400

08002a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <MX_GPIO_Init+0xa0>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <MX_GPIO_Init+0xa0>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a96:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <MX_GPIO_Init+0xa0>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <MX_GPIO_Init+0xa0>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <MX_GPIO_Init+0xa0>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <MX_GPIO_Init+0xa0>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002aba:	2200      	movs	r2, #0
 8002abc:	2173      	movs	r1, #115	; 0x73
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac2:	f001 fde3 	bl	800468c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2108      	movs	r1, #8
 8002aca:	4813      	ldr	r0, [pc, #76]	; (8002b18 <MX_GPIO_Init+0xa4>)
 8002acc:	f001 fdde 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002ad0:	2373      	movs	r3, #115	; 0x73
 8002ad2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 030c 	add.w	r3, r7, #12
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aea:	f001 fc4d 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002aee:	2308      	movs	r3, #8
 8002af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af2:	2301      	movs	r3, #1
 8002af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 030c 	add.w	r3, r7, #12
 8002b02:	4619      	mov	r1, r3
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_GPIO_Init+0xa4>)
 8002b06:	f001 fc3f 	bl	8004388 <HAL_GPIO_Init>

}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400

08002b1c <_write>:
/**
 * @brief This is necessary to write to the USB port with Putty
 */

int _write(int file, char *data, int len)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)data, len, HAL_MAX_DELAY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	4804      	ldr	r0, [pc, #16]	; (8002b44 <_write+0x28>)
 8002b34:	f003 fcba 	bl	80064ac <HAL_UART_Transmit>
    return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000bd8 	.word	0x20000bd8

08002b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b4c:	b672      	cpsid	i
}
 8002b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <Error_Handler+0x8>
	...

08002b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_MspInit+0x44>)
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_MspInit+0x44>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6613      	str	r3, [r2, #96]	; 0x60
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_MspInit+0x44>)
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_MspInit+0x44>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_MspInit+0x44>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_MspInit+0x44>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002b8a:	f002 fd0f 	bl	80055ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b09c      	sub	sp, #112	; 0x70
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bb4:	f107 0318 	add.w	r3, r7, #24
 8002bb8:	2244      	movs	r2, #68	; 0x44
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 fe9d 	bl	80078fc <memset>
  if(hi2c->Instance==I2C3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a2e      	ldr	r2, [pc, #184]	; (8002c80 <HAL_I2C_MspInit+0xe4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d154      	bne.n	8002c76 <HAL_I2C_MspInit+0xda>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd6:	f107 0318 	add.w	r3, r7, #24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fa26 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002be6:	f7ff ffaf 	bl	8002b48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c20:	2312      	movs	r3, #18
 8002c22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c34:	4619      	mov	r1, r3
 8002c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c3a:	f001 fba5 	bl	8004388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002c4e:	2308      	movs	r3, #8
 8002c50:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c56:	4619      	mov	r1, r3
 8002c58:	480b      	ldr	r0, [pc, #44]	; (8002c88 <HAL_I2C_MspInit+0xec>)
 8002c5a:	f001 fb95 	bl	8004388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002c64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_I2C_MspInit+0xe8>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c76:	bf00      	nop
 8002c78:	3770      	adds	r7, #112	; 0x70
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40007800 	.word	0x40007800
 8002c84:	40021000 	.word	0x40021000
 8002c88:	48000400 	.word	0x48000400

08002c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b09c      	sub	sp, #112	; 0x70
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ca4:	f107 0318 	add.w	r3, r7, #24
 8002ca8:	2244      	movs	r2, #68	; 0x44
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f004 fe25 	bl	80078fc <memset>
  if(huart->Instance==USART1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <HAL_UART_MspInit+0x134>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d140      	bne.n	8002d3e <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc4:	f107 0318 	add.w	r3, r7, #24
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 f9af 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cd4:	f7ff ff38 	bl	8002b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cdc:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf4:	4a33      	ldr	r2, [pc, #204]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cfc:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2300      	movs	r3, #0
 8002d18:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d22:	4619      	mov	r1, r3
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d28:	f001 fb2e 	bl	8004388 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2025      	movs	r0, #37	; 0x25
 8002d32:	f001 fa34 	bl	800419e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d36:	2025      	movs	r0, #37	; 0x25
 8002d38:	f001 fa4b 	bl	80041d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d3c:	e03b      	b.n	8002db6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_UART_MspInit+0x13c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d136      	bne.n	8002db6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d50:	f107 0318 	add.w	r3, r7, #24
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 f969 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002d60:	f7ff fef2 	bl	8002b48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d70:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <HAL_UART_MspInit+0x138>)
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d94:	230c      	movs	r3, #12
 8002d96:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da4:	2307      	movs	r3, #7
 8002da6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db2:	f001 fae9 	bl	8004388 <HAL_GPIO_Init>
}
 8002db6:	bf00      	nop
 8002db8:	3770      	adds	r7, #112	; 0x70
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40004400 	.word	0x40004400

08002dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <NMI_Handler+0x4>

08002dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd6:	e7fe      	b.n	8002dd6 <HardFault_Handler+0x4>

08002dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ddc:	e7fe      	b.n	8002ddc <MemManage_Handler+0x4>

08002dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de2:	e7fe      	b.n	8002de2 <BusFault_Handler+0x4>

08002de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <UsageFault_Handler+0x4>

08002dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e18:	f001 f8a6 	bl	8003f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <USART1_IRQHandler+0x10>)
 8002e26:	f003 fbcf 	bl	80065c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000b44 	.word	0x20000b44

08002e34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e00a      	b.n	8002e5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e46:	f3af 8000 	nop.w
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	60ba      	str	r2, [r7, #8]
 8002e52:	b2ca      	uxtb	r2, r1
 8002e54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	dbf0      	blt.n	8002e46 <_read+0x12>
	}

return len;
 8002e64:	687b      	ldr	r3, [r7, #4]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
	return -1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e96:	605a      	str	r2, [r3, #4]
	return 0;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_isatty>:

int _isatty(int file)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
	return 1;
 8002eae:	2301      	movs	r3, #1
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <_sbrk+0x5c>)
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <_sbrk+0x60>)
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <_sbrk+0x64>)
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <_sbrk+0x68>)
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f08:	f004 fcc0 	bl	800788c <__errno>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	220c      	movs	r2, #12
 8002f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	e009      	b.n	8002f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <_sbrk+0x64>)
 8002f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20008000 	.word	0x20008000
 8002f38:	00000400 	.word	0x00000400
 8002f3c:	20000ae0 	.word	0x20000ae0
 8002f40:	20000c80 	.word	0x20000c80

08002f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <SystemInit+0x20>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <SystemInit+0x20>)
 8002f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <triad>:
#include <luts.h>
#define PI16 205887
#define norm(a) norm_q16(a)


void triad(Vector3D B1, Vector3D g1, Vector3D B2, Vector3D g2, Matrix3x3* result){
 8002f68:	b082      	sub	sp, #8
 8002f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6e:	b0f5      	sub	sp, #468	; 0x1d4
 8002f70:	af10      	add	r7, sp, #64	; 0x40
 8002f72:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002f7a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	// Normalisér alle vektorerne
	int32_t nB1 = norm(B1);
 8002f7e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f86:	f000 ff2d 	bl	8003de4 <norm_q16>
 8002f8a:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
	int32_t ng1 = norm(g1);
 8002f8e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002f92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f96:	f000 ff25 	bl	8003de4 <norm_q16>
 8002f9a:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
	int32_t nB2 = norm(B2);
 8002f9e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002fa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fa6:	f000 ff1d 	bl	8003de4 <norm_q16>
 8002faa:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	int32_t ng2 = norm(g2);
 8002fae:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8002fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fb6:	f000 ff15 	bl	8003de4 <norm_q16>
 8002fba:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180

	B1.x = FIX16_DIV(B1.x, nB1);
 8002fbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fca:	ea4f 4922 	mov.w	r9, r2, asr #16
 8002fce:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8002fd2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002fdc:	4640      	mov	r0, r8
 8002fde:	4649      	mov	r1, r9
 8002fe0:	f7fd f96e 	bl	80002c0 <__aeabi_ldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fec:	601a      	str	r2, [r3, #0]
	B1.y = FIX16_DIV(B1.y, nB1);
 8002fee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002ffa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002ffe:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8003002:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003006:	461a      	mov	r2, r3
 8003008:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800300c:	4650      	mov	r0, sl
 800300e:	4659      	mov	r1, fp
 8003010:	f7fd f956 	bl	80002c0 <__aeabi_ldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800301c:	605a      	str	r2, [r3, #4]
	B1.z = FIX16_DIV(B1.z, nB1);
 800301e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	461a      	mov	r2, r3
 8003026:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800302a:	1416      	asrs	r6, r2, #16
 800302c:	0415      	lsls	r5, r2, #16
 800302e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003032:	461a      	mov	r2, r3
 8003034:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003038:	4628      	mov	r0, r5
 800303a:	4631      	mov	r1, r6
 800303c:	f7fd f940 	bl	80002c0 <__aeabi_ldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003048:	609a      	str	r2, [r3, #8]

	g1.x = FIX16_DIV(g1.x, ng1);
 800304a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800304e:	461a      	mov	r2, r3
 8003050:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003054:	1411      	asrs	r1, r2, #16
 8003056:	6779      	str	r1, [r7, #116]	; 0x74
 8003058:	0413      	lsls	r3, r2, #16
 800305a:	673b      	str	r3, [r7, #112]	; 0x70
 800305c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003060:	461a      	mov	r2, r3
 8003062:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003066:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800306a:	f7fd f929 	bl	80002c0 <__aeabi_ldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4613      	mov	r3, r2
 8003074:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	g1.y = FIX16_DIV(g1.y, ng1);
 8003078:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800307c:	461a      	mov	r2, r3
 800307e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003082:	1411      	asrs	r1, r2, #16
 8003084:	66f9      	str	r1, [r7, #108]	; 0x6c
 8003086:	0413      	lsls	r3, r2, #16
 8003088:	66bb      	str	r3, [r7, #104]	; 0x68
 800308a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800308e:	461a      	mov	r2, r3
 8003090:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003094:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003098:	f7fd f912 	bl	80002c0 <__aeabi_ldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4613      	mov	r3, r2
 80030a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	g1.z = FIX16_DIV(g1.z, ng1);
 80030a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80030aa:	461a      	mov	r2, r3
 80030ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030b0:	1411      	asrs	r1, r2, #16
 80030b2:	6679      	str	r1, [r7, #100]	; 0x64
 80030b4:	0413      	lsls	r3, r2, #16
 80030b6:	663b      	str	r3, [r7, #96]	; 0x60
 80030b8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80030bc:	461a      	mov	r2, r3
 80030be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030c2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80030c6:	f7fd f8fb 	bl	80002c0 <__aeabi_ldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4613      	mov	r3, r2
 80030d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

	B2.x = FIX16_DIV(B2.x, nB2);
 80030d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030d8:	461a      	mov	r2, r3
 80030da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030de:	1411      	asrs	r1, r2, #16
 80030e0:	65f9      	str	r1, [r7, #92]	; 0x5c
 80030e2:	0413      	lsls	r3, r2, #16
 80030e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030ea:	461a      	mov	r2, r3
 80030ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80030f0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030f4:	f7fd f8e4 	bl	80002c0 <__aeabi_ldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	B2.y = FIX16_DIV(B2.y, nB2);
 8003102:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003106:	461a      	mov	r2, r3
 8003108:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800310c:	1411      	asrs	r1, r2, #16
 800310e:	6579      	str	r1, [r7, #84]	; 0x54
 8003110:	0413      	lsls	r3, r2, #16
 8003112:	653b      	str	r3, [r7, #80]	; 0x50
 8003114:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003118:	461a      	mov	r2, r3
 800311a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800311e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003122:	f7fd f8cd 	bl	80002c0 <__aeabi_ldivmod>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4613      	mov	r3, r2
 800312c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	B2.z = FIX16_DIV(B2.z, nB2);
 8003130:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003134:	461a      	mov	r2, r3
 8003136:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800313a:	1411      	asrs	r1, r2, #16
 800313c:	64f9      	str	r1, [r7, #76]	; 0x4c
 800313e:	0413      	lsls	r3, r2, #16
 8003140:	64bb      	str	r3, [r7, #72]	; 0x48
 8003142:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003146:	461a      	mov	r2, r3
 8003148:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800314c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003150:	f7fd f8b6 	bl	80002c0 <__aeabi_ldivmod>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4613      	mov	r3, r2
 800315a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

	g2.x = FIX16_DIV(g2.x, ng2);
 800315e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003162:	461a      	mov	r2, r3
 8003164:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003168:	1411      	asrs	r1, r2, #16
 800316a:	6479      	str	r1, [r7, #68]	; 0x44
 800316c:	0413      	lsls	r3, r2, #16
 800316e:	643b      	str	r3, [r7, #64]	; 0x40
 8003170:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003174:	461a      	mov	r2, r3
 8003176:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800317a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800317e:	f7fd f89f 	bl	80002c0 <__aeabi_ldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4613      	mov	r3, r2
 8003188:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	g2.y = FIX16_DIV(g2.y, ng2);
 800318c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8003190:	461a      	mov	r2, r3
 8003192:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003196:	1411      	asrs	r1, r2, #16
 8003198:	63f9      	str	r1, [r7, #60]	; 0x3c
 800319a:	0413      	lsls	r3, r2, #16
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
 800319e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031a2:	461a      	mov	r2, r3
 80031a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031ac:	f7fd f888 	bl	80002c0 <__aeabi_ldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	g2.z = FIX16_DIV(g2.z, ng2);
 80031ba:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80031be:	461a      	mov	r2, r3
 80031c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031c4:	1411      	asrs	r1, r2, #16
 80031c6:	6379      	str	r1, [r7, #52]	; 0x34
 80031c8:	0413      	lsls	r3, r2, #16
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
 80031cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031d0:	461a      	mov	r2, r3
 80031d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80031d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031da:	f7fd f871 	bl	80002c0 <__aeabi_ldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4613      	mov	r3, r2
 80031e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	Vector3D u1;
	Vector3D u2;
	Vector3D u3;

	t1 = B1;
 80031e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80031ec:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 80031f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	u1 = B2;
 80031f8:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 80031fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003200:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003204:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	Vector3D B1xg1 = cross(B1, g1);
 8003208:	f507 7692 	add.w	r6, r7, #292	; 0x124
 800320c:	f107 057c 	add.w	r5, r7, #124	; 0x7c
 8003210:	466c      	mov	r4, sp
 8003212:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800321a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800321e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003222:	4630      	mov	r0, r6
 8003224:	f000 fab0 	bl	8003788 <cross>

	int32_t nB1g1 = norm(B1xg1);
 8003228:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800322c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003230:	f000 fdd8 	bl	8003de4 <norm_q16>
 8003234:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	t2.x = FIX16_DIV(B1xg1.x, nB1g1);
 8003238:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800323c:	461a      	mov	r2, r3
 800323e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003242:	1411      	asrs	r1, r2, #16
 8003244:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003246:	0413      	lsls	r3, r2, #16
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
 800324a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800324e:	461a      	mov	r2, r3
 8003250:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003254:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003258:	f7fd f832 	bl	80002c0 <__aeabi_ldivmod>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4613      	mov	r3, r2
 8003262:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	t2.y = FIX16_DIV(B1xg1.y, nB1g1);
 8003266:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800326a:	461a      	mov	r2, r3
 800326c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003270:	1411      	asrs	r1, r2, #16
 8003272:	6279      	str	r1, [r7, #36]	; 0x24
 8003274:	0413      	lsls	r3, r2, #16
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800327c:	461a      	mov	r2, r3
 800327e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003282:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003286:	f7fd f81b 	bl	80002c0 <__aeabi_ldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4613      	mov	r3, r2
 8003290:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	t2.z = FIX16_DIV(B1xg1.z, nB1g1);
 8003294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003298:	461a      	mov	r2, r3
 800329a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800329e:	1411      	asrs	r1, r2, #16
 80032a0:	61f9      	str	r1, [r7, #28]
 80032a2:	0413      	lsls	r3, r2, #16
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80032aa:	461a      	mov	r2, r3
 80032ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80032b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b4:	f7fd f804 	bl	80002c0 <__aeabi_ldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	t3 = cross(t1, t2);
 80032c2:	f507 75aa 	add.w	r5, r7, #340	; 0x154
 80032c6:	466c      	mov	r4, sp
 80032c8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80032cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032d4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80032d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032da:	4628      	mov	r0, r5
 80032dc:	f000 fa54 	bl	8003788 <cross>

	Vector3D B2xg2 = cross(B2, g2);
 80032e0:	f507 758c 	add.w	r5, r7, #280	; 0x118
 80032e4:	466c      	mov	r4, sp
 80032e6:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80032ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80032f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80032f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f8:	4628      	mov	r0, r5
 80032fa:	f000 fa45 	bl	8003788 <cross>

	int32_t nB2g2 = norm(B2xg2);
 80032fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003302:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003306:	f000 fd6d 	bl	8003de4 <norm_q16>
 800330a:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
	u2.x = FIX16_DIV(B2xg2.x, nB2g2);
 800330e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003312:	461a      	mov	r2, r3
 8003314:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003318:	1411      	asrs	r1, r2, #16
 800331a:	6179      	str	r1, [r7, #20]
 800331c:	0413      	lsls	r3, r2, #16
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003324:	461a      	mov	r2, r3
 8003326:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800332a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800332e:	f7fc ffc7 	bl	80002c0 <__aeabi_ldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4613      	mov	r3, r2
 8003338:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	u2.y = FIX16_DIV(B2xg2.y, nB2g2);
 800333c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003340:	461a      	mov	r2, r3
 8003342:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003346:	1411      	asrs	r1, r2, #16
 8003348:	60f9      	str	r1, [r7, #12]
 800334a:	0413      	lsls	r3, r2, #16
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003352:	461a      	mov	r2, r3
 8003354:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800335c:	f7fc ffb0 	bl	80002c0 <__aeabi_ldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	u2.z = FIX16_DIV(B2xg2.z, nB2g2);
 800336a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800336e:	461a      	mov	r2, r3
 8003370:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003374:	1411      	asrs	r1, r2, #16
 8003376:	6079      	str	r1, [r7, #4]
 8003378:	0413      	lsls	r3, r2, #16
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003380:	461a      	mov	r2, r3
 8003382:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003386:	e9d7 0100 	ldrd	r0, r1, [r7]
 800338a:	f7fc ff99 	bl	80002c0 <__aeabi_ldivmod>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4613      	mov	r3, r2
 8003394:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	u3 = cross(u1, u2);
 8003398:	f507 7598 	add.w	r5, r7, #304	; 0x130
 800339c:	466c      	mov	r4, sp
 800339e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80033a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80033ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 f9e9 	bl	8003788 <cross>

	Matrix3x3 U = create_matrix_from_vectors(u1, u2, u3);
 80033b6:	f107 05f4 	add.w	r5, r7, #244	; 0xf4
 80033ba:	ac03      	add	r4, sp, #12
 80033bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80033c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033c8:	466c      	mov	r4, sp
 80033ca:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80033ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80033da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033dc:	4628      	mov	r0, r5
 80033de:	f000 fab1 	bl	8003944 <create_matrix_from_vectors>
	Matrix3x3 T = create_matrix_from_vectors(t1, t2, t3);
 80033e2:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 80033e6:	ac03      	add	r4, sp, #12
 80033e8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80033ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033f4:	466c      	mov	r4, sp
 80033f6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003402:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8003406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003408:	4628      	mov	r0, r5
 800340a:	f000 fa9b 	bl	8003944 <create_matrix_from_vectors>

	Matrix3x3 C;
	Matrix3x3 Tt = transpose(T);
 800340e:	f107 0688 	add.w	r6, r7, #136	; 0x88
 8003412:	466d      	mov	r5, sp
 8003414:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8003418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800341a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800341c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003420:	e885 0003 	stmia.w	r5, {r0, r1}
 8003424:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342a:	4630      	mov	r0, r6
 800342c:	f000 fab4 	bl	8003998 <transpose>

	C = MMult(U,Tt);
 8003430:	f107 06ac 	add.w	r6, r7, #172	; 0xac
 8003434:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003438:	ac06      	add	r4, sp, #24
 800343a:	461d      	mov	r5, r3
 800343c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800343e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	6023      	str	r3, [r4, #0]
 8003448:	466d      	mov	r5, sp
 800344a:	f507 7480 	add.w	r4, r7, #256	; 0x100
 800344e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003452:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003456:	e885 0003 	stmia.w	r5, {r0, r1}
 800345a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800345e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003460:	4630      	mov	r0, r6
 8003462:	f000 fadb 	bl	8003a1c <MMult>
	*result = C;
 8003466:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800346a:	461d      	mov	r5, r3
 800346c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8003470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003476:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003478:	6823      	ldr	r3, [r4, #0]
 800347a:	602b      	str	r3, [r5, #0]
}
 800347c:	bf00      	nop
 800347e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8003482:	46bd      	mov	sp, r7
 8003484:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	b002      	add	sp, #8
 800348a:	4770      	bx	lr

0800348c <rot2eulerZYX>:
*/
//////////////////////////////////////////////////////////////


// In triad.c
void rot2eulerZYX(const Matrix3x3* R, Vector3D* angles) {
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b08c      	sub	sp, #48	; 0x30
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
    int32_t rzx = R->z.x;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Clamp R->z.x to [-1, 1] range for asin
    if (rzx < convert(-1)) rzx = convert(-1);
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7fd f91a 	bl	80006d8 <convert>
 80034a4:	4602      	mov	r2, r0
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	4293      	cmp	r3, r2
 80034aa:	da04      	bge.n	80034b6 <rot2eulerZYX+0x2a>
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f7fd f912 	bl	80006d8 <convert>
 80034b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (rzx > convert(1))  rzx = convert(1);
 80034b6:	2001      	movs	r0, #1
 80034b8:	f7fd f90e 	bl	80006d8 <convert>
 80034bc:	4602      	mov	r2, r0
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	4293      	cmp	r3, r2
 80034c2:	dd03      	ble.n	80034cc <rot2eulerZYX+0x40>
 80034c4:	2001      	movs	r0, #1
 80034c6:	f7fd f907 	bl	80006d8 <convert>
 80034ca:	62f8      	str	r0, [r7, #44]	; 0x2c

    // Pitch = -asin(R->z.x)
    int32_t pitch_rad = -fix_asin(rzx);  // <-- uses your LUT
 80034cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034ce:	f7fd ff2d 	bl	800132c <fix_asin>
 80034d2:	4603      	mov	r3, r0
 80034d4:	425b      	negs	r3, r3
 80034d6:	623b      	str	r3, [r7, #32]
    int32_t cos_pitch = cosrad(pitch_rad);
 80034d8:	6a38      	ldr	r0, [r7, #32]
 80034da:	f7fd fea3 	bl	8001224 <cosrad>
 80034de:	61f8      	str	r0, [r7, #28]

    int32_t rad2deg = FIX16_DIV(convert(180), PI16);
 80034e0:	20b4      	movs	r0, #180	; 0xb4
 80034e2:	f7fd f8f9 	bl	80006d8 <convert>
 80034e6:	4603      	mov	r3, r0
 80034e8:	461a      	mov	r2, r3
 80034ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80034ee:	1415      	asrs	r5, r2, #16
 80034f0:	0414      	lsls	r4, r2, #16
 80034f2:	4a74      	ldr	r2, [pc, #464]	; (80036c4 <rot2eulerZYX+0x238>)
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	4620      	mov	r0, r4
 80034fa:	4629      	mov	r1, r5
 80034fc:	f7fc fee0 	bl	80002c0 <__aeabi_ldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
    int32_t pitch_deg = FIX16_MULT(pitch_rad, rad2deg);
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	4618      	mov	r0, r3
 800350c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	461a      	mov	r2, r3
 8003514:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003518:	fb02 f501 	mul.w	r5, r2, r1
 800351c:	fb00 f403 	mul.w	r4, r0, r3
 8003520:	442c      	add	r4, r5
 8003522:	fba0 2302 	umull	r2, r3, r0, r2
 8003526:	18e1      	adds	r1, r4, r3
 8003528:	460b      	mov	r3, r1
 800352a:	f04f 0000 	mov.w	r0, #0
 800352e:	f04f 0100 	mov.w	r1, #0
 8003532:	0c10      	lsrs	r0, r2, #16
 8003534:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003538:	1419      	asrs	r1, r3, #16
 800353a:	4603      	mov	r3, r0
 800353c:	617b      	str	r3, [r7, #20]

    int32_t roll_deg = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t yaw_deg = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24

    // Gimbal lock threshold (approx. 0.001 in Q16.16)
    #define GIMBAL_THRESHOLD 30

    if (abs(cos_pitch) > GIMBAL_THRESHOLD) {
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	2b00      	cmp	r3, #0
 800354a:	bfb8      	it	lt
 800354c:	425b      	neglt	r3, r3
 800354e:	2b1e      	cmp	r3, #30
 8003550:	dd48      	ble.n	80035e4 <rot2eulerZYX+0x158>
        // No gimbal lock
        int32_t roll_rad = fix_atan2(R->z.y, R->z.z);  // <-- uses your LUT
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4619      	mov	r1, r3
 800355c:	4610      	mov	r0, r2
 800355e:	f7fd ffad 	bl	80014bc <fix_atan2>
 8003562:	60f8      	str	r0, [r7, #12]
        int32_t yaw_rad  = fix_atan2(R->y.x, R->x.x);  // <-- uses your LUT
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f7fd ffa4 	bl	80014bc <fix_atan2>
 8003574:	60b8      	str	r0, [r7, #8]

        roll_deg = FIX16_MULT(roll_rad, rad2deg);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4618      	mov	r0, r3
 800357a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	461a      	mov	r2, r3
 8003582:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003586:	fb02 f501 	mul.w	r5, r2, r1
 800358a:	fb00 f403 	mul.w	r4, r0, r3
 800358e:	442c      	add	r4, r5
 8003590:	fba0 2302 	umull	r2, r3, r0, r2
 8003594:	18e1      	adds	r1, r4, r3
 8003596:	460b      	mov	r3, r1
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	0c10      	lsrs	r0, r2, #16
 80035a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035a6:	1419      	asrs	r1, r3, #16
 80035a8:	4603      	mov	r3, r0
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
        yaw_deg  = FIX16_MULT(yaw_rad,  rad2deg);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	461a      	mov	r2, r3
 80035b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80035bc:	fb02 f501 	mul.w	r5, r2, r1
 80035c0:	fb00 f403 	mul.w	r4, r0, r3
 80035c4:	442c      	add	r4, r5
 80035c6:	fba0 2302 	umull	r2, r3, r0, r2
 80035ca:	18e1      	adds	r1, r4, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	f04f 0000 	mov.w	r0, #0
 80035d2:	f04f 0100 	mov.w	r1, #0
 80035d6:	0c10      	lsrs	r0, r2, #16
 80035d8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80035dc:	1419      	asrs	r1, r3, #16
 80035de:	4603      	mov	r3, r0
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	e026      	b.n	8003632 <rot2eulerZYX+0x1a6>
    } else {
        // Gimbal lock fallback
        int32_t yaw_rad = fix_atan2(-R->x.y, R->y.y);  // <-- uses your LUT
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	425a      	negs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7fd ff63 	bl	80014bc <fix_atan2>
 80035f6:	6138      	str	r0, [r7, #16]
        yaw_deg = FIX16_MULT(yaw_rad, rad2deg);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4618      	mov	r0, r3
 80035fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	461a      	mov	r2, r3
 8003604:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003608:	fb02 f501 	mul.w	r5, r2, r1
 800360c:	fb00 f403 	mul.w	r4, r0, r3
 8003610:	442c      	add	r4, r5
 8003612:	fba0 2302 	umull	r2, r3, r0, r2
 8003616:	18e1      	adds	r1, r4, r3
 8003618:	460b      	mov	r3, r1
 800361a:	f04f 0000 	mov.w	r0, #0
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	0c10      	lsrs	r0, r2, #16
 8003624:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003628:	1419      	asrs	r1, r3, #16
 800362a:	4603      	mov	r3, r0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
        roll_deg = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	62bb      	str	r3, [r7, #40]	; 0x28

    // Wrap to [-180°, 180°]
    #define ANGLE_180 (180 << 16)
    #define ANGLE_360 (360 << 16)

    roll_deg %= ANGLE_360;
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <rot2eulerZYX+0x23c>)
 8003636:	fb82 1203 	smull	r1, r2, r2, r3
 800363a:	441a      	add	r2, r3
 800363c:	1611      	asrs	r1, r2, #24
 800363e:	17da      	asrs	r2, r3, #31
 8003640:	1a8a      	subs	r2, r1, r2
 8003642:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 8003646:	fb01 f202 	mul.w	r2, r1, r2
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (roll_deg > ANGLE_180) roll_deg -= ANGLE_360;
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8003654:	dd03      	ble.n	800365e <rot2eulerZYX+0x1d2>
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (roll_deg < -ANGLE_180) roll_deg += ANGLE_360;
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 8003664:	da03      	bge.n	800366e <rot2eulerZYX+0x1e2>
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28

    yaw_deg %= ANGLE_360;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <rot2eulerZYX+0x23c>)
 8003672:	fb82 1203 	smull	r1, r2, r2, r3
 8003676:	441a      	add	r2, r3
 8003678:	1611      	asrs	r1, r2, #24
 800367a:	17da      	asrs	r2, r3, #31
 800367c:	1a8a      	subs	r2, r1, r2
 800367e:	f04f 71b4 	mov.w	r1, #23592960	; 0x1680000
 8003682:	fb01 f202 	mul.w	r2, r1, r2
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
    if (yaw_deg > ANGLE_180) yaw_deg -= ANGLE_360;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	f5b3 0f34 	cmp.w	r3, #11796480	; 0xb40000
 8003690:	dd03      	ble.n	800369a <rot2eulerZYX+0x20e>
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f1a3 73b4 	sub.w	r3, r3, #23592960	; 0x1680000
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
    if (yaw_deg < -ANGLE_180) yaw_deg += ANGLE_360;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f513 0f34 	cmn.w	r3, #11796480	; 0xb40000
 80036a0:	da03      	bge.n	80036aa <rot2eulerZYX+0x21e>
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	f103 73b4 	add.w	r3, r3, #23592960	; 0x1680000
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24

    angles->x = roll_deg;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ae:	601a      	str	r2, [r3, #0]
    angles->y = pitch_deg;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	605a      	str	r2, [r3, #4]
    angles->z = yaw_deg;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bdb0      	pop	{r4, r5, r7, pc}
 80036c4:	0003243f 	.word	0x0003243f
 80036c8:	b60b60b7 	.word	0xb60b60b7

080036cc <dot>:
#include <fixp.h>
#include "luts.h"

//////////////////Vector////////////////////////////////////////////

int32_t dot(Vector3D a, Vector3D b) {
 80036cc:	b082      	sub	sp, #8
 80036ce:	b4f0      	push	{r4, r5, r6, r7}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	1d3c      	adds	r4, r7, #4
 80036d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
    return Mult(a.x, b.x) + Mult(a.y, b.y) + Mult(a.z, b.z);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	461a      	mov	r2, r3
 80036e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80036ec:	fb02 f501 	mul.w	r5, r2, r1
 80036f0:	fb00 f403 	mul.w	r4, r0, r3
 80036f4:	442c      	add	r4, r5
 80036f6:	fba0 2302 	umull	r2, r3, r0, r2
 80036fa:	18e1      	adds	r1, r4, r3
 80036fc:	460b      	mov	r3, r1
 80036fe:	f04f 0000 	mov.w	r0, #0
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	0c10      	lsrs	r0, r2, #16
 8003708:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800370c:	1419      	asrs	r1, r3, #16
 800370e:	4606      	mov	r6, r0
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	461a      	mov	r2, r3
 800371c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003720:	fb02 f501 	mul.w	r5, r2, r1
 8003724:	fb00 f403 	mul.w	r4, r0, r3
 8003728:	442c      	add	r4, r5
 800372a:	fba0 2302 	umull	r2, r3, r0, r2
 800372e:	18e1      	adds	r1, r4, r3
 8003730:	460b      	mov	r3, r1
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	0c10      	lsrs	r0, r2, #16
 800373c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003740:	1419      	asrs	r1, r3, #16
 8003742:	4603      	mov	r3, r0
 8003744:	18f4      	adds	r4, r6, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4618      	mov	r0, r3
 800374a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	461a      	mov	r2, r3
 8003752:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003756:	fb02 f601 	mul.w	r6, r2, r1
 800375a:	fb00 f503 	mul.w	r5, r0, r3
 800375e:	4435      	add	r5, r6
 8003760:	fba0 2302 	umull	r2, r3, r0, r2
 8003764:	18e9      	adds	r1, r5, r3
 8003766:	460b      	mov	r3, r1
 8003768:	f04f 0000 	mov.w	r0, #0
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	0c10      	lsrs	r0, r2, #16
 8003772:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003776:	1419      	asrs	r1, r3, #16
 8003778:	4603      	mov	r3, r0
 800377a:	4423      	add	r3, r4
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bcf0      	pop	{r4, r5, r6, r7}
 8003784:	b002      	add	sp, #8
 8003786:	4770      	bx	lr

08003788 <cross>:

Vector3D cross(Vector3D a, Vector3D b){
 8003788:	b4f0      	push	{r4, r5, r6, r7}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4638      	mov	r0, r7
 8003792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D c;
	c.x = Mult(a.y,b.z) - Mult(a.z,b.y);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4618      	mov	r0, r3
 800379a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	461a      	mov	r2, r3
 80037a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037a6:	fb02 f501 	mul.w	r5, r2, r1
 80037aa:	fb00 f403 	mul.w	r4, r0, r3
 80037ae:	442c      	add	r4, r5
 80037b0:	fba0 2302 	umull	r2, r3, r0, r2
 80037b4:	18e1      	adds	r1, r4, r3
 80037b6:	460b      	mov	r3, r1
 80037b8:	f04f 0000 	mov.w	r0, #0
 80037bc:	f04f 0100 	mov.w	r1, #0
 80037c0:	0c10      	lsrs	r0, r2, #16
 80037c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80037c6:	1419      	asrs	r1, r3, #16
 80037c8:	4606      	mov	r6, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80037d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d4:	461a      	mov	r2, r3
 80037d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80037da:	fb02 f501 	mul.w	r5, r2, r1
 80037de:	fb00 f403 	mul.w	r4, r0, r3
 80037e2:	442c      	add	r4, r5
 80037e4:	fba0 2302 	umull	r2, r3, r0, r2
 80037e8:	18e1      	adds	r1, r4, r3
 80037ea:	460b      	mov	r3, r1
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0c10      	lsrs	r0, r2, #16
 80037f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80037fa:	1419      	asrs	r1, r3, #16
 80037fc:	4603      	mov	r3, r0
 80037fe:	1af3      	subs	r3, r6, r3
 8003800:	617b      	str	r3, [r7, #20]
	c.y = Mult(a.z,b.x) - Mult(a.x,b.z);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4618      	mov	r0, r3
 8003806:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	461a      	mov	r2, r3
 800380e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003812:	fb02 f501 	mul.w	r5, r2, r1
 8003816:	fb00 f403 	mul.w	r4, r0, r3
 800381a:	442c      	add	r4, r5
 800381c:	fba0 2302 	umull	r2, r3, r0, r2
 8003820:	18e1      	adds	r1, r4, r3
 8003822:	460b      	mov	r3, r1
 8003824:	f04f 0000 	mov.w	r0, #0
 8003828:	f04f 0100 	mov.w	r1, #0
 800382c:	0c10      	lsrs	r0, r2, #16
 800382e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003832:	1419      	asrs	r1, r3, #16
 8003834:	4606      	mov	r6, r0
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003840:	461a      	mov	r2, r3
 8003842:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003846:	fb02 f501 	mul.w	r5, r2, r1
 800384a:	fb00 f403 	mul.w	r4, r0, r3
 800384e:	442c      	add	r4, r5
 8003850:	fba0 2302 	umull	r2, r3, r0, r2
 8003854:	18e1      	adds	r1, r4, r3
 8003856:	460b      	mov	r3, r1
 8003858:	f04f 0000 	mov.w	r0, #0
 800385c:	f04f 0100 	mov.w	r1, #0
 8003860:	0c10      	lsrs	r0, r2, #16
 8003862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003866:	1419      	asrs	r1, r3, #16
 8003868:	4603      	mov	r3, r0
 800386a:	1af3      	subs	r3, r6, r3
 800386c:	61bb      	str	r3, [r7, #24]
	c.z = Mult(a.x,b.y) - Mult(a.y,b.x);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003878:	461a      	mov	r2, r3
 800387a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800387e:	fb02 f501 	mul.w	r5, r2, r1
 8003882:	fb00 f403 	mul.w	r4, r0, r3
 8003886:	442c      	add	r4, r5
 8003888:	fba0 2302 	umull	r2, r3, r0, r2
 800388c:	18e1      	adds	r1, r4, r3
 800388e:	460b      	mov	r3, r1
 8003890:	f04f 0000 	mov.w	r0, #0
 8003894:	f04f 0100 	mov.w	r1, #0
 8003898:	0c10      	lsrs	r0, r2, #16
 800389a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800389e:	1419      	asrs	r1, r3, #16
 80038a0:	4606      	mov	r6, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	461a      	mov	r2, r3
 80038ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80038b2:	fb02 f501 	mul.w	r5, r2, r1
 80038b6:	fb00 f403 	mul.w	r4, r0, r3
 80038ba:	442c      	add	r4, r5
 80038bc:	fba0 2302 	umull	r2, r3, r0, r2
 80038c0:	18e1      	adds	r1, r4, r3
 80038c2:	460b      	mov	r3, r1
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	0c10      	lsrs	r0, r2, #16
 80038ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80038d2:	1419      	asrs	r1, r3, #16
 80038d4:	4603      	mov	r3, r0
 80038d6:	1af3      	subs	r3, r6, r3
 80038d8:	61fb      	str	r3, [r7, #28]
	return c;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	461c      	mov	r4, r3
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bcf0      	pop	{r4, r5, r6, r7}
 80038f2:	4770      	bx	lr

080038f4 <create_matrix>:

//////////////////Matrix////////////////////////////////////////////

Matrix3x3 create_matrix(int32_t a, int32_t b, int32_t c,
                        int32_t d, int32_t e, int32_t f,
                        int32_t g, int32_t h, int32_t i) {
 80038f4:	b4b0      	push	{r4, r5, r7}
 80038f6:	b08f      	sub	sp, #60	; 0x3c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
    Matrix3x3 matrix;
    matrix.x.x = a; matrix.x.y = d; matrix.x.z = g;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390c:	61fb      	str	r3, [r7, #28]
    matrix.y.x = b; matrix.y.y = e; matrix.y.z = h;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
    matrix.z.x = c; matrix.z.y = f; matrix.z.z = i;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800391e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
 8003922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
    return matrix;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	461d      	mov	r5, r3
 800392a:	f107 0414 	add.w	r4, r7, #20
 800392e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	602b      	str	r3, [r5, #0]
}
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	373c      	adds	r7, #60	; 0x3c
 800393e:	46bd      	mov	sp, r7
 8003940:	bcb0      	pop	{r4, r5, r7}
 8003942:	4770      	bx	lr

08003944 <create_matrix_from_vectors>:

Matrix3x3 create_matrix_from_vectors(Vector3D a, Vector3D b, Vector3D c) {
 8003944:	b4b0      	push	{r4, r5, r7}
 8003946:	b08f      	sub	sp, #60	; 0x3c
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	4638      	mov	r0, r7
 800394e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Matrix3x3 matrix;
    matrix.x = a;
 8003952:	f107 0314 	add.w	r3, r7, #20
 8003956:	463a      	mov	r2, r7
 8003958:	ca07      	ldmia	r2, {r0, r1, r2}
 800395a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.y = b;
 800395e:	f107 0320 	add.w	r3, r7, #32
 8003962:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003966:	ca07      	ldmia	r2, {r0, r1, r2}
 8003968:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    matrix.z = c;
 800396c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003970:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003974:	ca07      	ldmia	r2, {r0, r1, r2}
 8003976:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return matrix;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	461d      	mov	r5, r3
 800397e:	f107 0414 	add.w	r4, r7, #20
 8003982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	602b      	str	r3, [r5, #0]
}
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	373c      	adds	r7, #60	; 0x3c
 8003992:	46bd      	mov	sp, r7
 8003994:	bcb0      	pop	{r4, r5, r7}
 8003996:	4770      	bx	lr

08003998 <transpose>:

Matrix3x3 transpose(Matrix3x3 a){
 8003998:	b084      	sub	sp, #16
 800399a:	b4b0      	push	{r4, r5, r7}
 800399c:	b095      	sub	sp, #84	; 0x54
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80039a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;

	a_vect1.x = a.x.x;
 80039aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ac:	647b      	str	r3, [r7, #68]	; 0x44
	a_vect1.y = a.y.x;
 80039ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039b0:	64bb      	str	r3, [r7, #72]	; 0x48
	a_vect1.z = a.z.x;
 80039b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b4:	64fb      	str	r3, [r7, #76]	; 0x4c

	a_vect2.x = a.x.y;
 80039b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
	a_vect2.y = a.y.y;
 80039ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	a_vect2.z = a.z.y;
 80039be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c2:	643b      	str	r3, [r7, #64]	; 0x40

	a_vect3.x = a.x.z;
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	a_vect3.y = a.y.z;
 80039c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ca:	633b      	str	r3, [r7, #48]	; 0x30
	a_vect3.z = a.z.z;
 80039cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34

	Matrix3x3 b; // b er brugt til at gemme data
	b.x = a_vect1;
 80039d2:	f107 0308 	add.w	r3, r7, #8
 80039d6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80039da:	ca07      	ldmia	r2, {r0, r1, r2}
 80039dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.y = a_vect2;
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80039e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b.z = a_vect3;
 80039ee:	f107 0320 	add.w	r3, r7, #32
 80039f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80039f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	return b;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	461d      	mov	r5, r3
 8003a00:	f107 0408 	add.w	r4, r7, #8
 8003a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a0c:	6823      	ldr	r3, [r4, #0]
 8003a0e:	602b      	str	r3, [r5, #0]
}
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	3754      	adds	r7, #84	; 0x54
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bcb0      	pop	{r4, r5, r7}
 8003a18:	b004      	add	sp, #16
 8003a1a:	4770      	bx	lr

08003a1c <MMult>:

Matrix3x3 MMult(Matrix3x3 a, Matrix3x3 b){ //Matrix mult
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a20:	b0a5      	sub	sp, #148	; 0x94
 8003a22:	af06      	add	r7, sp, #24
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8003a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Vector3D b_vect1;
	Vector3D b_vect2;
	Vector3D b_vect3;
	b_vect1 = b.x;
 8003a2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a32:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8003a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect2 = b.y;
 8003a3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a40:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003a44:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	b_vect3 = b.z;
 8003a4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a4e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8003a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	////a////
	a = transpose(a);
 8003a58:	f107 0694 	add.w	r6, r7, #148	; 0x94
 8003a5c:	466d      	mov	r5, sp
 8003a5e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8003a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a74:	4630      	mov	r0, r6
 8003a76:	f7ff ff8f 	bl	8003998 <transpose>
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;
	a_vect1 = a.x;
 8003a7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a7e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8003a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect2 = a.y;
 8003a88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a8c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8003a90:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect3 = a.z;
 8003a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a9a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//////calc
	Matrix3x3 svar;
	svar.x.x = dot(a_vect1, b_vect1);
 8003aa4:	466a      	mov	r2, sp
 8003aa6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003aaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aae:	e882 0003 	stmia.w	r2, {r0, r1}
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ab8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aba:	f7ff fe07 	bl	80036cc <dot>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	60fb      	str	r3, [r7, #12]
	svar.y.x = dot(a_vect1, b_vect2);
 8003ac2:	466a      	mov	r2, sp
 8003ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ac8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003acc:	e882 0003 	stmia.w	r2, {r0, r1}
 8003ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ad2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ad8:	f7ff fdf8 	bl	80036cc <dot>
 8003adc:	4603      	mov	r3, r0
 8003ade:	61bb      	str	r3, [r7, #24]
	svar.z.x = dot(a_vect1, b_vect3);
 8003ae0:	466a      	mov	r2, sp
 8003ae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ae6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aea:	e882 0003 	stmia.w	r2, {r0, r1}
 8003aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003af6:	f7ff fde9 	bl	80036cc <dot>
 8003afa:	4603      	mov	r3, r0
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24

	svar.x.y = dot(a_vect2, b_vect1);
 8003afe:	466a      	mov	r2, sp
 8003b00:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b08:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b14:	f7ff fdda 	bl	80036cc <dot>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]
	svar.y.y = dot(a_vect2, b_vect2);
 8003b1c:	466a      	mov	r2, sp
 8003b1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b26:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b32:	f7ff fdcb 	bl	80036cc <dot>
 8003b36:	4603      	mov	r3, r0
 8003b38:	61fb      	str	r3, [r7, #28]
	svar.z.y = dot(a_vect2, b_vect3);
 8003b3a:	466a      	mov	r2, sp
 8003b3c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b44:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b50:	f7ff fdbc 	bl	80036cc <dot>
 8003b54:	4603      	mov	r3, r0
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28

	svar.x.z = dot(a_vect3, b_vect1);
 8003b58:	466a      	mov	r2, sp
 8003b5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b62:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b6e:	f7ff fdad 	bl	80036cc <dot>
 8003b72:	4603      	mov	r3, r0
 8003b74:	617b      	str	r3, [r7, #20]
	svar.y.z = dot(a_vect3, b_vect2);
 8003b76:	466a      	mov	r2, sp
 8003b78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b80:	e882 0003 	stmia.w	r2, {r0, r1}
 8003b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b8c:	f7ff fd9e 	bl	80036cc <dot>
 8003b90:	4603      	mov	r3, r0
 8003b92:	623b      	str	r3, [r7, #32]
	svar.z.z = dot(a_vect3, b_vect3);
 8003b94:	466a      	mov	r2, sp
 8003b96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b9e:	e882 0003 	stmia.w	r2, {r0, r1}
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ba8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003baa:	f7ff fd8f 	bl	80036cc <dot>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c

	return svar;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	461d      	mov	r5, r3
 8003bb6:	f107 040c 	add.w	r4, r7, #12
 8003bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	602b      	str	r3, [r5, #0]
}
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	377c      	adds	r7, #124	; 0x7c
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003bd0:	b004      	add	sp, #16
 8003bd2:	4770      	bx	lr

08003bd4 <MVMult>:

Vector3D MVMult(Matrix3x3 a, Vector3D b){
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd8:	b095      	sub	sp, #84	; 0x54
 8003bda:	af06      	add	r7, sp, #24
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	a = transpose(a);
 8003be6:	f107 0654 	add.w	r6, r7, #84	; 0x54
 8003bea:	466d      	mov	r5, sp
 8003bec:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bfc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c02:	4630      	mov	r0, r6
 8003c04:	f7ff fec8 	bl	8003998 <transpose>
	Vector3D a_vect1;
	Vector3D a_vect2;
	Vector3D a_vect3;
	a_vect1 = a.x;
 8003c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c0c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003c10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect2 = a.y;
 8003c16:	f107 0320 	add.w	r3, r7, #32
 8003c1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	a_vect3 = a.z;
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003c2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	Vector3D c;
	c.x = dot(a_vect1, b);
 8003c32:	466a      	mov	r2, sp
 8003c34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c3c:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c42:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c48:	f7ff fd40 	bl	80036cc <dot>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60bb      	str	r3, [r7, #8]
	c.y = dot(a_vect2, b);
 8003c50:	466a      	mov	r2, sp
 8003c52:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c5a:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c60:	f107 0220 	add.w	r2, r7, #32
 8003c64:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c66:	f7ff fd31 	bl	80036cc <dot>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	60fb      	str	r3, [r7, #12]
	c.z = dot(a_vect3, b);
 8003c6e:	466a      	mov	r2, sp
 8003c70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c78:	e882 0003 	stmia.w	r2, {r0, r1}
 8003c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c7e:	f107 0214 	add.w	r2, r7, #20
 8003c82:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c84:	f7ff fd22 	bl	80036cc <dot>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	613b      	str	r3, [r7, #16]
	return c;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	461c      	mov	r4, r3
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	373c      	adds	r7, #60	; 0x3c
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003ca6:	b004      	add	sp, #16
 8003ca8:	4770      	bx	lr

08003caa <SquareRaw>:
    printf("(%ld, %ld, %ld)\n", a.x.y, a.y.y, a.z.y);
    printf("(%ld, %ld, %ld)\n", a.x.z, a.y.z, a.z.z);
}

// raw square in Q32.32
static inline int64_t SquareRaw(int32_t A) {
 8003caa:	b4b0      	push	{r4, r5, r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
    return (int64_t)A * (int64_t)A;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003cc2:	fb02 f501 	mul.w	r5, r2, r1
 8003cc6:	fb00 f403 	mul.w	r4, r0, r3
 8003cca:	442c      	add	r4, r5
 8003ccc:	fba0 2302 	umull	r2, r3, r0, r2
 8003cd0:	18e1      	adds	r1, r4, r3
 8003cd2:	460b      	mov	r3, r1
}
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bcb0      	pop	{r4, r5, r7}
 8003cde:	4770      	bx	lr

08003ce0 <isqrt_u64>:

// integer sqrt of a 64bit value
static inline uint32_t isqrt_u64(uint64_t x) {
 8003ce0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ce4:	b08a      	sub	sp, #40	; 0x28
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    uint64_t op = x;
 8003cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    uint64_t res = 0;
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // highest power-of-4 <= 2^62
    uint64_t one = (uint64_t)1 << 62;
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (one > op) one >>= 2;
 8003d0c:	e00b      	b.n	8003d26 <isqrt_u64+0x46>
 8003d0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	0882      	lsrs	r2, r0, #2
 8003d1c:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8003d20:	088b      	lsrs	r3, r1, #2
 8003d22:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003d26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	bf08      	it	eq
 8003d32:	4290      	cmpeq	r0, r2
 8003d34:	d3eb      	bcc.n	8003d0e <isqrt_u64+0x2e>
    while (one) {
 8003d36:	e04a      	b.n	8003dce <isqrt_u64+0xee>
        if (op >= res + one) {
 8003d38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d40:	eb10 0802 	adds.w	r8, r0, r2
 8003d44:	eb41 0903 	adc.w	r9, r1, r3
 8003d48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d4c:	454b      	cmp	r3, r9
 8003d4e:	bf08      	it	eq
 8003d50:	4542      	cmpeq	r2, r8
 8003d52:	d324      	bcc.n	8003d9e <isqrt_u64+0xbe>
            op  -= res + one;
 8003d54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d5c:	1884      	adds	r4, r0, r2
 8003d5e:	eb41 0503 	adc.w	r5, r1, r3
 8003d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d66:	ebb2 0a04 	subs.w	sl, r2, r4
 8003d6a:	eb63 0b05 	sbc.w	fp, r3, r5
 8003d6e:	e9c7 ab08 	strd	sl, fp, [r7, #32]
            res  = (res >> 1) + one;
 8003d72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	0842      	lsrs	r2, r0, #1
 8003d80:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003d84:	084b      	lsrs	r3, r1, #1
 8003d86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003d8a:	1886      	adds	r6, r0, r2
 8003d8c:	603e      	str	r6, [r7, #0]
 8003d8e:	eb41 0303 	adc.w	r3, r1, r3
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d98:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003d9c:	e00b      	b.n	8003db6 <isqrt_u64+0xd6>
        } else {
            res >>= 1;
 8003d9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	0842      	lsrs	r2, r0, #1
 8003dac:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8003db0:	084b      	lsrs	r3, r1, #1
 8003db2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        }
        one >>= 2;
 8003db6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	0882      	lsrs	r2, r0, #2
 8003dc4:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8003dc8:	088b      	lsrs	r3, r1, #2
 8003dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while (one) {
 8003dce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	d1b0      	bne.n	8003d38 <isqrt_u64+0x58>
    }
    return (uint32_t)res;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003de2:	4770      	bx	lr

08003de4 <norm_q16>:

// Q16.16 vector norm
int32_t norm_q16(Vector3D a) {
 8003de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint64_t sum = 0;
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    sum += (uint64_t)SquareRaw(a.x);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff52 	bl	8003caa <SquareRaw>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e12:	eb12 0a00 	adds.w	sl, r2, r0
 8003e16:	eb43 0b01 	adc.w	fp, r3, r1
 8003e1a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    sum += (uint64_t)SquareRaw(a.y);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff42 	bl	8003caa <SquareRaw>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e32:	eb12 0800 	adds.w	r8, r2, r0
 8003e36:	eb43 0901 	adc.w	r9, r3, r1
 8003e3a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    sum += (uint64_t)SquareRaw(a.z);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff32 	bl	8003caa <SquareRaw>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e52:	1814      	adds	r4, r2, r0
 8003e54:	eb43 0501 	adc.w	r5, r3, r1
 8003e58:	e9c7 4504 	strd	r4, r5, [r7, #16]
    // sum // Q32.32
    // sqrt(sum) gives Q16.16 directly
    return (int32_t)isqrt_u64(sum);
 8003e5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e60:	f7ff ff3e 	bl	8003ce0 <isqrt_u64>
 8003e64:	4603      	mov	r3, r0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e70:	480d      	ldr	r0, [pc, #52]	; (8003ea8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e74:	f7ff f866 	bl	8002f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e78:	480c      	ldr	r0, [pc, #48]	; (8003eac <LoopForever+0x6>)
  ldr r1, =_edata
 8003e7a:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <LoopForever+0xe>)
  movs r3, #0
 8003e7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e80:	e002      	b.n	8003e88 <LoopCopyDataInit>

08003e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e86:	3304      	adds	r3, #4

08003e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e8c:	d3f9      	bcc.n	8003e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e90:	4c0a      	ldr	r4, [pc, #40]	; (8003ebc <LoopForever+0x16>)
  movs r3, #0
 8003e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e94:	e001      	b.n	8003e9a <LoopFillZerobss>

08003e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e98:	3204      	adds	r2, #4

08003e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e9c:	d3fb      	bcc.n	8003e96 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003e9e:	f003 fcfb 	bl	8007898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ea2:	f7fe fad3 	bl	800244c <main>

08003ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ea6:	e7fe      	b.n	8003ea6 <LoopForever>
  ldr   r0, =_estack
 8003ea8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003eb0:	20000a48 	.word	0x20000a48
  ldr r2, =_sidata
 8003eb4:	0800b720 	.word	0x0800b720
  ldr r2, =_sbss
 8003eb8:	20000a48 	.word	0x20000a48
  ldr r4, =_ebss
 8003ebc:	20000c80 	.word	0x20000c80

08003ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ec0:	e7fe      	b.n	8003ec0 <ADC1_2_IRQHandler>

08003ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ecc:	2003      	movs	r0, #3
 8003ece:	f000 f95b 	bl	8004188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ed2:	200f      	movs	r0, #15
 8003ed4:	f000 f80e 	bl	8003ef4 <HAL_InitTick>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	71fb      	strb	r3, [r7, #7]
 8003ee2:	e001      	b.n	8003ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ee4:	f7fe fe36 	bl	8002b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ee8:	79fb      	ldrb	r3, [r7, #7]

}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_InitTick+0x68>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d022      	beq.n	8003f4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f08:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_InitTick+0x6c>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <HAL_InitTick+0x68>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f966 	bl	80041ee <HAL_SYSTICK_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	d809      	bhi.n	8003f42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295
 8003f36:	f000 f932 	bl	800419e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <HAL_InitTick+0x70>)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	e007      	b.n	8003f52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	e004      	b.n	8003f52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e001      	b.n	8003f52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	200009e0 	.word	0x200009e0
 8003f60:	200009d8 	.word	0x200009d8
 8003f64:	200009dc 	.word	0x200009dc

08003f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_IncTick+0x1c>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_IncTick+0x20>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <HAL_IncTick+0x1c>)
 8003f78:	6013      	str	r3, [r2, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	20000c6c 	.word	0x20000c6c
 8003f88:	200009e0 	.word	0x200009e0

08003f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_GetTick+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000c6c 	.word	0x20000c6c

08003fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7ff ffee 	bl	8003f8c <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d004      	beq.n	8003fc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_Delay+0x40>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fc8:	bf00      	nop
 8003fca:	f7ff ffdf 	bl	8003f8c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d8f7      	bhi.n	8003fca <HAL_Delay+0x26>
  {
  }
}
 8003fda:	bf00      	nop
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	200009e0 	.word	0x200009e0

08003fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004004:	4013      	ands	r3, r2
 8004006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <__NVIC_SetPriorityGrouping+0x44>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	60d3      	str	r3, [r2, #12]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <__NVIC_GetPriorityGrouping+0x18>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 0307 	and.w	r3, r3, #7
}
 800403e:	4618      	mov	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	db0b      	blt.n	8004076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	4907      	ldr	r1, [pc, #28]	; (8004084 <__NVIC_EnableIRQ+0x38>)
 8004066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2001      	movs	r0, #1
 800406e:	fa00 f202 	lsl.w	r2, r0, r2
 8004072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	e000e100 	.word	0xe000e100

08004088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	6039      	str	r1, [r7, #0]
 8004092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db0a      	blt.n	80040b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	490c      	ldr	r1, [pc, #48]	; (80040d4 <__NVIC_SetPriority+0x4c>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	0112      	lsls	r2, r2, #4
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	440b      	add	r3, r1
 80040ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040b0:	e00a      	b.n	80040c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4908      	ldr	r1, [pc, #32]	; (80040d8 <__NVIC_SetPriority+0x50>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	3b04      	subs	r3, #4
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	440b      	add	r3, r1
 80040c6:	761a      	strb	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000e100 	.word	0xe000e100
 80040d8:	e000ed00 	.word	0xe000ed00

080040dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b089      	sub	sp, #36	; 0x24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f1c3 0307 	rsb	r3, r3, #7
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	bf28      	it	cs
 80040fa:	2304      	movcs	r3, #4
 80040fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3304      	adds	r3, #4
 8004102:	2b06      	cmp	r3, #6
 8004104:	d902      	bls.n	800410c <NVIC_EncodePriority+0x30>
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3b03      	subs	r3, #3
 800410a:	e000      	b.n	800410e <NVIC_EncodePriority+0x32>
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004110:	f04f 32ff 	mov.w	r2, #4294967295
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	401a      	ands	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43d9      	mvns	r1, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004134:	4313      	orrs	r3, r2
         );
}
 8004136:	4618      	mov	r0, r3
 8004138:	3724      	adds	r7, #36	; 0x24
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3b01      	subs	r3, #1
 8004150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004154:	d301      	bcc.n	800415a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004156:	2301      	movs	r3, #1
 8004158:	e00f      	b.n	800417a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <SysTick_Config+0x40>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004162:	210f      	movs	r1, #15
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	f7ff ff8e 	bl	8004088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <SysTick_Config+0x40>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004172:	4b04      	ldr	r3, [pc, #16]	; (8004184 <SysTick_Config+0x40>)
 8004174:	2207      	movs	r2, #7
 8004176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	e000e010 	.word	0xe000e010

08004188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff29 	bl	8003fe8 <__NVIC_SetPriorityGrouping>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4603      	mov	r3, r0
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041ac:	f7ff ff40 	bl	8004030 <__NVIC_GetPriorityGrouping>
 80041b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff ff90 	bl	80040dc <NVIC_EncodePriority>
 80041bc:	4602      	mov	r2, r0
 80041be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ff5f 	bl	8004088 <__NVIC_SetPriority>
}
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	4603      	mov	r3, r0
 80041da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff33 	bl	800404c <__NVIC_EnableIRQ>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ffa4 	bl	8004144 <SysTick_Config>
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d005      	beq.n	800422a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2204      	movs	r2, #4
 8004222:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e037      	b.n	800429a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 020e 	bic.w	r2, r2, #14
 8004238:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f003 021f 	and.w	r2, r3, #31
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f202 	lsl.w	r2, r1, r2
 800426c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004276:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800428e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004298:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d00d      	beq.n	80042ec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2204      	movs	r2, #4
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	73fb      	strb	r3, [r7, #15]
 80042ea:	e047      	b.n	800437c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020e 	bic.w	r2, r2, #14
 80042fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004316:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800431a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	f003 021f 	and.w	r2, r3, #31
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f202 	lsl.w	r2, r1, r2
 800432e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004338:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004350:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800435a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
    }
  }
  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004396:	e15a      	b.n	800464e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	2101      	movs	r1, #1
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 814c 	beq.w	8004648 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d005      	beq.n	80043c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d130      	bne.n	800442a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4013      	ands	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043fe:	2201      	movs	r2, #1
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43db      	mvns	r3, r3
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4013      	ands	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0201 	and.w	r2, r3, #1
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b03      	cmp	r3, #3
 8004434:	d017      	beq.n	8004466 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	2203      	movs	r2, #3
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43db      	mvns	r3, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4013      	ands	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d123      	bne.n	80044ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	08da      	lsrs	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3208      	adds	r2, #8
 800447a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	220f      	movs	r2, #15
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	08da      	lsrs	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3208      	adds	r2, #8
 80044b4:	6939      	ldr	r1, [r7, #16]
 80044b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	2203      	movs	r2, #3
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4013      	ands	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0203 	and.w	r2, r3, #3
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80a6 	beq.w	8004648 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fc:	4b5b      	ldr	r3, [pc, #364]	; (800466c <HAL_GPIO_Init+0x2e4>)
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	4a5a      	ldr	r2, [pc, #360]	; (800466c <HAL_GPIO_Init+0x2e4>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6613      	str	r3, [r2, #96]	; 0x60
 8004508:	4b58      	ldr	r3, [pc, #352]	; (800466c <HAL_GPIO_Init+0x2e4>)
 800450a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004514:	4a56      	ldr	r2, [pc, #344]	; (8004670 <HAL_GPIO_Init+0x2e8>)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	3302      	adds	r3, #2
 800451c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004520:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	220f      	movs	r2, #15
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800453e:	d01f      	beq.n	8004580 <HAL_GPIO_Init+0x1f8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <HAL_GPIO_Init+0x2ec>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d019      	beq.n	800457c <HAL_GPIO_Init+0x1f4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a4b      	ldr	r2, [pc, #300]	; (8004678 <HAL_GPIO_Init+0x2f0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_GPIO_Init+0x1f0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a4a      	ldr	r2, [pc, #296]	; (800467c <HAL_GPIO_Init+0x2f4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00d      	beq.n	8004574 <HAL_GPIO_Init+0x1ec>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a49      	ldr	r2, [pc, #292]	; (8004680 <HAL_GPIO_Init+0x2f8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <HAL_GPIO_Init+0x1e8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a48      	ldr	r2, [pc, #288]	; (8004684 <HAL_GPIO_Init+0x2fc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_GPIO_Init+0x1e4>
 8004568:	2305      	movs	r3, #5
 800456a:	e00a      	b.n	8004582 <HAL_GPIO_Init+0x1fa>
 800456c:	2306      	movs	r3, #6
 800456e:	e008      	b.n	8004582 <HAL_GPIO_Init+0x1fa>
 8004570:	2304      	movs	r3, #4
 8004572:	e006      	b.n	8004582 <HAL_GPIO_Init+0x1fa>
 8004574:	2303      	movs	r3, #3
 8004576:	e004      	b.n	8004582 <HAL_GPIO_Init+0x1fa>
 8004578:	2302      	movs	r3, #2
 800457a:	e002      	b.n	8004582 <HAL_GPIO_Init+0x1fa>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_GPIO_Init+0x1fa>
 8004580:	2300      	movs	r3, #0
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	f002 0203 	and.w	r2, r2, #3
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	4093      	lsls	r3, r2
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004592:	4937      	ldr	r1, [pc, #220]	; (8004670 <HAL_GPIO_Init+0x2e8>)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	3302      	adds	r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045a0:	4b39      	ldr	r3, [pc, #228]	; (8004688 <HAL_GPIO_Init+0x300>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045c4:	4a30      	ldr	r2, [pc, #192]	; (8004688 <HAL_GPIO_Init+0x300>)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ca:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <HAL_GPIO_Init+0x300>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4013      	ands	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ee:	4a26      	ldr	r2, [pc, #152]	; (8004688 <HAL_GPIO_Init+0x300>)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_GPIO_Init+0x300>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_GPIO_Init+0x300>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800461e:	4b1a      	ldr	r3, [pc, #104]	; (8004688 <HAL_GPIO_Init+0x300>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <HAL_GPIO_Init+0x300>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3301      	adds	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	fa22 f303 	lsr.w	r3, r2, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	f47f ae9d 	bne.w	8004398 <HAL_GPIO_Init+0x10>
  }
}
 800465e:	bf00      	nop
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40021000 	.word	0x40021000
 8004670:	40010000 	.word	0x40010000
 8004674:	48000400 	.word	0x48000400
 8004678:	48000800 	.word	0x48000800
 800467c:	48000c00 	.word	0x48000c00
 8004680:	48001000 	.word	0x48001000
 8004684:	48001400 	.word	0x48001400
 8004688:	40010400 	.word	0x40010400

0800468c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
 8004698:	4613      	mov	r3, r2
 800469a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a8:	e002      	b.n	80046b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046aa:	887a      	ldrh	r2, [r7, #2]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e08d      	b.n	80047ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d106      	bne.n	80046e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7fe fa5a 	bl	8002b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2224      	movs	r2, #36	; 0x24
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800470c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800471c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d107      	bne.n	8004736 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004732:	609a      	str	r2, [r3, #8]
 8004734:	e006      	b.n	8004744 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004742:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d108      	bne.n	800475e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	e007      	b.n	800476e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800477c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004780:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004790:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69d9      	ldr	r1, [r3, #28]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	460b      	mov	r3, r1
 8004802:	817b      	strh	r3, [r7, #10]
 8004804:	4613      	mov	r3, r2
 8004806:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b20      	cmp	r3, #32
 8004812:	f040 80fd 	bne.w	8004a10 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_I2C_Master_Transmit+0x30>
 8004820:	2302      	movs	r3, #2
 8004822:	e0f6      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x21e>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800482c:	f7ff fbae 	bl	8003f8c <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2319      	movs	r3, #25
 8004838:	2201      	movs	r2, #1
 800483a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 faf6 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e0e1      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2221      	movs	r2, #33	; 0x21
 8004852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2210      	movs	r2, #16
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	893a      	ldrh	r2, [r7, #8]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	2bff      	cmp	r3, #255	; 0xff
 800487e:	d906      	bls.n	800488e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	22ff      	movs	r2, #255	; 0xff
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	e007      	b.n	800489e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004898:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800489c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d024      	beq.n	80048f0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	781a      	ldrb	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	8979      	ldrh	r1, [r7, #10]
 80048e2:	4b4e      	ldr	r3, [pc, #312]	; (8004a1c <HAL_I2C_Master_Transmit+0x228>)
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fcf1 	bl	80052d0 <I2C_TransferConfig>
 80048ee:	e066      	b.n	80049be <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	8979      	ldrh	r1, [r7, #10]
 80048f8:	4b48      	ldr	r3, [pc, #288]	; (8004a1c <HAL_I2C_Master_Transmit+0x228>)
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fce6 	bl	80052d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004904:	e05b      	b.n	80049be <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	6a39      	ldr	r1, [r7, #32]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fae9 	bl	8004ee2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e07b      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	781a      	ldrb	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d034      	beq.n	80049be <HAL_I2C_Master_Transmit+0x1ca>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d130      	bne.n	80049be <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2200      	movs	r2, #0
 8004964:	2180      	movs	r1, #128	; 0x80
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fa62 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e04d      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2bff      	cmp	r3, #255	; 0xff
 800497e:	d90e      	bls.n	800499e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	22ff      	movs	r2, #255	; 0xff
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498a:	b2da      	uxtb	r2, r3
 800498c:	8979      	ldrh	r1, [r7, #10]
 800498e:	2300      	movs	r3, #0
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fc9a 	bl	80052d0 <I2C_TransferConfig>
 800499c:	e00f      	b.n	80049be <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	8979      	ldrh	r1, [r7, #10]
 80049b0:	2300      	movs	r3, #0
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fc89 	bl	80052d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d19e      	bne.n	8004906 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	6a39      	ldr	r1, [r7, #32]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 facf 	bl	8004f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e01a      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2220      	movs	r2, #32
 80049e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_I2C_Master_Transmit+0x22c>)
 80049f0:	400b      	ands	r3, r1
 80049f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	80002000 	.word	0x80002000
 8004a20:	fe00e800 	.word	0xfe00e800

08004a24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	460b      	mov	r3, r1
 8004a32:	817b      	strh	r3, [r7, #10]
 8004a34:	4613      	mov	r3, r2
 8004a36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	f040 80db 	bne.w	8004bfc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_I2C_Master_Receive+0x30>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e0d4      	b.n	8004bfe <HAL_I2C_Master_Receive+0x1da>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a5c:	f7ff fa96 	bl	8003f8c <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2319      	movs	r3, #25
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f9de 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e0bf      	b.n	8004bfe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2222      	movs	r2, #34	; 0x22
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	893a      	ldrh	r2, [r7, #8]
 8004a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2bff      	cmp	r3, #255	; 0xff
 8004aae:	d90e      	bls.n	8004ace <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	22ff      	movs	r2, #255	; 0xff
 8004ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	8979      	ldrh	r1, [r7, #10]
 8004abe:	4b52      	ldr	r3, [pc, #328]	; (8004c08 <HAL_I2C_Master_Receive+0x1e4>)
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fc02 	bl	80052d0 <I2C_TransferConfig>
 8004acc:	e06d      	b.n	8004baa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	8979      	ldrh	r1, [r7, #10]
 8004ae0:	4b49      	ldr	r3, [pc, #292]	; (8004c08 <HAL_I2C_Master_Receive+0x1e4>)
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fbf1 	bl	80052d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004aee:	e05c      	b.n	8004baa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	6a39      	ldr	r1, [r7, #32]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fa7f 	bl	8004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e07c      	b.n	8004bfe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d034      	beq.n	8004baa <HAL_I2C_Master_Receive+0x186>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d130      	bne.n	8004baa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f96c 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e04d      	b.n	8004bfe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2bff      	cmp	r3, #255	; 0xff
 8004b6a:	d90e      	bls.n	8004b8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	22ff      	movs	r2, #255	; 0xff
 8004b70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	8979      	ldrh	r1, [r7, #10]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fba4 	bl	80052d0 <I2C_TransferConfig>
 8004b88:	e00f      	b.n	8004baa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	8979      	ldrh	r1, [r7, #10]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fb93 	bl	80052d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d19d      	bne.n	8004af0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	6a39      	ldr	r1, [r7, #32]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f9d9 	bl	8004f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e01a      	b.n	8004bfe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_I2C_Master_Receive+0x1e8>)
 8004bdc:	400b      	ands	r3, r1
 8004bde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	80002400 	.word	0x80002400
 8004c0c:	fe00e800 	.word	0xfe00e800

08004c10 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	f040 80d6 	bne.w	8004dde <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c40:	d101      	bne.n	8004c46 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
 8004c44:	e0cc      	b.n	8004de0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_I2C_IsDeviceReady+0x44>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0c5      	b.n	8004de0 <HAL_I2C_IsDeviceReady+0x1d0>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_I2C_IsDeviceReady+0x72>
 8004c72:	897b      	ldrh	r3, [r7, #10]
 8004c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c80:	e006      	b.n	8004c90 <HAL_I2C_IsDeviceReady+0x80>
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c96:	f7ff f979 	bl	8003f8c <HAL_GetTick>
 8004c9a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	bf0c      	ite	eq
 8004cc0:	2301      	moveq	r3, #1
 8004cc2:	2300      	movne	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004cc8:	e034      	b.n	8004d34 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd0:	d01a      	beq.n	8004d08 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004cd2:	f7ff f95b 	bl	8003f8c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d302      	bcc.n	8004ce8 <HAL_I2C_IsDeviceReady+0xd8>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10f      	bne.n	8004d08 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e06b      	b.n	8004de0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <HAL_I2C_IsDeviceReady+0x130>
 8004d3a:	7fbb      	ldrb	r3, [r7, #30]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0c4      	beq.n	8004cca <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d01a      	beq.n	8004d84 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2120      	movs	r1, #32
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f869 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e03b      	b.n	8004de0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e02d      	b.n	8004de0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2120      	movs	r1, #32
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f84e 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e020      	b.n	8004de0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2210      	movs	r2, #16
 8004da4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2220      	movs	r2, #32
 8004dac:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3301      	adds	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	f63f af56 	bhi.w	8004c6a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d103      	bne.n	8004e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d007      	beq.n	8004e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	619a      	str	r2, [r3, #24]
  }
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e40:	e03b      	b.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f962 	bl	8005110 <I2C_IsErrorOccurred>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e041      	b.n	8004eda <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d02d      	beq.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7ff f895 	bl	8003f8c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d122      	bne.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	bf0c      	ite	eq
 8004e84:	2301      	moveq	r3, #1
 8004e86:	2300      	movne	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d113      	bne.n	8004eba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f043 0220 	orr.w	r2, r3, #32
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e00f      	b.n	8004eda <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	bf0c      	ite	eq
 8004eca:	2301      	moveq	r3, #1
 8004ecc:	2300      	movne	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d0b4      	beq.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eee:	e033      	b.n	8004f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f90b 	bl	8005110 <I2C_IsErrorOccurred>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e031      	b.n	8004f68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d025      	beq.n	8004f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0c:	f7ff f83e 	bl	8003f8c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11a      	bne.n	8004f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d013      	beq.n	8004f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e007      	b.n	8004f68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d1c4      	bne.n	8004ef0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f7c:	e02f      	b.n	8004fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f8c4 	bl	8005110 <I2C_IsErrorOccurred>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e02d      	b.n	8004fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f92:	f7fe fffb 	bl	8003f8c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11a      	bne.n	8004fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d013      	beq.n	8004fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e007      	b.n	8004fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 0320 	and.w	r3, r3, #32
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d1c8      	bne.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005008:	e071      	b.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f87e 	bl	8005110 <I2C_IsErrorOccurred>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b20      	cmp	r3, #32
 800502a:	d13b      	bne.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d138      	bne.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d105      	bne.n	800504c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b10      	cmp	r3, #16
 8005058:	d121      	bne.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2210      	movs	r2, #16
 8005060:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2204      	movs	r2, #4
 8005066:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2220      	movs	r2, #32
 800506e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b24      	ldr	r3, [pc, #144]	; (800510c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800507c:	400b      	ands	r3, r1
 800507e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	75fb      	strb	r3, [r7, #23]
 800509c:	e002      	b.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80050a4:	f7fe ff72 	bl	8003f8c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d119      	bne.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d116      	bne.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d00f      	beq.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f043 0220 	orr.w	r2, r3, #32
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d002      	beq.n	8005102 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80050fc:	7dfb      	ldrb	r3, [r7, #23]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d083      	beq.n	800500a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005102:	7dfb      	ldrb	r3, [r7, #23]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	fe00e800 	.word	0xfe00e800

08005110 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d068      	beq.n	800520e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2210      	movs	r2, #16
 8005142:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005144:	e049      	b.n	80051da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d045      	beq.n	80051da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fe ff1d 	bl	8003f8c <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <I2C_IsErrorOccurred+0x54>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d13a      	bne.n	80051da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800516e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005176:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005186:	d121      	bne.n	80051cc <I2C_IsErrorOccurred+0xbc>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518e:	d01d      	beq.n	80051cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b20      	cmp	r3, #32
 8005194:	d01a      	beq.n	80051cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051a6:	f7fe fef1 	bl	8003f8c <HAL_GetTick>
 80051aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ac:	e00e      	b.n	80051cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051ae:	f7fe feed 	bl	8003f8c <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b19      	cmp	r3, #25
 80051ba:	d907      	bls.n	80051cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	f043 0320 	orr.w	r3, r3, #32
 80051c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80051ca:	e006      	b.n	80051da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d1e9      	bne.n	80051ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d003      	beq.n	80051f0 <I2C_IsErrorOccurred+0xe0>
 80051e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0aa      	beq.n	8005146 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2220      	movs	r2, #32
 80051fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	f043 0304 	orr.w	r3, r3, #4
 8005206:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	f043 0308 	orr.w	r3, r3, #8
 8005248:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005252:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00b      	beq.n	800527c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005274:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800527c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01c      	beq.n	80052be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff fdaf 	bl	8004de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <I2C_IsErrorOccurred+0x1bc>)
 8005296:	400b      	ands	r3, r1
 8005298:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3728      	adds	r7, #40	; 0x28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	fe00e800 	.word	0xfe00e800

080052d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	460b      	mov	r3, r1
 80052dc:	817b      	strh	r3, [r7, #10]
 80052de:	4613      	mov	r3, r2
 80052e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e2:	897b      	ldrh	r3, [r7, #10]
 80052e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052e8:	7a7b      	ldrb	r3, [r7, #9]
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	0d5b      	lsrs	r3, r3, #21
 800530a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <I2C_TransferConfig+0x60>)
 8005310:	430b      	orrs	r3, r1
 8005312:	43db      	mvns	r3, r3
 8005314:	ea02 0103 	and.w	r1, r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	03ff63ff 	.word	0x03ff63ff

08005334 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b20      	cmp	r3, #32
 8005348:	d138      	bne.n	80053bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005354:	2302      	movs	r3, #2
 8005356:	e032      	b.n	80053be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2224      	movs	r2, #36	; 0x24
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005386:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6819      	ldr	r1, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d139      	bne.n	8005454 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e033      	b.n	8005456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2224      	movs	r2, #36	; 0x24
 80053fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800541c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d141      	bne.n	80054f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005472:	4b4b      	ldr	r3, [pc, #300]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800547e:	d131      	bne.n	80054e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005480:	4b47      	ldr	r3, [pc, #284]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005486:	4a46      	ldr	r2, [pc, #280]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005490:	4b43      	ldr	r3, [pc, #268]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005498:	4a41      	ldr	r2, [pc, #260]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800549e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054a0:	4b40      	ldr	r3, [pc, #256]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2232      	movs	r2, #50	; 0x32
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	4a3f      	ldr	r2, [pc, #252]	; (80055a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	0c9b      	lsrs	r3, r3, #18
 80054b2:	3301      	adds	r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b6:	e002      	b.n	80054be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054be:	4b38      	ldr	r3, [pc, #224]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ca:	d102      	bne.n	80054d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f2      	bne.n	80054b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054d2:	4b33      	ldr	r3, [pc, #204]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054de:	d158      	bne.n	8005592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e057      	b.n	8005594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e4:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ea:	4a2d      	ldr	r2, [pc, #180]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054f4:	e04d      	b.n	8005592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054fc:	d141      	bne.n	8005582 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054fe:	4b28      	ldr	r3, [pc, #160]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550a:	d131      	bne.n	8005570 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800550c:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005512:	4a23      	ldr	r2, [pc, #140]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800551c:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005524:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800552a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800552c:	4b1d      	ldr	r3, [pc, #116]	; (80055a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2232      	movs	r2, #50	; 0x32
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	0c9b      	lsrs	r3, r3, #18
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005542:	e002      	b.n	800554a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3b01      	subs	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005556:	d102      	bne.n	800555e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f2      	bne.n	8005544 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800555e:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556a:	d112      	bne.n	8005592 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e011      	b.n	8005594 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005576:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005580:	e007      	b.n	8005592 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005582:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800558c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005590:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	40007000 	.word	0x40007000
 80055a4:	200009d8 	.word	0x200009d8
 80055a8:	431bde83 	.word	0x431bde83

080055ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055ba:	6093      	str	r3, [r2, #8]
}
 80055bc:	bf00      	nop
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40007000 	.word	0x40007000

080055cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e301      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d075      	beq.n	80056d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ea:	4ba3      	ldr	r3, [pc, #652]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 030c 	and.w	r3, r3, #12
 80055f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055f4:	4ba0      	ldr	r3, [pc, #640]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d102      	bne.n	800560a <HAL_RCC_OscConfig+0x3e>
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2b03      	cmp	r3, #3
 8005608:	d002      	beq.n	8005610 <HAL_RCC_OscConfig+0x44>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b08      	cmp	r3, #8
 800560e:	d10b      	bne.n	8005628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005610:	4b99      	ldr	r3, [pc, #612]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05b      	beq.n	80056d4 <HAL_RCC_OscConfig+0x108>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d157      	bne.n	80056d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e2dc      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005630:	d106      	bne.n	8005640 <HAL_RCC_OscConfig+0x74>
 8005632:	4b91      	ldr	r3, [pc, #580]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a90      	ldr	r2, [pc, #576]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e01d      	b.n	800567c <HAL_RCC_OscConfig+0xb0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x98>
 800564a:	4b8b      	ldr	r3, [pc, #556]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a8a      	ldr	r2, [pc, #552]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b88      	ldr	r3, [pc, #544]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a87      	ldr	r2, [pc, #540]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e00b      	b.n	800567c <HAL_RCC_OscConfig+0xb0>
 8005664:	4b84      	ldr	r3, [pc, #528]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a83      	ldr	r2, [pc, #524]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800566a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	4b81      	ldr	r3, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a80      	ldr	r2, [pc, #512]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d013      	beq.n	80056ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fe fc82 	bl	8003f8c <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800568c:	f7fe fc7e 	bl	8003f8c <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b64      	cmp	r3, #100	; 0x64
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e2a1      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800569e:	4b76      	ldr	r3, [pc, #472]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0xc0>
 80056aa:	e014      	b.n	80056d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ac:	f7fe fc6e 	bl	8003f8c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fe fc6a 	bl	8003f8c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	; 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e28d      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056c6:	4b6c      	ldr	r3, [pc, #432]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0xe8>
 80056d2:	e000      	b.n	80056d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d075      	beq.n	80057ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056e2:	4b65      	ldr	r3, [pc, #404]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ec:	4b62      	ldr	r3, [pc, #392]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b0c      	cmp	r3, #12
 80056fa:	d102      	bne.n	8005702 <HAL_RCC_OscConfig+0x136>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d002      	beq.n	8005708 <HAL_RCC_OscConfig+0x13c>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b04      	cmp	r3, #4
 8005706:	d11f      	bne.n	8005748 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005708:	4b5b      	ldr	r3, [pc, #364]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_RCC_OscConfig+0x154>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e260      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005720:	4b55      	ldr	r3, [pc, #340]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	4952      	ldr	r1, [pc, #328]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005734:	4b51      	ldr	r3, [pc, #324]	; (800587c <HAL_RCC_OscConfig+0x2b0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe fbdb 	bl	8003ef4 <HAL_InitTick>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d043      	beq.n	80057cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e24c      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d023      	beq.n	8005798 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005750:	4b49      	ldr	r3, [pc, #292]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a48      	ldr	r2, [pc, #288]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fe fc16 	bl	8003f8c <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005764:	f7fe fc12 	bl	8003f8c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e235      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005776:	4b40      	ldr	r3, [pc, #256]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	061b      	lsls	r3, r3, #24
 8005790:	4939      	ldr	r1, [pc, #228]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
 8005796:	e01a      	b.n	80057ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005798:	4b37      	ldr	r3, [pc, #220]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a36      	ldr	r2, [pc, #216]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800579e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fe fbf2 	bl	8003f8c <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ac:	f7fe fbee 	bl	8003f8c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e211      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057be:	4b2e      	ldr	r3, [pc, #184]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f0      	bne.n	80057ac <HAL_RCC_OscConfig+0x1e0>
 80057ca:	e000      	b.n	80057ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d03c      	beq.n	8005854 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01c      	beq.n	800581c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e2:	4b25      	ldr	r3, [pc, #148]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e8:	4a23      	ldr	r2, [pc, #140]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fe fbcb 	bl	8003f8c <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fe fbc7 	bl	8003f8c <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e1ea      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800580c:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800580e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ef      	beq.n	80057fa <HAL_RCC_OscConfig+0x22e>
 800581a:	e01b      	b.n	8005854 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800581c:	4b16      	ldr	r3, [pc, #88]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 800581e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582c:	f7fe fbae 	bl	8003f8c <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005834:	f7fe fbaa 	bl	8003f8c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e1cd      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ef      	bne.n	8005834 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80ab 	beq.w	80059b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005862:	2300      	movs	r3, #0
 8005864:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005866:	4b04      	ldr	r3, [pc, #16]	; (8005878 <HAL_RCC_OscConfig+0x2ac>)
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_RCC_OscConfig+0x2b4>
 8005872:	2301      	movs	r3, #1
 8005874:	e005      	b.n	8005882 <HAL_RCC_OscConfig+0x2b6>
 8005876:	bf00      	nop
 8005878:	40021000 	.word	0x40021000
 800587c:	200009dc 	.word	0x200009dc
 8005880:	2300      	movs	r3, #0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00d      	beq.n	80058a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005886:	4bad      	ldr	r3, [pc, #692]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588a:	4aac      	ldr	r2, [pc, #688]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 800588c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005890:	6593      	str	r3, [r2, #88]	; 0x58
 8005892:	4baa      	ldr	r3, [pc, #680]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800589e:	2301      	movs	r3, #1
 80058a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a2:	4ba7      	ldr	r3, [pc, #668]	; (8005b40 <HAL_RCC_OscConfig+0x574>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d118      	bne.n	80058e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ae:	4ba4      	ldr	r3, [pc, #656]	; (8005b40 <HAL_RCC_OscConfig+0x574>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4aa3      	ldr	r2, [pc, #652]	; (8005b40 <HAL_RCC_OscConfig+0x574>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ba:	f7fe fb67 	bl	8003f8c <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c2:	f7fe fb63 	bl	8003f8c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e186      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d4:	4b9a      	ldr	r3, [pc, #616]	; (8005b40 <HAL_RCC_OscConfig+0x574>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d108      	bne.n	80058fa <HAL_RCC_OscConfig+0x32e>
 80058e8:	4b94      	ldr	r3, [pc, #592]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 80058ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ee:	4a93      	ldr	r2, [pc, #588]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058f8:	e024      	b.n	8005944 <HAL_RCC_OscConfig+0x378>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b05      	cmp	r3, #5
 8005900:	d110      	bne.n	8005924 <HAL_RCC_OscConfig+0x358>
 8005902:	4b8e      	ldr	r3, [pc, #568]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005908:	4a8c      	ldr	r2, [pc, #560]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 800590a:	f043 0304 	orr.w	r3, r3, #4
 800590e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005912:	4b8a      	ldr	r3, [pc, #552]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	4a88      	ldr	r2, [pc, #544]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005922:	e00f      	b.n	8005944 <HAL_RCC_OscConfig+0x378>
 8005924:	4b85      	ldr	r3, [pc, #532]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	4a84      	ldr	r2, [pc, #528]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005934:	4b81      	ldr	r3, [pc, #516]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	4a80      	ldr	r2, [pc, #512]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 800593c:	f023 0304 	bic.w	r3, r3, #4
 8005940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d016      	beq.n	800597a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fe fb1e 	bl	8003f8c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005952:	e00a      	b.n	800596a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fe fb1a 	bl	8003f8c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e13b      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800596a:	4b74      	ldr	r3, [pc, #464]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0ed      	beq.n	8005954 <HAL_RCC_OscConfig+0x388>
 8005978:	e015      	b.n	80059a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fe fb07 	bl	8003f8c <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005980:	e00a      	b.n	8005998 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fe fb03 	bl	8003f8c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e124      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005998:	4b68      	ldr	r3, [pc, #416]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1ed      	bne.n	8005982 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059a6:	7ffb      	ldrb	r3, [r7, #31]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d105      	bne.n	80059b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ac:	4b63      	ldr	r3, [pc, #396]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	4a62      	ldr	r2, [pc, #392]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 80059b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d03c      	beq.n	8005a3e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01c      	beq.n	8005a06 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059cc:	4b5b      	ldr	r3, [pc, #364]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 80059ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059d2:	4a5a      	ldr	r2, [pc, #360]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fe fad6 	bl	8003f8c <HAL_GetTick>
 80059e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059e4:	f7fe fad2 	bl	8003f8c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e0f5      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059f6:	4b51      	ldr	r3, [pc, #324]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 80059f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0ef      	beq.n	80059e4 <HAL_RCC_OscConfig+0x418>
 8005a04:	e01b      	b.n	8005a3e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a06:	4b4d      	ldr	r3, [pc, #308]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a0c:	4a4b      	ldr	r2, [pc, #300]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fe fab9 	bl	8003f8c <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a1e:	f7fe fab5 	bl	8003f8c <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e0d8      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a30:	4b42      	ldr	r3, [pc, #264]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ef      	bne.n	8005a1e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80cc 	beq.w	8005be0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a48:	4b3c      	ldr	r3, [pc, #240]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	f003 030c 	and.w	r3, r3, #12
 8005a50:	2b0c      	cmp	r3, #12
 8005a52:	f000 8086 	beq.w	8005b62 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d15a      	bne.n	8005b14 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a5e:	4b37      	ldr	r3, [pc, #220]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a36      	ldr	r2, [pc, #216]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6a:	f7fe fa8f 	bl	8003f8c <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a72:	f7fe fa8b 	bl	8003f8c <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e0ae      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a84:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f0      	bne.n	8005a72 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a90:	4b2a      	ldr	r3, [pc, #168]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	4b2b      	ldr	r3, [pc, #172]	; (8005b44 <HAL_RCC_OscConfig+0x578>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	6a11      	ldr	r1, [r2, #32]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	0112      	lsls	r2, r2, #4
 8005aa4:	4311      	orrs	r1, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005aaa:	0212      	lsls	r2, r2, #8
 8005aac:	4311      	orrs	r1, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ab2:	0852      	lsrs	r2, r2, #1
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	0552      	lsls	r2, r2, #21
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005abe:	0852      	lsrs	r2, r2, #1
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0652      	lsls	r2, r2, #25
 8005ac4:	4311      	orrs	r1, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005aca:	06d2      	lsls	r2, r2, #27
 8005acc:	430a      	orrs	r2, r1
 8005ace:	491b      	ldr	r1, [pc, #108]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad4:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ade:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ae0:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7fe fa4e 	bl	8003f8c <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af4:	f7fe fa4a 	bl	8003f8c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e06d      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b06:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x528>
 8005b12:	e065      	b.n	8005be0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <HAL_RCC_OscConfig+0x570>)
 8005b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fe fa34 	bl	8003f8c <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b26:	e00f      	b.n	8005b48 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fe fa30 	bl	8003f8c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d908      	bls.n	8005b48 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e053      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
 8005b3a:	bf00      	nop
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	40007000 	.word	0x40007000
 8005b44:	019f800c 	.word	0x019f800c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b48:	4b28      	ldr	r3, [pc, #160]	; (8005bec <HAL_RCC_OscConfig+0x620>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e9      	bne.n	8005b28 <HAL_RCC_OscConfig+0x55c>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b54:	4b25      	ldr	r3, [pc, #148]	; (8005bec <HAL_RCC_OscConfig+0x620>)
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	4924      	ldr	r1, [pc, #144]	; (8005bec <HAL_RCC_OscConfig+0x620>)
 8005b5a:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <HAL_RCC_OscConfig+0x624>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60cb      	str	r3, [r1, #12]
 8005b60:	e03e      	b.n	8005be0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e039      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <HAL_RCC_OscConfig+0x620>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f003 0203 	and.w	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d12c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d123      	bne.n	8005bdc <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d11b      	bne.n	8005bdc <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d113      	bne.n	8005bdc <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	085b      	lsrs	r3, r3, #1
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d109      	bne.n	8005bdc <HAL_RCC_OscConfig+0x610>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_OscConfig+0x614>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x616>
      }
    }
  }
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	feeefffc 	.word	0xfeeefffc

08005bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e11e      	b.n	8005e4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c0c:	4b91      	ldr	r3, [pc, #580]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d910      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1a:	4b8e      	ldr	r3, [pc, #568]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 020f 	bic.w	r2, r3, #15
 8005c22:	498c      	ldr	r1, [pc, #560]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b8a      	ldr	r3, [pc, #552]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e106      	b.n	8005e4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d073      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d129      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c50:	4b81      	ldr	r3, [pc, #516]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0f4      	b.n	8005e4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c60:	f000 f99e 	bl	8005fa0 <RCC_GetSysClockFreqFromPLLSource>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4a7c      	ldr	r2, [pc, #496]	; (8005e5c <HAL_RCC_ClockConfig+0x268>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d93f      	bls.n	8005cee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c6e:	4b7a      	ldr	r3, [pc, #488]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d033      	beq.n	8005cee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d12f      	bne.n	8005cee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c8e:	4b72      	ldr	r3, [pc, #456]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c96:	4a70      	ldr	r2, [pc, #448]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c9e:	2380      	movs	r3, #128	; 0x80
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e024      	b.n	8005cee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d107      	bne.n	8005cbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cac:	4b6a      	ldr	r3, [pc, #424]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0c6      	b.n	8005e4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cbc:	4b66      	ldr	r3, [pc, #408]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0be      	b.n	8005e4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ccc:	f000 f8ce 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8005cd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4a61      	ldr	r2, [pc, #388]	; (8005e5c <HAL_RCC_ClockConfig+0x268>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d909      	bls.n	8005cee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cda:	4b5f      	ldr	r3, [pc, #380]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ce2:	4a5d      	ldr	r2, [pc, #372]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cee:	4b5a      	ldr	r3, [pc, #360]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f023 0203 	bic.w	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	4957      	ldr	r1, [pc, #348]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d00:	f7fe f944 	bl	8003f8c <HAL_GetTick>
 8005d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d08:	f7fe f940 	bl	8003f8c <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e095      	b.n	8005e4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1e:	4b4e      	ldr	r3, [pc, #312]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 020c 	and.w	r2, r3, #12
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d1eb      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d023      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d48:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a42      	ldr	r2, [pc, #264]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d60:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d68:	4a3b      	ldr	r2, [pc, #236]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d70:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	4936      	ldr	r1, [pc, #216]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2b80      	cmp	r3, #128	; 0x80
 8005d88:	d105      	bne.n	8005d96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d8a:	4b33      	ldr	r3, [pc, #204]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	4a32      	ldr	r2, [pc, #200]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d96:	4b2f      	ldr	r3, [pc, #188]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d21d      	bcs.n	8005de0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da4:	4b2b      	ldr	r3, [pc, #172]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f023 020f 	bic.w	r2, r3, #15
 8005dac:	4929      	ldr	r1, [pc, #164]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005db4:	f7fe f8ea 	bl	8003f8c <HAL_GetTick>
 8005db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dbc:	f7fe f8e6 	bl	8003f8c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e03b      	b.n	8005e4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd2:	4b20      	ldr	r3, [pc, #128]	; (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1ed      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dec:	4b1a      	ldr	r3, [pc, #104]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4917      	ldr	r1, [pc, #92]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	490f      	ldr	r1, [pc, #60]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e1e:	f000 f825 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	490c      	ldr	r1, [pc, #48]	; (8005e60 <HAL_RCC_ClockConfig+0x26c>)
 8005e30:	5ccb      	ldrb	r3, [r1, r3]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3a:	4a0a      	ldr	r2, [pc, #40]	; (8005e64 <HAL_RCC_ClockConfig+0x270>)
 8005e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e3e:	4b0a      	ldr	r3, [pc, #40]	; (8005e68 <HAL_RCC_ClockConfig+0x274>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe f856 	bl	8003ef4 <HAL_InitTick>
 8005e48:	4603      	mov	r3, r0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	40022000 	.word	0x40022000
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	04c4b400 	.word	0x04c4b400
 8005e60:	0800b638 	.word	0x0800b638
 8005e64:	200009d8 	.word	0x200009d8
 8005e68:	200009dc 	.word	0x200009dc

08005e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e72:	4b2c      	ldr	r3, [pc, #176]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 030c 	and.w	r3, r3, #12
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d102      	bne.n	8005e84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e7e:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e047      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e84:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e90:	4b26      	ldr	r3, [pc, #152]	; (8005f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	e03e      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e96:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b0c      	cmp	r3, #12
 8005ea0:	d136      	bne.n	8005f10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ea2:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005eac:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	091b      	lsrs	r3, r3, #4
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d10c      	bne.n	8005eda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ec0:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eca:	68d2      	ldr	r2, [r2, #12]
 8005ecc:	0a12      	lsrs	r2, r2, #8
 8005ece:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	617b      	str	r3, [r7, #20]
      break;
 8005ed8:	e00c      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee2:	4a10      	ldr	r2, [pc, #64]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ee4:	68d2      	ldr	r2, [r2, #12]
 8005ee6:	0a12      	lsrs	r2, r2, #8
 8005ee8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005eec:	fb02 f303 	mul.w	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]
      break;
 8005ef2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	0e5b      	lsrs	r3, r3, #25
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	3301      	adds	r3, #1
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	e001      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f14:	693b      	ldr	r3, [r7, #16]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40021000 	.word	0x40021000
 8005f28:	00f42400 	.word	0x00f42400
 8005f2c:	007a1200 	.word	0x007a1200

08005f30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f34:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f36:	681b      	ldr	r3, [r3, #0]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	200009d8 	.word	0x200009d8

08005f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f4c:	f7ff fff0 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f50:	4602      	mov	r2, r0
 8005f52:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	0a1b      	lsrs	r3, r3, #8
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4904      	ldr	r1, [pc, #16]	; (8005f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f5e:	5ccb      	ldrb	r3, [r1, r3]
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	0800b648 	.word	0x0800b648

08005f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f78:	f7ff ffda 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	0adb      	lsrs	r3, r3, #11
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4904      	ldr	r1, [pc, #16]	; (8005f9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	0800b648 	.word	0x0800b648

08005fa0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	; (8006020 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f003 0303 	and.w	r3, r3, #3
 8005fae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d10c      	bne.n	8005fde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fc4:	4a17      	ldr	r2, [pc, #92]	; (8006024 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	4a14      	ldr	r2, [pc, #80]	; (8006020 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fce:	68d2      	ldr	r2, [r2, #12]
 8005fd0:	0a12      	lsrs	r2, r2, #8
 8005fd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	617b      	str	r3, [r7, #20]
    break;
 8005fdc:	e00c      	b.n	8005ff8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fde:	4a12      	ldr	r2, [pc, #72]	; (8006028 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fe8:	68d2      	ldr	r2, [r2, #12]
 8005fea:	0a12      	lsrs	r2, r2, #8
 8005fec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
 8005ff4:	617b      	str	r3, [r7, #20]
    break;
 8005ff6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ff8:	4b09      	ldr	r3, [pc, #36]	; (8006020 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	0e5b      	lsrs	r3, r3, #25
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	3301      	adds	r3, #1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006012:	687b      	ldr	r3, [r7, #4]
}
 8006014:	4618      	mov	r0, r3
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	40021000 	.word	0x40021000
 8006024:	007a1200 	.word	0x007a1200
 8006028:	00f42400 	.word	0x00f42400

0800602c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006034:	2300      	movs	r3, #0
 8006036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006038:	2300      	movs	r3, #0
 800603a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8098 	beq.w	800617a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800604a:	2300      	movs	r3, #0
 800604c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800604e:	4b43      	ldr	r3, [pc, #268]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10d      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605a:	4b40      	ldr	r3, [pc, #256]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800605c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605e:	4a3f      	ldr	r2, [pc, #252]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006064:	6593      	str	r3, [r2, #88]	; 0x58
 8006066:	4b3d      	ldr	r3, [pc, #244]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006072:	2301      	movs	r3, #1
 8006074:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006076:	4b3a      	ldr	r3, [pc, #232]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a39      	ldr	r2, [pc, #228]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800607c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006080:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006082:	f7fd ff83 	bl	8003f8c <HAL_GetTick>
 8006086:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006088:	e009      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608a:	f7fd ff7f 	bl	8003f8c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d902      	bls.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	74fb      	strb	r3, [r7, #19]
        break;
 800609c:	e005      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800609e:	4b30      	ldr	r3, [pc, #192]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0ef      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80060aa:	7cfb      	ldrb	r3, [r7, #19]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d159      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060b0:	4b2a      	ldr	r3, [pc, #168]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d01e      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d019      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060cc:	4b23      	ldr	r3, [pc, #140]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060d8:	4b20      	ldr	r3, [pc, #128]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e8:	4b1c      	ldr	r3, [pc, #112]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	4a1b      	ldr	r2, [pc, #108]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060f8:	4a18      	ldr	r2, [pc, #96]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d016      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610a:	f7fd ff3f 	bl	8003f8c <HAL_GetTick>
 800610e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006110:	e00b      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006112:	f7fd ff3b 	bl	8003f8c <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006120:	4293      	cmp	r3, r2
 8006122:	d902      	bls.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	74fb      	strb	r3, [r7, #19]
            break;
 8006128:	e006      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0ec      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006138:	7cfb      	ldrb	r3, [r7, #19]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	4903      	ldr	r1, [pc, #12]	; (800615c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006154:	e008      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	74bb      	strb	r3, [r7, #18]
 800615a:	e005      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800615c:	40021000 	.word	0x40021000
 8006160:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006168:	7c7b      	ldrb	r3, [r7, #17]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616e:	4ba6      	ldr	r3, [pc, #664]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	4aa5      	ldr	r2, [pc, #660]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006178:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006186:	4ba0      	ldr	r3, [pc, #640]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f023 0203 	bic.w	r2, r3, #3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	499c      	ldr	r1, [pc, #624]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061a8:	4b97      	ldr	r3, [pc, #604]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f023 020c 	bic.w	r2, r3, #12
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	4994      	ldr	r1, [pc, #592]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0304 	and.w	r3, r3, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061ca:	4b8f      	ldr	r3, [pc, #572]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	498b      	ldr	r1, [pc, #556]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0308 	and.w	r3, r3, #8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061ec:	4b86      	ldr	r3, [pc, #536]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	4983      	ldr	r1, [pc, #524]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800620e:	4b7e      	ldr	r3, [pc, #504]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	497a      	ldr	r1, [pc, #488]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006230:	4b75      	ldr	r3, [pc, #468]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	4972      	ldr	r1, [pc, #456]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006252:	4b6d      	ldr	r3, [pc, #436]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	4969      	ldr	r1, [pc, #420]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006274:	4b64      	ldr	r3, [pc, #400]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	4961      	ldr	r1, [pc, #388]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006296:	4b5c      	ldr	r3, [pc, #368]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	4958      	ldr	r1, [pc, #352]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d015      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062b8:	4b53      	ldr	r3, [pc, #332]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	4950      	ldr	r1, [pc, #320]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d6:	d105      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d8:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a4a      	ldr	r2, [pc, #296]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062f0:	4b45      	ldr	r3, [pc, #276]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	4942      	ldr	r1, [pc, #264]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006310:	4b3d      	ldr	r3, [pc, #244]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4a3c      	ldr	r2, [pc, #240]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800631a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006328:	4b37      	ldr	r3, [pc, #220]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	4934      	ldr	r1, [pc, #208]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006346:	d105      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a2e      	ldr	r2, [pc, #184]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006352:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006360:	4b29      	ldr	r3, [pc, #164]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	4926      	ldr	r1, [pc, #152]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800637e:	d105      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006380:	4b21      	ldr	r3, [pc, #132]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a20      	ldr	r2, [pc, #128]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800638a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d015      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	4918      	ldr	r1, [pc, #96]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b6:	d105      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b8:	4b13      	ldr	r3, [pc, #76]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a12      	ldr	r2, [pc, #72]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d015      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063d0:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	490a      	ldr	r1, [pc, #40]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063ee:	d105      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	4a04      	ldr	r2, [pc, #16]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3718      	adds	r7, #24
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000

0800640c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e042      	b.n	80064a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fc fc2b 	bl	8002c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2224      	movs	r2, #36	; 0x24
 800643a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0201 	bic.w	r2, r2, #1
 800644c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fe96 	bl	8007188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fbf7 	bl	8006c50 <UART_SetConfig>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e01b      	b.n	80064a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800647a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800648a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ff15 	bl	80072cc <UART_CheckIdleState>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af02      	add	r7, sp, #8
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d17b      	bne.n	80065be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_Transmit+0x26>
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e074      	b.n	80065c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2221      	movs	r2, #33	; 0x21
 80064e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064e6:	f7fd fd51 	bl	8003f8c <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	88fa      	ldrh	r2, [r7, #6]
 80064f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	88fa      	ldrh	r2, [r7, #6]
 80064f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006504:	d108      	bne.n	8006518 <HAL_UART_Transmit+0x6c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e003      	b.n	8006520 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006520:	e030      	b.n	8006584 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2200      	movs	r2, #0
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 ff77 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e03d      	b.n	80065c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006558:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	3302      	adds	r3, #2
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	e007      	b.n	8006572 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	3301      	adds	r3, #1
 8006570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1c8      	bne.n	8006522 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2200      	movs	r2, #0
 8006598:	2140      	movs	r1, #64	; 0x40
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 ff40 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e006      	b.n	80065c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065be:	2302      	movs	r3, #2
  }
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b0ba      	sub	sp, #232	; 0xe8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80065f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80065f6:	4013      	ands	r3, r2
 80065f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80065fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d11b      	bne.n	800663c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d015      	beq.n	800663c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006614:	f003 0320 	and.w	r3, r3, #32
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800661c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d009      	beq.n	800663c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 82e3 	beq.w	8006bf8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
      }
      return;
 800663a:	e2dd      	b.n	8006bf8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800663c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 8123 	beq.w	800688c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006646:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800664a:	4b8d      	ldr	r3, [pc, #564]	; (8006880 <HAL_UART_IRQHandler+0x2b8>)
 800664c:	4013      	ands	r3, r2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006652:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006656:	4b8b      	ldr	r3, [pc, #556]	; (8006884 <HAL_UART_IRQHandler+0x2bc>)
 8006658:	4013      	ands	r3, r2
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8116 	beq.w	800688c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d011      	beq.n	8006690 <HAL_UART_IRQHandler+0xc8>
 800666c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2201      	movs	r2, #1
 800667e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006686:	f043 0201 	orr.w	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d011      	beq.n	80066c0 <HAL_UART_IRQHandler+0xf8>
 800669c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2202      	movs	r2, #2
 80066ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f043 0204 	orr.w	r2, r3, #4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d011      	beq.n	80066f0 <HAL_UART_IRQHandler+0x128>
 80066cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00b      	beq.n	80066f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2204      	movs	r2, #4
 80066de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e6:	f043 0202 	orr.w	r2, r3, #2
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d017      	beq.n	800672c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006708:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800670c:	4b5c      	ldr	r3, [pc, #368]	; (8006880 <HAL_UART_IRQHandler+0x2b8>)
 800670e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2208      	movs	r2, #8
 800671a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006722:	f043 0208 	orr.w	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800672c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006734:	2b00      	cmp	r3, #0
 8006736:	d012      	beq.n	800675e <HAL_UART_IRQHandler+0x196>
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00c      	beq.n	800675e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800674c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	f043 0220 	orr.w	r2, r3, #32
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8249 	beq.w	8006bfc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d013      	beq.n	800679e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b2:	2b40      	cmp	r3, #64	; 0x40
 80067b4:	d005      	beq.n	80067c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d054      	beq.n	800686c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fe99 	bl	80074fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d146      	bne.n	8006864 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3308      	adds	r3, #8
 80067dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3308      	adds	r3, #8
 80067fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800680e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800681a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1d9      	bne.n	80067d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006828:	2b00      	cmp	r3, #0
 800682a:	d017      	beq.n	800685c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006832:	4a15      	ldr	r2, [pc, #84]	; (8006888 <HAL_UART_IRQHandler+0x2c0>)
 8006834:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800683c:	4618      	mov	r0, r3
 800683e:	f7fd fd3b 	bl	80042b8 <HAL_DMA_Abort_IT>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d019      	beq.n	800687c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006856:	4610      	mov	r0, r2
 8006858:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685a:	e00f      	b.n	800687c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f9e1 	bl	8006c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006862:	e00b      	b.n	800687c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f9dd 	bl	8006c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686a:	e007      	b.n	800687c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f9d9 	bl	8006c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800687a:	e1bf      	b.n	8006bfc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	bf00      	nop
    return;
 800687e:	e1bd      	b.n	8006bfc <HAL_UART_IRQHandler+0x634>
 8006880:	10000001 	.word	0x10000001
 8006884:	04000120 	.word	0x04000120
 8006888:	080075c7 	.word	0x080075c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006890:	2b01      	cmp	r3, #1
 8006892:	f040 8153 	bne.w	8006b3c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 814c 	beq.w	8006b3c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8145 	beq.w	8006b3c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2210      	movs	r2, #16
 80068b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b40      	cmp	r3, #64	; 0x40
 80068c6:	f040 80bb 	bne.w	8006a40 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 818f 	beq.w	8006c00 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068ec:	429a      	cmp	r2, r3
 80068ee:	f080 8187 	bcs.w	8006c00 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 8087 	bne.w	8006a1e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800692c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800693a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800693e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006946:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1da      	bne.n	8006910 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800696a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800697e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006982:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e1      	bne.n	800695a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3308      	adds	r3, #8
 800699c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e3      	bne.n	8006996 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ec:	f023 0310 	bic.w	r3, r3, #16
 80069f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e4      	bne.n	80069dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd fbf4 	bl	8004206 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f8fd 	bl	8006c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a3e:	e0df      	b.n	8006c00 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80d1 	beq.w	8006c04 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80cc 	beq.w	8006c04 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e4      	bne.n	8006a6c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aca:	633a      	str	r2, [r7, #48]	; 0x30
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e1      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	69b9      	ldr	r1, [r7, #24]
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	617b      	str	r3, [r7, #20]
   return(result);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e4      	bne.n	8006af2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f87f 	bl	8006c38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b3a:	e063      	b.n	8006c04 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00e      	beq.n	8006b66 <HAL_UART_IRQHandler+0x59e>
 8006b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d008      	beq.n	8006b66 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fd72 	bl	8007648 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b64:	e051      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d014      	beq.n	8006b9c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d03a      	beq.n	8006c08 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
    }
    return;
 8006b9a:	e035      	b.n	8006c08 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <HAL_UART_IRQHandler+0x5f4>
 8006ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fd1c 	bl	80075f2 <UART_EndTransmit_IT>
    return;
 8006bba:	e026      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <HAL_UART_IRQHandler+0x614>
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fd4b 	bl	8007670 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bda:	e016      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d010      	beq.n	8006c0a <HAL_UART_IRQHandler+0x642>
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da0c      	bge.n	8006c0a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fd33 	bl	800765c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf6:	e008      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
      return;
 8006bf8:	bf00      	nop
 8006bfa:	e006      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
    return;
 8006bfc:	bf00      	nop
 8006bfe:	e004      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
      return;
 8006c00:	bf00      	nop
 8006c02:	e002      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
      return;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <HAL_UART_IRQHandler+0x642>
    return;
 8006c08:	bf00      	nop
  }
}
 8006c0a:	37e8      	adds	r7, #232	; 0xe8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c50:	b5b0      	push	{r4, r5, r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4baf      	ldr	r3, [pc, #700]	; (8006f38 <UART_SetConfig+0x2e8>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	69f9      	ldr	r1, [r7, #28]
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4aa4      	ldr	r2, [pc, #656]	; (8006f3c <UART_SetConfig+0x2ec>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006cc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	69f9      	ldr	r1, [r7, #28]
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	f023 010f 	bic.w	r1, r3, #15
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a95      	ldr	r2, [pc, #596]	; (8006f40 <UART_SetConfig+0x2f0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d120      	bne.n	8006d32 <UART_SetConfig+0xe2>
 8006cf0:	4b94      	ldr	r3, [pc, #592]	; (8006f44 <UART_SetConfig+0x2f4>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d816      	bhi.n	8006d2c <UART_SetConfig+0xdc>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <UART_SetConfig+0xb4>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d21 	.word	0x08006d21
 8006d0c:	08006d1b 	.word	0x08006d1b
 8006d10:	08006d27 	.word	0x08006d27
 8006d14:	2301      	movs	r3, #1
 8006d16:	76fb      	strb	r3, [r7, #27]
 8006d18:	e0bc      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	76fb      	strb	r3, [r7, #27]
 8006d1e:	e0b9      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d20:	2304      	movs	r3, #4
 8006d22:	76fb      	strb	r3, [r7, #27]
 8006d24:	e0b6      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d26:	2308      	movs	r3, #8
 8006d28:	76fb      	strb	r3, [r7, #27]
 8006d2a:	e0b3      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d2c:	2310      	movs	r3, #16
 8006d2e:	76fb      	strb	r3, [r7, #27]
 8006d30:	e0b0      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a84      	ldr	r2, [pc, #528]	; (8006f48 <UART_SetConfig+0x2f8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d132      	bne.n	8006da2 <UART_SetConfig+0x152>
 8006d3c:	4b81      	ldr	r3, [pc, #516]	; (8006f44 <UART_SetConfig+0x2f4>)
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	f003 030c 	and.w	r3, r3, #12
 8006d46:	2b0c      	cmp	r3, #12
 8006d48:	d828      	bhi.n	8006d9c <UART_SetConfig+0x14c>
 8006d4a:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <UART_SetConfig+0x100>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006d9d 	.word	0x08006d9d
 8006d58:	08006d9d 	.word	0x08006d9d
 8006d5c:	08006d9d 	.word	0x08006d9d
 8006d60:	08006d91 	.word	0x08006d91
 8006d64:	08006d9d 	.word	0x08006d9d
 8006d68:	08006d9d 	.word	0x08006d9d
 8006d6c:	08006d9d 	.word	0x08006d9d
 8006d70:	08006d8b 	.word	0x08006d8b
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006d9d 	.word	0x08006d9d
 8006d80:	08006d97 	.word	0x08006d97
 8006d84:	2300      	movs	r3, #0
 8006d86:	76fb      	strb	r3, [r7, #27]
 8006d88:	e084      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	76fb      	strb	r3, [r7, #27]
 8006d8e:	e081      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d90:	2304      	movs	r3, #4
 8006d92:	76fb      	strb	r3, [r7, #27]
 8006d94:	e07e      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d96:	2308      	movs	r3, #8
 8006d98:	76fb      	strb	r3, [r7, #27]
 8006d9a:	e07b      	b.n	8006e94 <UART_SetConfig+0x244>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	76fb      	strb	r3, [r7, #27]
 8006da0:	e078      	b.n	8006e94 <UART_SetConfig+0x244>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a69      	ldr	r2, [pc, #420]	; (8006f4c <UART_SetConfig+0x2fc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d120      	bne.n	8006dee <UART_SetConfig+0x19e>
 8006dac:	4b65      	ldr	r3, [pc, #404]	; (8006f44 <UART_SetConfig+0x2f4>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006db6:	2b30      	cmp	r3, #48	; 0x30
 8006db8:	d013      	beq.n	8006de2 <UART_SetConfig+0x192>
 8006dba:	2b30      	cmp	r3, #48	; 0x30
 8006dbc:	d814      	bhi.n	8006de8 <UART_SetConfig+0x198>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d009      	beq.n	8006dd6 <UART_SetConfig+0x186>
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d810      	bhi.n	8006de8 <UART_SetConfig+0x198>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <UART_SetConfig+0x180>
 8006dca:	2b10      	cmp	r3, #16
 8006dcc:	d006      	beq.n	8006ddc <UART_SetConfig+0x18c>
 8006dce:	e00b      	b.n	8006de8 <UART_SetConfig+0x198>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	76fb      	strb	r3, [r7, #27]
 8006dd4:	e05e      	b.n	8006e94 <UART_SetConfig+0x244>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	76fb      	strb	r3, [r7, #27]
 8006dda:	e05b      	b.n	8006e94 <UART_SetConfig+0x244>
 8006ddc:	2304      	movs	r3, #4
 8006dde:	76fb      	strb	r3, [r7, #27]
 8006de0:	e058      	b.n	8006e94 <UART_SetConfig+0x244>
 8006de2:	2308      	movs	r3, #8
 8006de4:	76fb      	strb	r3, [r7, #27]
 8006de6:	e055      	b.n	8006e94 <UART_SetConfig+0x244>
 8006de8:	2310      	movs	r3, #16
 8006dea:	76fb      	strb	r3, [r7, #27]
 8006dec:	e052      	b.n	8006e94 <UART_SetConfig+0x244>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a57      	ldr	r2, [pc, #348]	; (8006f50 <UART_SetConfig+0x300>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d120      	bne.n	8006e3a <UART_SetConfig+0x1ea>
 8006df8:	4b52      	ldr	r3, [pc, #328]	; (8006f44 <UART_SetConfig+0x2f4>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e02:	2bc0      	cmp	r3, #192	; 0xc0
 8006e04:	d013      	beq.n	8006e2e <UART_SetConfig+0x1de>
 8006e06:	2bc0      	cmp	r3, #192	; 0xc0
 8006e08:	d814      	bhi.n	8006e34 <UART_SetConfig+0x1e4>
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d009      	beq.n	8006e22 <UART_SetConfig+0x1d2>
 8006e0e:	2b80      	cmp	r3, #128	; 0x80
 8006e10:	d810      	bhi.n	8006e34 <UART_SetConfig+0x1e4>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <UART_SetConfig+0x1cc>
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d006      	beq.n	8006e28 <UART_SetConfig+0x1d8>
 8006e1a:	e00b      	b.n	8006e34 <UART_SetConfig+0x1e4>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	76fb      	strb	r3, [r7, #27]
 8006e20:	e038      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e22:	2302      	movs	r3, #2
 8006e24:	76fb      	strb	r3, [r7, #27]
 8006e26:	e035      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	76fb      	strb	r3, [r7, #27]
 8006e2c:	e032      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e2e:	2308      	movs	r3, #8
 8006e30:	76fb      	strb	r3, [r7, #27]
 8006e32:	e02f      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e34:	2310      	movs	r3, #16
 8006e36:	76fb      	strb	r3, [r7, #27]
 8006e38:	e02c      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a3f      	ldr	r2, [pc, #252]	; (8006f3c <UART_SetConfig+0x2ec>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d125      	bne.n	8006e90 <UART_SetConfig+0x240>
 8006e44:	4b3f      	ldr	r3, [pc, #252]	; (8006f44 <UART_SetConfig+0x2f4>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e52:	d017      	beq.n	8006e84 <UART_SetConfig+0x234>
 8006e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e58:	d817      	bhi.n	8006e8a <UART_SetConfig+0x23a>
 8006e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5e:	d00b      	beq.n	8006e78 <UART_SetConfig+0x228>
 8006e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e64:	d811      	bhi.n	8006e8a <UART_SetConfig+0x23a>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <UART_SetConfig+0x222>
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6e:	d006      	beq.n	8006e7e <UART_SetConfig+0x22e>
 8006e70:	e00b      	b.n	8006e8a <UART_SetConfig+0x23a>
 8006e72:	2300      	movs	r3, #0
 8006e74:	76fb      	strb	r3, [r7, #27]
 8006e76:	e00d      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	76fb      	strb	r3, [r7, #27]
 8006e7c:	e00a      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e7e:	2304      	movs	r3, #4
 8006e80:	76fb      	strb	r3, [r7, #27]
 8006e82:	e007      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e84:	2308      	movs	r3, #8
 8006e86:	76fb      	strb	r3, [r7, #27]
 8006e88:	e004      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e8a:	2310      	movs	r3, #16
 8006e8c:	76fb      	strb	r3, [r7, #27]
 8006e8e:	e001      	b.n	8006e94 <UART_SetConfig+0x244>
 8006e90:	2310      	movs	r3, #16
 8006e92:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a28      	ldr	r2, [pc, #160]	; (8006f3c <UART_SetConfig+0x2ec>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	f040 809e 	bne.w	8006fdc <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ea0:	7efb      	ldrb	r3, [r7, #27]
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d823      	bhi.n	8006eee <UART_SetConfig+0x29e>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x25c>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006eef 	.word	0x08006eef
 8006eb4:	08006ed9 	.word	0x08006ed9
 8006eb8:	08006eef 	.word	0x08006eef
 8006ebc:	08006edf 	.word	0x08006edf
 8006ec0:	08006eef 	.word	0x08006eef
 8006ec4:	08006eef 	.word	0x08006eef
 8006ec8:	08006eef 	.word	0x08006eef
 8006ecc:	08006ee7 	.word	0x08006ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ed0:	f7ff f83a 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 8006ed4:	6178      	str	r0, [r7, #20]
        break;
 8006ed6:	e00f      	b.n	8006ef8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <UART_SetConfig+0x304>)
 8006eda:	617b      	str	r3, [r7, #20]
        break;
 8006edc:	e00c      	b.n	8006ef8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ede:	f7fe ffc5 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8006ee2:	6178      	str	r0, [r7, #20]
        break;
 8006ee4:	e008      	b.n	8006ef8 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eea:	617b      	str	r3, [r7, #20]
        break;
 8006eec:	e004      	b.n	8006ef8 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	76bb      	strb	r3, [r7, #26]
        break;
 8006ef6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 812c 	beq.w	8007158 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <UART_SetConfig+0x308>)
 8006f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f12:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	4413      	add	r3, r2
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d305      	bcc.n	8006f30 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d915      	bls.n	8006f5c <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	76bb      	strb	r3, [r7, #26]
 8006f34:	e110      	b.n	8007158 <UART_SetConfig+0x508>
 8006f36:	bf00      	nop
 8006f38:	cfff69f3 	.word	0xcfff69f3
 8006f3c:	40008000 	.word	0x40008000
 8006f40:	40013800 	.word	0x40013800
 8006f44:	40021000 	.word	0x40021000
 8006f48:	40004400 	.word	0x40004400
 8006f4c:	40004800 	.word	0x40004800
 8006f50:	40004c00 	.word	0x40004c00
 8006f54:	00f42400 	.word	0x00f42400
 8006f58:	0800b650 	.word	0x0800b650
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f04f 0100 	mov.w	r1, #0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	4a85      	ldr	r2, [pc, #532]	; (8007180 <UART_SetConfig+0x530>)
 8006f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	f7f9 f9f4 	bl	8000360 <__aeabi_uldivmod>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	020b      	lsls	r3, r1, #8
 8006f8a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f8e:	0202      	lsls	r2, r0, #8
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	6849      	ldr	r1, [r1, #4]
 8006f94:	0849      	lsrs	r1, r1, #1
 8006f96:	4608      	mov	r0, r1
 8006f98:	f04f 0100 	mov.w	r1, #0
 8006f9c:	1814      	adds	r4, r2, r0
 8006f9e:	eb43 0501 	adc.w	r5, r3, r1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f04f 0300 	mov.w	r3, #0
 8006fac:	4620      	mov	r0, r4
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7f9 f9d6 	bl	8000360 <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4613      	mov	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc2:	d308      	bcc.n	8006fd6 <UART_SetConfig+0x386>
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fca:	d204      	bcs.n	8006fd6 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	e0c0      	b.n	8007158 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	76bb      	strb	r3, [r7, #26]
 8006fda:	e0bd      	b.n	8007158 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe4:	d164      	bne.n	80070b0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006fe6:	7efb      	ldrb	r3, [r7, #27]
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d828      	bhi.n	800703e <UART_SetConfig+0x3ee>
 8006fec:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <UART_SetConfig+0x3a4>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007029 	.word	0x08007029
 8007000:	0800703f 	.word	0x0800703f
 8007004:	0800702f 	.word	0x0800702f
 8007008:	0800703f 	.word	0x0800703f
 800700c:	0800703f 	.word	0x0800703f
 8007010:	0800703f 	.word	0x0800703f
 8007014:	08007037 	.word	0x08007037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007018:	f7fe ff96 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 800701c:	6178      	str	r0, [r7, #20]
        break;
 800701e:	e013      	b.n	8007048 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007020:	f7fe ffa8 	bl	8005f74 <HAL_RCC_GetPCLK2Freq>
 8007024:	6178      	str	r0, [r7, #20]
        break;
 8007026:	e00f      	b.n	8007048 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007028:	4b56      	ldr	r3, [pc, #344]	; (8007184 <UART_SetConfig+0x534>)
 800702a:	617b      	str	r3, [r7, #20]
        break;
 800702c:	e00c      	b.n	8007048 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800702e:	f7fe ff1d 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8007032:	6178      	str	r0, [r7, #20]
        break;
 8007034:	e008      	b.n	8007048 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800703a:	617b      	str	r3, [r7, #20]
        break;
 800703c:	e004      	b.n	8007048 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	76bb      	strb	r3, [r7, #26]
        break;
 8007046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 8084 	beq.w	8007158 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	4a4a      	ldr	r2, [pc, #296]	; (8007180 <UART_SetConfig+0x530>)
 8007056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800705a:	461a      	mov	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007062:	005a      	lsls	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	441a      	add	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	fbb2 f3f3 	udiv	r3, r2, r3
 8007074:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b0f      	cmp	r3, #15
 800707a:	d916      	bls.n	80070aa <UART_SetConfig+0x45a>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007082:	d212      	bcs.n	80070aa <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f023 030f 	bic.w	r3, r3, #15
 800708c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	085b      	lsrs	r3, r3, #1
 8007092:	b29b      	uxth	r3, r3
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	b29a      	uxth	r2, r3
 800709a:	89fb      	ldrh	r3, [r7, #14]
 800709c:	4313      	orrs	r3, r2
 800709e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	89fa      	ldrh	r2, [r7, #14]
 80070a6:	60da      	str	r2, [r3, #12]
 80070a8:	e056      	b.n	8007158 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	76bb      	strb	r3, [r7, #26]
 80070ae:	e053      	b.n	8007158 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070b0:	7efb      	ldrb	r3, [r7, #27]
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d827      	bhi.n	8007106 <UART_SetConfig+0x4b6>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0x46c>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070f1 	.word	0x080070f1
 80070c8:	08007107 	.word	0x08007107
 80070cc:	080070f7 	.word	0x080070f7
 80070d0:	08007107 	.word	0x08007107
 80070d4:	08007107 	.word	0x08007107
 80070d8:	08007107 	.word	0x08007107
 80070dc:	080070ff 	.word	0x080070ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070e0:	f7fe ff32 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 80070e4:	6178      	str	r0, [r7, #20]
        break;
 80070e6:	e013      	b.n	8007110 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e8:	f7fe ff44 	bl	8005f74 <HAL_RCC_GetPCLK2Freq>
 80070ec:	6178      	str	r0, [r7, #20]
        break;
 80070ee:	e00f      	b.n	8007110 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070f0:	4b24      	ldr	r3, [pc, #144]	; (8007184 <UART_SetConfig+0x534>)
 80070f2:	617b      	str	r3, [r7, #20]
        break;
 80070f4:	e00c      	b.n	8007110 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070f6:	f7fe feb9 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 80070fa:	6178      	str	r0, [r7, #20]
        break;
 80070fc:	e008      	b.n	8007110 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007102:	617b      	str	r3, [r7, #20]
        break;
 8007104:	e004      	b.n	8007110 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	76bb      	strb	r3, [r7, #26]
        break;
 800710e:	bf00      	nop
    }

    if (pclk != 0U)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d020      	beq.n	8007158 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	4a19      	ldr	r2, [pc, #100]	; (8007180 <UART_SetConfig+0x530>)
 800711c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007120:	461a      	mov	r2, r3
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	fbb3 f2f2 	udiv	r2, r3, r2
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	441a      	add	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b0f      	cmp	r3, #15
 800713e:	d909      	bls.n	8007154 <UART_SetConfig+0x504>
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007146:	d205      	bcs.n	8007154 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	b29a      	uxth	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60da      	str	r2, [r3, #12]
 8007152:	e001      	b.n	8007158 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007174:	7ebb      	ldrb	r3, [r7, #26]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3720      	adds	r7, #32
 800717a:	46bd      	mov	sp, r7
 800717c:	bdb0      	pop	{r4, r5, r7, pc}
 800717e:	bf00      	nop
 8007180:	0800b650 	.word	0x0800b650
 8007184:	00f42400 	.word	0x00f42400

08007188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00a      	beq.n	80071f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01a      	beq.n	800729e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007286:	d10a      	bne.n	800729e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00a      	beq.n	80072c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	605a      	str	r2, [r3, #4]
  }
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b098      	sub	sp, #96	; 0x60
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072dc:	f7fc fe56 	bl	8003f8c <HAL_GetTick>
 80072e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d12f      	bne.n	8007350 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f8:	2200      	movs	r2, #0
 80072fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f88e 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d022      	beq.n	8007350 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
 800732a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800732e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e6      	bne.n	800730a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e063      	b.n	8007418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b04      	cmp	r3, #4
 800735c:	d149      	bne.n	80073f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800735e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007366:	2200      	movs	r2, #0
 8007368:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f857 	bl	8007420 <UART_WaitOnFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d03c      	beq.n	80073f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	623b      	str	r3, [r7, #32]
   return(result);
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800738c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007396:	633b      	str	r3, [r7, #48]	; 0x30
 8007398:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e6      	bne.n	8007378 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ca:	61fa      	str	r2, [r7, #28]
 80073cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	69b9      	ldr	r1, [r7, #24]
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	617b      	str	r3, [r7, #20]
   return(result);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e012      	b.n	8007418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3758      	adds	r7, #88	; 0x58
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	4613      	mov	r3, r2
 800742e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007430:	e04f      	b.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d04b      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743a:	f7fc fda7 	bl	8003f8c <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	429a      	cmp	r2, r3
 8007448:	d302      	bcc.n	8007450 <UART_WaitOnFlagUntilTimeout+0x30>
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e04e      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d037      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b80      	cmp	r3, #128	; 0x80
 8007466:	d034      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b40      	cmp	r3, #64	; 0x40
 800746c:	d031      	beq.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b08      	cmp	r3, #8
 800747a:	d110      	bne.n	800749e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2208      	movs	r2, #8
 8007482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f838 	bl	80074fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2208      	movs	r2, #8
 800748e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e029      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ac:	d111      	bne.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 f81e 	bl	80074fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e00f      	b.n	80074f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4013      	ands	r3, r2
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d0a0      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b095      	sub	sp, #84	; 0x54
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007520:	643b      	str	r3, [r7, #64]	; 0x40
 8007522:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e6      	bne.n	8007502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	61fb      	str	r3, [r7, #28]
   return(result);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800755e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e3      	bne.n	8007534 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d118      	bne.n	80075a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	60bb      	str	r3, [r7, #8]
   return(result);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f023 0310 	bic.w	r3, r3, #16
 8007588:	647b      	str	r3, [r7, #68]	; 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007592:	61bb      	str	r3, [r7, #24]
 8007594:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	613b      	str	r3, [r7, #16]
   return(result);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075ba:	bf00      	nop
 80075bc:	3754      	adds	r7, #84	; 0x54
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f7ff fb1d 	bl	8006c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b088      	sub	sp, #32
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	60bb      	str	r3, [r7, #8]
   return(result);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	613b      	str	r3, [r7, #16]
   return(result);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e6      	bne.n	80075fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fae8 	bl	8006c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007640:	bf00      	nop
 8007642:	3720      	adds	r7, #32
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007692:	2b01      	cmp	r3, #1
 8007694:	d101      	bne.n	800769a <HAL_UARTEx_DisableFifoMode+0x16>
 8007696:	2302      	movs	r3, #2
 8007698:	e027      	b.n	80076ea <HAL_UARTEx_DisableFifoMode+0x66>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2224      	movs	r2, #36	; 0x24
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0201 	bic.w	r2, r2, #1
 80076c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80076c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800770a:	2302      	movs	r3, #2
 800770c:	e02d      	b.n	800776a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2224      	movs	r2, #36	; 0x24
 800771a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0201 	bic.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f850 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007782:	2b01      	cmp	r3, #1
 8007784:	d101      	bne.n	800778a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007786:	2302      	movs	r3, #2
 8007788:	e02d      	b.n	80077e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2224      	movs	r2, #36	; 0x24
 8007796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 0201 	bic.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f812 	bl	80077f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
	...

080077f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d108      	bne.n	8007812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007810:	e031      	b.n	8007876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007812:	2308      	movs	r3, #8
 8007814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007816:	2308      	movs	r3, #8
 8007818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	0e5b      	lsrs	r3, r3, #25
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	0f5b      	lsrs	r3, r3, #29
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800783a:	7bbb      	ldrb	r3, [r7, #14]
 800783c:	7b3a      	ldrb	r2, [r7, #12]
 800783e:	4911      	ldr	r1, [pc, #68]	; (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 8007840:	5c8a      	ldrb	r2, [r1, r2]
 8007842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007846:	7b3a      	ldrb	r2, [r7, #12]
 8007848:	490f      	ldr	r1, [pc, #60]	; (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 800784a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800784c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	7b7a      	ldrb	r2, [r7, #13]
 800785c:	4909      	ldr	r1, [pc, #36]	; (8007884 <UARTEx_SetNbDataToProcess+0x94>)
 800785e:	5c8a      	ldrb	r2, [r1, r2]
 8007860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007864:	7b7a      	ldrb	r2, [r7, #13]
 8007866:	4908      	ldr	r1, [pc, #32]	; (8007888 <UARTEx_SetNbDataToProcess+0x98>)
 8007868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800786a:	fb93 f3f2 	sdiv	r3, r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007876:	bf00      	nop
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	0800b668 	.word	0x0800b668
 8007888:	0800b670 	.word	0x0800b670

0800788c <__errno>:
 800788c:	4b01      	ldr	r3, [pc, #4]	; (8007894 <__errno+0x8>)
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	200009e4 	.word	0x200009e4

08007898 <__libc_init_array>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	4d0d      	ldr	r5, [pc, #52]	; (80078d0 <__libc_init_array+0x38>)
 800789c:	4c0d      	ldr	r4, [pc, #52]	; (80078d4 <__libc_init_array+0x3c>)
 800789e:	1b64      	subs	r4, r4, r5
 80078a0:	10a4      	asrs	r4, r4, #2
 80078a2:	2600      	movs	r6, #0
 80078a4:	42a6      	cmp	r6, r4
 80078a6:	d109      	bne.n	80078bc <__libc_init_array+0x24>
 80078a8:	4d0b      	ldr	r5, [pc, #44]	; (80078d8 <__libc_init_array+0x40>)
 80078aa:	4c0c      	ldr	r4, [pc, #48]	; (80078dc <__libc_init_array+0x44>)
 80078ac:	f001 fa1c 	bl	8008ce8 <_init>
 80078b0:	1b64      	subs	r4, r4, r5
 80078b2:	10a4      	asrs	r4, r4, #2
 80078b4:	2600      	movs	r6, #0
 80078b6:	42a6      	cmp	r6, r4
 80078b8:	d105      	bne.n	80078c6 <__libc_init_array+0x2e>
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c0:	4798      	blx	r3
 80078c2:	3601      	adds	r6, #1
 80078c4:	e7ee      	b.n	80078a4 <__libc_init_array+0xc>
 80078c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ca:	4798      	blx	r3
 80078cc:	3601      	adds	r6, #1
 80078ce:	e7f2      	b.n	80078b6 <__libc_init_array+0x1e>
 80078d0:	0800b718 	.word	0x0800b718
 80078d4:	0800b718 	.word	0x0800b718
 80078d8:	0800b718 	.word	0x0800b718
 80078dc:	0800b71c 	.word	0x0800b71c

080078e0 <memcpy>:
 80078e0:	440a      	add	r2, r1
 80078e2:	4291      	cmp	r1, r2
 80078e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078e8:	d100      	bne.n	80078ec <memcpy+0xc>
 80078ea:	4770      	bx	lr
 80078ec:	b510      	push	{r4, lr}
 80078ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078f6:	4291      	cmp	r1, r2
 80078f8:	d1f9      	bne.n	80078ee <memcpy+0xe>
 80078fa:	bd10      	pop	{r4, pc}

080078fc <memset>:
 80078fc:	4402      	add	r2, r0
 80078fe:	4603      	mov	r3, r0
 8007900:	4293      	cmp	r3, r2
 8007902:	d100      	bne.n	8007906 <memset+0xa>
 8007904:	4770      	bx	lr
 8007906:	f803 1b01 	strb.w	r1, [r3], #1
 800790a:	e7f9      	b.n	8007900 <memset+0x4>

0800790c <iprintf>:
 800790c:	b40f      	push	{r0, r1, r2, r3}
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <iprintf+0x2c>)
 8007910:	b513      	push	{r0, r1, r4, lr}
 8007912:	681c      	ldr	r4, [r3, #0]
 8007914:	b124      	cbz	r4, 8007920 <iprintf+0x14>
 8007916:	69a3      	ldr	r3, [r4, #24]
 8007918:	b913      	cbnz	r3, 8007920 <iprintf+0x14>
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fa94 	bl	8007e48 <__sinit>
 8007920:	ab05      	add	r3, sp, #20
 8007922:	9a04      	ldr	r2, [sp, #16]
 8007924:	68a1      	ldr	r1, [r4, #8]
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fdc1 	bl	80084b0 <_vfiprintf_r>
 800792e:	b002      	add	sp, #8
 8007930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007934:	b004      	add	sp, #16
 8007936:	4770      	bx	lr
 8007938:	200009e4 	.word	0x200009e4

0800793c <putchar>:
 800793c:	4b09      	ldr	r3, [pc, #36]	; (8007964 <putchar+0x28>)
 800793e:	b513      	push	{r0, r1, r4, lr}
 8007940:	681c      	ldr	r4, [r3, #0]
 8007942:	4601      	mov	r1, r0
 8007944:	b134      	cbz	r4, 8007954 <putchar+0x18>
 8007946:	69a3      	ldr	r3, [r4, #24]
 8007948:	b923      	cbnz	r3, 8007954 <putchar+0x18>
 800794a:	9001      	str	r0, [sp, #4]
 800794c:	4620      	mov	r0, r4
 800794e:	f000 fa7b 	bl	8007e48 <__sinit>
 8007952:	9901      	ldr	r1, [sp, #4]
 8007954:	68a2      	ldr	r2, [r4, #8]
 8007956:	4620      	mov	r0, r4
 8007958:	b002      	add	sp, #8
 800795a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795e:	f001 b86b 	b.w	8008a38 <_putc_r>
 8007962:	bf00      	nop
 8007964:	200009e4 	.word	0x200009e4

08007968 <_puts_r>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	460e      	mov	r6, r1
 800796c:	4605      	mov	r5, r0
 800796e:	b118      	cbz	r0, 8007978 <_puts_r+0x10>
 8007970:	6983      	ldr	r3, [r0, #24]
 8007972:	b90b      	cbnz	r3, 8007978 <_puts_r+0x10>
 8007974:	f000 fa68 	bl	8007e48 <__sinit>
 8007978:	69ab      	ldr	r3, [r5, #24]
 800797a:	68ac      	ldr	r4, [r5, #8]
 800797c:	b913      	cbnz	r3, 8007984 <_puts_r+0x1c>
 800797e:	4628      	mov	r0, r5
 8007980:	f000 fa62 	bl	8007e48 <__sinit>
 8007984:	4b2c      	ldr	r3, [pc, #176]	; (8007a38 <_puts_r+0xd0>)
 8007986:	429c      	cmp	r4, r3
 8007988:	d120      	bne.n	80079cc <_puts_r+0x64>
 800798a:	686c      	ldr	r4, [r5, #4]
 800798c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800798e:	07db      	lsls	r3, r3, #31
 8007990:	d405      	bmi.n	800799e <_puts_r+0x36>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	0598      	lsls	r0, r3, #22
 8007996:	d402      	bmi.n	800799e <_puts_r+0x36>
 8007998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800799a:	f000 faf3 	bl	8007f84 <__retarget_lock_acquire_recursive>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	0719      	lsls	r1, r3, #28
 80079a2:	d51d      	bpl.n	80079e0 <_puts_r+0x78>
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	b1db      	cbz	r3, 80079e0 <_puts_r+0x78>
 80079a8:	3e01      	subs	r6, #1
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079b0:	3b01      	subs	r3, #1
 80079b2:	60a3      	str	r3, [r4, #8]
 80079b4:	bb39      	cbnz	r1, 8007a06 <_puts_r+0x9e>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da38      	bge.n	8007a2c <_puts_r+0xc4>
 80079ba:	4622      	mov	r2, r4
 80079bc:	210a      	movs	r1, #10
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 f868 	bl	8007a94 <__swbuf_r>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d011      	beq.n	80079ec <_puts_r+0x84>
 80079c8:	250a      	movs	r5, #10
 80079ca:	e011      	b.n	80079f0 <_puts_r+0x88>
 80079cc:	4b1b      	ldr	r3, [pc, #108]	; (8007a3c <_puts_r+0xd4>)
 80079ce:	429c      	cmp	r4, r3
 80079d0:	d101      	bne.n	80079d6 <_puts_r+0x6e>
 80079d2:	68ac      	ldr	r4, [r5, #8]
 80079d4:	e7da      	b.n	800798c <_puts_r+0x24>
 80079d6:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <_puts_r+0xd8>)
 80079d8:	429c      	cmp	r4, r3
 80079da:	bf08      	it	eq
 80079dc:	68ec      	ldreq	r4, [r5, #12]
 80079de:	e7d5      	b.n	800798c <_puts_r+0x24>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4628      	mov	r0, r5
 80079e4:	f000 f8a8 	bl	8007b38 <__swsetup_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d0dd      	beq.n	80079a8 <_puts_r+0x40>
 80079ec:	f04f 35ff 	mov.w	r5, #4294967295
 80079f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079f2:	07da      	lsls	r2, r3, #31
 80079f4:	d405      	bmi.n	8007a02 <_puts_r+0x9a>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	059b      	lsls	r3, r3, #22
 80079fa:	d402      	bmi.n	8007a02 <_puts_r+0x9a>
 80079fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079fe:	f000 fac2 	bl	8007f86 <__retarget_lock_release_recursive>
 8007a02:	4628      	mov	r0, r5
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da04      	bge.n	8007a14 <_puts_r+0xac>
 8007a0a:	69a2      	ldr	r2, [r4, #24]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	dc06      	bgt.n	8007a1e <_puts_r+0xb6>
 8007a10:	290a      	cmp	r1, #10
 8007a12:	d004      	beq.n	8007a1e <_puts_r+0xb6>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	6022      	str	r2, [r4, #0]
 8007a1a:	7019      	strb	r1, [r3, #0]
 8007a1c:	e7c5      	b.n	80079aa <_puts_r+0x42>
 8007a1e:	4622      	mov	r2, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f837 	bl	8007a94 <__swbuf_r>
 8007a26:	3001      	adds	r0, #1
 8007a28:	d1bf      	bne.n	80079aa <_puts_r+0x42>
 8007a2a:	e7df      	b.n	80079ec <_puts_r+0x84>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	250a      	movs	r5, #10
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	6022      	str	r2, [r4, #0]
 8007a34:	701d      	strb	r5, [r3, #0]
 8007a36:	e7db      	b.n	80079f0 <_puts_r+0x88>
 8007a38:	0800b69c 	.word	0x0800b69c
 8007a3c:	0800b6bc 	.word	0x0800b6bc
 8007a40:	0800b67c 	.word	0x0800b67c

08007a44 <puts>:
 8007a44:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <puts+0xc>)
 8007a46:	4601      	mov	r1, r0
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	f7ff bf8d 	b.w	8007968 <_puts_r>
 8007a4e:	bf00      	nop
 8007a50:	200009e4 	.word	0x200009e4

08007a54 <siprintf>:
 8007a54:	b40e      	push	{r1, r2, r3}
 8007a56:	b500      	push	{lr}
 8007a58:	b09c      	sub	sp, #112	; 0x70
 8007a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a5c:	9002      	str	r0, [sp, #8]
 8007a5e:	9006      	str	r0, [sp, #24]
 8007a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a64:	4809      	ldr	r0, [pc, #36]	; (8007a8c <siprintf+0x38>)
 8007a66:	9107      	str	r1, [sp, #28]
 8007a68:	9104      	str	r1, [sp, #16]
 8007a6a:	4909      	ldr	r1, [pc, #36]	; (8007a90 <siprintf+0x3c>)
 8007a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a70:	9105      	str	r1, [sp, #20]
 8007a72:	6800      	ldr	r0, [r0, #0]
 8007a74:	9301      	str	r3, [sp, #4]
 8007a76:	a902      	add	r1, sp, #8
 8007a78:	f000 fbf0 	bl	800825c <_svfiprintf_r>
 8007a7c:	9b02      	ldr	r3, [sp, #8]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	b01c      	add	sp, #112	; 0x70
 8007a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a88:	b003      	add	sp, #12
 8007a8a:	4770      	bx	lr
 8007a8c:	200009e4 	.word	0x200009e4
 8007a90:	ffff0208 	.word	0xffff0208

08007a94 <__swbuf_r>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	460e      	mov	r6, r1
 8007a98:	4614      	mov	r4, r2
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	b118      	cbz	r0, 8007aa6 <__swbuf_r+0x12>
 8007a9e:	6983      	ldr	r3, [r0, #24]
 8007aa0:	b90b      	cbnz	r3, 8007aa6 <__swbuf_r+0x12>
 8007aa2:	f000 f9d1 	bl	8007e48 <__sinit>
 8007aa6:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <__swbuf_r+0x98>)
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	d12b      	bne.n	8007b04 <__swbuf_r+0x70>
 8007aac:	686c      	ldr	r4, [r5, #4]
 8007aae:	69a3      	ldr	r3, [r4, #24]
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	071a      	lsls	r2, r3, #28
 8007ab6:	d52f      	bpl.n	8007b18 <__swbuf_r+0x84>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	b36b      	cbz	r3, 8007b18 <__swbuf_r+0x84>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	6820      	ldr	r0, [r4, #0]
 8007ac0:	1ac0      	subs	r0, r0, r3
 8007ac2:	6963      	ldr	r3, [r4, #20]
 8007ac4:	b2f6      	uxtb	r6, r6
 8007ac6:	4283      	cmp	r3, r0
 8007ac8:	4637      	mov	r7, r6
 8007aca:	dc04      	bgt.n	8007ad6 <__swbuf_r+0x42>
 8007acc:	4621      	mov	r1, r4
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f000 f926 	bl	8007d20 <_fflush_r>
 8007ad4:	bb30      	cbnz	r0, 8007b24 <__swbuf_r+0x90>
 8007ad6:	68a3      	ldr	r3, [r4, #8]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	60a3      	str	r3, [r4, #8]
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	6022      	str	r2, [r4, #0]
 8007ae2:	701e      	strb	r6, [r3, #0]
 8007ae4:	6963      	ldr	r3, [r4, #20]
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	4283      	cmp	r3, r0
 8007aea:	d004      	beq.n	8007af6 <__swbuf_r+0x62>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	07db      	lsls	r3, r3, #31
 8007af0:	d506      	bpl.n	8007b00 <__swbuf_r+0x6c>
 8007af2:	2e0a      	cmp	r6, #10
 8007af4:	d104      	bne.n	8007b00 <__swbuf_r+0x6c>
 8007af6:	4621      	mov	r1, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 f911 	bl	8007d20 <_fflush_r>
 8007afe:	b988      	cbnz	r0, 8007b24 <__swbuf_r+0x90>
 8007b00:	4638      	mov	r0, r7
 8007b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <__swbuf_r+0x9c>)
 8007b06:	429c      	cmp	r4, r3
 8007b08:	d101      	bne.n	8007b0e <__swbuf_r+0x7a>
 8007b0a:	68ac      	ldr	r4, [r5, #8]
 8007b0c:	e7cf      	b.n	8007aae <__swbuf_r+0x1a>
 8007b0e:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <__swbuf_r+0xa0>)
 8007b10:	429c      	cmp	r4, r3
 8007b12:	bf08      	it	eq
 8007b14:	68ec      	ldreq	r4, [r5, #12]
 8007b16:	e7ca      	b.n	8007aae <__swbuf_r+0x1a>
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f80c 	bl	8007b38 <__swsetup_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d0cb      	beq.n	8007abc <__swbuf_r+0x28>
 8007b24:	f04f 37ff 	mov.w	r7, #4294967295
 8007b28:	e7ea      	b.n	8007b00 <__swbuf_r+0x6c>
 8007b2a:	bf00      	nop
 8007b2c:	0800b69c 	.word	0x0800b69c
 8007b30:	0800b6bc 	.word	0x0800b6bc
 8007b34:	0800b67c 	.word	0x0800b67c

08007b38 <__swsetup_r>:
 8007b38:	4b32      	ldr	r3, [pc, #200]	; (8007c04 <__swsetup_r+0xcc>)
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	681d      	ldr	r5, [r3, #0]
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	b125      	cbz	r5, 8007b4e <__swsetup_r+0x16>
 8007b44:	69ab      	ldr	r3, [r5, #24]
 8007b46:	b913      	cbnz	r3, 8007b4e <__swsetup_r+0x16>
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f000 f97d 	bl	8007e48 <__sinit>
 8007b4e:	4b2e      	ldr	r3, [pc, #184]	; (8007c08 <__swsetup_r+0xd0>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	d10f      	bne.n	8007b74 <__swsetup_r+0x3c>
 8007b54:	686c      	ldr	r4, [r5, #4]
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b5c:	0719      	lsls	r1, r3, #28
 8007b5e:	d42c      	bmi.n	8007bba <__swsetup_r+0x82>
 8007b60:	06dd      	lsls	r5, r3, #27
 8007b62:	d411      	bmi.n	8007b88 <__swsetup_r+0x50>
 8007b64:	2309      	movs	r3, #9
 8007b66:	6033      	str	r3, [r6, #0]
 8007b68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b72:	e03e      	b.n	8007bf2 <__swsetup_r+0xba>
 8007b74:	4b25      	ldr	r3, [pc, #148]	; (8007c0c <__swsetup_r+0xd4>)
 8007b76:	429c      	cmp	r4, r3
 8007b78:	d101      	bne.n	8007b7e <__swsetup_r+0x46>
 8007b7a:	68ac      	ldr	r4, [r5, #8]
 8007b7c:	e7eb      	b.n	8007b56 <__swsetup_r+0x1e>
 8007b7e:	4b24      	ldr	r3, [pc, #144]	; (8007c10 <__swsetup_r+0xd8>)
 8007b80:	429c      	cmp	r4, r3
 8007b82:	bf08      	it	eq
 8007b84:	68ec      	ldreq	r4, [r5, #12]
 8007b86:	e7e6      	b.n	8007b56 <__swsetup_r+0x1e>
 8007b88:	0758      	lsls	r0, r3, #29
 8007b8a:	d512      	bpl.n	8007bb2 <__swsetup_r+0x7a>
 8007b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b8e:	b141      	cbz	r1, 8007ba2 <__swsetup_r+0x6a>
 8007b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b94:	4299      	cmp	r1, r3
 8007b96:	d002      	beq.n	8007b9e <__swsetup_r+0x66>
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f000 fa59 	bl	8008050 <_free_r>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	2300      	movs	r3, #0
 8007bac:	6063      	str	r3, [r4, #4]
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f043 0308 	orr.w	r3, r3, #8
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	b94b      	cbnz	r3, 8007bd2 <__swsetup_r+0x9a>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc8:	d003      	beq.n	8007bd2 <__swsetup_r+0x9a>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f000 f9ff 	bl	8007fd0 <__smakebuf_r>
 8007bd2:	89a0      	ldrh	r0, [r4, #12]
 8007bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bd8:	f010 0301 	ands.w	r3, r0, #1
 8007bdc:	d00a      	beq.n	8007bf4 <__swsetup_r+0xbc>
 8007bde:	2300      	movs	r3, #0
 8007be0:	60a3      	str	r3, [r4, #8]
 8007be2:	6963      	ldr	r3, [r4, #20]
 8007be4:	425b      	negs	r3, r3
 8007be6:	61a3      	str	r3, [r4, #24]
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	b943      	cbnz	r3, 8007bfe <__swsetup_r+0xc6>
 8007bec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bf0:	d1ba      	bne.n	8007b68 <__swsetup_r+0x30>
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	0781      	lsls	r1, r0, #30
 8007bf6:	bf58      	it	pl
 8007bf8:	6963      	ldrpl	r3, [r4, #20]
 8007bfa:	60a3      	str	r3, [r4, #8]
 8007bfc:	e7f4      	b.n	8007be8 <__swsetup_r+0xb0>
 8007bfe:	2000      	movs	r0, #0
 8007c00:	e7f7      	b.n	8007bf2 <__swsetup_r+0xba>
 8007c02:	bf00      	nop
 8007c04:	200009e4 	.word	0x200009e4
 8007c08:	0800b69c 	.word	0x0800b69c
 8007c0c:	0800b6bc 	.word	0x0800b6bc
 8007c10:	0800b67c 	.word	0x0800b67c

08007c14 <__sflush_r>:
 8007c14:	898a      	ldrh	r2, [r1, #12]
 8007c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	0710      	lsls	r0, r2, #28
 8007c1e:	460c      	mov	r4, r1
 8007c20:	d458      	bmi.n	8007cd4 <__sflush_r+0xc0>
 8007c22:	684b      	ldr	r3, [r1, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	dc05      	bgt.n	8007c34 <__sflush_r+0x20>
 8007c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	dc02      	bgt.n	8007c34 <__sflush_r+0x20>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c36:	2e00      	cmp	r6, #0
 8007c38:	d0f9      	beq.n	8007c2e <__sflush_r+0x1a>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c40:	682f      	ldr	r7, [r5, #0]
 8007c42:	602b      	str	r3, [r5, #0]
 8007c44:	d032      	beq.n	8007cac <__sflush_r+0x98>
 8007c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	075a      	lsls	r2, r3, #29
 8007c4c:	d505      	bpl.n	8007c5a <__sflush_r+0x46>
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	1ac0      	subs	r0, r0, r3
 8007c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c54:	b10b      	cbz	r3, 8007c5a <__sflush_r+0x46>
 8007c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c58:	1ac0      	subs	r0, r0, r3
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c60:	6a21      	ldr	r1, [r4, #32]
 8007c62:	4628      	mov	r0, r5
 8007c64:	47b0      	blx	r6
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	d106      	bne.n	8007c7a <__sflush_r+0x66>
 8007c6c:	6829      	ldr	r1, [r5, #0]
 8007c6e:	291d      	cmp	r1, #29
 8007c70:	d82c      	bhi.n	8007ccc <__sflush_r+0xb8>
 8007c72:	4a2a      	ldr	r2, [pc, #168]	; (8007d1c <__sflush_r+0x108>)
 8007c74:	40ca      	lsrs	r2, r1
 8007c76:	07d6      	lsls	r6, r2, #31
 8007c78:	d528      	bpl.n	8007ccc <__sflush_r+0xb8>
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	6062      	str	r2, [r4, #4]
 8007c7e:	04d9      	lsls	r1, r3, #19
 8007c80:	6922      	ldr	r2, [r4, #16]
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	d504      	bpl.n	8007c90 <__sflush_r+0x7c>
 8007c86:	1c42      	adds	r2, r0, #1
 8007c88:	d101      	bne.n	8007c8e <__sflush_r+0x7a>
 8007c8a:	682b      	ldr	r3, [r5, #0]
 8007c8c:	b903      	cbnz	r3, 8007c90 <__sflush_r+0x7c>
 8007c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8007c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c92:	602f      	str	r7, [r5, #0]
 8007c94:	2900      	cmp	r1, #0
 8007c96:	d0ca      	beq.n	8007c2e <__sflush_r+0x1a>
 8007c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	d002      	beq.n	8007ca6 <__sflush_r+0x92>
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f000 f9d5 	bl	8008050 <_free_r>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8007caa:	e7c1      	b.n	8007c30 <__sflush_r+0x1c>
 8007cac:	6a21      	ldr	r1, [r4, #32]
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b0      	blx	r6
 8007cb4:	1c41      	adds	r1, r0, #1
 8007cb6:	d1c7      	bne.n	8007c48 <__sflush_r+0x34>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0c4      	beq.n	8007c48 <__sflush_r+0x34>
 8007cbe:	2b1d      	cmp	r3, #29
 8007cc0:	d001      	beq.n	8007cc6 <__sflush_r+0xb2>
 8007cc2:	2b16      	cmp	r3, #22
 8007cc4:	d101      	bne.n	8007cca <__sflush_r+0xb6>
 8007cc6:	602f      	str	r7, [r5, #0]
 8007cc8:	e7b1      	b.n	8007c2e <__sflush_r+0x1a>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd0:	81a3      	strh	r3, [r4, #12]
 8007cd2:	e7ad      	b.n	8007c30 <__sflush_r+0x1c>
 8007cd4:	690f      	ldr	r7, [r1, #16]
 8007cd6:	2f00      	cmp	r7, #0
 8007cd8:	d0a9      	beq.n	8007c2e <__sflush_r+0x1a>
 8007cda:	0793      	lsls	r3, r2, #30
 8007cdc:	680e      	ldr	r6, [r1, #0]
 8007cde:	bf08      	it	eq
 8007ce0:	694b      	ldreq	r3, [r1, #20]
 8007ce2:	600f      	str	r7, [r1, #0]
 8007ce4:	bf18      	it	ne
 8007ce6:	2300      	movne	r3, #0
 8007ce8:	eba6 0807 	sub.w	r8, r6, r7
 8007cec:	608b      	str	r3, [r1, #8]
 8007cee:	f1b8 0f00 	cmp.w	r8, #0
 8007cf2:	dd9c      	ble.n	8007c2e <__sflush_r+0x1a>
 8007cf4:	6a21      	ldr	r1, [r4, #32]
 8007cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cf8:	4643      	mov	r3, r8
 8007cfa:	463a      	mov	r2, r7
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b0      	blx	r6
 8007d00:	2800      	cmp	r0, #0
 8007d02:	dc06      	bgt.n	8007d12 <__sflush_r+0xfe>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e78e      	b.n	8007c30 <__sflush_r+0x1c>
 8007d12:	4407      	add	r7, r0
 8007d14:	eba8 0800 	sub.w	r8, r8, r0
 8007d18:	e7e9      	b.n	8007cee <__sflush_r+0xda>
 8007d1a:	bf00      	nop
 8007d1c:	20400001 	.word	0x20400001

08007d20 <_fflush_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	690b      	ldr	r3, [r1, #16]
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	b913      	cbnz	r3, 8007d30 <_fflush_r+0x10>
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	b118      	cbz	r0, 8007d3a <_fflush_r+0x1a>
 8007d32:	6983      	ldr	r3, [r0, #24]
 8007d34:	b90b      	cbnz	r3, 8007d3a <_fflush_r+0x1a>
 8007d36:	f000 f887 	bl	8007e48 <__sinit>
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <_fflush_r+0x6c>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	d11b      	bne.n	8007d78 <_fflush_r+0x58>
 8007d40:	686c      	ldr	r4, [r5, #4]
 8007d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0ef      	beq.n	8007d2a <_fflush_r+0xa>
 8007d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d4c:	07d0      	lsls	r0, r2, #31
 8007d4e:	d404      	bmi.n	8007d5a <_fflush_r+0x3a>
 8007d50:	0599      	lsls	r1, r3, #22
 8007d52:	d402      	bmi.n	8007d5a <_fflush_r+0x3a>
 8007d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d56:	f000 f915 	bl	8007f84 <__retarget_lock_acquire_recursive>
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	f7ff ff59 	bl	8007c14 <__sflush_r>
 8007d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d64:	07da      	lsls	r2, r3, #31
 8007d66:	4605      	mov	r5, r0
 8007d68:	d4e0      	bmi.n	8007d2c <_fflush_r+0xc>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	059b      	lsls	r3, r3, #22
 8007d6e:	d4dd      	bmi.n	8007d2c <_fflush_r+0xc>
 8007d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d72:	f000 f908 	bl	8007f86 <__retarget_lock_release_recursive>
 8007d76:	e7d9      	b.n	8007d2c <_fflush_r+0xc>
 8007d78:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <_fflush_r+0x70>)
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	d101      	bne.n	8007d82 <_fflush_r+0x62>
 8007d7e:	68ac      	ldr	r4, [r5, #8]
 8007d80:	e7df      	b.n	8007d42 <_fflush_r+0x22>
 8007d82:	4b04      	ldr	r3, [pc, #16]	; (8007d94 <_fflush_r+0x74>)
 8007d84:	429c      	cmp	r4, r3
 8007d86:	bf08      	it	eq
 8007d88:	68ec      	ldreq	r4, [r5, #12]
 8007d8a:	e7da      	b.n	8007d42 <_fflush_r+0x22>
 8007d8c:	0800b69c 	.word	0x0800b69c
 8007d90:	0800b6bc 	.word	0x0800b6bc
 8007d94:	0800b67c 	.word	0x0800b67c

08007d98 <std>:
 8007d98:	2300      	movs	r3, #0
 8007d9a:	b510      	push	{r4, lr}
 8007d9c:	4604      	mov	r4, r0
 8007d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007da6:	6083      	str	r3, [r0, #8]
 8007da8:	8181      	strh	r1, [r0, #12]
 8007daa:	6643      	str	r3, [r0, #100]	; 0x64
 8007dac:	81c2      	strh	r2, [r0, #14]
 8007dae:	6183      	str	r3, [r0, #24]
 8007db0:	4619      	mov	r1, r3
 8007db2:	2208      	movs	r2, #8
 8007db4:	305c      	adds	r0, #92	; 0x5c
 8007db6:	f7ff fda1 	bl	80078fc <memset>
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <std+0x38>)
 8007dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dbe:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <std+0x3c>)
 8007dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <std+0x40>)
 8007dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <std+0x44>)
 8007dc8:	6224      	str	r4, [r4, #32]
 8007dca:	6323      	str	r3, [r4, #48]	; 0x30
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	bf00      	nop
 8007dd0:	08008ae9 	.word	0x08008ae9
 8007dd4:	08008b0b 	.word	0x08008b0b
 8007dd8:	08008b43 	.word	0x08008b43
 8007ddc:	08008b67 	.word	0x08008b67

08007de0 <_cleanup_r>:
 8007de0:	4901      	ldr	r1, [pc, #4]	; (8007de8 <_cleanup_r+0x8>)
 8007de2:	f000 b8af 	b.w	8007f44 <_fwalk_reent>
 8007de6:	bf00      	nop
 8007de8:	08007d21 	.word	0x08007d21

08007dec <__sfmoreglue>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	1e4a      	subs	r2, r1, #1
 8007df0:	2568      	movs	r5, #104	; 0x68
 8007df2:	4355      	muls	r5, r2
 8007df4:	460e      	mov	r6, r1
 8007df6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dfa:	f000 f979 	bl	80080f0 <_malloc_r>
 8007dfe:	4604      	mov	r4, r0
 8007e00:	b140      	cbz	r0, 8007e14 <__sfmoreglue+0x28>
 8007e02:	2100      	movs	r1, #0
 8007e04:	e9c0 1600 	strd	r1, r6, [r0]
 8007e08:	300c      	adds	r0, #12
 8007e0a:	60a0      	str	r0, [r4, #8]
 8007e0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e10:	f7ff fd74 	bl	80078fc <memset>
 8007e14:	4620      	mov	r0, r4
 8007e16:	bd70      	pop	{r4, r5, r6, pc}

08007e18 <__sfp_lock_acquire>:
 8007e18:	4801      	ldr	r0, [pc, #4]	; (8007e20 <__sfp_lock_acquire+0x8>)
 8007e1a:	f000 b8b3 	b.w	8007f84 <__retarget_lock_acquire_recursive>
 8007e1e:	bf00      	nop
 8007e20:	20000c78 	.word	0x20000c78

08007e24 <__sfp_lock_release>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__sfp_lock_release+0x8>)
 8007e26:	f000 b8ae 	b.w	8007f86 <__retarget_lock_release_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	20000c78 	.word	0x20000c78

08007e30 <__sinit_lock_acquire>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__sinit_lock_acquire+0x8>)
 8007e32:	f000 b8a7 	b.w	8007f84 <__retarget_lock_acquire_recursive>
 8007e36:	bf00      	nop
 8007e38:	20000c73 	.word	0x20000c73

08007e3c <__sinit_lock_release>:
 8007e3c:	4801      	ldr	r0, [pc, #4]	; (8007e44 <__sinit_lock_release+0x8>)
 8007e3e:	f000 b8a2 	b.w	8007f86 <__retarget_lock_release_recursive>
 8007e42:	bf00      	nop
 8007e44:	20000c73 	.word	0x20000c73

08007e48 <__sinit>:
 8007e48:	b510      	push	{r4, lr}
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	f7ff fff0 	bl	8007e30 <__sinit_lock_acquire>
 8007e50:	69a3      	ldr	r3, [r4, #24]
 8007e52:	b11b      	cbz	r3, 8007e5c <__sinit+0x14>
 8007e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e58:	f7ff bff0 	b.w	8007e3c <__sinit_lock_release>
 8007e5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e60:	6523      	str	r3, [r4, #80]	; 0x50
 8007e62:	4b13      	ldr	r3, [pc, #76]	; (8007eb0 <__sinit+0x68>)
 8007e64:	4a13      	ldr	r2, [pc, #76]	; (8007eb4 <__sinit+0x6c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	bf04      	itt	eq
 8007e6e:	2301      	moveq	r3, #1
 8007e70:	61a3      	streq	r3, [r4, #24]
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 f820 	bl	8007eb8 <__sfp>
 8007e78:	6060      	str	r0, [r4, #4]
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 f81c 	bl	8007eb8 <__sfp>
 8007e80:	60a0      	str	r0, [r4, #8]
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f818 	bl	8007eb8 <__sfp>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	60e0      	str	r0, [r4, #12]
 8007e8c:	2104      	movs	r1, #4
 8007e8e:	6860      	ldr	r0, [r4, #4]
 8007e90:	f7ff ff82 	bl	8007d98 <std>
 8007e94:	68a0      	ldr	r0, [r4, #8]
 8007e96:	2201      	movs	r2, #1
 8007e98:	2109      	movs	r1, #9
 8007e9a:	f7ff ff7d 	bl	8007d98 <std>
 8007e9e:	68e0      	ldr	r0, [r4, #12]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	2112      	movs	r1, #18
 8007ea4:	f7ff ff78 	bl	8007d98 <std>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	61a3      	str	r3, [r4, #24]
 8007eac:	e7d2      	b.n	8007e54 <__sinit+0xc>
 8007eae:	bf00      	nop
 8007eb0:	0800b678 	.word	0x0800b678
 8007eb4:	08007de1 	.word	0x08007de1

08007eb8 <__sfp>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	4607      	mov	r7, r0
 8007ebc:	f7ff ffac 	bl	8007e18 <__sfp_lock_acquire>
 8007ec0:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <__sfp+0x84>)
 8007ec2:	681e      	ldr	r6, [r3, #0]
 8007ec4:	69b3      	ldr	r3, [r6, #24]
 8007ec6:	b913      	cbnz	r3, 8007ece <__sfp+0x16>
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7ff ffbd 	bl	8007e48 <__sinit>
 8007ece:	3648      	adds	r6, #72	; 0x48
 8007ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	d503      	bpl.n	8007ee0 <__sfp+0x28>
 8007ed8:	6833      	ldr	r3, [r6, #0]
 8007eda:	b30b      	cbz	r3, 8007f20 <__sfp+0x68>
 8007edc:	6836      	ldr	r6, [r6, #0]
 8007ede:	e7f7      	b.n	8007ed0 <__sfp+0x18>
 8007ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ee4:	b9d5      	cbnz	r5, 8007f1c <__sfp+0x64>
 8007ee6:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <__sfp+0x88>)
 8007ee8:	60e3      	str	r3, [r4, #12]
 8007eea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007eee:	6665      	str	r5, [r4, #100]	; 0x64
 8007ef0:	f000 f847 	bl	8007f82 <__retarget_lock_init_recursive>
 8007ef4:	f7ff ff96 	bl	8007e24 <__sfp_lock_release>
 8007ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f00:	6025      	str	r5, [r4, #0]
 8007f02:	61a5      	str	r5, [r4, #24]
 8007f04:	2208      	movs	r2, #8
 8007f06:	4629      	mov	r1, r5
 8007f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f0c:	f7ff fcf6 	bl	80078fc <memset>
 8007f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f18:	4620      	mov	r0, r4
 8007f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f1c:	3468      	adds	r4, #104	; 0x68
 8007f1e:	e7d9      	b.n	8007ed4 <__sfp+0x1c>
 8007f20:	2104      	movs	r1, #4
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7ff ff62 	bl	8007dec <__sfmoreglue>
 8007f28:	4604      	mov	r4, r0
 8007f2a:	6030      	str	r0, [r6, #0]
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d1d5      	bne.n	8007edc <__sfp+0x24>
 8007f30:	f7ff ff78 	bl	8007e24 <__sfp_lock_release>
 8007f34:	230c      	movs	r3, #12
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	e7ee      	b.n	8007f18 <__sfp+0x60>
 8007f3a:	bf00      	nop
 8007f3c:	0800b678 	.word	0x0800b678
 8007f40:	ffff0001 	.word	0xffff0001

08007f44 <_fwalk_reent>:
 8007f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f48:	4606      	mov	r6, r0
 8007f4a:	4688      	mov	r8, r1
 8007f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f50:	2700      	movs	r7, #0
 8007f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f56:	f1b9 0901 	subs.w	r9, r9, #1
 8007f5a:	d505      	bpl.n	8007f68 <_fwalk_reent+0x24>
 8007f5c:	6824      	ldr	r4, [r4, #0]
 8007f5e:	2c00      	cmp	r4, #0
 8007f60:	d1f7      	bne.n	8007f52 <_fwalk_reent+0xe>
 8007f62:	4638      	mov	r0, r7
 8007f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f68:	89ab      	ldrh	r3, [r5, #12]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d907      	bls.n	8007f7e <_fwalk_reent+0x3a>
 8007f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f72:	3301      	adds	r3, #1
 8007f74:	d003      	beq.n	8007f7e <_fwalk_reent+0x3a>
 8007f76:	4629      	mov	r1, r5
 8007f78:	4630      	mov	r0, r6
 8007f7a:	47c0      	blx	r8
 8007f7c:	4307      	orrs	r7, r0
 8007f7e:	3568      	adds	r5, #104	; 0x68
 8007f80:	e7e9      	b.n	8007f56 <_fwalk_reent+0x12>

08007f82 <__retarget_lock_init_recursive>:
 8007f82:	4770      	bx	lr

08007f84 <__retarget_lock_acquire_recursive>:
 8007f84:	4770      	bx	lr

08007f86 <__retarget_lock_release_recursive>:
 8007f86:	4770      	bx	lr

08007f88 <__swhatbuf_r>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	460e      	mov	r6, r1
 8007f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f90:	2900      	cmp	r1, #0
 8007f92:	b096      	sub	sp, #88	; 0x58
 8007f94:	4614      	mov	r4, r2
 8007f96:	461d      	mov	r5, r3
 8007f98:	da07      	bge.n	8007faa <__swhatbuf_r+0x22>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	89b3      	ldrh	r3, [r6, #12]
 8007fa0:	061a      	lsls	r2, r3, #24
 8007fa2:	d410      	bmi.n	8007fc6 <__swhatbuf_r+0x3e>
 8007fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa8:	e00e      	b.n	8007fc8 <__swhatbuf_r+0x40>
 8007faa:	466a      	mov	r2, sp
 8007fac:	f000 fe02 	bl	8008bb4 <_fstat_r>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	dbf2      	blt.n	8007f9a <__swhatbuf_r+0x12>
 8007fb4:	9a01      	ldr	r2, [sp, #4]
 8007fb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fbe:	425a      	negs	r2, r3
 8007fc0:	415a      	adcs	r2, r3
 8007fc2:	602a      	str	r2, [r5, #0]
 8007fc4:	e7ee      	b.n	8007fa4 <__swhatbuf_r+0x1c>
 8007fc6:	2340      	movs	r3, #64	; 0x40
 8007fc8:	2000      	movs	r0, #0
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	b016      	add	sp, #88	; 0x58
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__smakebuf_r>:
 8007fd0:	898b      	ldrh	r3, [r1, #12]
 8007fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fd4:	079d      	lsls	r5, r3, #30
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	d507      	bpl.n	8007fec <__smakebuf_r+0x1c>
 8007fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	6163      	str	r3, [r4, #20]
 8007fe8:	b002      	add	sp, #8
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	ab01      	add	r3, sp, #4
 8007fee:	466a      	mov	r2, sp
 8007ff0:	f7ff ffca 	bl	8007f88 <__swhatbuf_r>
 8007ff4:	9900      	ldr	r1, [sp, #0]
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f000 f879 	bl	80080f0 <_malloc_r>
 8007ffe:	b948      	cbnz	r0, 8008014 <__smakebuf_r+0x44>
 8008000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008004:	059a      	lsls	r2, r3, #22
 8008006:	d4ef      	bmi.n	8007fe8 <__smakebuf_r+0x18>
 8008008:	f023 0303 	bic.w	r3, r3, #3
 800800c:	f043 0302 	orr.w	r3, r3, #2
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	e7e3      	b.n	8007fdc <__smakebuf_r+0xc>
 8008014:	4b0d      	ldr	r3, [pc, #52]	; (800804c <__smakebuf_r+0x7c>)
 8008016:	62b3      	str	r3, [r6, #40]	; 0x28
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	6020      	str	r0, [r4, #0]
 800801c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	9b00      	ldr	r3, [sp, #0]
 8008024:	6163      	str	r3, [r4, #20]
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	6120      	str	r0, [r4, #16]
 800802a:	b15b      	cbz	r3, 8008044 <__smakebuf_r+0x74>
 800802c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008030:	4630      	mov	r0, r6
 8008032:	f000 fdd1 	bl	8008bd8 <_isatty_r>
 8008036:	b128      	cbz	r0, 8008044 <__smakebuf_r+0x74>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f023 0303 	bic.w	r3, r3, #3
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	89a0      	ldrh	r0, [r4, #12]
 8008046:	4305      	orrs	r5, r0
 8008048:	81a5      	strh	r5, [r4, #12]
 800804a:	e7cd      	b.n	8007fe8 <__smakebuf_r+0x18>
 800804c:	08007de1 	.word	0x08007de1

08008050 <_free_r>:
 8008050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008052:	2900      	cmp	r1, #0
 8008054:	d048      	beq.n	80080e8 <_free_r+0x98>
 8008056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805a:	9001      	str	r0, [sp, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f1a1 0404 	sub.w	r4, r1, #4
 8008062:	bfb8      	it	lt
 8008064:	18e4      	addlt	r4, r4, r3
 8008066:	f000 fdf3 	bl	8008c50 <__malloc_lock>
 800806a:	4a20      	ldr	r2, [pc, #128]	; (80080ec <_free_r+0x9c>)
 800806c:	9801      	ldr	r0, [sp, #4]
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	4615      	mov	r5, r2
 8008072:	b933      	cbnz	r3, 8008082 <_free_r+0x32>
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	6014      	str	r4, [r2, #0]
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800807e:	f000 bded 	b.w	8008c5c <__malloc_unlock>
 8008082:	42a3      	cmp	r3, r4
 8008084:	d90b      	bls.n	800809e <_free_r+0x4e>
 8008086:	6821      	ldr	r1, [r4, #0]
 8008088:	1862      	adds	r2, r4, r1
 800808a:	4293      	cmp	r3, r2
 800808c:	bf04      	itt	eq
 800808e:	681a      	ldreq	r2, [r3, #0]
 8008090:	685b      	ldreq	r3, [r3, #4]
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	bf04      	itt	eq
 8008096:	1852      	addeq	r2, r2, r1
 8008098:	6022      	streq	r2, [r4, #0]
 800809a:	602c      	str	r4, [r5, #0]
 800809c:	e7ec      	b.n	8008078 <_free_r+0x28>
 800809e:	461a      	mov	r2, r3
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	b10b      	cbz	r3, 80080a8 <_free_r+0x58>
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d9fa      	bls.n	800809e <_free_r+0x4e>
 80080a8:	6811      	ldr	r1, [r2, #0]
 80080aa:	1855      	adds	r5, r2, r1
 80080ac:	42a5      	cmp	r5, r4
 80080ae:	d10b      	bne.n	80080c8 <_free_r+0x78>
 80080b0:	6824      	ldr	r4, [r4, #0]
 80080b2:	4421      	add	r1, r4
 80080b4:	1854      	adds	r4, r2, r1
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	d1dd      	bne.n	8008078 <_free_r+0x28>
 80080bc:	681c      	ldr	r4, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	6053      	str	r3, [r2, #4]
 80080c2:	4421      	add	r1, r4
 80080c4:	6011      	str	r1, [r2, #0]
 80080c6:	e7d7      	b.n	8008078 <_free_r+0x28>
 80080c8:	d902      	bls.n	80080d0 <_free_r+0x80>
 80080ca:	230c      	movs	r3, #12
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	e7d3      	b.n	8008078 <_free_r+0x28>
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	1961      	adds	r1, r4, r5
 80080d4:	428b      	cmp	r3, r1
 80080d6:	bf04      	itt	eq
 80080d8:	6819      	ldreq	r1, [r3, #0]
 80080da:	685b      	ldreq	r3, [r3, #4]
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	bf04      	itt	eq
 80080e0:	1949      	addeq	r1, r1, r5
 80080e2:	6021      	streq	r1, [r4, #0]
 80080e4:	6054      	str	r4, [r2, #4]
 80080e6:	e7c7      	b.n	8008078 <_free_r+0x28>
 80080e8:	b003      	add	sp, #12
 80080ea:	bd30      	pop	{r4, r5, pc}
 80080ec:	20000ae4 	.word	0x20000ae4

080080f0 <_malloc_r>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	1ccd      	adds	r5, r1, #3
 80080f4:	f025 0503 	bic.w	r5, r5, #3
 80080f8:	3508      	adds	r5, #8
 80080fa:	2d0c      	cmp	r5, #12
 80080fc:	bf38      	it	cc
 80080fe:	250c      	movcc	r5, #12
 8008100:	2d00      	cmp	r5, #0
 8008102:	4606      	mov	r6, r0
 8008104:	db01      	blt.n	800810a <_malloc_r+0x1a>
 8008106:	42a9      	cmp	r1, r5
 8008108:	d903      	bls.n	8008112 <_malloc_r+0x22>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	2000      	movs	r0, #0
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008112:	f000 fd9d 	bl	8008c50 <__malloc_lock>
 8008116:	4921      	ldr	r1, [pc, #132]	; (800819c <_malloc_r+0xac>)
 8008118:	680a      	ldr	r2, [r1, #0]
 800811a:	4614      	mov	r4, r2
 800811c:	b99c      	cbnz	r4, 8008146 <_malloc_r+0x56>
 800811e:	4f20      	ldr	r7, [pc, #128]	; (80081a0 <_malloc_r+0xb0>)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	b923      	cbnz	r3, 800812e <_malloc_r+0x3e>
 8008124:	4621      	mov	r1, r4
 8008126:	4630      	mov	r0, r6
 8008128:	f000 fcce 	bl	8008ac8 <_sbrk_r>
 800812c:	6038      	str	r0, [r7, #0]
 800812e:	4629      	mov	r1, r5
 8008130:	4630      	mov	r0, r6
 8008132:	f000 fcc9 	bl	8008ac8 <_sbrk_r>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d123      	bne.n	8008182 <_malloc_r+0x92>
 800813a:	230c      	movs	r3, #12
 800813c:	6033      	str	r3, [r6, #0]
 800813e:	4630      	mov	r0, r6
 8008140:	f000 fd8c 	bl	8008c5c <__malloc_unlock>
 8008144:	e7e3      	b.n	800810e <_malloc_r+0x1e>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	1b5b      	subs	r3, r3, r5
 800814a:	d417      	bmi.n	800817c <_malloc_r+0x8c>
 800814c:	2b0b      	cmp	r3, #11
 800814e:	d903      	bls.n	8008158 <_malloc_r+0x68>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	441c      	add	r4, r3
 8008154:	6025      	str	r5, [r4, #0]
 8008156:	e004      	b.n	8008162 <_malloc_r+0x72>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	42a2      	cmp	r2, r4
 800815c:	bf0c      	ite	eq
 800815e:	600b      	streq	r3, [r1, #0]
 8008160:	6053      	strne	r3, [r2, #4]
 8008162:	4630      	mov	r0, r6
 8008164:	f000 fd7a 	bl	8008c5c <__malloc_unlock>
 8008168:	f104 000b 	add.w	r0, r4, #11
 800816c:	1d23      	adds	r3, r4, #4
 800816e:	f020 0007 	bic.w	r0, r0, #7
 8008172:	1ac2      	subs	r2, r0, r3
 8008174:	d0cc      	beq.n	8008110 <_malloc_r+0x20>
 8008176:	1a1b      	subs	r3, r3, r0
 8008178:	50a3      	str	r3, [r4, r2]
 800817a:	e7c9      	b.n	8008110 <_malloc_r+0x20>
 800817c:	4622      	mov	r2, r4
 800817e:	6864      	ldr	r4, [r4, #4]
 8008180:	e7cc      	b.n	800811c <_malloc_r+0x2c>
 8008182:	1cc4      	adds	r4, r0, #3
 8008184:	f024 0403 	bic.w	r4, r4, #3
 8008188:	42a0      	cmp	r0, r4
 800818a:	d0e3      	beq.n	8008154 <_malloc_r+0x64>
 800818c:	1a21      	subs	r1, r4, r0
 800818e:	4630      	mov	r0, r6
 8008190:	f000 fc9a 	bl	8008ac8 <_sbrk_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d1dd      	bne.n	8008154 <_malloc_r+0x64>
 8008198:	e7cf      	b.n	800813a <_malloc_r+0x4a>
 800819a:	bf00      	nop
 800819c:	20000ae4 	.word	0x20000ae4
 80081a0:	20000ae8 	.word	0x20000ae8

080081a4 <__ssputs_r>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	688e      	ldr	r6, [r1, #8]
 80081aa:	429e      	cmp	r6, r3
 80081ac:	4682      	mov	sl, r0
 80081ae:	460c      	mov	r4, r1
 80081b0:	4690      	mov	r8, r2
 80081b2:	461f      	mov	r7, r3
 80081b4:	d838      	bhi.n	8008228 <__ssputs_r+0x84>
 80081b6:	898a      	ldrh	r2, [r1, #12]
 80081b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081bc:	d032      	beq.n	8008224 <__ssputs_r+0x80>
 80081be:	6825      	ldr	r5, [r4, #0]
 80081c0:	6909      	ldr	r1, [r1, #16]
 80081c2:	eba5 0901 	sub.w	r9, r5, r1
 80081c6:	6965      	ldr	r5, [r4, #20]
 80081c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081d0:	3301      	adds	r3, #1
 80081d2:	444b      	add	r3, r9
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	429d      	cmp	r5, r3
 80081d8:	bf38      	it	cc
 80081da:	461d      	movcc	r5, r3
 80081dc:	0553      	lsls	r3, r2, #21
 80081de:	d531      	bpl.n	8008244 <__ssputs_r+0xa0>
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7ff ff85 	bl	80080f0 <_malloc_r>
 80081e6:	4606      	mov	r6, r0
 80081e8:	b950      	cbnz	r0, 8008200 <__ssputs_r+0x5c>
 80081ea:	230c      	movs	r3, #12
 80081ec:	f8ca 3000 	str.w	r3, [sl]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008200:	6921      	ldr	r1, [r4, #16]
 8008202:	464a      	mov	r2, r9
 8008204:	f7ff fb6c 	bl	80078e0 <memcpy>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	6126      	str	r6, [r4, #16]
 8008216:	6165      	str	r5, [r4, #20]
 8008218:	444e      	add	r6, r9
 800821a:	eba5 0509 	sub.w	r5, r5, r9
 800821e:	6026      	str	r6, [r4, #0]
 8008220:	60a5      	str	r5, [r4, #8]
 8008222:	463e      	mov	r6, r7
 8008224:	42be      	cmp	r6, r7
 8008226:	d900      	bls.n	800822a <__ssputs_r+0x86>
 8008228:	463e      	mov	r6, r7
 800822a:	4632      	mov	r2, r6
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	4641      	mov	r1, r8
 8008230:	f000 fcf4 	bl	8008c1c <memmove>
 8008234:	68a3      	ldr	r3, [r4, #8]
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	1b9b      	subs	r3, r3, r6
 800823a:	4432      	add	r2, r6
 800823c:	60a3      	str	r3, [r4, #8]
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	2000      	movs	r0, #0
 8008242:	e7db      	b.n	80081fc <__ssputs_r+0x58>
 8008244:	462a      	mov	r2, r5
 8008246:	f000 fd0f 	bl	8008c68 <_realloc_r>
 800824a:	4606      	mov	r6, r0
 800824c:	2800      	cmp	r0, #0
 800824e:	d1e1      	bne.n	8008214 <__ssputs_r+0x70>
 8008250:	6921      	ldr	r1, [r4, #16]
 8008252:	4650      	mov	r0, sl
 8008254:	f7ff fefc 	bl	8008050 <_free_r>
 8008258:	e7c7      	b.n	80081ea <__ssputs_r+0x46>
	...

0800825c <_svfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4698      	mov	r8, r3
 8008262:	898b      	ldrh	r3, [r1, #12]
 8008264:	061b      	lsls	r3, r3, #24
 8008266:	b09d      	sub	sp, #116	; 0x74
 8008268:	4607      	mov	r7, r0
 800826a:	460d      	mov	r5, r1
 800826c:	4614      	mov	r4, r2
 800826e:	d50e      	bpl.n	800828e <_svfiprintf_r+0x32>
 8008270:	690b      	ldr	r3, [r1, #16]
 8008272:	b963      	cbnz	r3, 800828e <_svfiprintf_r+0x32>
 8008274:	2140      	movs	r1, #64	; 0x40
 8008276:	f7ff ff3b 	bl	80080f0 <_malloc_r>
 800827a:	6028      	str	r0, [r5, #0]
 800827c:	6128      	str	r0, [r5, #16]
 800827e:	b920      	cbnz	r0, 800828a <_svfiprintf_r+0x2e>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e0d1      	b.n	800842e <_svfiprintf_r+0x1d2>
 800828a:	2340      	movs	r3, #64	; 0x40
 800828c:	616b      	str	r3, [r5, #20]
 800828e:	2300      	movs	r3, #0
 8008290:	9309      	str	r3, [sp, #36]	; 0x24
 8008292:	2320      	movs	r3, #32
 8008294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008298:	f8cd 800c 	str.w	r8, [sp, #12]
 800829c:	2330      	movs	r3, #48	; 0x30
 800829e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008448 <_svfiprintf_r+0x1ec>
 80082a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082a6:	f04f 0901 	mov.w	r9, #1
 80082aa:	4623      	mov	r3, r4
 80082ac:	469a      	mov	sl, r3
 80082ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b2:	b10a      	cbz	r2, 80082b8 <_svfiprintf_r+0x5c>
 80082b4:	2a25      	cmp	r2, #37	; 0x25
 80082b6:	d1f9      	bne.n	80082ac <_svfiprintf_r+0x50>
 80082b8:	ebba 0b04 	subs.w	fp, sl, r4
 80082bc:	d00b      	beq.n	80082d6 <_svfiprintf_r+0x7a>
 80082be:	465b      	mov	r3, fp
 80082c0:	4622      	mov	r2, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff ff6d 	bl	80081a4 <__ssputs_r>
 80082ca:	3001      	adds	r0, #1
 80082cc:	f000 80aa 	beq.w	8008424 <_svfiprintf_r+0x1c8>
 80082d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d2:	445a      	add	r2, fp
 80082d4:	9209      	str	r2, [sp, #36]	; 0x24
 80082d6:	f89a 3000 	ldrb.w	r3, [sl]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80a2 	beq.w	8008424 <_svfiprintf_r+0x1c8>
 80082e0:	2300      	movs	r3, #0
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295
 80082e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ea:	f10a 0a01 	add.w	sl, sl, #1
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	9307      	str	r3, [sp, #28]
 80082f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f6:	931a      	str	r3, [sp, #104]	; 0x68
 80082f8:	4654      	mov	r4, sl
 80082fa:	2205      	movs	r2, #5
 80082fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008300:	4851      	ldr	r0, [pc, #324]	; (8008448 <_svfiprintf_r+0x1ec>)
 8008302:	f7f7 ff8d 	bl	8000220 <memchr>
 8008306:	9a04      	ldr	r2, [sp, #16]
 8008308:	b9d8      	cbnz	r0, 8008342 <_svfiprintf_r+0xe6>
 800830a:	06d0      	lsls	r0, r2, #27
 800830c:	bf44      	itt	mi
 800830e:	2320      	movmi	r3, #32
 8008310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008314:	0711      	lsls	r1, r2, #28
 8008316:	bf44      	itt	mi
 8008318:	232b      	movmi	r3, #43	; 0x2b
 800831a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831e:	f89a 3000 	ldrb.w	r3, [sl]
 8008322:	2b2a      	cmp	r3, #42	; 0x2a
 8008324:	d015      	beq.n	8008352 <_svfiprintf_r+0xf6>
 8008326:	9a07      	ldr	r2, [sp, #28]
 8008328:	4654      	mov	r4, sl
 800832a:	2000      	movs	r0, #0
 800832c:	f04f 0c0a 	mov.w	ip, #10
 8008330:	4621      	mov	r1, r4
 8008332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008336:	3b30      	subs	r3, #48	; 0x30
 8008338:	2b09      	cmp	r3, #9
 800833a:	d94e      	bls.n	80083da <_svfiprintf_r+0x17e>
 800833c:	b1b0      	cbz	r0, 800836c <_svfiprintf_r+0x110>
 800833e:	9207      	str	r2, [sp, #28]
 8008340:	e014      	b.n	800836c <_svfiprintf_r+0x110>
 8008342:	eba0 0308 	sub.w	r3, r0, r8
 8008346:	fa09 f303 	lsl.w	r3, r9, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	46a2      	mov	sl, r4
 8008350:	e7d2      	b.n	80082f8 <_svfiprintf_r+0x9c>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	1d19      	adds	r1, r3, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	9103      	str	r1, [sp, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfbb      	ittet	lt
 800835e:	425b      	neglt	r3, r3
 8008360:	f042 0202 	orrlt.w	r2, r2, #2
 8008364:	9307      	strge	r3, [sp, #28]
 8008366:	9307      	strlt	r3, [sp, #28]
 8008368:	bfb8      	it	lt
 800836a:	9204      	strlt	r2, [sp, #16]
 800836c:	7823      	ldrb	r3, [r4, #0]
 800836e:	2b2e      	cmp	r3, #46	; 0x2e
 8008370:	d10c      	bne.n	800838c <_svfiprintf_r+0x130>
 8008372:	7863      	ldrb	r3, [r4, #1]
 8008374:	2b2a      	cmp	r3, #42	; 0x2a
 8008376:	d135      	bne.n	80083e4 <_svfiprintf_r+0x188>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	1d1a      	adds	r2, r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	9203      	str	r2, [sp, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	bfb8      	it	lt
 8008384:	f04f 33ff 	movlt.w	r3, #4294967295
 8008388:	3402      	adds	r4, #2
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008458 <_svfiprintf_r+0x1fc>
 8008390:	7821      	ldrb	r1, [r4, #0]
 8008392:	2203      	movs	r2, #3
 8008394:	4650      	mov	r0, sl
 8008396:	f7f7 ff43 	bl	8000220 <memchr>
 800839a:	b140      	cbz	r0, 80083ae <_svfiprintf_r+0x152>
 800839c:	2340      	movs	r3, #64	; 0x40
 800839e:	eba0 000a 	sub.w	r0, r0, sl
 80083a2:	fa03 f000 	lsl.w	r0, r3, r0
 80083a6:	9b04      	ldr	r3, [sp, #16]
 80083a8:	4303      	orrs	r3, r0
 80083aa:	3401      	adds	r4, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	4826      	ldr	r0, [pc, #152]	; (800844c <_svfiprintf_r+0x1f0>)
 80083b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083b8:	2206      	movs	r2, #6
 80083ba:	f7f7 ff31 	bl	8000220 <memchr>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d038      	beq.n	8008434 <_svfiprintf_r+0x1d8>
 80083c2:	4b23      	ldr	r3, [pc, #140]	; (8008450 <_svfiprintf_r+0x1f4>)
 80083c4:	bb1b      	cbnz	r3, 800840e <_svfiprintf_r+0x1b2>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	3307      	adds	r3, #7
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	3308      	adds	r3, #8
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	4433      	add	r3, r6
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	e767      	b.n	80082aa <_svfiprintf_r+0x4e>
 80083da:	fb0c 3202 	mla	r2, ip, r2, r3
 80083de:	460c      	mov	r4, r1
 80083e0:	2001      	movs	r0, #1
 80083e2:	e7a5      	b.n	8008330 <_svfiprintf_r+0xd4>
 80083e4:	2300      	movs	r3, #0
 80083e6:	3401      	adds	r4, #1
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	4619      	mov	r1, r3
 80083ec:	f04f 0c0a 	mov.w	ip, #10
 80083f0:	4620      	mov	r0, r4
 80083f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f6:	3a30      	subs	r2, #48	; 0x30
 80083f8:	2a09      	cmp	r2, #9
 80083fa:	d903      	bls.n	8008404 <_svfiprintf_r+0x1a8>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0c5      	beq.n	800838c <_svfiprintf_r+0x130>
 8008400:	9105      	str	r1, [sp, #20]
 8008402:	e7c3      	b.n	800838c <_svfiprintf_r+0x130>
 8008404:	fb0c 2101 	mla	r1, ip, r1, r2
 8008408:	4604      	mov	r4, r0
 800840a:	2301      	movs	r3, #1
 800840c:	e7f0      	b.n	80083f0 <_svfiprintf_r+0x194>
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <_svfiprintf_r+0x1f8>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	4638      	mov	r0, r7
 800841a:	f3af 8000 	nop.w
 800841e:	1c42      	adds	r2, r0, #1
 8008420:	4606      	mov	r6, r0
 8008422:	d1d6      	bne.n	80083d2 <_svfiprintf_r+0x176>
 8008424:	89ab      	ldrh	r3, [r5, #12]
 8008426:	065b      	lsls	r3, r3, #25
 8008428:	f53f af2c 	bmi.w	8008284 <_svfiprintf_r+0x28>
 800842c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842e:	b01d      	add	sp, #116	; 0x74
 8008430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008434:	ab03      	add	r3, sp, #12
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	462a      	mov	r2, r5
 800843a:	4b06      	ldr	r3, [pc, #24]	; (8008454 <_svfiprintf_r+0x1f8>)
 800843c:	a904      	add	r1, sp, #16
 800843e:	4638      	mov	r0, r7
 8008440:	f000 f9d4 	bl	80087ec <_printf_i>
 8008444:	e7eb      	b.n	800841e <_svfiprintf_r+0x1c2>
 8008446:	bf00      	nop
 8008448:	0800b6dc 	.word	0x0800b6dc
 800844c:	0800b6e6 	.word	0x0800b6e6
 8008450:	00000000 	.word	0x00000000
 8008454:	080081a5 	.word	0x080081a5
 8008458:	0800b6e2 	.word	0x0800b6e2

0800845c <__sfputc_r>:
 800845c:	6893      	ldr	r3, [r2, #8]
 800845e:	3b01      	subs	r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	b410      	push	{r4}
 8008464:	6093      	str	r3, [r2, #8]
 8008466:	da08      	bge.n	800847a <__sfputc_r+0x1e>
 8008468:	6994      	ldr	r4, [r2, #24]
 800846a:	42a3      	cmp	r3, r4
 800846c:	db01      	blt.n	8008472 <__sfputc_r+0x16>
 800846e:	290a      	cmp	r1, #10
 8008470:	d103      	bne.n	800847a <__sfputc_r+0x1e>
 8008472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008476:	f7ff bb0d 	b.w	8007a94 <__swbuf_r>
 800847a:	6813      	ldr	r3, [r2, #0]
 800847c:	1c58      	adds	r0, r3, #1
 800847e:	6010      	str	r0, [r2, #0]
 8008480:	7019      	strb	r1, [r3, #0]
 8008482:	4608      	mov	r0, r1
 8008484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008488:	4770      	bx	lr

0800848a <__sfputs_r>:
 800848a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848c:	4606      	mov	r6, r0
 800848e:	460f      	mov	r7, r1
 8008490:	4614      	mov	r4, r2
 8008492:	18d5      	adds	r5, r2, r3
 8008494:	42ac      	cmp	r4, r5
 8008496:	d101      	bne.n	800849c <__sfputs_r+0x12>
 8008498:	2000      	movs	r0, #0
 800849a:	e007      	b.n	80084ac <__sfputs_r+0x22>
 800849c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a0:	463a      	mov	r2, r7
 80084a2:	4630      	mov	r0, r6
 80084a4:	f7ff ffda 	bl	800845c <__sfputc_r>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d1f3      	bne.n	8008494 <__sfputs_r+0xa>
 80084ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084b0 <_vfiprintf_r>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	460d      	mov	r5, r1
 80084b6:	b09d      	sub	sp, #116	; 0x74
 80084b8:	4614      	mov	r4, r2
 80084ba:	4698      	mov	r8, r3
 80084bc:	4606      	mov	r6, r0
 80084be:	b118      	cbz	r0, 80084c8 <_vfiprintf_r+0x18>
 80084c0:	6983      	ldr	r3, [r0, #24]
 80084c2:	b90b      	cbnz	r3, 80084c8 <_vfiprintf_r+0x18>
 80084c4:	f7ff fcc0 	bl	8007e48 <__sinit>
 80084c8:	4b89      	ldr	r3, [pc, #548]	; (80086f0 <_vfiprintf_r+0x240>)
 80084ca:	429d      	cmp	r5, r3
 80084cc:	d11b      	bne.n	8008506 <_vfiprintf_r+0x56>
 80084ce:	6875      	ldr	r5, [r6, #4]
 80084d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084d2:	07d9      	lsls	r1, r3, #31
 80084d4:	d405      	bmi.n	80084e2 <_vfiprintf_r+0x32>
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	059a      	lsls	r2, r3, #22
 80084da:	d402      	bmi.n	80084e2 <_vfiprintf_r+0x32>
 80084dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084de:	f7ff fd51 	bl	8007f84 <__retarget_lock_acquire_recursive>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	071b      	lsls	r3, r3, #28
 80084e6:	d501      	bpl.n	80084ec <_vfiprintf_r+0x3c>
 80084e8:	692b      	ldr	r3, [r5, #16]
 80084ea:	b9eb      	cbnz	r3, 8008528 <_vfiprintf_r+0x78>
 80084ec:	4629      	mov	r1, r5
 80084ee:	4630      	mov	r0, r6
 80084f0:	f7ff fb22 	bl	8007b38 <__swsetup_r>
 80084f4:	b1c0      	cbz	r0, 8008528 <_vfiprintf_r+0x78>
 80084f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f8:	07dc      	lsls	r4, r3, #31
 80084fa:	d50e      	bpl.n	800851a <_vfiprintf_r+0x6a>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b01d      	add	sp, #116	; 0x74
 8008502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008506:	4b7b      	ldr	r3, [pc, #492]	; (80086f4 <_vfiprintf_r+0x244>)
 8008508:	429d      	cmp	r5, r3
 800850a:	d101      	bne.n	8008510 <_vfiprintf_r+0x60>
 800850c:	68b5      	ldr	r5, [r6, #8]
 800850e:	e7df      	b.n	80084d0 <_vfiprintf_r+0x20>
 8008510:	4b79      	ldr	r3, [pc, #484]	; (80086f8 <_vfiprintf_r+0x248>)
 8008512:	429d      	cmp	r5, r3
 8008514:	bf08      	it	eq
 8008516:	68f5      	ldreq	r5, [r6, #12]
 8008518:	e7da      	b.n	80084d0 <_vfiprintf_r+0x20>
 800851a:	89ab      	ldrh	r3, [r5, #12]
 800851c:	0598      	lsls	r0, r3, #22
 800851e:	d4ed      	bmi.n	80084fc <_vfiprintf_r+0x4c>
 8008520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008522:	f7ff fd30 	bl	8007f86 <__retarget_lock_release_recursive>
 8008526:	e7e9      	b.n	80084fc <_vfiprintf_r+0x4c>
 8008528:	2300      	movs	r3, #0
 800852a:	9309      	str	r3, [sp, #36]	; 0x24
 800852c:	2320      	movs	r3, #32
 800852e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008532:	f8cd 800c 	str.w	r8, [sp, #12]
 8008536:	2330      	movs	r3, #48	; 0x30
 8008538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086fc <_vfiprintf_r+0x24c>
 800853c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008540:	f04f 0901 	mov.w	r9, #1
 8008544:	4623      	mov	r3, r4
 8008546:	469a      	mov	sl, r3
 8008548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800854c:	b10a      	cbz	r2, 8008552 <_vfiprintf_r+0xa2>
 800854e:	2a25      	cmp	r2, #37	; 0x25
 8008550:	d1f9      	bne.n	8008546 <_vfiprintf_r+0x96>
 8008552:	ebba 0b04 	subs.w	fp, sl, r4
 8008556:	d00b      	beq.n	8008570 <_vfiprintf_r+0xc0>
 8008558:	465b      	mov	r3, fp
 800855a:	4622      	mov	r2, r4
 800855c:	4629      	mov	r1, r5
 800855e:	4630      	mov	r0, r6
 8008560:	f7ff ff93 	bl	800848a <__sfputs_r>
 8008564:	3001      	adds	r0, #1
 8008566:	f000 80aa 	beq.w	80086be <_vfiprintf_r+0x20e>
 800856a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800856c:	445a      	add	r2, fp
 800856e:	9209      	str	r2, [sp, #36]	; 0x24
 8008570:	f89a 3000 	ldrb.w	r3, [sl]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 80a2 	beq.w	80086be <_vfiprintf_r+0x20e>
 800857a:	2300      	movs	r3, #0
 800857c:	f04f 32ff 	mov.w	r2, #4294967295
 8008580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008584:	f10a 0a01 	add.w	sl, sl, #1
 8008588:	9304      	str	r3, [sp, #16]
 800858a:	9307      	str	r3, [sp, #28]
 800858c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008590:	931a      	str	r3, [sp, #104]	; 0x68
 8008592:	4654      	mov	r4, sl
 8008594:	2205      	movs	r2, #5
 8008596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800859a:	4858      	ldr	r0, [pc, #352]	; (80086fc <_vfiprintf_r+0x24c>)
 800859c:	f7f7 fe40 	bl	8000220 <memchr>
 80085a0:	9a04      	ldr	r2, [sp, #16]
 80085a2:	b9d8      	cbnz	r0, 80085dc <_vfiprintf_r+0x12c>
 80085a4:	06d1      	lsls	r1, r2, #27
 80085a6:	bf44      	itt	mi
 80085a8:	2320      	movmi	r3, #32
 80085aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ae:	0713      	lsls	r3, r2, #28
 80085b0:	bf44      	itt	mi
 80085b2:	232b      	movmi	r3, #43	; 0x2b
 80085b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b8:	f89a 3000 	ldrb.w	r3, [sl]
 80085bc:	2b2a      	cmp	r3, #42	; 0x2a
 80085be:	d015      	beq.n	80085ec <_vfiprintf_r+0x13c>
 80085c0:	9a07      	ldr	r2, [sp, #28]
 80085c2:	4654      	mov	r4, sl
 80085c4:	2000      	movs	r0, #0
 80085c6:	f04f 0c0a 	mov.w	ip, #10
 80085ca:	4621      	mov	r1, r4
 80085cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d0:	3b30      	subs	r3, #48	; 0x30
 80085d2:	2b09      	cmp	r3, #9
 80085d4:	d94e      	bls.n	8008674 <_vfiprintf_r+0x1c4>
 80085d6:	b1b0      	cbz	r0, 8008606 <_vfiprintf_r+0x156>
 80085d8:	9207      	str	r2, [sp, #28]
 80085da:	e014      	b.n	8008606 <_vfiprintf_r+0x156>
 80085dc:	eba0 0308 	sub.w	r3, r0, r8
 80085e0:	fa09 f303 	lsl.w	r3, r9, r3
 80085e4:	4313      	orrs	r3, r2
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	46a2      	mov	sl, r4
 80085ea:	e7d2      	b.n	8008592 <_vfiprintf_r+0xe2>
 80085ec:	9b03      	ldr	r3, [sp, #12]
 80085ee:	1d19      	adds	r1, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	9103      	str	r1, [sp, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	bfbb      	ittet	lt
 80085f8:	425b      	neglt	r3, r3
 80085fa:	f042 0202 	orrlt.w	r2, r2, #2
 80085fe:	9307      	strge	r3, [sp, #28]
 8008600:	9307      	strlt	r3, [sp, #28]
 8008602:	bfb8      	it	lt
 8008604:	9204      	strlt	r2, [sp, #16]
 8008606:	7823      	ldrb	r3, [r4, #0]
 8008608:	2b2e      	cmp	r3, #46	; 0x2e
 800860a:	d10c      	bne.n	8008626 <_vfiprintf_r+0x176>
 800860c:	7863      	ldrb	r3, [r4, #1]
 800860e:	2b2a      	cmp	r3, #42	; 0x2a
 8008610:	d135      	bne.n	800867e <_vfiprintf_r+0x1ce>
 8008612:	9b03      	ldr	r3, [sp, #12]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	9203      	str	r2, [sp, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	bfb8      	it	lt
 800861e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008622:	3402      	adds	r4, #2
 8008624:	9305      	str	r3, [sp, #20]
 8008626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800870c <_vfiprintf_r+0x25c>
 800862a:	7821      	ldrb	r1, [r4, #0]
 800862c:	2203      	movs	r2, #3
 800862e:	4650      	mov	r0, sl
 8008630:	f7f7 fdf6 	bl	8000220 <memchr>
 8008634:	b140      	cbz	r0, 8008648 <_vfiprintf_r+0x198>
 8008636:	2340      	movs	r3, #64	; 0x40
 8008638:	eba0 000a 	sub.w	r0, r0, sl
 800863c:	fa03 f000 	lsl.w	r0, r3, r0
 8008640:	9b04      	ldr	r3, [sp, #16]
 8008642:	4303      	orrs	r3, r0
 8008644:	3401      	adds	r4, #1
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800864c:	482c      	ldr	r0, [pc, #176]	; (8008700 <_vfiprintf_r+0x250>)
 800864e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008652:	2206      	movs	r2, #6
 8008654:	f7f7 fde4 	bl	8000220 <memchr>
 8008658:	2800      	cmp	r0, #0
 800865a:	d03f      	beq.n	80086dc <_vfiprintf_r+0x22c>
 800865c:	4b29      	ldr	r3, [pc, #164]	; (8008704 <_vfiprintf_r+0x254>)
 800865e:	bb1b      	cbnz	r3, 80086a8 <_vfiprintf_r+0x1f8>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	3307      	adds	r3, #7
 8008664:	f023 0307 	bic.w	r3, r3, #7
 8008668:	3308      	adds	r3, #8
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800866e:	443b      	add	r3, r7
 8008670:	9309      	str	r3, [sp, #36]	; 0x24
 8008672:	e767      	b.n	8008544 <_vfiprintf_r+0x94>
 8008674:	fb0c 3202 	mla	r2, ip, r2, r3
 8008678:	460c      	mov	r4, r1
 800867a:	2001      	movs	r0, #1
 800867c:	e7a5      	b.n	80085ca <_vfiprintf_r+0x11a>
 800867e:	2300      	movs	r3, #0
 8008680:	3401      	adds	r4, #1
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	4619      	mov	r1, r3
 8008686:	f04f 0c0a 	mov.w	ip, #10
 800868a:	4620      	mov	r0, r4
 800868c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008690:	3a30      	subs	r2, #48	; 0x30
 8008692:	2a09      	cmp	r2, #9
 8008694:	d903      	bls.n	800869e <_vfiprintf_r+0x1ee>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0c5      	beq.n	8008626 <_vfiprintf_r+0x176>
 800869a:	9105      	str	r1, [sp, #20]
 800869c:	e7c3      	b.n	8008626 <_vfiprintf_r+0x176>
 800869e:	fb0c 2101 	mla	r1, ip, r1, r2
 80086a2:	4604      	mov	r4, r0
 80086a4:	2301      	movs	r3, #1
 80086a6:	e7f0      	b.n	800868a <_vfiprintf_r+0x1da>
 80086a8:	ab03      	add	r3, sp, #12
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	462a      	mov	r2, r5
 80086ae:	4b16      	ldr	r3, [pc, #88]	; (8008708 <_vfiprintf_r+0x258>)
 80086b0:	a904      	add	r1, sp, #16
 80086b2:	4630      	mov	r0, r6
 80086b4:	f3af 8000 	nop.w
 80086b8:	4607      	mov	r7, r0
 80086ba:	1c78      	adds	r0, r7, #1
 80086bc:	d1d6      	bne.n	800866c <_vfiprintf_r+0x1bc>
 80086be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086c0:	07d9      	lsls	r1, r3, #31
 80086c2:	d405      	bmi.n	80086d0 <_vfiprintf_r+0x220>
 80086c4:	89ab      	ldrh	r3, [r5, #12]
 80086c6:	059a      	lsls	r2, r3, #22
 80086c8:	d402      	bmi.n	80086d0 <_vfiprintf_r+0x220>
 80086ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086cc:	f7ff fc5b 	bl	8007f86 <__retarget_lock_release_recursive>
 80086d0:	89ab      	ldrh	r3, [r5, #12]
 80086d2:	065b      	lsls	r3, r3, #25
 80086d4:	f53f af12 	bmi.w	80084fc <_vfiprintf_r+0x4c>
 80086d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086da:	e711      	b.n	8008500 <_vfiprintf_r+0x50>
 80086dc:	ab03      	add	r3, sp, #12
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	462a      	mov	r2, r5
 80086e2:	4b09      	ldr	r3, [pc, #36]	; (8008708 <_vfiprintf_r+0x258>)
 80086e4:	a904      	add	r1, sp, #16
 80086e6:	4630      	mov	r0, r6
 80086e8:	f000 f880 	bl	80087ec <_printf_i>
 80086ec:	e7e4      	b.n	80086b8 <_vfiprintf_r+0x208>
 80086ee:	bf00      	nop
 80086f0:	0800b69c 	.word	0x0800b69c
 80086f4:	0800b6bc 	.word	0x0800b6bc
 80086f8:	0800b67c 	.word	0x0800b67c
 80086fc:	0800b6dc 	.word	0x0800b6dc
 8008700:	0800b6e6 	.word	0x0800b6e6
 8008704:	00000000 	.word	0x00000000
 8008708:	0800848b 	.word	0x0800848b
 800870c:	0800b6e2 	.word	0x0800b6e2

08008710 <_printf_common>:
 8008710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008714:	4616      	mov	r6, r2
 8008716:	4699      	mov	r9, r3
 8008718:	688a      	ldr	r2, [r1, #8]
 800871a:	690b      	ldr	r3, [r1, #16]
 800871c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008720:	4293      	cmp	r3, r2
 8008722:	bfb8      	it	lt
 8008724:	4613      	movlt	r3, r2
 8008726:	6033      	str	r3, [r6, #0]
 8008728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800872c:	4607      	mov	r7, r0
 800872e:	460c      	mov	r4, r1
 8008730:	b10a      	cbz	r2, 8008736 <_printf_common+0x26>
 8008732:	3301      	adds	r3, #1
 8008734:	6033      	str	r3, [r6, #0]
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	0699      	lsls	r1, r3, #26
 800873a:	bf42      	ittt	mi
 800873c:	6833      	ldrmi	r3, [r6, #0]
 800873e:	3302      	addmi	r3, #2
 8008740:	6033      	strmi	r3, [r6, #0]
 8008742:	6825      	ldr	r5, [r4, #0]
 8008744:	f015 0506 	ands.w	r5, r5, #6
 8008748:	d106      	bne.n	8008758 <_printf_common+0x48>
 800874a:	f104 0a19 	add.w	sl, r4, #25
 800874e:	68e3      	ldr	r3, [r4, #12]
 8008750:	6832      	ldr	r2, [r6, #0]
 8008752:	1a9b      	subs	r3, r3, r2
 8008754:	42ab      	cmp	r3, r5
 8008756:	dc26      	bgt.n	80087a6 <_printf_common+0x96>
 8008758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800875c:	1e13      	subs	r3, r2, #0
 800875e:	6822      	ldr	r2, [r4, #0]
 8008760:	bf18      	it	ne
 8008762:	2301      	movne	r3, #1
 8008764:	0692      	lsls	r2, r2, #26
 8008766:	d42b      	bmi.n	80087c0 <_printf_common+0xb0>
 8008768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800876c:	4649      	mov	r1, r9
 800876e:	4638      	mov	r0, r7
 8008770:	47c0      	blx	r8
 8008772:	3001      	adds	r0, #1
 8008774:	d01e      	beq.n	80087b4 <_printf_common+0xa4>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	68e5      	ldr	r5, [r4, #12]
 800877a:	6832      	ldr	r2, [r6, #0]
 800877c:	f003 0306 	and.w	r3, r3, #6
 8008780:	2b04      	cmp	r3, #4
 8008782:	bf08      	it	eq
 8008784:	1aad      	subeq	r5, r5, r2
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	6922      	ldr	r2, [r4, #16]
 800878a:	bf0c      	ite	eq
 800878c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008790:	2500      	movne	r5, #0
 8008792:	4293      	cmp	r3, r2
 8008794:	bfc4      	itt	gt
 8008796:	1a9b      	subgt	r3, r3, r2
 8008798:	18ed      	addgt	r5, r5, r3
 800879a:	2600      	movs	r6, #0
 800879c:	341a      	adds	r4, #26
 800879e:	42b5      	cmp	r5, r6
 80087a0:	d11a      	bne.n	80087d8 <_printf_common+0xc8>
 80087a2:	2000      	movs	r0, #0
 80087a4:	e008      	b.n	80087b8 <_printf_common+0xa8>
 80087a6:	2301      	movs	r3, #1
 80087a8:	4652      	mov	r2, sl
 80087aa:	4649      	mov	r1, r9
 80087ac:	4638      	mov	r0, r7
 80087ae:	47c0      	blx	r8
 80087b0:	3001      	adds	r0, #1
 80087b2:	d103      	bne.n	80087bc <_printf_common+0xac>
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087bc:	3501      	adds	r5, #1
 80087be:	e7c6      	b.n	800874e <_printf_common+0x3e>
 80087c0:	18e1      	adds	r1, r4, r3
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	2030      	movs	r0, #48	; 0x30
 80087c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087ca:	4422      	add	r2, r4
 80087cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087d4:	3302      	adds	r3, #2
 80087d6:	e7c7      	b.n	8008768 <_printf_common+0x58>
 80087d8:	2301      	movs	r3, #1
 80087da:	4622      	mov	r2, r4
 80087dc:	4649      	mov	r1, r9
 80087de:	4638      	mov	r0, r7
 80087e0:	47c0      	blx	r8
 80087e2:	3001      	adds	r0, #1
 80087e4:	d0e6      	beq.n	80087b4 <_printf_common+0xa4>
 80087e6:	3601      	adds	r6, #1
 80087e8:	e7d9      	b.n	800879e <_printf_common+0x8e>
	...

080087ec <_printf_i>:
 80087ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	460c      	mov	r4, r1
 80087f2:	4691      	mov	r9, r2
 80087f4:	7e27      	ldrb	r7, [r4, #24]
 80087f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80087f8:	2f78      	cmp	r7, #120	; 0x78
 80087fa:	4680      	mov	r8, r0
 80087fc:	469a      	mov	sl, r3
 80087fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008802:	d807      	bhi.n	8008814 <_printf_i+0x28>
 8008804:	2f62      	cmp	r7, #98	; 0x62
 8008806:	d80a      	bhi.n	800881e <_printf_i+0x32>
 8008808:	2f00      	cmp	r7, #0
 800880a:	f000 80d8 	beq.w	80089be <_printf_i+0x1d2>
 800880e:	2f58      	cmp	r7, #88	; 0x58
 8008810:	f000 80a3 	beq.w	800895a <_printf_i+0x16e>
 8008814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800881c:	e03a      	b.n	8008894 <_printf_i+0xa8>
 800881e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008822:	2b15      	cmp	r3, #21
 8008824:	d8f6      	bhi.n	8008814 <_printf_i+0x28>
 8008826:	a001      	add	r0, pc, #4	; (adr r0, 800882c <_printf_i+0x40>)
 8008828:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800882c:	08008885 	.word	0x08008885
 8008830:	08008899 	.word	0x08008899
 8008834:	08008815 	.word	0x08008815
 8008838:	08008815 	.word	0x08008815
 800883c:	08008815 	.word	0x08008815
 8008840:	08008815 	.word	0x08008815
 8008844:	08008899 	.word	0x08008899
 8008848:	08008815 	.word	0x08008815
 800884c:	08008815 	.word	0x08008815
 8008850:	08008815 	.word	0x08008815
 8008854:	08008815 	.word	0x08008815
 8008858:	080089a5 	.word	0x080089a5
 800885c:	080088c9 	.word	0x080088c9
 8008860:	08008987 	.word	0x08008987
 8008864:	08008815 	.word	0x08008815
 8008868:	08008815 	.word	0x08008815
 800886c:	080089c7 	.word	0x080089c7
 8008870:	08008815 	.word	0x08008815
 8008874:	080088c9 	.word	0x080088c9
 8008878:	08008815 	.word	0x08008815
 800887c:	08008815 	.word	0x08008815
 8008880:	0800898f 	.word	0x0800898f
 8008884:	680b      	ldr	r3, [r1, #0]
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	600a      	str	r2, [r1, #0]
 800888c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008894:	2301      	movs	r3, #1
 8008896:	e0a3      	b.n	80089e0 <_printf_i+0x1f4>
 8008898:	6825      	ldr	r5, [r4, #0]
 800889a:	6808      	ldr	r0, [r1, #0]
 800889c:	062e      	lsls	r6, r5, #24
 800889e:	f100 0304 	add.w	r3, r0, #4
 80088a2:	d50a      	bpl.n	80088ba <_printf_i+0xce>
 80088a4:	6805      	ldr	r5, [r0, #0]
 80088a6:	600b      	str	r3, [r1, #0]
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	da03      	bge.n	80088b4 <_printf_i+0xc8>
 80088ac:	232d      	movs	r3, #45	; 0x2d
 80088ae:	426d      	negs	r5, r5
 80088b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b4:	485e      	ldr	r0, [pc, #376]	; (8008a30 <_printf_i+0x244>)
 80088b6:	230a      	movs	r3, #10
 80088b8:	e019      	b.n	80088ee <_printf_i+0x102>
 80088ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80088be:	6805      	ldr	r5, [r0, #0]
 80088c0:	600b      	str	r3, [r1, #0]
 80088c2:	bf18      	it	ne
 80088c4:	b22d      	sxthne	r5, r5
 80088c6:	e7ef      	b.n	80088a8 <_printf_i+0xbc>
 80088c8:	680b      	ldr	r3, [r1, #0]
 80088ca:	6825      	ldr	r5, [r4, #0]
 80088cc:	1d18      	adds	r0, r3, #4
 80088ce:	6008      	str	r0, [r1, #0]
 80088d0:	0628      	lsls	r0, r5, #24
 80088d2:	d501      	bpl.n	80088d8 <_printf_i+0xec>
 80088d4:	681d      	ldr	r5, [r3, #0]
 80088d6:	e002      	b.n	80088de <_printf_i+0xf2>
 80088d8:	0669      	lsls	r1, r5, #25
 80088da:	d5fb      	bpl.n	80088d4 <_printf_i+0xe8>
 80088dc:	881d      	ldrh	r5, [r3, #0]
 80088de:	4854      	ldr	r0, [pc, #336]	; (8008a30 <_printf_i+0x244>)
 80088e0:	2f6f      	cmp	r7, #111	; 0x6f
 80088e2:	bf0c      	ite	eq
 80088e4:	2308      	moveq	r3, #8
 80088e6:	230a      	movne	r3, #10
 80088e8:	2100      	movs	r1, #0
 80088ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088ee:	6866      	ldr	r6, [r4, #4]
 80088f0:	60a6      	str	r6, [r4, #8]
 80088f2:	2e00      	cmp	r6, #0
 80088f4:	bfa2      	ittt	ge
 80088f6:	6821      	ldrge	r1, [r4, #0]
 80088f8:	f021 0104 	bicge.w	r1, r1, #4
 80088fc:	6021      	strge	r1, [r4, #0]
 80088fe:	b90d      	cbnz	r5, 8008904 <_printf_i+0x118>
 8008900:	2e00      	cmp	r6, #0
 8008902:	d04d      	beq.n	80089a0 <_printf_i+0x1b4>
 8008904:	4616      	mov	r6, r2
 8008906:	fbb5 f1f3 	udiv	r1, r5, r3
 800890a:	fb03 5711 	mls	r7, r3, r1, r5
 800890e:	5dc7      	ldrb	r7, [r0, r7]
 8008910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008914:	462f      	mov	r7, r5
 8008916:	42bb      	cmp	r3, r7
 8008918:	460d      	mov	r5, r1
 800891a:	d9f4      	bls.n	8008906 <_printf_i+0x11a>
 800891c:	2b08      	cmp	r3, #8
 800891e:	d10b      	bne.n	8008938 <_printf_i+0x14c>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	07df      	lsls	r7, r3, #31
 8008924:	d508      	bpl.n	8008938 <_printf_i+0x14c>
 8008926:	6923      	ldr	r3, [r4, #16]
 8008928:	6861      	ldr	r1, [r4, #4]
 800892a:	4299      	cmp	r1, r3
 800892c:	bfde      	ittt	le
 800892e:	2330      	movle	r3, #48	; 0x30
 8008930:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008934:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008938:	1b92      	subs	r2, r2, r6
 800893a:	6122      	str	r2, [r4, #16]
 800893c:	f8cd a000 	str.w	sl, [sp]
 8008940:	464b      	mov	r3, r9
 8008942:	aa03      	add	r2, sp, #12
 8008944:	4621      	mov	r1, r4
 8008946:	4640      	mov	r0, r8
 8008948:	f7ff fee2 	bl	8008710 <_printf_common>
 800894c:	3001      	adds	r0, #1
 800894e:	d14c      	bne.n	80089ea <_printf_i+0x1fe>
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	b004      	add	sp, #16
 8008956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895a:	4835      	ldr	r0, [pc, #212]	; (8008a30 <_printf_i+0x244>)
 800895c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	680e      	ldr	r6, [r1, #0]
 8008964:	061f      	lsls	r7, r3, #24
 8008966:	f856 5b04 	ldr.w	r5, [r6], #4
 800896a:	600e      	str	r6, [r1, #0]
 800896c:	d514      	bpl.n	8008998 <_printf_i+0x1ac>
 800896e:	07d9      	lsls	r1, r3, #31
 8008970:	bf44      	itt	mi
 8008972:	f043 0320 	orrmi.w	r3, r3, #32
 8008976:	6023      	strmi	r3, [r4, #0]
 8008978:	b91d      	cbnz	r5, 8008982 <_printf_i+0x196>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	f023 0320 	bic.w	r3, r3, #32
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	2310      	movs	r3, #16
 8008984:	e7b0      	b.n	80088e8 <_printf_i+0xfc>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	f043 0320 	orr.w	r3, r3, #32
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	2378      	movs	r3, #120	; 0x78
 8008990:	4828      	ldr	r0, [pc, #160]	; (8008a34 <_printf_i+0x248>)
 8008992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008996:	e7e3      	b.n	8008960 <_printf_i+0x174>
 8008998:	065e      	lsls	r6, r3, #25
 800899a:	bf48      	it	mi
 800899c:	b2ad      	uxthmi	r5, r5
 800899e:	e7e6      	b.n	800896e <_printf_i+0x182>
 80089a0:	4616      	mov	r6, r2
 80089a2:	e7bb      	b.n	800891c <_printf_i+0x130>
 80089a4:	680b      	ldr	r3, [r1, #0]
 80089a6:	6826      	ldr	r6, [r4, #0]
 80089a8:	6960      	ldr	r0, [r4, #20]
 80089aa:	1d1d      	adds	r5, r3, #4
 80089ac:	600d      	str	r5, [r1, #0]
 80089ae:	0635      	lsls	r5, r6, #24
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	d501      	bpl.n	80089b8 <_printf_i+0x1cc>
 80089b4:	6018      	str	r0, [r3, #0]
 80089b6:	e002      	b.n	80089be <_printf_i+0x1d2>
 80089b8:	0671      	lsls	r1, r6, #25
 80089ba:	d5fb      	bpl.n	80089b4 <_printf_i+0x1c8>
 80089bc:	8018      	strh	r0, [r3, #0]
 80089be:	2300      	movs	r3, #0
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	4616      	mov	r6, r2
 80089c4:	e7ba      	b.n	800893c <_printf_i+0x150>
 80089c6:	680b      	ldr	r3, [r1, #0]
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	600a      	str	r2, [r1, #0]
 80089cc:	681e      	ldr	r6, [r3, #0]
 80089ce:	6862      	ldr	r2, [r4, #4]
 80089d0:	2100      	movs	r1, #0
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7f7 fc24 	bl	8000220 <memchr>
 80089d8:	b108      	cbz	r0, 80089de <_printf_i+0x1f2>
 80089da:	1b80      	subs	r0, r0, r6
 80089dc:	6060      	str	r0, [r4, #4]
 80089de:	6863      	ldr	r3, [r4, #4]
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	2300      	movs	r3, #0
 80089e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e8:	e7a8      	b.n	800893c <_printf_i+0x150>
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	4632      	mov	r2, r6
 80089ee:	4649      	mov	r1, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	47d0      	blx	sl
 80089f4:	3001      	adds	r0, #1
 80089f6:	d0ab      	beq.n	8008950 <_printf_i+0x164>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	079b      	lsls	r3, r3, #30
 80089fc:	d413      	bmi.n	8008a26 <_printf_i+0x23a>
 80089fe:	68e0      	ldr	r0, [r4, #12]
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	4298      	cmp	r0, r3
 8008a04:	bfb8      	it	lt
 8008a06:	4618      	movlt	r0, r3
 8008a08:	e7a4      	b.n	8008954 <_printf_i+0x168>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4632      	mov	r2, r6
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4640      	mov	r0, r8
 8008a12:	47d0      	blx	sl
 8008a14:	3001      	adds	r0, #1
 8008a16:	d09b      	beq.n	8008950 <_printf_i+0x164>
 8008a18:	3501      	adds	r5, #1
 8008a1a:	68e3      	ldr	r3, [r4, #12]
 8008a1c:	9903      	ldr	r1, [sp, #12]
 8008a1e:	1a5b      	subs	r3, r3, r1
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dcf2      	bgt.n	8008a0a <_printf_i+0x21e>
 8008a24:	e7eb      	b.n	80089fe <_printf_i+0x212>
 8008a26:	2500      	movs	r5, #0
 8008a28:	f104 0619 	add.w	r6, r4, #25
 8008a2c:	e7f5      	b.n	8008a1a <_printf_i+0x22e>
 8008a2e:	bf00      	nop
 8008a30:	0800b6ed 	.word	0x0800b6ed
 8008a34:	0800b6fe 	.word	0x0800b6fe

08008a38 <_putc_r>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	460d      	mov	r5, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	4606      	mov	r6, r0
 8008a40:	b118      	cbz	r0, 8008a4a <_putc_r+0x12>
 8008a42:	6983      	ldr	r3, [r0, #24]
 8008a44:	b90b      	cbnz	r3, 8008a4a <_putc_r+0x12>
 8008a46:	f7ff f9ff 	bl	8007e48 <__sinit>
 8008a4a:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <_putc_r+0x84>)
 8008a4c:	429c      	cmp	r4, r3
 8008a4e:	d124      	bne.n	8008a9a <_putc_r+0x62>
 8008a50:	6874      	ldr	r4, [r6, #4]
 8008a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a54:	07d8      	lsls	r0, r3, #31
 8008a56:	d405      	bmi.n	8008a64 <_putc_r+0x2c>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	0599      	lsls	r1, r3, #22
 8008a5c:	d402      	bmi.n	8008a64 <_putc_r+0x2c>
 8008a5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a60:	f7ff fa90 	bl	8007f84 <__retarget_lock_acquire_recursive>
 8008a64:	68a3      	ldr	r3, [r4, #8]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	60a3      	str	r3, [r4, #8]
 8008a6c:	da05      	bge.n	8008a7a <_putc_r+0x42>
 8008a6e:	69a2      	ldr	r2, [r4, #24]
 8008a70:	4293      	cmp	r3, r2
 8008a72:	db1c      	blt.n	8008aae <_putc_r+0x76>
 8008a74:	b2eb      	uxtb	r3, r5
 8008a76:	2b0a      	cmp	r3, #10
 8008a78:	d019      	beq.n	8008aae <_putc_r+0x76>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	701d      	strb	r5, [r3, #0]
 8008a82:	b2ed      	uxtb	r5, r5
 8008a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a86:	07da      	lsls	r2, r3, #31
 8008a88:	d405      	bmi.n	8008a96 <_putc_r+0x5e>
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	059b      	lsls	r3, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_putc_r+0x5e>
 8008a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a92:	f7ff fa78 	bl	8007f86 <__retarget_lock_release_recursive>
 8008a96:	4628      	mov	r0, r5
 8008a98:	bd70      	pop	{r4, r5, r6, pc}
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <_putc_r+0x88>)
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	d101      	bne.n	8008aa4 <_putc_r+0x6c>
 8008aa0:	68b4      	ldr	r4, [r6, #8]
 8008aa2:	e7d6      	b.n	8008a52 <_putc_r+0x1a>
 8008aa4:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <_putc_r+0x8c>)
 8008aa6:	429c      	cmp	r4, r3
 8008aa8:	bf08      	it	eq
 8008aaa:	68f4      	ldreq	r4, [r6, #12]
 8008aac:	e7d1      	b.n	8008a52 <_putc_r+0x1a>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7fe ffee 	bl	8007a94 <__swbuf_r>
 8008ab8:	4605      	mov	r5, r0
 8008aba:	e7e3      	b.n	8008a84 <_putc_r+0x4c>
 8008abc:	0800b69c 	.word	0x0800b69c
 8008ac0:	0800b6bc 	.word	0x0800b6bc
 8008ac4:	0800b67c 	.word	0x0800b67c

08008ac8 <_sbrk_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d06      	ldr	r5, [pc, #24]	; (8008ae4 <_sbrk_r+0x1c>)
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	602b      	str	r3, [r5, #0]
 8008ad4:	f7fa fa00 	bl	8002ed8 <_sbrk>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_sbrk_r+0x1a>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_sbrk_r+0x1a>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	20000c7c 	.word	0x20000c7c

08008ae8 <__sread>:
 8008ae8:	b510      	push	{r4, lr}
 8008aea:	460c      	mov	r4, r1
 8008aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af0:	f000 f8e0 	bl	8008cb4 <_read_r>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	bfab      	itete	ge
 8008af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008afa:	89a3      	ldrhlt	r3, [r4, #12]
 8008afc:	181b      	addge	r3, r3, r0
 8008afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b02:	bfac      	ite	ge
 8008b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b06:	81a3      	strhlt	r3, [r4, #12]
 8008b08:	bd10      	pop	{r4, pc}

08008b0a <__swrite>:
 8008b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0e:	461f      	mov	r7, r3
 8008b10:	898b      	ldrh	r3, [r1, #12]
 8008b12:	05db      	lsls	r3, r3, #23
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	4616      	mov	r6, r2
 8008b1a:	d505      	bpl.n	8008b28 <__swrite+0x1e>
 8008b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b20:	2302      	movs	r3, #2
 8008b22:	2200      	movs	r2, #0
 8008b24:	f000 f868 	bl	8008bf8 <_lseek_r>
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	4632      	mov	r2, r6
 8008b36:	463b      	mov	r3, r7
 8008b38:	4628      	mov	r0, r5
 8008b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3e:	f000 b817 	b.w	8008b70 <_write_r>

08008b42 <__sseek>:
 8008b42:	b510      	push	{r4, lr}
 8008b44:	460c      	mov	r4, r1
 8008b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b4a:	f000 f855 	bl	8008bf8 <_lseek_r>
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	bf15      	itete	ne
 8008b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b5e:	81a3      	strheq	r3, [r4, #12]
 8008b60:	bf18      	it	ne
 8008b62:	81a3      	strhne	r3, [r4, #12]
 8008b64:	bd10      	pop	{r4, pc}

08008b66 <__sclose>:
 8008b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6a:	f000 b813 	b.w	8008b94 <_close_r>
	...

08008b70 <_write_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	; (8008b90 <_write_r+0x20>)
 8008b74:	4604      	mov	r4, r0
 8008b76:	4608      	mov	r0, r1
 8008b78:	4611      	mov	r1, r2
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	602a      	str	r2, [r5, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f7f9 ffcc 	bl	8002b1c <_write>
 8008b84:	1c43      	adds	r3, r0, #1
 8008b86:	d102      	bne.n	8008b8e <_write_r+0x1e>
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	b103      	cbz	r3, 8008b8e <_write_r+0x1e>
 8008b8c:	6023      	str	r3, [r4, #0]
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	20000c7c 	.word	0x20000c7c

08008b94 <_close_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d06      	ldr	r5, [pc, #24]	; (8008bb0 <_close_r+0x1c>)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	602b      	str	r3, [r5, #0]
 8008ba0:	f7fa f965 	bl	8002e6e <_close>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_close_r+0x1a>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_close_r+0x1a>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	20000c7c 	.word	0x20000c7c

08008bb4 <_fstat_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d07      	ldr	r5, [pc, #28]	; (8008bd4 <_fstat_r+0x20>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	f7fa f960 	bl	8002e86 <_fstat>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d102      	bne.n	8008bd0 <_fstat_r+0x1c>
 8008bca:	682b      	ldr	r3, [r5, #0]
 8008bcc:	b103      	cbz	r3, 8008bd0 <_fstat_r+0x1c>
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000c7c 	.word	0x20000c7c

08008bd8 <_isatty_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d06      	ldr	r5, [pc, #24]	; (8008bf4 <_isatty_r+0x1c>)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4604      	mov	r4, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	602b      	str	r3, [r5, #0]
 8008be4:	f7fa f95f 	bl	8002ea6 <_isatty>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_isatty_r+0x1a>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_isatty_r+0x1a>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000c7c 	.word	0x20000c7c

08008bf8 <_lseek_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d07      	ldr	r5, [pc, #28]	; (8008c18 <_lseek_r+0x20>)
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	4608      	mov	r0, r1
 8008c00:	4611      	mov	r1, r2
 8008c02:	2200      	movs	r2, #0
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7fa f958 	bl	8002ebc <_lseek>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_lseek_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_lseek_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000c7c 	.word	0x20000c7c

08008c1c <memmove>:
 8008c1c:	4288      	cmp	r0, r1
 8008c1e:	b510      	push	{r4, lr}
 8008c20:	eb01 0402 	add.w	r4, r1, r2
 8008c24:	d902      	bls.n	8008c2c <memmove+0x10>
 8008c26:	4284      	cmp	r4, r0
 8008c28:	4623      	mov	r3, r4
 8008c2a:	d807      	bhi.n	8008c3c <memmove+0x20>
 8008c2c:	1e43      	subs	r3, r0, #1
 8008c2e:	42a1      	cmp	r1, r4
 8008c30:	d008      	beq.n	8008c44 <memmove+0x28>
 8008c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c3a:	e7f8      	b.n	8008c2e <memmove+0x12>
 8008c3c:	4402      	add	r2, r0
 8008c3e:	4601      	mov	r1, r0
 8008c40:	428a      	cmp	r2, r1
 8008c42:	d100      	bne.n	8008c46 <memmove+0x2a>
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c4e:	e7f7      	b.n	8008c40 <memmove+0x24>

08008c50 <__malloc_lock>:
 8008c50:	4801      	ldr	r0, [pc, #4]	; (8008c58 <__malloc_lock+0x8>)
 8008c52:	f7ff b997 	b.w	8007f84 <__retarget_lock_acquire_recursive>
 8008c56:	bf00      	nop
 8008c58:	20000c74 	.word	0x20000c74

08008c5c <__malloc_unlock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	; (8008c64 <__malloc_unlock+0x8>)
 8008c5e:	f7ff b992 	b.w	8007f86 <__retarget_lock_release_recursive>
 8008c62:	bf00      	nop
 8008c64:	20000c74 	.word	0x20000c74

08008c68 <_realloc_r>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	4607      	mov	r7, r0
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	460e      	mov	r6, r1
 8008c70:	b921      	cbnz	r1, 8008c7c <_realloc_r+0x14>
 8008c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c76:	4611      	mov	r1, r2
 8008c78:	f7ff ba3a 	b.w	80080f0 <_malloc_r>
 8008c7c:	b922      	cbnz	r2, 8008c88 <_realloc_r+0x20>
 8008c7e:	f7ff f9e7 	bl	8008050 <_free_r>
 8008c82:	4625      	mov	r5, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c88:	f000 f826 	bl	8008cd8 <_malloc_usable_size_r>
 8008c8c:	42a0      	cmp	r0, r4
 8008c8e:	d20f      	bcs.n	8008cb0 <_realloc_r+0x48>
 8008c90:	4621      	mov	r1, r4
 8008c92:	4638      	mov	r0, r7
 8008c94:	f7ff fa2c 	bl	80080f0 <_malloc_r>
 8008c98:	4605      	mov	r5, r0
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d0f2      	beq.n	8008c84 <_realloc_r+0x1c>
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	f7fe fe1d 	bl	80078e0 <memcpy>
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f7ff f9d1 	bl	8008050 <_free_r>
 8008cae:	e7e9      	b.n	8008c84 <_realloc_r+0x1c>
 8008cb0:	4635      	mov	r5, r6
 8008cb2:	e7e7      	b.n	8008c84 <_realloc_r+0x1c>

08008cb4 <_read_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d07      	ldr	r5, [pc, #28]	; (8008cd4 <_read_r+0x20>)
 8008cb8:	4604      	mov	r4, r0
 8008cba:	4608      	mov	r0, r1
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	602a      	str	r2, [r5, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f7fa f8b6 	bl	8002e34 <_read>
 8008cc8:	1c43      	adds	r3, r0, #1
 8008cca:	d102      	bne.n	8008cd2 <_read_r+0x1e>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	b103      	cbz	r3, 8008cd2 <_read_r+0x1e>
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	20000c7c 	.word	0x20000c7c

08008cd8 <_malloc_usable_size_r>:
 8008cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cdc:	1f18      	subs	r0, r3, #4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bfbc      	itt	lt
 8008ce2:	580b      	ldrlt	r3, [r1, r0]
 8008ce4:	18c0      	addlt	r0, r0, r3
 8008ce6:	4770      	bx	lr

08008ce8 <_init>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr

08008cf4 <_fini>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr
